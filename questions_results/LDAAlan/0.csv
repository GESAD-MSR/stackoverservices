Id,OwnerUserId,Tags,Title,Body,Score,ViewCount,CommentCount,FavoriteCount,AnswerCount,CreationDate,DeletionDate
31229758,497794.0,<spring-cloud><microservices><hystrix><netflix-eureka><netflix-feign>,eureka ill service application instance avoid hystrix circuit breaking,local machine develop simple rest service eureka hystrix support frontend application connect service hystrix command method hystrixcommand annotated method reference feign client feign client hystrix wrapper start instance spring mvc productservice deliver expect product base identifier hand second throw runtimeexception order simulate system dependency failure frontend side hystrix client product productservice instance call round robin ribbon fashion fact productservice instance deliver exception multiple successive call frontend productservice circuit open instance productservice handle request remove eureka productservice instance problem keep function correctly order avoid hystrix circuit break productservice suppose functionality health indicator resource health productservice change perform extra check system dependency failure stumble custom health check perform help service instance eureka,0,283,3,0.0,0,2015-07-05T11:12:29,0.0
32738322,1178269.0,<web-services><database-design><microservices>,achieve multi tier versioning avoidance,vague confusing title question precisely find answer problem provide software capability web micro service customer develop client app consume service break change service ideally provide version service leave version customer force upgrade tool break change service break change database change database schema support version service simply attach interpreting step version fill gap case mandatory field require good default client provide difficulty discontinue version release version service customer upgrade tool well reduce satisfaction level good solution,0,20,4,0.0,0,2015-09-23T11:26:43,0.0
33805420,2356907.0,<.net><web-services><wcf><soa><microservices>,service registry discovery framework wcf service,service registry discovery framework eureka smarkstack zookeeper doozer search lot wcf service registry discovery framework wcf soap service window build high frequency trading application window application performance key framework help multiple instance service machine dynamically pointer,0,364,2,0.0,0,2015-11-19T13:34:32,0.0
36418827,1978285.0,<proxy><spring-boot><spring-cloud><microservices><netflix-eureka>,eureka proxy,follow situation instance eureka server proxy communicate public urls parameter auto generate affect proxy map port http port eureka server auto discover application aware context path configure eureka trouble provide relevant communicate peer properly hand register eureka instance follow configuration example problem eureka handle context path proxy path properly assume url wrong chance method handle face circumstance advance thought benjamin,0,1096,9,0.0,0,2016-04-05T06:37:07,0.0
37204422,6048572.0,<javascript><node.js><nodes><microservices><mariasql>,handle error exception node js,write code node js connect mariadb db seneca micro service handle error exception user proper message help type error handle code,0,124,2,0.0,0,2016-05-13T07:58:38,0.0
37142921,6316074.0,<java><nginx><load-balancing><microservices><virtual-ip-address>,microservice url redirection url vip,break monolithic service small microservice microservice host api machine endpoint vip monolithic service client change base api request vip redirect request appropriate microservice service vip achieve,0,506,2,0.0,0,2016-05-10T15:29:11,0.0
34174551,4049525.0,<java><spring><spring-cloud><microservices>,testing spring cloud service service call,wonder good test service service call currently service reside separate module cat service dog service order test call dog service cat service include cat service dog service testing test class well serious flaw,0,161,2,0.0,0,2015-12-09T09:01:23,0.0
37955191,2740346.0,<jhipster><microservices>,jhipster forbidden error access microservice gateway,follow recommendation organize architecture microservice application setting microservice access gateway secret jhipster security authentication jwt secret component gateway microservice registry consume microservice gateway receive access deny message forbid test gateway interest thing test direct access microservice postman route access gateway work well case consume microservice datum gateway api receive error microservice configuration microserviceconfiguration class antmatcher api authenticate case test postman pass valid jwt token specific case work header annotation storageserviceclient edit solve authentication issue create requestinterceptor,0,1290,7,0.0,0,2016-06-21T21:50:57,0.0
54698850,7345195.0,<database><microservices><release><privileges>,microservice update database privilege release,big service database install version service table add database schema handle update role privilege table add release responsibility database administrator responsibility service good practice add privilege role release,0,13,0,0.0,0,2019-02-14T20:49:27,0.0
54801643,5033630.0,<mongodb><rest><spring-boot><microservices><mongodb-oplog>,mongo oplog monitor contextrefreshevent,create class implement execute mongo oplog monitor code create check fire event issue application startup process wait point image log state tomcat start rest application port mongo oplog monitoring work rest remove component rest application work mongo oplog monitoring logic wrong direct correct,0,15,0,0.0,0,2019-02-21T07:39:11,0.0
54684820,7209628.0,<node.js><angular><spring><microservices>,send generate jasperreports array bytes spring node js angular properly,angularjs controller suppose download pdf java microservice response array byte return pdf blank figure node js regard return array byte properly controller generatepdf method invoke suppose download pdf angularjs service call controller node js express responsible controller responsible post request service responsible generate jasperreport pdf spring boot app spring boot microservice return array byte response properly send node express angularjs download postman post request directly microservice proper pdf,0,23,0,0.0,0,2019-02-14T07:03:23,0.0
54843730,10114335.0,<spring-boot><microservices><graylog2><graylog>,microservice log grayog,graylog log microservice send log kafka log receive log graylog gelf kafka log receive graylogs throw jackson exception format log graylog parse log aggregate log microservice,0,23,0,0.0,0,2019-02-23T16:41:27,0.0
54839397,1797006.0,<dns><routes><cross-domain><subdomain><microservices>,frontend backend decoupling provide domain,assume frontend monolithic backend consist microservice serve rest request api gateway wonder good idea url backend route frontend domain backend subdomain case serve domain route question frontend api gateway order save resource certificate route place separation domain require add cor header advantage route approach minimize couple good practice deep impact idea microservice frontend backend serve kubernetes cluster,0,25,0,0.0,0,2019-02-23T07:47:48,0.0
54696281,5759445.0,<javascript><java><reactjs><spring-boot><microservices>,spring boot microservice ui integration reactjs throw error,microservice customerservice orderservice separate individual ui server reactjs ui ui reactjs script file cdn url integrate ui single ui create spring boot application reactjs zuul proxy create tab customer order click customer tab call ajax axio ui customer order response render throw error div iframe remove div iframe work customer ui customer jsp customer js integration ui jsp app js reactjs dom fb react dom js wrong render response reactdom render htmldata figure completely react js click customer tab ajax call customer ui render customer order point wrong,0,50,0,0.0,0,2019-02-14T17:46:15,0.0
54695476,763311.0,<microservices><jhipster><netflix-zuul><hystrix><netflix-ribbon>,gateway timeout service endpoint,scenario jhipster microservice architecture gateway question service accept large file upload upload work order accept large file keep increase ribbon zuul hystrix timeout globally endpoint service api file upload intercept gateway timeout filter hystrix ignore route,0,54,0,0.0,0,2019-02-14T16:59:21,0.0
54874354,7688519.0,<angular><spring><spring-boot><oauth-2.0><microservices>,authorize spring boot app access resource oauth client,create follow apps front angular bootstrap material spring boot microservice zuul gateway main entry point backend service front app currently simple authentication mechanism oauth integration provider implement authorization token generate store local state eventually allow oauth login rest call authorization bearer header add interceptor app request pass zuul gateway gateway filter validate token generate custom jwt token downstream microservice microservice custom jwt token authenticate request oauth client integration case authenticate user authorize oauth application call api service provider idea interaction provider service app user action front app rest call app authorization header pass backend gateway authenticates user propagate custom jet token request appropriate microservice microservice process request eventually call call third party api prior oauth authorization info access refresh token current user result process micro service send front call third party provider proxie backend problem micro services enable oauth client functionality enableoauth client spring boot app redirect authorization url provider cor error browser generate url fine work open browser work problem callback url url protect backend app callback identify user call save access refresh token current user data question proper good practice provide type functionality authorization carry front app send access refresh token storage backend implement callback front app,0,63,0,0.0,0,2019-02-25T20:42:14,0.0
54701213,3417411.0,<kubernetes><microservices><kubernetes-ingress><microk8s>,route request kubernetes ingress controller telepresence expose port base subdomain rule,target microservice environment allow engineer work specific microservice test local code service version kubernetes cloud cluster specific subdomain detail check telepresence basically allow local microservice communicate service cluster vice versa imagine follow cloud service service service local service entry point kubernetes ingress controller service cloud version subdomain ingress route subdomain host service cloud service local service cloud service allow traffic expose port telepresence ingress controller base subdomain rule route specific version service live cloud,0,64,0,0.0,0,2019-02-15T00:45:06,0.0
54871028,469010.0,<json><http><compression><microservices>,http compression high speed lan,high speed lan worth compression gzip service talk json http cpu bottleneck lan gzip consume cpu producer consumer side,0,16,1,0.0,0,2019-02-25T16:50:59,0.0
54809335,753943.0,<microservices><api-gateway><ocelot>,api gateway production,api api gateway front happen ocelot configuration local environment api kestrel docker production system instal iis problem locan environment api nad api gateway localhost nad port server instal website application inside website website address xyz api address xyz api api gateway quesrtion api gateway second issue work configuration server xyz api api work work xyz apigateway api work work,0,51,2,0.0,0,2019-02-21T14:25:02,0.0
54808301,8398143.0,<java><spring><spring-boot><apache-kafka><microservices>,spring cloud stream microservice,roam internet explanation confuse set microservice architecture microservice communicate asynchronously kafka case follow tutorial spring cloud stream order connect kafka microservice write msg topic read topic microservice integrate mecanism microservice integrate spring cloud stream kafka contact unlogical consul service discovery integrate spring cloud stream project error,0,87,2,0.0,0,2019-02-21T13:30:23,0.0
54765675,7245279.0,<ruby><graphql><microservices>,aggregate multiple query root type micro service ruby,project build micro service front learn technology pretty concept micro service three module api umbrella directory respective type resolver locate module type aggregate field manner module sort entry point schema problem solution style remove well solution search bit work direction code,0,52,4,0.0,0,2019-02-19T11:50:31,0.0
54690734,4829182.0,<express><ubuntu><microservices><docker-swarm><traefik>,docker swarm custom container traefik,set docker swarm traefik digital ocean follow work entirely add custom container simply add total express app serve restful api handle resource service access specific subdomain connection refuse error docker stack yml file domain three domain work fine whoami container respond info connection refuse error user domain note domain actual domain live point digitalocean cluster hide privacy reason entrypoint user service confirm service listen port output fetch log traefik toml config file case container traefik dashboard local environment feel small detail prevent service work correctly pointer extremely appreciate,0,146,5,0.0,0,2019-02-14T12:45:28,0.0
54865689,10249376.0,<asp.net><asp.net-mvc-4><asp.net-web-api><microservices>,integrate microservice asp net framework,application framework asp net monolithic approach integrate application micro service create data eventual consistency modularity integrate micro service monolithic migrate framework help scenario,0,28,7,0.0,0,2019-02-25T11:57:07,0.0
44761730,2580058.0,<java><microservices><spring-cloud><netflix-eureka><spring-hateoas>,create hateoas resource link remote service method,scenario eureka server service spring boot app micro service register eureka server service provide rest hateoas endpoint app provide service method response message link remote rest endpoint service idea dynamicserviceinstanceprovider traverson finally link object work wrong well link remote endpoint,0,244,2,0.0,0,2017-06-26T14:12:16,0.0
44800240,2371715.0,<security><microservices><netflix-eureka><netflix-zuul><netflix-ribbon>,zuul ribbon eureka combo ideal edge service,ideal soln security smell register case advisable separate,0,61,3,0.0,0,2017-06-28T10:42:26,0.0
30621142,4969637.0,<java><rest><wicket><wicket-6><microservices>,apache wicket externalize component,apache wicket application grow grow externalize component kind ui microservice build wicket application deliver follow content json xml call external component question input html render component deliver course call render component fly backend call good deliver js script wicket render component idea,0,181,4,0.0,0,2015-06-03T13:11:45,0.0
42840954,1682401.0,<asp.net><rest><asp.net-web-api><asp.net-core><microservices>,asp net core restful api communication synchronous http,multiple restful api component implement asp net core event drive design messaging broker service keep simple restful independent component independent asp net core project publish iis addition identity server provider navigation retrieve menus database authorization deal permission security notification identity server provide jwt access token authenticated user authorize access api apart external communication client api api gateway handle client request sort communication internally good example menu user user access token successful log request menu view request forward navigation api navigation api issue internal request authorization api order check permission user limit access menu manage communication common library call service proxy api urls hard code cs file concept authorizationproxy proxy issue request api interprocess communication handle case,0,420,3,0.0,0,2017-03-16T17:28:48,0.0
46720998,1040402.0,<json><protocol-buffers><microservices><thrift><grpc>,generate thrift structure json string thrift file protobuf,write microservice system golang define transport inter service communication idea service communicate json string object type service receive call extract datum json string process expect data structure base object type method add overhead create json string structure time rpc call scope rpc thrift grpc decision depend fact provide well pass datum client server minimal overhead basically rpc provide runtime transport structure creation,0,65,2,0.0,0,2017-10-13T00:58:46,0.0
46725353,2549398.0,<c#><.net><microservices><soa><sample>,monolithic soa sample application transformation microservice,project university sample application net environment design monolith service orient architecture sample application approach transform microservice architecture problem find sample big simple hello application bonus application rest backend service asp net web api point exist sample sure belong stack overflow find better fitting stack exchange community,0,215,2,0.0,0,2017-10-13T08:08:05,0.0
46642612,4814109.0,<spring-boot><load-balancing><microservices><netflix><netflix-ribbon>,distribute load spring boot microservice instance,example limit number request process instance rest process instance require configuration change relate ribbon,0,60,3,0.0,0,2017-10-09T09:06:11,0.0
46621005,7688116.0,<angular><docker><nginx><microservices><nginx-reverse-proxy>,redirect request subpath nginx,overview application problem goal application network micro service wrap individual docker container container django postgres nodejs socket io nginx angular static file nginx currently specific route file route request angular app router currently application serve directly root directory move directory address subsequently include path directory work deploy request microservice route nginx reverse proxy nginx rewrite redirect append url serve subdirectory nginx location exist root level attempt redirect catch location work catch add static location redirect work good solution redirect static location original nginx conf file,0,1125,3,0.0,0,2017-10-07T13:57:58,0.0
46711037,7758107.0,<spring-boot><jhipster><microservices>,session scope bean jhipster microservice architecture,session scope bean inject rest controller jhipster generate microservice call set lose authnode getauthnode return null wrong mic,0,203,3,0.0,0,2017-10-12T13:35:05,0.0
40363307,6917230.0,<mysql><spring-boot><microservices><create-view>,create view retrieve datum microservice,microservice table ta tb mysql db table relate pk fk relationship require call detail tb ta jparepo query namednativequerie create view kindly example perform action create view join ta tb datum view method advance,0,100,2,0.0,0,2016-11-01T15:31:43,0.0
40306001,1844337.0,<dao><microservices>,good reason separate intelligence dao layer microservice,long term debate architect architecture choice entreprise work migrate monolithic architecture microservice debate locate good approach handle database access stand separate dao service database access directly handle service class stand contrary discuss day find good reason convince convince question simple atomic rest microservice microservice handle rest method separate dao class argument separate keep oop orient project java matter edit quest reposte,0,199,4,0.0,0,2016-10-28T13:20:31,0.0
40484873,6350474.0,<java><spring-boot><microservices><resttemplate>,test case spring boot mockmvc support resttemplate,mock mvc test case work fine start full http server resttemplate service controller communicate service unknown host exception test case service spring boot application register eureka server code account micro service service service register eureka server,0,224,5,0.0,0,2016-11-08T10:44:27,0.0
40514713,6917230.0,<rest><spring-boot><oracle10g><dto><microservices>,sys oracle,microservice rest method post issue example post add record table add remain auto increment sequence generator work input input sure set record sys oracle db variable default sysdate db null null implement help appreciate,0,65,6,0.0,0,2016-11-09T19:40:25,0.0
41896367,7479070.0,<windows><netbeans><docker><spring-boot><microservices>,unable create spring boot initialzr project org springframework web client httpclienterrorexception exception occur,follow guide unable create springboot project follow error create springboot project follow tool docker toolbox window netbean ide build oracle vm virtualbox late version nb springboot docker smootly problem problem lie hand netbeans docker services container image empty connect service docker quickstart terminal update solve problem create spring boot project,0,102,2,0.0,0,2017-01-27T14:33:45,0.0
41762688,2486349.0,<java><microservices>,microservice standalone host service executable jar,definition read microservice architecture method develop software application suite independently deployable small modular service service unique process communicate well define lightweight mechanism serve business goal case partition system create unique process executable jar standalone host service consider microservice,0,400,2,0.0,0,2017-01-20T11:32:43,0.0
41685136,5947872.0,<file-upload><docker><rpc><microservices><grpc>,transfer large file dockerize service,api web app write node js node app handle file upload include audio file audio file undergo processing build python dependant python ecosystem library currently grpc communicate service documentation file streaming poor concern performance implication active user upload stream large memory buffer memory well approach problem,0,287,3,0.0,0,2017-01-16T21:18:48,0.0
39910934,537566.0,<java><spring-boot><distributed-computing><microservices><netflix-eureka>,spring boot micro service mix local remote service,start micro service spring boot read subject matter adapt example source micro service local interact micro service remote centralised server realise idea distributive architecture underlining communication network encapsulate project require localised machine controller site processing multiple machine controller site example identical separate physical pc localised eureka registration server collection specialised micro service interact collection micro service site cloud base call micro service learning fun appreciate pointing direction specialised article help figure,0,295,3,0.0,0,2016-10-07T06:39:34,0.0
53088619,272219.0,<azure><cloud><microservices><on-prem>,option support premise deployment azure cloud,start develop net solution microsoft azure build microservice architecture explore option reuse code service solution separate premise solution well build thing cloud perspective build separate solution instal window server client premise reuse code cloud solution option exist,0,19,2,0.0,0,2018-10-31T17:01:36,0.0
53056203,2497278.0,<c#><asp.net><rest><microservices>,forward dto serialize json service bad practice,hope topic real delimmer question pass nest object backend service service rest facade small background client app connect restful api connect variety legacy service datum pass communication net wcf rest service asp net webapi task question hand route add result assemble backend call finally assemble form request add dto assemble pass serve rest front client app consumption pass object wcf map wcf proxy object dto serve client json case object complex nest pass json map deserialization pass result json bad practice pass json straight describe deserialize rest service reform result dto serve final json pass fell dirty shortcut alternative copying datum classify microservice microservice time advance suggestion,0,87,4,0.0,0,2018-10-30T01:39:28,0.0
53180084,3711445.0,<spring-boot><jpa><microservices>,microservice split application,split application micro service sure microservice regroup class file file tree subclass folder card tag classification tag file file note comment file user user app accessright access file user read write admin superadmin pretty sure user logic microservice regroup unique microservice split application javaee jpa entity package spring boot jpa microservice tricky define relation entity annotation provide jpa model split microservice relation class accessright manytomany relationship file user attribute jpa special class idclass file tag manytomany relationship filenote manytomany relationship file user attribute note comment user file simple onetomany relation define owner file application avalaible construction connect login test password pass bookmark application tutorial url allow user people folder user link user folder tree allow user manage folder choose activate admin mode manage file github repository class describe keep essential advice,0,65,5,0.0,0,2018-11-06T21:13:11,0.0
50512584,1011721.0,<docker><microservices><docker-swarm><netflix-eureka><jhipster-registry>,gateway app connect microservice,jhipster docker microservice architechture deploy application stack docker swarm docker compose version node active issue gateway app throw zuul timeout connect backend microservice environment swarm docker compose version work great swarm curl backend microservice gateway app containername port containerip port lose narrow issue swarm issue jhipster issue change prefer ip address false app property issue lead issue,0,136,3,0.0,0,2018-05-24T15:03:25,0.0
50585687,2712341.0,<docker><kubernetes><containers><microservices>,upgrade micro service break current execution,suppose micro service architecture topology service instance web service receive web request cli base application listen event queue deploy version instance process info moment deploy replace instance break current execution tool pattern strategy handle scenario,0,91,4,0.0,0,2018-05-29T13:31:51,0.0
50581107,9863460.0,<c#><asp.net-core><.net-assembly><microservices>,load application assembly dynamically asp net core,multiple project kind multiple microservice microservice multiple project api project project assembly load application assembly dynamically db json file retrieve assembly api project list controller controller assembly microservice project code advance,0,299,5,0.0,0,2018-05-29T09:38:57,0.0
55418716,4449695.0,<elasticsearch><microservices><kibana><grafana><throttling>,analyze throttle limit application log store elastic search,api server plug elastic search kibana log api request server elastic search implement plain vanilla throttling request second allow reject common user api server question log api request elastic search include user detail timestamp analyze log understand throttling limit aggressive request second user impact base datum elastic search basically testing note impact reject request base throttle limit aggressive elastic search log application write help kibana elastic search query group elastic search log base user request user timestamp difference second throttling limit list user well detail,0,25,0,0.0,0,2019-03-29T13:38:30,0.0
55466184,9152062.0,<authentication><login><oauth-2.0><microservices>,login decouple auth server resource server,figure implement login request auth server authenticate user create jwt toke problem authentication auth server authentication request user api username password user api db validate username password request save username password user api everytime user create store user datum user api db send request auth server save db username password user,0,48,0,0.0,0,2019-04-02T02:40:12,0.0
55483597,4354693.0,<microservices><knex.js><hapi>,good practice knex migration microservice architecture,micro service architecture hapi docker knex implement knex migration database version question create migration micro service common micro create micro migration good practice define migration,0,49,0,0.0,0,2019-04-02T21:08:21,0.0
55490309,1641352.0,<angular><microservices><micro-frontend>,publish subscribe pattern implementation angular library,scenario library project lib lib application project lib app library create earlier lib app implement publish subscribe pattern service class lib app notificationservice lib library publish message follow lib subscribe unable import notificationservice form lib app basically publish component lib subscribe lib vice versa,0,40,1,0.0,0,2019-04-03T08:19:32,0.0
55378975,4046585.0,<microservices>,microservice architecture introduce microservice,currently design product microservice completely topic read ebook ebook architecture describe book microservice hide gateway dependency service event bus datum propagation good follow scenario context eshoponcontainer application month register user lot product offer time user account product create corresponding integration event fire service interested database introduce microservice service user deploy exist infrastructure event course question good require datum shut system time migrate datum service currently well,0,53,2,0.0,0,2019-03-27T13:55:20,0.0
55496711,11305939.0,<kubernetes><apache-kafka><microservices><istio><kiali>,detect kafka event kiali,microservice architecture istio kubernete microservice kafka communicate enable kiali vizualise service mesh problem find kafka event represent kiali,0,91,2,0.0,0,2019-04-03T13:45:10,0.0
55499237,6259603.0,<java><spring-boot><microservices><spring-security-oauth2><netflix-zuul>,secure microservice rest api zuul api gateway,learn microservice follow microservice architecture project secure service centralized place time logging request search provide security check service api gateway direct access service security check guideme hint code snippet link check link proper clarity follow well purpose ensure authentication service call service feign client,0,377,2,0.0,0,2019-04-03T15:47:11,0.0
55308845,3254170.0,<asynchronous><apache-kafka><microservices>,microservice communication kafka,service implement communication asynchronous message kafka doubt topic implement saga pattern service update communication service perform event choreography describe sure request response communication topic service request response schema topic publish saga request participant publish result local execution pattern insight,0,93,4,1.0,0,2019-03-22T23:01:26,0.0
49309381,4682571.0,<java><microservices>,microservice web java call jar,efficient service web proceese business logic jboss glassfish service web process business logic call java jar file web server assign memory distribute web app execute jar file assign system memory app consume lot memory simultaneous request object destroy correctly,0,29,4,0.0,0,2018-03-15T21:17:12,0.0
43397431,7354673.0,<java><json><microservices><dropwizard><codahale-metrics>,aggregate dropwizard metric microservice send logstash elk,aggregate metric monitoring application send request microservice http request microservice jvm report metric dropwizard actuator work well loop call frontend jsonnode reuse save jsonnode send logstash avoid request time microservice slf jreporter wich work current metricregistry current jvm distant jvm adress http request inject jsonnode save logger metric connect logstash appender work,0,702,7,0.0,0,2017-04-13T16:32:01,0.0
52076812,8559298.0,<docker><networking><server><microservices><servermanager>,case docker,late lastly hear docker question wich server dockerize server api server interact sql db create snowflake piece server type server manager sql server event server snowflakeid server manager balance load create snowflake ids session server snowflakeid directly unload slowly session game server directly lot tcp udp connection player write completely manage server managment system difficult crazy question find good answer question internet docker thing,0,29,4,0.0,0,2018-08-29T11:52:52,0.0
52156522,2488596.0,<django><microservices>,restart specific app django withhout restart server,concept microservice issue signal django script package restart specific app apps app app develop developer share interdependancie django project project live production restart server induce unnecessary downtime unrelated feature reload code exist app currently apache gunicorn,0,29,4,0.0,0,2018-09-03T21:52:58,0.0
52061798,4655707.0,<rest><api><user-interface><microservices><impact-analysis>,tool documenting mapping api application user interface impact analysis,work develop api service internally call multiple micro service tool help map public face api application user interface application native android ios pwa tool swagger newrelic internally maintain api detail documentation tool preferably open source help map api call user interface example homepage screen app multiple button button rest api call rest api internally call micro service ui base tool homepage screen app screenshot write apis endpoint route associate button reason people team external stakeholder easy read refer application flow tie rest api impact analysis easy change service api,0,49,4,0.0,0,2018-08-28T15:46:18,0.0
52094194,8283114.0,<c#><rest><microservices><api-gateway>,problem route attribute microservice api gateway,write microservice api gateway route client request appropriate microservice microservice introduce service api gateway store redi example client call service company gateway find microservice handle request route request problem situation controller default client request easily find microservice redi send request problem route attribute store route attribute database client call determine url match route,0,77,4,0.0,0,2018-08-30T09:57:12,0.0
52103823,7390856.0,<spring-boot><microservices><spring-cloud><netflix-zuul><api-gateway>,microservice authentication authorization api gateway,three micro service user service order service product service user service user api login register order service order product product product service micro service work user service order service product service zuul api gateway config zuul filter request user work api gateway user service request order api gateway order service product service request order work api gateway auth server validate token token validate request order service order service product service question validate token api gateway access order service directly request api gateway validate token order service product service entry point validate token order product api access order service api valid token order service product service work help understand design project structure,0,445,6,0.0,0,2018-08-30T19:04:40,0.0
52204526,2381088.0,<java><maven><spring-boot><microservices><feign>,add openfeign dependency pom xml result build failure spring microservice,add spring cloud starter openfeign dependency pom xml spring boot microservice restart microservice error spring boot version help,0,266,13,0.0,0,2018-09-06T12:50:26,0.0
39285596,2095127.0,<java><spring><microservices><netflix-eureka>,spring boot integration test error load balancer server client,work spring boot eureka micro service micro service internally call execute integration test locally call exception throw help problem surprisingly access directly work problem integration test,0,873,2,0.0,0,2016-09-02T06:25:07,0.0
39205895,1849165.0,<java><configuration><restful-architecture><microservices>,central configuration microservice spring,start understand microservice architecure implement simple example java create set restful service service bundle jpa entity configuration service package separate war issue war persistence xml web xml file configuration change change war question establish solution central configuration provide spring common pattern style follow avoid issue maintain configuration detail single place spring framework,0,399,6,0.0,0,2016-08-29T12:03:44,0.0
44165422,872487.0,<docker><spring-boot><docker-compose><microservices>,docker compose generate log file spring boot application,develop project multiple micro service develop spring boot docker container docker compose face issue generate application log file write config application yml file log file datum test log log generate image start container seperatly docker imagename log file generate container container docker compose docker compose image log file generate container docker compose yml,0,453,3,0.0,0,2017-05-24T17:52:08,0.0
44067657,4878517.0,<jhipster><microservices>,unable login jhipster project uaa microservice gateway consul,generate jhipster project uaa microservice gateway consul start well unable login error filter access control allow access uaa api account access control policy set service uaa error filter uaa api account http unauthorized netflix zuul exception zuulexception forward error java net sockettimeoutexception read time yo rc json file uaa server yo rc json file microservice yo rc json file gateway,0,508,5,0.0,0,2017-05-19T10:28:18,0.0
43977606,4246429.0,<rest><session><authentication><authorization><microservices>,login domain,basically separate user entity micro service user account management app provide restful api manage user datum question login authenticate user user account management micro service instance send login credential main app port micro service port authenticate user redirect main app,0,51,8,0.0,0,2017-05-15T10:51:15,0.0
51120700,9787553.0,<eclipse><wso2esb><microservices><wso2carbon><wso2ei>,wso ei,start system base follow address esb business process analytic profile json request send total request healthcare api experience propose solution problem problem wso developer studio download write helloworld program micro service example specific request display helloworld compile helloworld program encounter error manifest entry microservice find deploy specialty forum wso,0,44,2,0.0,0,2018-07-01T05:37:08,0.0
50958983,3946406.0,<azure><virtual-machine><microservices><hyperledger-fabric><azure-load-balancer>,access api vm load balancer azure,web api linux vm sit load balancer lb public ip open port lb map port vm api kind nat rule backend pool configuration set lb,0,78,2,0.0,0,2018-06-21T01:03:59,0.0
50982011,9976710.0,<java><oracle><akka><microservices>,akka java util concurrent timeoutexception frequent timeout thread pool,load test api akka sync actor pattern second timeout code snippet api invoke micro service interact oracle db operation load test request second lot timeout exception error external microservice oracle fork join executor failure minimal thread pool executor frequent failure code snippet akka config fork join executor thread pool executor,0,151,2,0.0,0,2018-06-22T06:35:52,0.0
50956446,5273769.0,<http><nginx><microservices>,nginx client send duplicate header,gateway request browser request microservice microservice request gateway communication place framework connection communication authorization header schematically follow chain call nginx bad request log error sort check uniqueness header account subquery application service gateway api nginx session gateway api,0,249,2,0.0,0,2018-06-20T20:21:26,0.0
56461288,5109067.0,<file-upload><asp.net-web-api2><microservices><multipartform-data><api-gateway>,pass multi file datum gateway microservice,micro service infrastructure gateway allow client upload file metadata mimemultipartcontent file upload stuff happen gatewat move microservice pass received request datum microservice pass datum request content mimemultipartcontent gateway microservice check micro service fail send datum gateway micro service luck upload formdata webclient,0,27,0,0.0,0,2019-06-05T13:16:52,0.0
56451862,5307881.0,<node.js><docker><express><docker-compose><microservices>,express session undefined logout microservice architecture,create sample application microservice architecture docker compose mysql database configure application expect route express gateway implement session management express session set session flag isloggedin set true login success occur access session logout session session isloggedin undefined sure save session architecture app js user router user controller inside login inside logout time login express create session object session array create inside req sessionid handle session situation handle session multiple user idea appreciate,0,29,0,0.0,0,2019-06-04T21:58:51,0.0
56327063,5506781.0,<microservices><jhipster><access-token><spring-cloud-feign>,enhance token generate authorizedfeignclient inter service communication jhispster,jhipster provide authorizedfeignclient annotation call service service client call service call client create access token time enhance token additional detail pass access token receive ui avoid,0,34,0,0.0,0,2019-05-27T13:29:01,0.0
56349138,5225589.0,<spring-boot><microservices><xss><spring-cloud-gateway>,apply xss filter spring cloud gateway level,help implement xss filter level spring cloud gateway succeed implement cor filter webflux base gateway difficult code snippet successful filter,0,74,0,0.0,0,2019-05-28T19:47:19,0.0
56511634,2339536.0,<graphql><microservices><graphql-js><apollo-server><graphql-java>,add authorization directive apollo stitcher service remote schema,add authorization layer apollo stitcher server find solution architecture central apollo graphql gateway server stitcher server communicate microservice stitch schema move authorization authentication layer microservice write language gateway server unauthorized request pass gateway server write authorization layer language authorization work decide directive problem work stitched schema microservice java schema graqhql apollo gateway server authdirective js query apollo server stitcher call hit query control check incoming request authorize throw unauthorized error forward request microservice call auth directive microservice achieve well solution architecture stuck nee help follow package,0,152,0,0.0,0,2019-06-09T02:52:42,0.0
56507149,10169000.0,<microservices><aggregation>,aggregate datum microservice architecture,application database database cassandra dynamodb hbase aggregate datum microservice architecture aggregated database application access aggregated database directly application database serve datum application,0,19,1,0.0,0,2019-06-08T14:10:00,0.0
56327042,11404260.0,<.net><asp.net-mvc><.net-core><microservices>,stand asp net core navigation microservice asp net mvc monolith,work huge monolith project start slowly transition technology currently asp net core future experiment tech react mention keyword mosaic point unable find read relevant material search sake simplicity asp net core example stand asp net core microservice provide navigation bar current monolithic asp net mvc software net framework asp net mvc,0,31,2,0.0,0,2019-05-27T13:27:23,0.0
56470172,3689942.0,<microservices><spring-cloud><hystrix>,hystrix rollback eventual consistency,fallback method reverse transaction disadvantage fine,0,37,2,0.0,0,2019-06-06T02:20:22,0.0
56507081,5746074.0,<docker><docker-compose><microservices><docker-machine><traefik>,share local host file docker machine,fairly docker issue day set docker machine share local file window pc volume basically github repo staerting point notice docker machine file share volume configuration docker compose file host project docker machine file top level folder ssh docker machine empty local file docker machine copy directive dockerfile comfortable change local file automatically reflect docker machine question synchronize local file docker machine volume directory work point direction wrong docker compose yml image error experience result local file copy virtual machine html folder suppose full microservice repo empty,0,48,5,1.0,0,2019-06-08T14:00:56,0.0
44267055,6679300.0,<asp.net><asp.net-mvc><sitemap><microservices><mvcsitemapprovider>,asp net sitemap breadcrumbs microservice web application,asp net web application undergo technology upgrade application upgrade asp net web form asp net mvc second application break apart monolith microservice question application microservice application breadcrumb trail configure sitemap,0,73,8,0.0,0,2017-05-30T16:06:44,0.0
44391714,8030533.0,<rabbitmq><microservices><consistency>,maintain consistency microservice,system compose microservice rabbit mq event drive architecture service service service service subscribe event product purchase happen purchase product system purchase transaction record db service transaction successfuly record service service publish event product purchase service receive event product purchase update inventory db question happen step fail maintain consistency,0,50,9,0.0,0,2017-06-06T13:43:07,0.0
44396739,763398.0,<azure><microservices><azure-service-fabric><appveyor>,service fabric deployment fail,error happen build server publish visual studio locally profile work fine output window follow script execute build server error script idea,0,52,17,0.0,0,2017-06-06T17:56:55,0.0
44627613,3553318.0,<angular><spring-boot><microservices>,application property pack jar file copy ui static resource src main resource static folder,pom xml file copy output angular static folder application property pack generate jar file work remove tag idea case solve dunno solve problem follow,0,51,2,0.0,0,2017-06-19T10:05:07,0.0
44561427,2665606.0,<redirect><grails><microservices><grails3><api-gateway>,grail redirect url interceptor api gateway architecture,context design api gateway microservice idea intercept incoming request global interceptor analyze accessibility base permission finally simple call actual url example place simple request work fine question problem approach hit api front gateway finally original api exist original microservice directly hit happen error console disable redirection request redirect microservice search redirect grail support request well approach achieve server side question partially answer context insight problem context great complete interceptor file repository project grail api gateway update pm resolve question allow server side update pm number implement rest client gateway backend work fine functionality concern rest client backend client request gateway turn request microservice response client sort involvement gateway costly resolve question number well solution gateway language technology provide robustness box,0,324,2,0.0,0,2017-06-15T07:34:49,0.0
44502544,5945680.0,<java><spring><spring-boot><microservices>,communication service,micro service spring boot communicate rest template poor performance micro service endpoint spring eureka solution resttemplate underneath cloth wrong micro service google cloud,0,171,4,0.0,0,2017-06-12T14:56:41,0.0
44439965,7789466.0,<php><mysql><web-services><web-applications><microservices>,join table server database,problem join table database server database separate database server database server join table server database table server database good method php mysql database,0,441,4,1.0,0,2017-06-08T15:33:06,0.0
41225744,1003301.0,<microservices>,multiple microservice reader writer database table trouble,warn open question curious people opinion multiple microservice read table database currently work set api exhibit microservice architecture endpoint read table background process write table sound bad architectural decision application team schema multiple writer change multiple code basis update knowledge fluffy microservice design decision sound abuse microservice architecture,0,360,2,1.0,0,2016-12-19T15:17:37,0.0
41394317,4801827.0,<java><design-patterns><spring-boot><microservices>,design pattern microservice client,spring boot build client microservice call specific service depend param receive rest controller method java switch instruction specific design pattern help code functionnality sweety bad english,0,195,2,0.0,0,2016-12-30T10:07:33,0.0
48375285,7272505.0,<rest><networking><microservices><grpc><distributed-transactions>,access rest list resource network micro service,write rest api access list resource api controller turn request datum microservice option create microservice function return single resource call function loop asynchronously resource create single microservice function return list resource option preferable help list pro con term load distribution api response time network failure,0,30,2,0.0,0,2018-01-22T05:42:28,0.0
48329738,7464193.0,<jsf><glassfish><microservices>,facelet composition work template reside remote server,templating jsf server glassfish template xhtml define footer header mainsection localhost main xhtml localhost server template xhtml server define mainsection template xhtml main xhtml template server web project work usual access main xhtml localhost myservice main xhtml server simply work template xhtml include overwritten body main xhtml implement distribute ui microservice include ui microservice advance,0,44,2,0.0,0,2018-01-18T20:25:14,0.0
48284608,349739.0,<.net><microservices><messagebroker><api-gateway>,microservice combine api gateway message broker,break monstrously large monolithic enterprise application microservice identify business capability service model application module hrms transaction management interact requirement catering disparate device request response case communication microservice api gateway apt feature response require publish event employeecreate message broker rabbitmq appropriate aim asynchronous pub keep api gateway simple dumb avoid monolithic single point failure follow question good approach feature implement inter microservice communication restful api gateway asynchronous pub challenge mindful ii good option central route gateway subscribe message broker event call corresponding restful api fear giants central msg broker api gateway defeat purpose msa place iii answer windows service work better rabbitmq host web api windows service good option window service consume event expose api synchronous calling recommend assume net paradigm asynchronous microservice window service broad scope help appreciate,0,609,3,1.0,0,2018-01-16T15:24:31,0.0
48240704,8918241.0,<spring-boot><openshift><microservices><consul>,problem health endpoint remote consul openshift,microservice consul service discovery pom xml microservice follow relevant application yml setting access health endpoint start consul microservice change consul setting consul openshift health endpoint longer file find access health endpoint start log startingmyservice locally concern health endpoint change localhost work fine problem occur deploy microservice openshift idea reason consul setting influence healthpoint relate behavior,0,197,3,0.0,0,2018-01-13T14:13:41,0.0
48158957,3885419.0,<microservices><spring-cloud><spring-cloud-netflix><hystrix><circuit-breaker>,customize criterion trigger fallback hystrix circuit breaker,trigger fallback hystrixcommand method base criterion check specific response status method basically client call service url mark url code trigger fallback method response status code response getstatus fallback method return string user request return status fall trigger fallback explicitly throw exception inside method people timeout volume threshold write custom check response status method,0,413,5,0.0,0,2018-01-08T22:29:56,0.0
48278419,9220415.0,<java><spring><jhipster><microservices><spring-cloud>,jhipster registry change property spring cloud config server,migrate monolithic web application microservice jhipster helpful problem jhipster registry central config folder write property file microservice startup read property change property runtime registry microservice kafka jhipster registry spring cloud config server allow behavior stuff lose git svn repository native configuration,0,704,5,0.0,0,2018-01-16T09:52:35,0.0
46359918,3017330.0,<java><spring><authentication><oauth-2.0><microservices>,authentication spring oauth principal springsession,build java application microservice architecture deal user authentication separate service main approach problem spre oauth spring cloud security oauth token authorization header request token generate validate separate authentication service request authentication principal user identity assign role call service simply oauth resttemplate propagate authorization header automatically spring session spring security authentication keep session turn store redi key session case authorization header client session cookie microservice access session authentication principal ready resttemplate propagate session cookie matter code decide factor solution work fine benefit oauth session pull redi time oauth approach preferable build language independent solution spring session work java microservice explain benefit token base authentication,0,418,3,0.0,0,2017-09-22T08:11:33,0.0
47050105,8815657.0,<mysql><mongodb><microservices><atg>,atg microservice,move legacy atg framework open source framework spring jpa memcache step decide migrate product catalog module microservice approach convert atg repository layer jpa write microservice top nosql data model replicate datum consume microservice stage condition completely remove catalog repository system module consume catalog module data question sync mysql db mongodb regular basis,0,440,2,0.0,0,2017-11-01T07:29:08,0.0
47210049,2793390.0,<microservices><json-api><katharsis>,jsonapi include external resource,inclusion resource handle service service katharsis assume resource book publisher include publisher book resource book service http call publisher service issue json representation publisher deserialize publisher pojo book pojo katharsis serialize thing include publisher problem book service knowledge publisher model relationship suppose extract model publisher service java api include book service sure good practice problem relate efficiency deserialize serialize well people handle,0,62,3,0.0,0,2017-11-09T19:29:18,0.0
47010706,2311279.0,<spring><spring-boot><microservices><netflix-eureka><spring-cloud-netflix>,spring boot eureka share instance registration,develop system base netflix microservice stack microservice case order test locally require start microservice order perform happy path test find annoying service locally consume bit resource change case expect stable set remote peer feasible prepare environment localhost test microservice local eureka register local zuul gateway share machine shared eureka bunch stateless microservice reuse dev team test scenario expect share eureka register service local machine serve shared pool stable service reuse provide example configuration propose approach development environment edit set follow config local eureka local service register share,0,217,5,0.0,0,2017-10-30T08:21:08,0.0
53989440,2422021.0,<http><nginx><microservices>,location proxy pass post trail slash redirect,rule call postman behaviour call report correct code json result call post report correct code call report correct code json result call post report error incorrect behaviour code json result result nginx log situation post redirect post return error trail slash,0,19,0,0.0,0,2018-12-31T16:20:13,0.0
53969406,10846215.0,<spring-boot><microservices><spring-security-oauth2><angular7><google-sso>,help implement sso micro serve architecture google spring boot angular google facebook micro service,angular web application mobile app front spring boot rest api deploy ui separate micro service architecture implement sso google facebook jwt token cookie stateless appreciate help regard advance,0,24,0,0.0,0,2018-12-29T12:11:43,0.0
53868314,3930618.0,<microservices><dropwizard><messagebroker><bus>,benefit messenge system microservice architecture,question misunderstood messaging bus concept microservice architecture stateless rest api api call processing access bus system datum topic message queue keep long message publish message delete publishing datum topic rewrite datum redis hashmap problem microservice architecture callback function useless stateless architecture solution messinging system nat,0,27,0,1.0,0,2018-12-20T12:01:33,0.0
54015935,2555207.0,<node.js><microservices><hololens>,control hololen microservice endpoint,newbie understand hololen device portal wrong goal control hololen device example reboot web microservice hololen device portal issue face moment good send command hololen device microservice microservice code nodejs location hololens device location access device portal map network ip hololen ip set port firewall setting well allow access device portal network reboot perform simple operation hololen device microservice endpoint device portal interface,0,28,0,0.0,0,2019-01-03T03:25:29,0.0
54025782,9518276.0,<scala><microservices><lagom>,lagom gateway serve servicecall,simple helloworld lagom application scala accord tutorial call browser call descriptor serviceapi application conf processorapp processorloader,0,29,0,0.0,0,2019-01-03T15:59:53,0.0
53945758,2412007.0,<microservices>,handle locale string pathparam,develop mircoservice msf jar service receive locale string input pathparam example java output wrong exact,0,32,0,0.0,0,2018-12-27T13:18:23,0.0
54010658,4788326.0,<c#><testing><microservices><pact>,datasetup provider base pact json file generate consumer language,consider pact json file interaction base provider state pre data setup test method provider test provider side pactverifi providerstate call fixture service valid fixture setup inserteventsintodatabase pass method inserteventsintodatabase,0,36,0,0.0,0,2019-01-02T17:29:01,0.0
54034248,6259603.0,<spring-boot><load-balancing><microservices><netflix-eureka><netflix-zuul>,service instance register springboot microservice,search require key word irrespective solution create microservice eureka service db service rest ep consume service eureka client load balance release enableeurekaclient springboot app service register suppose version release onwords enableeurekaclient springboot app service register consume service find instance happend guess hope people face kind issue note remove enableeurekaclient enablezuulproxy proxy config property file discover service instance version proper question high version springboot service instance register automatically kindly reply,0,44,0,0.0,0,2019-01-04T06:49:34,0.0
53883260,910411.0,<spring-boot><swagger><microservices><openapi><openapi-generator>,share openapi model api duplicate code,imagine three spring boot microservice provide product second provide product availability third operational backend merchant frontend provide object product datum product availability call productcontainer product service define product model package product service model inventory service availability model inventory service model openapi merchant backend load product datum availability service generate swagger client lib receive model package mention problem define endpoint merchant service openapi return model hold model include link regenerate model domain merchant service model class package model receive product availability service productcontainer map equivalent model merchant serivce domain openapi codegen link external model regenerate domain problem flawed design,0,65,0,0.0,0,2018-12-21T10:36:37,0.0
54038899,6667539.0,<java><spring><maven><microservices><netflix-feign>,feignclient request interceptor,configuration microservice module microservice maven dependency call feignclient maven dependency fine call microservice execute custom maven dependency feignclient feignclient interceptor anotation documentation idea idea,0,108,0,0.0,0,2019-01-04T12:21:53,0.0
53990141,182766.0,<microservices>,microservice pattern transactional log trail polling publisher,difference microservice pattern list example pattern base trail database log publish message broker,0,161,0,0.0,0,2018-12-31T17:56:10,0.0
54017666,10861229.0,<amazon-web-services><docker><amazon-ec2><microservices>,break monolith application microservice aw,error dns service temporary unavailable micro service work third find poc error module deploy micro service help,0,23,1,0.0,0,2019-01-03T06:58:49,0.0
53896702,10712274.0,<django><websocket><redis><microservices>,multiple django project share web socket server pub dese redi,description django project separate work external authorization system share web socket server project message publish redi django project web socket listen redi send connected user web socket note web socket check message content user receive send proper user question django web socket server framework publish message send proper user example notification user create django project message publish web socket receive send message format well outcome find user receive web socket server side message publish user user connect web socket remove redi user log send bother guy full detail roadmap usefull link small explanation question awesome advance,0,41,1,0.0,0,2018-12-22T14:58:59,0.0
54041513,9935002.0,<node.js><typescript><microservices><zeromq><nestjs>,start zeromq server nestjs nodejs framework zeromqjs,project zeromq communicate service write nodejs find basically zeromq binding nodejs good combine zeromqj nestj execution context nestj find well execution context provide nestj achive,0,71,1,0.0,0,2019-01-04T15:07:46,0.0
53932492,8251933.0,<spring-boot><activemq><microservices><message-queue><mq>,consumer receive message microservice communicate spring boot,consumer receive message microservice communicate spring boot message create producer url receiver receive message springboot application producer java config java application property producer consumer boot application consumer java config java consumer application propertie consumer consumer receive message,0,88,1,0.0,0,2018-12-26T13:03:52,0.0
53904267,10825427.0,<java><microservices><netflix-eureka>,connection refuse connect execute request server build service register eureka server,trouble register service build fail find java service build instance work server,0,118,1,0.0,0,2018-12-23T14:07:17,0.0
53955141,5679933.0,<r><post><microservices><httr>,illegal missing hexadecimal sequence chunk encoding,call web service post return cost function genetic algorithm algorithm parallel mode follow error task fail illegal missing hexadecimal sequence chunk encoding code,0,409,1,0.0,0,2018-12-28T07:33:53,0.0
53984966,3585050.0,<microservices><netflix-zuul><spring-cloud-netflix>,zuul slow count user start increase,zuul gateway configuration count user forward zuul slow restart search google redirect thing idea tune configuration improve response time,0,53,2,0.0,0,2018-12-31T07:52:17,0.0
53901699,6725213.0,<python><flask><microservices><pika>,listen message queue flask microservice,flask microservice scenario expose api ticket purchasing push message rabbitmq payment completion insert mysql receive specific message solution start pika thread work,0,314,2,2.0,0,2018-12-23T06:33:17,0.0
53910567,3951948.0,<asp.net-core><integration-testing><microservices><identityserver4>,asp net core integrationtest framework test microserivce,write microservice application asp net core web mvc client asp net core web mvc identity server authentication server asp net core web api web api server flow mvc client send request authentication server token mvc token request web api protect datum work integration test framework test work flow start customize webapplicationfactory detail framework interact service sample code zip file direct open sln file integration test microservice,0,63,2,0.0,0,2018-12-24T07:39:19,0.0
53875297,4983833.0,<.net-core><microservices><identityserver4>,identity server authentication event bus,architecture riddle microservice market time talk microservice architecture commonly asynchronous communication multiple component system suppose communication event bus rabbitmq mq kafka great component abstract sso provide product case microservice webapi publish event external event bus microservice subscribe bus process event publish service question authenticate publish message level authenticate thought hear expirience gain functionality,0,151,2,0.0,0,2018-12-20T20:03:02,0.0
53956057,10841850.0,<java><spring-boot><apache-kafka><microservices>,microservice kafka,start micro service application time kafka reason micro service application service depend kafka find detail configuration yml file source code,0,112,3,0.0,0,2018-12-28T09:11:03,0.0
53556931,6621377.0,<xml><spring><spring-boot><metadata><microservices>,metadata drive architecture context spring microservice,metadata drive architecture context spring boot microservice generate code generation spring boot microservice xml filestyle microservice generate deploy aws cloud runtime base xml inputte system requirement thing propose wonder feasibility msa hardcode class appreciate area framework facilitate,0,57,0,0.0,0,2018-11-30T11:46:01,0.0
53623514,590984.0,<spring><spring-boot><microservices><hystrix>,spring boot microservice hystrix auto register,fellow developer wonder auto register spring boot base microservice hystrix dashboard service startup snippet register eureka automatically hystrix dashboard enter manually annotation api aware advance,0,36,1,0.0,0,2018-12-05T00:39:19,0.0
53575342,3772423.0,<heroku><registry><microservices><jhipster>,jhipster heroku registry archive url find find archive url repository,deploy microservice jhipster microservice require jhipster registry describe microservice jhipster documentation deploy registry heroku click button deploy heroku button click fill field platform follow error,0,86,1,0.0,0,2018-12-01T21:46:48,0.0
53542141,3535549.0,<angular><microservices><angular-elements>,angular element build microservice,angular element build microservice microservice completely isolate micro app work correctly notice angular element nest component microservice introduce ui issue complex example nest component follow issue change detection trigger manually transclusion work correctly create destroy component dynamically relate change detection issue case reusable ui component button datum table reference microservice alternative include common ui component npm dependency microservice disadvantage approach common ui components change rebuild consume application suggestion microservice build deploy independently reference runtime js incude npm dependency appear angular element intend isolated micro app ui component library share multiple microservice alex,0,299,2,0.0,0,2018-11-29T15:16:00,0.0
53559336,6662096.0,<spring-boot><playframework><microservices>,micro service registry play framework,register microservice play framework spring boot enableeurekaserver main class,0,79,2,0.0,0,2018-11-30T14:22:02,0.0
53609938,3391574.0,<docker><microservices><swarm>,manage micro service container,good practice micro service application configure customer case customer configure service http server accord customer configuration docker service start objective achive launch short live application avoid devop configure business micro service avoid service business application easy deploy local aw azure solution docker docker recommande map docker socket,0,22,3,0.0,0,2018-12-04T09:45:50,0.0
53513531,4883959.0,<microservices><jhipster>,jhipster frontend microservice,jhipster generate microservice frontend integrate inside gateway generate separate frontend microservice case usera physical device devicev usera log gateway application devicev userb physical device devicev feature userb log gateway application devicev backend µservice userc virtual device frontend backend understand hard maintain feature inject µservice frontend module inside gateway angular react question suppose generate client application link separately rewrite url loose monitoring registry security jhipster stack sooo keep gateway multiple gateway load demand module application keep clean create angular module load demand git mono repo separate version separated repository compose compile lot solution µservice solution architectural good practice,0,245,3,0.0,0,2018-11-28T06:38:45,0.0
53608836,5013416.0,<java><spring-boot><rabbitmq><microservices><messaging>,implement publish subscribe case spring boot rabbitmq,sure question applicable implement publish subscribe messaging system micro service spring boot problem micro service send event micro service subscribe micro service event case long publish event micro service subscribe essentially micro service publisher subscriber,0,40,4,0.0,0,2018-12-04T08:44:12,0.0
53479791,10690591.0,<microservices><cumulocity>,cumulocity add binary microservice error,upload zip file microservice response microservice host application configuration step describe,0,46,5,0.0,0,2018-11-26T11:06:06,0.0
53626236,4796131.0,<node.js><mongoose><microservices>,custom mongoose population,microservice architecture nodejs service database mongo database userid reference microservice question custom mongoose population function field function iterates trough field return object,0,56,5,0.0,0,2018-12-05T06:15:27,0.0
48790489,7758107.0,<spring-boot><jhipster><microservices>,jhipster gateway call microservice https,configure property microservice gateway call microservice gateway configuration gateway call https microservice stacktrace error,0,273,2,0.0,0,2018-02-14T15:16:32,0.0
48762098,4363046.0,<kubernetes><microservices><kubectl><minikube><fabric8>,fabric unable start window,gofabric start window perfectly gofabric start error set proxy error help,0,41,2,0.0,0,2018-02-13T08:05:21,0.0
48637698,2413431.0,<apache-spark><architecture><microservices>,spark batch job multiservice architecture,figure design service microservice architecture service aim calculate aggregation apache spark batch job interested advice experience case,0,103,2,0.0,0,2018-02-06T07:32:41,0.0
48755237,2429966.0,<architecture><redux><microservices><amqp>,multiple amqp queue microservice architecture,wonder microservice architecture amqp messaging protocol similarity redux front architecture actual question limitation single amqp queue service deploy benefit multiple queue,0,172,3,0.0,0,2018-02-12T20:44:59,0.0
48683443,913622.0,<node.js><docker><nginx><microservices><traefik>,node api micro service gateway,currently traefik api gateway lack thing future authentication cache consider simple nodejs service gateway proxy internal service node performance nginx traefik purpose,0,135,4,0.0,0,2018-02-08T10:38:51,0.0
48622378,3522944.0,<java><microservices><ejb-2.x>,ejb migration,good migrate application ejb implemenation highly critical application number transaction stateless session bean transaction type container migrate microservice architecture migrate late ejb version option provide flexible client integration,0,55,5,0.0,0,2018-02-05T12:15:44,0.0
48710301,5346853.0,<architecture><microservices>,microservice pattern delayed task processing,conference call microservice keep list active call documentdb table minute check table inactive call instance microservice common pattern processing delay task rest full microservice feel promise good build server write external service ping conference call service minute great queue great regular schedule task event hub publish subscribe build maintain list promise publish net azure onprem depend azure durable function,0,339,5,0.0,0,2018-02-09T16:37:38,0.0
36141075,5846345.0,<spring><spring-mvc><spring-boot><microservices><netflix-zuul>,spring mvc reverse proxy zuul,build application base microservice architecture microservice spring mvc reverse proxy provide zuul zuul microservice access proxy click link main course find request throw zuul zuul add header equal ui spring boot thymeleaf tomcat question configure spring mvc add prefix link exist solution upd find interesting behavior replace link order order link href add link,0,754,3,0.0,0,2016-03-21T20:35:43,0.0
42590244,3549689.0,<spring-cloud><microservices><spring-cloud-netflix><netflix-ribbon>,automaticle replicate microservice spring cloud netflix,multiple spring cloud microservice automatic replication microservice microservice manage work find solution find solution apply problem describe case number microservice grateful example help problem update microservice eureka gatewayapplication firstsybsystemapplication high load firstsubsystemapplication launch copy automatically,0,295,6,0.0,0,2017-03-03T23:38:41,0.0
47973414,1736601.0,<microservices>,microservice separate user account profile,example account microservice handle authentication store email password profile microservice fetch display identity age gender address overkill single user microservice suffice,0,269,3,0.0,0,2017-12-26T02:35:57,0.0
47940431,7883250.0,<spring><microservices><resttemplate>,decouple microservice client spring framework,microservice write spring boot release microservice provide independent client module base resttemplate project aim microservice client base version spring import microservice client dependency result version conflict spring web technique decouple framework dependency resttemplate base client,0,92,3,0.0,0,2017-12-22T11:03:22,0.0
48032726,1657028.0,<java><microservices><vert.x><vertxoptions><abstractverticle>,good practice set vertxoption class extend abstractverticle,learn code customization scaffold generate developer redhat launch eclipse vert propose approach classic understand good practice set doubtful correct vertx gerate code simply reference vert instance deploy verticle provide abstract base class approach safe contraindication risk break well practice setup custom,0,427,4,1.0,0,2017-12-30T09:43:53,0.0
37558498,936052.0,<go><config><microservices>,golang rpc server docker automatic deployment,deploy golang rpc server docker image good practice auto configure image instance rpc server purpose deploy three independent docker instance ip main server contact automatically tool gorilla rpc rpc json mux package,0,101,2,0.0,0,2016-06-01T02:35:00,0.0
37625716,1319799.0,<node.js><architecture><backend><microservices><infrastructure>,decouple backend app,hear term time sense theory app thing easy manage scale test improve completely connect work function option easily replace component app language easily long output remain consistent idea practically construct impression microservice talk json auth api share database true sense performance hit fast send datum controller app server refetche form database streaming stream api call fetch database authentication step microservice slow authentication server microservice microservice server talk api machine learn,0,218,4,1.0,0,2016-06-04T02:20:20,0.0
57038395,11054631.0,<rest><spring-boot><microservices>,session variable store access update rest microservice api spring boot,create small internal rest api deploy pcf small storage api experience api create session variable inside internal api storage admin business externally update postman post operation specific json refer inside experience api http method perform business logic execution base variable completely clueless session variable inside spring boot base rest api kindly approach sample json,0,15,0,0.0,0,2019-07-15T11:03:10,0.0
56989851,8398143.0,<spring-boot><redis><microservices><netflix-zuul><spring-session>,add session redis spring session,fololowe answer question store session separate redis server gateway pom add annotation bean unfortunatly key redis cli store set attribute session,0,32,0,0.0,0,2019-07-11T13:00:41,0.0
57083957,5026330.0,<graphql><microservices><apollo>,sort schema stitch column,client display datatable post server side pagination sort datatable column post store post microservice database column poster username store user microservice database query api gateway extend post type delegate poster user service work correctly sure sort table username column post service access user service database solution follow store username post service database connect user service database post service bad idea graphql handle,0,38,0,0.0,0,2019-07-17T20:55:22,0.0
57110199,4574856.0,<microservices><audit-logging>,audit log user operation multiple microservice,micro service web app access rest call log operation user perform backend call implement audit log micro service db table restful operation time user perform operation micro service call restful api audit log approach well good practice solution implement micro service java jpa spring framework postgresql expect good design good practice follow code,0,38,0,0.0,0,2019-07-19T10:11:02,0.0
56981347,3756751.0,<php><microservices><lumen>,authenticate token external auth api luman,develop microservice luman microservice auth microservice generate customer valid send api call verify auth microservice verification purpose create endpoint return user verification code middleware microservice send token verification code middleware auth microservice question regard code implementation approach send encrypt token external api valid good authenticate token api key problem curl request middleware auth microservice time consume load test authenticate token well optimize authentication,0,118,0,0.0,0,2019-07-11T03:42:13,0.0
57086893,5482255.0,<javascript><node.js><queue><microservices>,check specific process function active node js,write notification service service send request service order delay request push request queue process order work fine expect peradventure app crash request leave queue logic program process queue continue add request queue great check function order trigger,0,16,1,0.0,0,2019-07-18T03:54:44,0.0
56950149,4184719.0,<spring-boot><spring-security><spring-data-jpa><microservices>,abstractauditableentity spring boot micoservice architecture jpa auditing,application develop architecture alongside implementation resource web implement question application develop architecture implementation example fit architecture greatly appreciate web architecture figure pass object purpose architecture,0,23,1,0.0,0,2019-07-09T10:05:22,0.0
57102146,4891052.0,<node.js><docker><docker-compose><microservices><nestjs>,separate nodejs project combine,project commerce project separate category backend api graphql server backend client nuxtjs frontend server nestj problem kind deployment type choose option combine big nodejs server graphql server nuxtjs middleware frontend server separate nodejs server deploy docker compose service generate nodejs microservice cotejs moleculerjs datum action connect service transporter redis nat tcp good prefer kind deployment,0,41,1,0.0,0,2019-07-18T20:24:52,0.0
56984993,1670437.0,<graphql><microservices><api-gateway>,bff graphql api gateway,microservice architecture bff graphql transformation response api gateway client graphql api gateway service client api gateway graphql service assume api gateway service graphql host cloud,0,93,1,0.0,0,2019-07-11T08:38:24,0.0
56945057,10452588.0,<azure><microservices>,deploy low environment azure microservice architecture,microservice orient web app azure currently deploy service individually low environment lead lot manual task headache simply replicate microservice low environment easily web app tier architecture require solution azure devop low environment set order release build equivalent resource group replicate fully function low environment,0,28,2,0.0,0,2019-07-09T03:46:29,0.0
56946276,2149453.0,<spring-boot><microservices><jhipster><netflix-eureka><api-gateway>,manage micro service team,microservice divide module developer work module instance eureka initiate instance api gateway load balancer pick instance provide response case face problem developer predict response develop code code base good handle kind situation configuration developer change instance solve problem well solution,0,30,2,0.0,0,2019-07-09T06:11:38,0.0
57104825,10028546.0,<microservices>,call synchronise block microservice,write spring boot microservice operation user bank account balance achieve user operation website mobile atm consistency multiple instance microservice independently synchronous synchronous block longer,0,33,2,0.0,0,2019-07-19T02:36:49,0.0
56923828,2182398.0,<spring><spring-boot><testing><mocking><microservices>,spring boot testing controller secret token,microservice spring boot controller receive auth token http request header send microservice validation auth service basic test fail test secret token mock prevent controller validation good strategy kind case,0,39,2,0.0,0,2019-07-07T16:02:04,0.0
45760186,4962437.0,<translation><jhipster><microservices>,jhipster gateway microservice translation find,gateway microservice build jhipster restriction role api front message traslation find add traslation global json update monolith application result customparameterizedexception throw excepcione service message translation find,0,134,2,0.0,0,2017-08-18T15:27:47,0.0
42107125,4018558.0,<spring-cloud><microservices><netflix-eureka><spring-cloud-netflix>,netflix eureka blue green pattern,question netflix eureka blue green pattern write blog cover topic blue green pattern question subject start service service mode follow configuration initially service start service json interface eureka convert service state problem health check functionality implement service class implement healthcheck interface automatically detect register eureka healthcheck functionality overwrite service status service state intervene blue green pattern healtcheck interface eureka actual state service check service expect service state transition understandable service service find detailed discussion question blue green pattern time healthcheck functionality thx answer,0,268,3,0.0,0,2017-02-08T07:28:44,0.0
41973895,48402.0,<java><java-ee><guice><dropwizard><microservices>,integration guice dropwizard,integrate guice dropwizard application dependency injection find github project sure advantage disadvantage limitation test share expierence preferred integrate guice nice share well,0,182,4,0.0,0,2017-02-01T07:10:29,0.0
38814340,2215166.0,<java><spring><architecture><restful-architecture><microservices>,microservice architecture system multiple datum provider,properly architect system build high level view system requirement system datum provider datum retrieve directly remote database host provider server direct mysql access directly file local server provider push file scp additional logic check file purge move method depend provider system regularly import datum provider local database special importation logic differ provider code monolithic application bad idea split multiple service sure architect appreciate advice detail java spring expose api service scalability speed hate case matter import hour host single server datum leave sensible datum help highly appreciate,0,118,2,0.0,0,2016-08-07T12:52:46,0.0
38704516,6664204.0,<java><spring-boot><liquibase><jhipster><microservices>,single shared database oracle microservice whith liquibase,microservice generate jhipster base spring boot datum cloud liquibase three microservice ms base spring boot generate jhipster ms oracle database liquibase db versionne solution find create table ms launch ms copy liquibase configuration file src main resources config liquibase changelog add entity xxxxxx xml start ms configuration folder clean well solution,0,523,5,0.0,0,2016-08-01T17:13:36,0.0
55038527,5604249.0,<validation><microservices><javascript-injection>,script injection validation microservice,microservice architecture input service multiple source webpage kafka topic good place add validation prevent script injection kind attack base input datum standard good practice handle,0,12,0,0.0,0,2019-03-07T07:46:02,0.0
54952153,234073.0,<microservices><naming>,microservice provide ad hoc executable task solve productive issue,hope question subjective suggestive build microservice provide webservice jmx executable minimal job task runnable callable script specific thing production reset status deleting entity regenerate document thing time setup foobar manually trigger migrate data generate message separately deployable artifact microservice deploy script fast fit thing nom de guerre production support concise point fixer transport fact migration generate stuff advice appreciate,0,14,0,0.0,0,2019-03-01T20:53:47,0.0
55003570,10273954.0,<spring><spring-boot><microservices><netflix-ribbon>,ribbon binding ribbon serverintrospectorconfig,migrate application spring boot error solution,0,24,0,0.0,0,2019-03-05T13:06:55,0.0
55086956,11170047.0,<java><spring-boot><exception><error-handling><microservices>,spring boot microservice handle global exception handler code duplication,spring boot microservice business service endpoint expose public underlying service business service call http call current exception handle global resthandler apierror service exception underlying service handle global exception handler serialize bundle apierror return responseentity bundle apierror business service deserialize body bundle apierror send response add lot code duplication throw exception underlie microservice catch business service handle global handler return custom response efficient better,0,26,0,0.0,0,2019-03-10T10:57:26,0.0
54886582,5530652.0,<rest><microservices><restful-url><netflix-zuul>,restapi design microservice,check possibility netflix zuul api gateway default behavior zuul automatically map service service address example request send request service discovery return address service hello question default behavior service url good practice microservice well resource pattern good practice configure route manually zuul property,0,31,0,0.0,0,2019-02-26T13:26:05,0.0
54897310,9363790.0,<spring-boot><redis><microservices><netflix>,integrate netflix dynomite springboot,integrate dynamite spring boot netflix wiki step install dynomite integrate spring boot application read write record redi master master replication configuration yml file help,0,55,0,0.0,0,2019-02-27T02:55:58,0.0
55086920,731136.0,<spring><microservices><spring-webflux>,communicate microservice fill spring webflux,proof concept work spring webflux microservice pizza service detail pizza ingredient order service customer eat pizza case manage second pizza service follow rest method order service follow communication microservice work fine problem datum question relate follow case achieve development correctly figure require easy achieve pizza service full fill gap returned,0,85,0,0.0,0,2019-03-10T10:52:17,0.0
54897654,7103694.0,<node.js><microservices>,streamline process duplicate file nodejs,common file nodejs module file duplicate place module example common js class constant variable db js class db connection globutil js class function file duplicate folder module change file change module well,0,11,1,0.0,0,2019-02-27T03:39:08,0.0
55025518,5265527.0,<python><oop><design-patterns><abstract-class><microservices>,method abstract super class perform code python,implement abstract class basemicroservice follow method handle call class implement method thing init producer good achieve repeat init producer handle class good workaround,0,20,1,0.0,0,2019-03-06T14:32:29,0.0
54896141,6206244.0,<microservices>,microservice architecture reduce memory consumption monolith,java base monolith consume gb ram deploy production client consider move microservice reduce total cost ownership scalability key benefit microservice architecture cost reduction sure example cost reduction move microservice case scale monolith gb ram instance case microservice increase memory consumption specific microservice case scale cheap total cost ownership find answer,0,24,1,0.0,0,2019-02-27T00:11:37,0.0
55017599,929059.0,<amazon-web-services><microservices><aws-api-gateway><aws-alb>,aws network load balancer internal facing application load balancer microservice target,aws ecs microservice deployment microservice configure alb path forward request respective microservice alb public case api gateway secure internal facing vpc link api gateway nlb network load balancer nlb path forward call respective microservice base path achieve api gateway vpclink internal nlb multiple microservice,0,33,1,0.0,0,2019-03-06T07:17:43,0.0
55048194,8398143.0,<spring><spring-boot><microservices><netflix-zuul>,zuul route micro service,reason zuul route micro service refresh display swagger microservice time refresh weird thing message display screen exception error micro service visit url zuul display swagger,0,91,2,0.0,0,2019-03-07T16:07:30,0.0
55032126,7850541.0,<node.js><microservices>,levee circuit breaker pattern throw exception execute,node js levee circuit breaker execute follow code exception occur exception follow,0,30,3,0.0,0,2019-03-06T21:05:45,0.0
54886963,1486762.0,<java><hibernate><microservices>,face org hibernate type serializationexception deserialize,face weird issue fetch datum db save datum update datum well fetch bit harder follow exception help appriciate mapstruct mapper dto convert vice versa mark collection eager mark dto face issue google apply solution work post,0,37,3,0.0,0,2019-02-26T13:47:14,0.0
54937543,1933641.0,<asynchronous><microservices>,serve synchronous client server communication asynchronous inter service communication,service communicate service asynchronous communication message queue client server communication happen rest requirement user perform persist call service trigger modification service client success response service successful complete respective task reason sure user perform step partially complete datum interested concurrent user nature domain limited capability replace rest client server implementation protocol web socket amqp achieve type scenario asynchronous interservice communication reputed pattern style programming implement type requirement framework lib java bad idea rely asynchronous communication achieve block business requirement,0,28,4,0.0,0,2019-03-01T03:33:09,0.0
54967395,10361739.0,<c#><docker><.net-core><containers><microservices>,netcore project interact docker container,build microservice netcore project call project project consume function netcore project call base project add dependency reference base project work local machine project solution work debug docker project container,0,48,4,0.0,0,2019-03-03T09:28:47,0.0
55073537,5953419.0,<regex><jenkins><github><jenkins-pipeline><microservices>,regex jenkins advanced configuration trigger build base change specific project folder,microservice project architecture single project repository folder folder file specific api single repo configure separate job jenkin api folder repo scm checkout jenkin trigger build commit folder change support regex include exclude best example project sample project folder abc def xyz job jenkin checkout sample project jenkin job configure inside abc folder change commit trigger job best implement,0,124,4,0.0,0,2019-03-09T02:48:55,0.0
54910268,2290089.0,<microservices><scaling>,source truth port registration internally multiple microservice ecosystem,general question manage port assignment single source truth port multiple micro service configure tcp http grpc high availability service haproxy envoy organisation manage port assignment micro service,0,17,5,0.0,0,2019-02-27T16:36:16,0.0
55066619,11171495.0,<node.js><rest><websocket><microservices><api-gateway>,connection microservice websocket websocket client browser app api gateway,websocket client websocket microservice request client api gateway question continuous connection websocket client websocket microservice establish request websocket client browser websocket microservice api gateway step authentication direct connection gateway workaround help,0,116,5,1.0,0,2019-03-08T15:47:37,0.0
57626967,9815085.0,<express><authentication><microservices><policy>,call specific policy route express,express js write token authentication authorization policy user request authorize authenticate request call policy route express js,0,9,0,0.0,0,2019-08-23T13:06:43,0.0
57660665,3972079.0,<performance><containers><microservices><uwsgi><grafana>,performance testing uwsgi application microservice,uwsgi application deploy container pod kubernetes cherrypy expose api evaluate performance container set limit cpu memory grafana check cpu memory usage container resource requirement configure deployment yaml locust post request parallely check limit request metric observe thing locust file py user work fine error increase user request fail status code check cpu memory usage grafana problem cpu memory well limit configure understand request fail resource requirement fine,0,15,0,0.0,0,2019-08-26T15:15:54,0.0
57589967,5805194.0,<microservices>,microservice route relevant request relevant service,work project microservice base architecture exist setup small project large user base base event choreograph pattern service connect rabbitmq component example service flow basically three xlsx file input file require plan builder service pass file parse content service eventually land plan builder bucket xlsx file require generator pass generator microservice design idea case wrong,0,17,0,0.0,0,2019-08-21T10:49:16,0.0
57722696,7781169.0,<rest><http><synchronization><microservices>,pull push base synchronization rest service,rest talk service microservice environment requirement synchronize datum preferred synchronization job http call call place sync job fetching datum question drawback push base job post call provide datum http limitation aware amount datum sync mb,0,25,0,0.0,0,2019-08-30T07:52:45,0.0
57548091,5043145.0,<hibernate><spring-boot><java-8><microservices>,hibernate resolve property invalid identifier error,stick day resolve class join hibernate everytime resolve property psequence move annotation public getter class startup invalid identifier project mas psequence move annotation variable declaration execution repository code st class query class havig psequence column import java util wrong,0,26,0,0.0,0,2019-08-18T20:19:02,0.0
57676806,3439919.0,<relational-database><microservices>,keep relational datum microservice design,example build system represent university sake simplicity entity student class student register class decide microservice route create service represent picture studentservice classservice database studentservice student table classservice class table question database keep relationship table criterion choose database relationship table,0,46,0,0.0,0,2019-08-27T14:23:06,0.0
57591907,2405663.0,<java><tsql><gradle><jdbc><microservices>,add jdbc connector gradle file connect tsql database,build simple microservice springboot intellij storage datum tsql server database add jdbc connector,0,13,1,0.0,0,2019-08-21T12:42:52,0.0
57587519,5294769.0,<microservices><event-driven>,event drive collection,bunch message publish system service require set action occur bound set item proceed example people book tour charge people tour fully book reservation time happen job submit people bill reservation number create person sort dashboard imagine happen numerous tour time process single tour event drive batch,0,20,1,0.0,0,2019-08-21T08:33:02,0.0
57588800,6714426.0,<security><authentication><microservices>,stateless authentication microservice,understand authentication method web service bit trouble understanding stateless service cookie base authentication user log service generate token persist datum session cache database data example issue expiration time token send client store cookie subsequent request token send server fetch datum access token cache validate request valid call application stateless understand application actual code persist request example application state counter increment request example state store database understand jwt call cache token example shopping cart store user add basket stateful problem face popular consensus state bad,0,26,1,0.0,0,2019-08-21T09:44:29,0.0
57726251,4987438.0,<oauth><microservices><keycloak>,keycloak client separate session,multiple serivice separate client single keycloak realm login client perform task withe service filter refresh token sure access token valid question call service provide access token call second service access token keycloak client open session session client login find state access token expire middle call second service second service refresh token revalidate access token,0,30,1,0.0,0,2019-08-30T11:53:23,0.0
57550963,3538126.0,<microservices>,solution problem common dependent core service database microservice architecture,build net core application microservice architecture principle business requirement core unavoidable microservice synchronously access microservice core microservice validate unique data relation microservice create link unique unique save core microservice database serve service correlation perspective service validate store respective database call core service synchronous correlation unique store core service service copy reference addition set datum datum storage separate security business requirement single point failure microservice architectural design suggestion expertise approach problem microservice architecture,0,39,1,0.0,0,2019-08-19T05:35:12,0.0
57600139,5165110.0,<microservices><load-balancing><spring-cloud><netflix-eureka><failover>,happen multiple instance service register eureka server,start build microservice application netflix stack successful register client eureka discovery server instance client service wonder happen instance client loadbalance handle situation eureka failover system,0,16,2,0.0,0,2019-08-21T23:01:38,0.0
57632595,3607734.0,<java><sql-server><spring-boot><microservices><email-notifications>,implement email text notification spring boot microservice loose mssql db connection,springboot microservice point mssql primary secondary listner db connection config engine property listn db dba switch primarydb microservice start fail loose db connection receive email phone text notification guide acheive workaround restage microservice order establish db connection future listn db point primary secondary whichever active,0,20,2,0.0,0,2019-08-23T20:22:03,0.0
57711535,7691734.0,<java><spring-boot><microservices><feign>,set multiple parameter feign client exception build creation time java lang illegalstateexception,,0,24,2,0.0,0,2019-08-29T13:42:03,0.0
57538514,2371128.0,<c#><web-services><design-patterns><service><microservices>,service code relationship,rack table bike table rackbike table link bike belong rack order structure table bike rack table column rackbike rackid bikeid order understanding micro service service bike service rack call ibikeservice irackservice question service code add modify datum rackbike table bike service rack service service handle crud,0,32,3,0.0,0,2019-08-17T17:32:15,0.0
57611466,6107046.0,<java><spring-boot><jetty><microservices>,break monolithic java jetty webservice application microservice spring boot,java application jetty webservice break microservice spring boot framework monolithic application consist class main server service servlet good design three main module server service servlet separate microservice spring boot framework create microservice change default embed server spring boot tomcat jetty,0,38,3,0.0,0,2019-08-22T14:19:32,0.0
57653016,8826526.0,<c#><json><asp.net-identity><microservices><json-api>,add authentication jsonapi,add authentication json api project relationship multiple table example entity entity relationship entity vice versa student view student detail case teacher detail prevent include function role base jwt token,0,44,3,0.0,0,2019-08-26T06:50:15,0.0
57637849,911691.0,<kubernetes><microservices><diagnostics>,microservice connection status external service,start project build micro ish service endpoint currently reply http status body service rely external service wonder standard follow expose connection service external invent pattern industry good practice standard follow service kubernetes gcp help datadog observability,0,75,3,0.0,0,2019-08-24T12:14:58,0.0
57652123,4652974.0,<node.js><microservices><e-commerce><event-sourcing>,structure ecommerce microservice application,build micro service ecommerce multi vendor scratch idea client create account connect website mobile app opensource project good start interest participate imagine structure sure structure database client send request starter good direction structure help nico,0,49,4,0.0,0,2019-08-26T05:18:01,0.0
47239760,2371715.0,<aws-lambda><microservices><aws-api-gateway><code-organization>,codebase organisation microservice aws lambda,endpoint resource expose serverless function deploy support operation resource serverless function deploy separately work ideal structure codebase serverless function separate codebase endpoint codebase handler handle diff function pro con,0,39,2,0.0,0,2017-11-11T15:46:31,0.0
47343724,1549119.0,<mongodb><architecture><microservices><distributed-computing>,scale multiple reader mongodb,detail system mongodb document represent transaction transaction debit card transaction credit card transaction transactionreader poll mongodb transaction periodically transaction rabbitmq route key debit credit transactionworker type debitcardworker creditcardworker multiple instance debitcardworker creditcardworker listen queue consume transaction process rabbitmq worker type process transaction requirement multiple instance transactionreader pull datum mongodb transaction duplicate rabbitmq solution introduce field denote state document wait pick processed mongodb achieve synchronization code multiple reader instance transactionreader process pick document attempt succeed proceed mark question technology library help load sharing multiple instance read mongodb,0,60,5,0.0,0,2017-11-17T05:16:44,0.0
55538732,6176096.0,<java><authentication><microservices><spring-security-oauth2><netflix-zuul>,zuul change location affter beign authenticate spring security,set architecture wich consist microservice oauth authentication type user simple user second admin user issue user log auhtentication service redirect web service stpo admin service stpo service founda zuul property application yml work forgot securityconfig method create class handle sucess authentication application yml main class redirectioin work help,0,13,0,0.0,0,2019-04-05T15:23:22,0.0
55601069,6015339.0,<java><jpa><microservices><api-design>,correct approach deal intermodule jpa entity dependencies,program microservice correct approach deal intermodule jpa entity dependency consider follow entity class reference object mircoservice import entity class include api reference reference entity keep actual entity class hide follow entity class locate mircoservice api dependency understand question fall category beee broad appraoch highly prefer,0,14,0,0.0,0,2019-04-09T20:44:38,0.0
55615179,10763994.0,<microservices>,understanding microservice architecture,reading understand microservice small unit application independently serve purpose couple question microservice develop application language suppose create microservice spring boot aws lambda function case service discovery registration server build service discovery registry mandatory microservice maximum example spring boot netflix eureka server achieve spring boot language combination spring boot language,0,25,0,0.0,0,2019-04-10T14:33:23,0.0
55618629,7226268.0,<python><docker><microservices><gherkin>,define execution scenario multiple docker container,sure question site define execution scenario multiple docker container goal cucumber gherkin scenario multiple docker container interact microservice python flask predefine scenario execute result behave sure behave good case scenario create predefined behave scenario separate docker container correct path,0,25,0,0.0,0,2019-04-10T17:53:55,0.0
55523287,3404292.0,<java><spring-boot><microservices><netflix-zuul>,manage user zuul,zuul api gateway entry gateway security concern login signup zuul access database table user doubt manage user profile manage microservice implement inside zuul service assume user change profile search user manage zuul service requestheader filter zuul process bearer token header userid service internally zuul zuul filter execute,0,26,0,0.0,0,2019-04-04T19:06:14,0.0
55608263,3793607.0,<spring-boot><microservices><netflix-eureka>,springboottest work eureka enable microservice,microservice eureca enable cloud config discovery enable follow configuration covey eureka enable service write integration test service write follow execution time follow error change service place write integration testing mock repository layer work application eureka enable work explain share article implementation,0,26,0,0.0,0,2019-04-10T08:42:00,0.0
55676275,3712353.0,<nginx><microservices><micro-architecture><micro-frontend>,nginx ssi proxy serve static file relative,nginx config serve main app ssi redirect app main app microapp access localhost microapp static asset js css find prefix relate microapp order solve microapp resolve asset,0,29,0,0.0,0,2019-04-14T14:17:27,0.0
55671055,1231451.0,<azure><microservices><event-sourcing><azure-dev-spaces>,azure dev space work queue event,azure dev space host concurrent version microservice team develop route api request microservice ecosystem accord developer select version execute test change user default version amazing api centric microservice handle queue event drive microservice notable limitation azure dev space feature mind scour web find answer help greatly appreciate,0,38,0,0.0,0,2019-04-14T00:35:08,0.0
55638456,10624147.0,<java><spring><microservices>,java spring microservice check transaction realtime update view,work java spring microservice architecture frontend project connect microservice info project administrator restaurant receive online payment app microservice transaction payment frontend detect everytime payment restaurant update payment view realtime payment idea server side event websocket good approach sse figure connection specific restaurant administrator payment,0,43,0,0.0,0,2019-04-11T17:47:30,0.0
55521820,5749921.0,<rest><spring-boot><validation><templates><microservices>,validate api call response,microservice architecture service service communication happen response inter service call validate confirm response object meet contract establish open api specification swagger request object rest api validate controller response object validate send validate client validate receive start process intent avoid null check required attibute example mention example create user call fail user object email phone send post user username return user null email phone validation response well validate response send server leave responsibility client validation,0,85,0,0.0,0,2019-04-04T17:28:43,0.0
55637379,6475815.0,<java><openshift><microservices><netflix-eureka><spring-cloud-netflix>,eureka multiple pod openshift cluster,create eureka service prod openshift cluster time eureka single pod encounter errror discovery pod kill scale eureka cluster ensure pod registry upto,0,96,0,0.0,0,2019-04-11T16:36:53,0.0
55605837,11159522.0,<java><maven><microservices><maven-assembly-plugin><thingsboard>,thingsboard javascript executor microservice failiure build,customize source code download github repository thingsboard minor change ui text process build mvn clean install dskiptest pass majority build apparent reason build fail thingsboard javascript executor microservice build swit follow error error fail execute goal org apache maven plugins maven assembly plugin single assembly project js executor fail create assembly error add file archive nauman download thingsboard master msa js executor target package windows bin tb js executor exe help org apache maven lifecycle lifecycleexecutionexception fail execute goal org apache maven plugins maven assembly plugin single assembly project js executor fail create assembly error add file archive nauman download thingsboard master msa js executor target package windows bin tb js executor exe full trace error follow configuration build os ubuntu lts pom xml,0,130,0,0.0,0,2019-04-10T06:15:11,0.0
55625531,4502810.0,<linux><docker><microservices><single-page-application><identityserver4>,mutiple reactjs web app docker identityserver microservice,design multiple spa web apps project microservice separate identity server problem stuff deploy linux client spa web app dockerize well identity server good example asp net core solution asp net core reactjs web app project assembly reference core web api project responsible datum consumption microservice redirect user identityserver web application demand start reason big cumbersome webapi application service consume microservice reactjs client app communicate microservice identity server query webapi,0,33,1,0.0,0,2019-04-11T05:50:02,0.0
55637941,831519.0,<java><microservices><vert.x><netflix-zuul>,eclipse vertx zuul integration,currently experiment vertx build microservice wonder integrate zuul api gateway rationale implement authentication authorization api gateway level order single point authentication authorization vertx vertx tutorial find build spring boot good,0,76,1,0.0,0,2019-04-11T17:13:52,0.0
55535453,10704731.0,<docker><elasticsearch><docker-compose><microservices>,microservice communicate instance elasticsearch microservice,currently microservice elasticsearch container datum push elasticsearch microservice hit endpoint fethce datum elasticsearch display datum browser datum kibana microservice hit endpoint wrong add alia elasticsearch microservice env file communicate elasticsearch,0,65,2,0.0,0,2019-04-05T12:31:26,0.0
55685546,2874176.0,<reactjs><spring-boot><microservices>,deploy react web app microservice environment,system microservice implement spring boot integrate front react app communicate api deploy application house linux server aw kubernetes docker general pattern deploy react application consider ha highly availability,0,40,3,0.0,0,2019-04-15T08:49:55,0.0
55686311,982166.0,<websocket><microservices><jhipster><stomp><gateway>,generate jhipster gateway server code client websocket support,jhipster generate microservice application application ui server option application ui server option microservice type order generate file work fine angular websocket code user tracker generate pure ui application help,0,70,3,0.0,0,2019-04-15T09:35:30,0.0
55671923,3237407.0,<java><microservices><grpc><spring-cloud-sleuth><zipkin>,distribute trace order flow,java trading application order second order jump service measure latency inside service service external service gather datum timestamp produce distribution percentile measure latency order order find issue explain member latency relate question issue face framework choose propagate order service service timestamp attach calculate produce latency flow order promising approach zipkin support grpc fit case recommendation transport business logic rid,0,37,4,0.0,0,2019-04-14T04:14:38,0.0
55656495,9010123.0,<spring><https><microservices>,https communication microservice,situation microservice spring boot application achieve https communication communication server secure client create server certificate import certificate hand certificate import certificate ready folder folder common folder add certificate configuration call endpoint receive feedback,0,129,4,0.0,0,2019-04-12T17:01:14,0.0
55704153,3585050.0,<spring-boot><oauth-2.0><microservices><spring-security-oauth2>,character add request oauth,authorization server uaa resource server gateway application work correctly scenario authentication time authentication request add result exception gateway application request question jessionid add request adaptable find risk configuration skip risk correct config solve problem,0,31,7,0.0,0,2019-04-16T08:51:02,0.0
55690884,1622825.0,<java><node.js><spring-boot><jvm><microservices>,jvm lightweight docker azure kubernetes service,bit issue build java spring application azure kubernetes service ak docker appear lot system resource ram cpu main consideration spring code fairly lightweight understand system resource good practice aware reduce system resource footprint java spring application purpose application lightweight crud service top mongodb database db interaction layer spring datum morphia direct db operation application morphia development spring datum querydsl place appropriate metric compare nodejs java application level comparable node application size scope dockerfile param redact thing spring profile parameter set bunch configuration business logic application set jvm wise,0,46,7,0.0,0,2019-04-15T14:01:06,0.0
55609321,11338755.0,<php><amazon-web-services><docker><microservices><consul>,communicate external ip docker consul,docker consul create instance aws add follow instance instance server second instance server third instance server fourth instance server instance ubuntu os implement auto discovery concept consul follow step instal docker instance link pull consul image link check consul development work fine instance server consul agent client mode error output letter key reference site response dig bootstrap server private ip consul service consul connection time error,0,47,9,0.0,0,2019-04-10T09:35:40,0.0
48919502,933526.0,<docker><.net-core><microservices>,microsoft eshop containers micro service event subscription pattern,regard microsoft eshop containers example code host micro service application pattern subscribe event startup startup cs file work hosted environment azure side service shutdown inactivity remain dormant request http arrive app start event suddenly process fact intend deploy container stable,0,261,2,0.0,0,2018-02-22T04:06:20,0.0
49008207,9306525.0,<java><spring><web><real-time><microservices>,java spring microservice send realtime datum dynamic variable browser,java spring microservice architecture sensor send second example min simple code datum sensor return dynamic variable result output console datum sensor datum sensor datum sensor question well variable microservice architecture write controller class sampledata example simple microservice static data browser browser return final result hello microservice update result example open browser display dynamic result datum sensor temperature second change datum sensor temperature idea spring javascript,0,216,3,0.0,0,2018-02-27T12:00:19,0.0
48952482,8934810.0,<java><spring-boot><jhipster><microservices><gateway>,define jwt configuration jhipster,microservice web api gateway start authenticate user admin user log receive message api server microservice default configuration jhipster gateway create skip server option problem server api url call api direct port api chrome dev tool request url wrong port change change webpack common js work,0,311,10,1.0,0,2018-02-23T16:39:49,0.0
43236769,46460.0,<microservices><continuous-deployment><continuous-delivery>,micro service eco system service deploy bulk incrementally,instinctively deploy microservice individually understand dependency contract roll update monitor success individual change time number team treat set closely microservice monolith push application parallel test single unit susan fowler write book production ready microservice checklist production readiness characteristic deployment production time incrementally roll read assume agree incremental preferable read susan fowler write advantage methodology,0,45,2,0.0,0,2017-04-05T16:28:10,0.0
40220601,477055.0,<java><rx-java><microservices>,implement retry budget rxjava,read exceptionally well write site reliability engineering interested implement generic retry budget rpc client case client service automatically perform retrie deal timeout slow io time participate thundering herd slow system unresponsive book describe concept retry budget client system allow retry globally normal load server concept require windowe global state thread conjunction client rely rxjava deal concurrency lead consider rx keep state retrie allow ahead implement feature interesting hear framework libs framework finagle java js shop scala,0,92,2,0.0,0,2016-10-24T14:08:37,0.0
40268981,1102175.0,<azure><architecture><microservices><azure-service-fabric>,azure service fabric microservice architecture,imagine follow scenario build iot solution azure service fabric implement complete backend message device flow iot hub device actor process message web api stateless service people datum spa database device actor data decision term microservice architecture device actor stateless service retrieve datum avoid integration database consider device actor scale device stateless service bottleneck scale device question good approach,0,412,9,0.0,0,2016-10-26T17:50:39,0.0
59120278,2826532.0,<authentication><domain-driven-design><microservices><bounded-contexts>,communication microservice email verification link,microservice identity communication user sign send activation link email activation link generate identity side pass communication microservice send email communication microservice shoudn exist separate microservice microservice iemailsender utility send email,0,6,0,0.0,0,2019-11-30T21:07:06,0.0
59028655,8010507.0,<rabbitmq><microservices><message-queue>,process receive message sequentially unique concept microservice system,microservice system instance consumer business base orderid unique orderid message message long time processing process message second message message force system process sequentially example instance start message processing orderid instance wait orderid message process scenario second third fourth message sequence process message orderid system process orderid parallel sequence orderid bus base rabbitmq message second idea scenario,0,9,0,1.0,0,2019-11-25T09:28:54,0.0
59087867,2234977.0,<graphql><microservices><apollo>,microservice architecture authentication sharing apollo federation,microservice architecture apollo microservice write node js microservice account api couple generic method mutation login login return log user mutation register register user query profile return active user account api stateful session base graphql gateway gateway side website react store credential authentication form call override login order set current user context pass product api share idea implement share datum microservice gateway,0,9,0,0.0,0,2019-11-28T11:30:12,0.0
59108075,9640778.0,<mongodb><rest><microservices>,limit number content property mongodb,question method check cardinality property insert query problem mongodb hard limit number document insert property lock service race condition execute count insert example collection class document perform insert race condition number class example class grade lot time,0,11,0,0.0,0,2019-11-29T16:10:27,0.0
58976728,3190833.0,<websocket><microservices><nestjs>,discuss good practice websocket gateway microservice usage nestj,simple microservice architecture picture display step client request api register account websocket gateway nestj support step gateway service emit message create user account service redis step account service process user creation work emit gateway service step gateway service emit message client websocket service docker replication question puzzle register microservice specific differentiate inject redis transport event send place consumer microservice eventpattern decorator auto redi replication replication consume message consume client websocket connection hold separate gateway service replication sure gateway service replication hold request client socket receive message emit account service step work correctly,0,13,0,0.0,0,2019-11-21T14:01:20,0.0
59038751,12399851.0,<java><spring><spring-boot><microservices><hystrix>,solution springboot hystrix dashboard interpreting springboot starter security enable hystrix stream project,hystrix dashboard enable application main class package example hystrixdemo pom xml application property analyse hystrix stream underneath spring boot microservice application main class pom xml application property spring boot starter security enable hystrixdashboard application connect microservice hystrix stream hystrix stream interpret correctly wonder password authenticate hystrixdashboard hystrix stream microservice,0,17,0,0.0,0,2019-11-25T19:22:32,0.0
59033318,900119.0,<microservices><apache-zookeeper><consul><configuration-management><etcd>,centralized configuration microservice fat client,manage configuration microservice service fat client application instal equipment application develop java worth equipment work connection network configuration cache locally spring cloud config service consul zookeeper etcd consul lot functionality box late user interface struggle setup tool equipment configuration type equipment version respective application application share configuration setting setting specific version equipment type single equipment pretty easy store configuration version single type tool consul structure setting consul environment clear understandable service engineer familiar intricacy application consul tool,0,19,0,0.0,0,2019-11-25T13:46:54,0.0
58994451,12414492.0,<java><spring-security><jwt><microservices><netflix-zuul>,spring boot security json token error forbid,validate user authenticate token jwtfor zuul proxy validae user gateway user management service generate authenticating user token jwt token generate validate token forbidden error security configuration class jwt validation class jwt validation class resttemplate fetch username detail user management service resttemplate implementation class debug pointer userbasicdetails hbsc resttemplate getforobject username userbasicdetail class error,0,23,0,0.0,0,2019-11-22T12:36:18,0.0
59041587,5126182.0,<java><spring><spring-security><microservices>,java microservices support multiple resource spring oauth microservice,situation spring oauth jwt protect multiple path multiple client example code code locate authorization microservice client credential mysql database microservice multiple resourceserverconfigureradapter aparently configuration higger order stuff result override spring boot pom note authorizationserverconfig losse maining authorization micro service question support multiple client idsin microservice infraestructure,0,41,0,0.0,0,2019-11-25T23:28:16,0.0
58941586,10028437.0,<node.js><typescript><npm><import><microservices>,import file npm module,split project repository package combination build microservice package microservice deploy code compile js file execute course turn plug package simply export code file error occur execution compile microservice microservice code import external library find js file content correct maintaining system change code connect package build push compile code repository publish npm package include compile code inconveniently weird easy forget organize repository npm package code publish keep microservice compile code pull external library javascript generate place deployment,0,15,1,0.0,0,2019-11-19T19:32:09,0.0
59064087,8208331.0,<spring-boot><microservices><spring-cloud-config>,file system backend config server spring boot microservice,create file system backend cloud config server spring boot application work microservice help setup,0,17,1,0.0,0,2019-11-27T06:12:35,0.0
59032817,2862531.0,<angular><reactjs><microservices><micro-frontend>,avoid refresh micro frontend route distribute application,single monolith spa frontend application write angular frontend bulk considerable build time well structure bit messy deep clearly divide three separate application decision divide single application three separate application application repeat layout landing menu layout link application micro frontend approach follow application distribution route route distribution application single application link child route reverse proxy server configure redirect relevant application request issue click menu refresh browser redirect application avoid refresh,0,31,1,0.0,0,2019-11-25T13:20:47,0.0
58995912,9480035.0,<kubernetes><microservices><istio>,istio secure kubernete traffic clusterip,microservice architecture kubernetes cluster communication service http protocol clusterip service type communication service https thing istio understand nginx https service http proxy https traffic port istio,0,34,1,0.0,0,2019-11-22T14:06:28,0.0
59117021,8673885.0,<microservices>,microservice system desgin node js react framework mongo db azure,build system micro service micro service build node js react production azure kubernete build kubernete qa environment guide infrastructure requirement azure aks vm open software arul,0,9,2,0.0,0,2019-11-30T14:20:47,0.0
59088525,10838966.0,<spring-boot><microservices><spring-cloud-sleuth>,sleuth traceid propagate oauth resttemplate resttemplate,add distribute trace microservice work fine add header spring start work investigation find spring add header default find work add interceptor work code snippet note spring sleuth version release code snippet code,0,26,3,0.0,0,2019-11-28T12:06:53,0.0
59058573,9955265.0,<authentication><database-design><architecture><microservices>,login authentication flow microservice,start play microservice thing confuse context create separate mc auth user db schema user user table email user pass table user pass salt alg question login flow authentication narrow option browser request send apigateway user mc pass detail message queue auth mc validate send token browser request send apigateway auth mc detail straight db validate send token browser request send apigateway user mc validate small auth code send token plan read bad share db mcs db schema problem user pass table table specific auth mc db query userdb user pass authdb user auth plan auth mc ticket checker jwt request filter gateway exception login flow concern broad main concern login flow wrong clear appreciate advance,0,18,4,1.0,0,2019-11-26T20:01:31,0.0
59108628,12263494.0,<java><spring-boot><docker><microservices>,eureka server discover client service docker container,develop application microservice postgre database eureka server discover client locally work perfect problem appear deploy service docker container container service postgre eureka create network docker join container question discover microservice eureka server help provide detail resolve problem docker compose dockerfile customer microservice dockerfile product microservice dockerfile eureka server dockerfile credit microservice application yml customer service,0,26,6,0.0,0,2019-11-29T16:56:01,0.0
58978086,3760216.0,<go><microservices><opentracing><distributed-tracing><tracer-span>,opentrace span fail golang microservice,question directly relate follow question solve issue current cinfiguration microservice api gateway follow code second micro service user service output start context post code,0,29,6,0.0,0,2019-11-21T15:12:34,0.0
59031058,3639530.0,<c#><multithreading><microservices><hangfire>,microservice reccure minute external hook,microservice minute order database thread internally infinite loop external trigger work scheduler hangfire unable implement call option implement,0,41,8,0.0,0,2019-11-25T11:43:47,0.0
49989235,5463777.0,<multithreading><microservices>,chrome multithread net microservice,build net mvc microservice local machine test case happen visit service time test chrome outcome weird confuse afternoon browser service simple method wait second return view empty web visit port number change machine controller execute method open chrome tab visit time refresh tab short time suppose happen second chrome tab load empty web return hello method time time http request mvc create instance hello method create time secs finish time secs chrome tab load empty web secs second chrome tab load empty web imply microservice chrome sequential test browser tab load web time imply microservice browser multi thread idea happen differently web browser,0,53,2,0.0,0,2018-04-23T20:12:10,0.0
49915703,4302531.0,<authentication><.net-core><microservices><asp.net-apicontroller>,allow anonymous controller pass authentication net core,provide microservice net core api controllers follow code startup cs authenticate controller ctx authenticate pass controller authentication change ctx method possibility exclude controller code trigger ctx,0,81,2,0.0,0,2018-04-19T07:57:35,0.0
49990423,261728.0,<spring-boot><microservices><hystrix>,handle timeout hystrix,implement hystrix spring boot application hystrixcommand annotation method call service resttemplate notice hystrix invoke failure call service invoke time service validation parameter respond read lot google easy configure property idea appreciate help,0,154,2,0.0,0,2018-04-23T21:44:51,0.0
49943333,1913077.0,<nginx><configuration><microservices><nginx-reverse-proxy>,nginx return json,configure nginx error code work perfectly fine return custom json object html case html handle differently goal nginx return json html,0,418,2,0.0,0,2018-04-20T13:57:33,0.0
51229203,5007657.0,<spring-boot><jmeter><microservices><spring-cloud><netflix>,status error internal server error exception netflix zuul exception zuulexception message reject thread execution,timestamp status error internal server error exception netflix zuul exception zuulexception message reject thread execution exception stress testing api redirect zull gateway point mention netflix zull eureka discovery microservice spring boot work fine angular application postman swagger stress testing jmeter tool work fine user load mention thread user mention exception replicate scenario local laptop jmeter time server host test laptop hostname code service mention thread user jmeter work fine exception read lot stack overflow post github link web search issue solution work ribbon readtimeout connecttimeout hystrix command default execution isolation strategy thread thread timeoutinmillisecond,0,956,0,0.0,0,2018-07-08T05:48:22,0.0
51244488,9780472.0,<c#><asp.net><docker><microservices>,asp netcore app docker debian,problem container docker docker host server linux debian docker file console output web app work connect site error connetion deny,0,14,2,0.0,0,2018-07-09T11:28:26,0.0
51166088,3016392.0,<json><spring><rest><spring-boot><microservices>,retrieve child object json response spring,build small microservice springboot spring rest service expose http method internally consume rest service third party api postman call service json response problem complete object response service url post man requirement user consume service category category detail child detail return child child searchkey url free text search category instance detail return response category power supply subcategorie rechargeable battery efficient filtering prepare json response fetch object start filter advise,0,56,2,0.0,0,2018-07-04T05:03:40,0.0
51239970,7699410.0,<java><docker><spring-boot><microservices>,eureka server gateway server eureka client server,server st server eureka server gateway exam mgmnt service eureka client call exam mgmnt rest api gateway server host school mgmnt service unable call school mgmnt service rest api gateway configuration entrypoint java jar exam mgmnt jar,0,51,3,0.0,0,2018-07-09T07:16:59,0.0
51296888,330457.0,<transactions><jax-rs><microservices><jta>,jta microservice,build application target full profile ee container jax rs resource class jpa entity class final application deploy spring boot simple deployable platform micro profile ejbs,0,134,3,0.0,0,2018-07-12T03:27:39,0.0
57945266,1670437.0,<session><cookies><microservices>,cookie oauth access token microservice recognise anonymous user,team simple cookie oauth access token microservice recognize anonymous user subsequent request cookie access token key recognize user log user application,0,16,0,0.0,0,2019-09-15T14:54:50,0.0
57946231,4293113.0,<dockerfile><microservices><pipenv>,multi pipenv cross microserivces python,project decompose microservice call service hold pipfile dockerfile corresponding pipfile lock example service pipfile service pipfile separate dockerfile deploy service service code hold dockerfile install dependency service architecture wrong package version meet lot package real life solution version pipfile write coder instinct solution create pipfile joined dependency dockerfile deploy correspond pipfile lock pipfile lock development pipenv pipfile pipfile lock support idea,0,16,0,0.0,0,2019-09-15T16:50:37,0.0
58135130,3468846.0,<ruby-on-rails><node.js><docker><elasticsearch><microservices>,trigger dockerize app rake task,rail app rake task trigger npm dockerize environment rake task pass document elasticdump backup create nodejs microservice rake task pass list document ids logic install elastic dump docker image rake task trigger shell script well bit confused work term architecture,0,16,0,0.0,0,2019-09-27T13:02:16,0.0
58038669,10882849.0,<docker-compose><microservices><netflix-eureka><netflix-zuul>,start error whitelabel error,start error subsequent error application launch docker error occur mistake app yml docker compose yml eror start study microservice hard documentation configuration parameter link documentation guide study,0,19,0,0.0,0,2019-09-21T08:44:59,0.0
57980454,9151832.0,<java><amazon-web-services><rest><microservices><hateoas>,set hateoas link dynamically aw,develop api hateoas link local generate http localhost api getuser getmappe url work fine deploy aws unable set url link generate url everytime aw gateway colleague everytime hit url url code set response url change everytime implement well implement good practice set url api gateway proxy url http xyz aws api getuser http xyz aws generate change frequently change url change hateoas url automatically aw hateoas generate automatically api gateway url advance,0,20,0,1.0,0,2019-09-17T18:57:10,0.0
58013096,4048678.0,<architecture><microservices><disaster-recovery>,loop dependency micro services design,service custom face render service ui schema component info gitlab release api render ssr cache mechanism schema datum service cluster allow external visiting service web service cluster allow internal visiting service provide schema config tool curd api config tool schema api component info tool user internal staff select build custom face component lib publish cdn gitlab ci cd release info component cdn link serve gitlab release api gitlab internal server issue debate usable gitlab propose release info backup gitlab read backup datum concern proposal chain loop feel design reasonable backup db backup release info provide theoretical support conclusion company support cluster lack roadmap migrate oneday depend help pick solution problem,0,22,0,0.0,0,2019-09-19T14:17:58,0.0
57933547,5295210.0,<node.js><microservices><grpc><opentracing><grpc-node>,microservice distrubute trace node js,service node js service receive http request communicate service grpc request implement trace opencensus create trace span service fail create child span service create child span service read documentation opencensus code implementation trace create link parent simply pass span,0,24,0,0.0,0,2019-09-14T07:54:14,0.0
57939834,5455223.0,<.net-core><entity-framework-core><microservices><dto>,customize query microservice ef core,realize microservice base architecture microservice database service base ef core realize command query segregation principle create method select datum database face difficulte connect custom query example select user database criterion exist query generating dto generate good practice framework allow pass additional extended datum query database filter database microservice side hope describe problem,0,30,0,0.0,0,2019-09-14T22:47:26,0.0
58098907,12119105.0,<java><cloud><microservices><devops><microprofile>,signer add local trust store locate ssl configuration alias defaultsslconfig,develop service java microprofile deployment chain cloud foundry tool step service invoke service expose public endpoind http time invocation follow exception generate signer add local trust store opt ibm wlp output defaultserver resource security key locate ssl configuration alias defaultsslconfig extended error message ssl handshake exception pkixcertpathbuilderimpl build valid certpath javax net ssl sslhandshakeexception sslhandshakeexception correct import domain certificate trust store problem modify dockerfile include import certificate keytool image generate error build import certificate directly container ibmcloud shell format format invalid blog import java cacert container generate error permission shell connection default user root root password sure solution problem,0,31,0,0.0,0,2019-09-25T12:53:39,0.0
58075636,8772560.0,<spring-boot><security><microservices><spring-cloud><keycloak>,keycloak adapter custom feature,consider keycloak application microservice architecture spring cloud spring boot stack issue keycloak lack feature provide concurrent user session limit possibility expire user session wonder good idea create separate microservice keycloak bridge kind bridge web application microservice keycloak custom adapter microservice implement keycloak feature communicate keycloak answer question custom microservice keycloak database custom store mention concurrent user session limit aware keycloak migration version complex keycloak schema change domain point view single database good fit reply advance,0,32,0,0.0,0,2019-09-24T07:58:48,0.0
58027808,10219022.0,<nginx><microservices><kong>,kong invalid response receive upstream server,service localhost kong localhost admin kong proxy localhost proxy add single service command curl post url data booksapi datum url add single route command curl post url datum host localhost datum path datum strip path false datum method face error kong error invalid response receive upstream server accord error log error connect fail connection refuse connect upstream client server kong request info http upstream host localhost kong version,0,33,0,0.0,0,2019-09-20T11:49:03,0.0
58080219,8639962.0,<microservices><cqrs><event-sourcing>,implement cqrs rule,microservice architecture host azure kubernete implement cqrs event source good event source good cqrs well azure table storage read view problem pagination azure table storage advice order implement cqrs azure table storage approach pagination azure table storage event source service bus cqrs azure table storage,0,33,0,0.0,0,2019-09-24T12:21:08,0.0
58066336,12108582.0,<java><playframework><microservices><lagom>,lagom service http implement rest template lagom,st issue lagom service https port proper documentation direct spring add ssl cert point cert custom port number process setup lagom service https issue implement rest template lagom party server call lagom implement,0,38,0,0.0,0,2019-09-23T16:12:08,0.0
57940745,3507435.0,<performance><spring-boot><jvm><microservices>,appcds multiple spring boot application,state java se tool sound promising microservice fact hotspot support fat jar shipping spring boot application current appcds support custom class loader well workaround appcds single replicate launch multiple instance spring boot application example dmitry chuyko russian appcds multiple spring boot application share class spring platform application work containerized environment direct memory share container,0,107,0,0.0,0,2019-09-15T02:43:18,0.0
57963367,8518863.0,<python><google-app-engine><google-cloud-platform><microservices>,microservice locally,simple app engine app project file directory app locally set local virtualenv microservice architecture service folder main py file longer main py find main directory microservice locally,0,44,1,0.0,0,2019-09-16T19:35:44,0.0
58053404,9273414.0,<java><spring-boot><microservices><spring-cloud-feign>,feignclient exception spring boot microservice status,problem feignclient authentication authorization okta service api gateway discovery service eureka backend api gateway declare backend client application yaml feign declare request send idea happen solve addition service register eureka check exist healthy zuul route configure properly,0,33,2,0.0,0,2019-09-22T21:06:30,0.0
57949863,1060041.0,<spring-boot><spring-security><microservices><resttemplate>,spring resttemplate microservice pass object post,communicate spring microservice resttemplate work fine controller call resttemplate endpoint issue pass object resttemplate pass requestbody endpoint post call controller point user authenticate log login follow error stacktrace guy light update security config request security config login microservice call employee microservice security config employee microservice,0,58,2,0.0,0,2019-09-16T02:53:44,0.0
57998392,4461106.0,<amazon-dynamodb><microservices><quartz-scheduler><executorservice><quartz>,scheduler instance multiple micro service,build micro service api call deletetoken api invoked suppose change status tuple db correspond token identify token mark delete tuple status mark delete day rest call downstream service api call deletetokenfrompartner mandate call deletetokenfrompartner day hour day write scheduler quartz java executor service schedule period everyday query db find row status mark delete status update day iteratively call deletetokenfrompartner row db highly issue consistency delete day problem micro service instance instance query db set row call row tweak duplicate call avoid fyi config change hostname instance capable scheduler fine,0,26,3,0.0,0,2019-09-18T17:56:08,0.0
57991944,11597192.0,<java><spring-boot><microservices><feign>,send string jsonnode param feignclient interface requestparam,rest point method interface service annotation build start exception service fetch long pass exception question call service fetch return change search method st service overcome error help appreciate advance,0,39,4,0.0,0,2019-09-18T11:40:40,0.0
58114397,2528468.0,<java><microservices><spring-cloud>,return meaningful object thing consumer microservice api request resource exist,microservice communicate rest api productcatalog service request product detail productid service call productinfoservice rest url application pdoduct productid productinfoservice rightly return productinfo object productid supply supply pdoductid exist productinfoservice return null break good thing scenario return dummy productinfo object better code follow,0,36,8,0.0,0,2019-09-26T10:06:35,0.0
58058942,11917305.0,<java><hibernate><spring-data-jpa><microservices><spring-cloud>,handle transaction spring cloud microservice mq,phase commit saga pattern transaction async distribute system mq involve mq approach soa esb consistency achieve transaction microservice springcloud inbuilt functionality,0,50,9,0.0,0,2019-09-23T09:00:10,0.0
51669792,8325160.0,<spring><maven><spring-boot><command-line><microservices>,multiply spring boot project maven skip submodule,multimaven spring project parent pom app submodule main class parent pom fail find main class submodule skip common submodule parent,0,77,2,0.0,0,2018-08-03T09:43:51,0.0
51814233,6863524.0,<spring-boot><concurrency><microservices>,support request second spring boot,build micro service base architecture spring boot micro service call load test gb core machine max support request second cpu consumption time set high max connection max thread support request second,0,214,2,1.0,0,2018-08-13T01:43:25,0.0
51608934,2063564.0,<node.js><microservices><strongloop><loopback>,error find module function module resolvefilename loopback framework node js base example,follow error application application base loopback framework node js find module function module resolvefilename module js function module load module js function module runmain module js startup bootstrap node js bootstrap node js remove npm npm cache well appdata roam folder resolve error help,0,79,4,0.0,0,2018-07-31T08:34:48,0.0
53409872,8024812.0,<azure><architecture><microservices><bpmn><ab-testing>,testing microservice architecture complex business process,good practice approach testing microservice architecture client testing upcoming product propose set tool practice couple week list sort thing product moment cloud – azure ak microservices java spring boot docker frontend – react marketing – hotjar google analytics share idea customer side architect business process bpm drive business process consist activity reuse business process expectation side introduce business process manager microservice change order activity testing example step move middle process review process convenient user business process product drive ui ui step responsible call backend service api gateway ui portal current microservice communication characterize choreography orchestration component command message event messaging query rest api summarize experience project follow idea apply item relate testing microservice proxy service mesh control microservice instance version responsible process incoming request react test tool bpmn manager business process activity change order party testing tool measure experiment result experience testing describe case appreciate help,0,285,2,0.0,0,2018-11-21T10:19:54,0.0
53382839,9150867.0,<events><socket.io><rabbitmq><microservices><messaging>,good return datum user event drive microservice,microservice architecture current project rabbitmq message broker issue determine good request microservice return eventual response currently socket io socket connect browser client send event socket socket read event publish rabbitmq course consume service question current setup good keep well,0,31,2,0.0,0,2018-11-19T21:23:25,0.0
53240514,8627653.0,<django><build><microservices>,implement microservice django communicate,framework django realize project microservice detailed documentation find helpful explain procedure step step microservice communicate django microservice explain pypi good result someoene help procedure template microservice grateful ps os windows bit docker help,0,56,2,0.0,0,2018-11-10T15:38:22,0.0
53280034,4860939.0,<java><spring-boot><microservices><netflix-eureka><netflix-zuul>,zuul fail route dynamic port microservice,microservice dynamic port microservice register fine eureka access zuul gateway fail log zuul gateway change port microservice dynamic fine time restart zuul application well guess well microservice change port share content file,0,281,3,0.0,0,2018-11-13T11:27:20,0.0
53266565,1833563.0,<database><microservices><anti-patterns>,database wrapper microservice anti pattern,microservice wrap database entire functionality service hide detail database generic rest api allow change database affect service anti pattern pro con approach,0,115,3,0.0,0,2018-11-12T16:44:17,0.0
53390207,9990474.0,<java><spring><microservices><url-encoding>,spring uricomponentsbuilder escape unicode,uricomponentsbuilder send url mail convert unicode kindly send url exact code,0,27,5,0.0,0,2018-11-20T09:46:53,0.0
58233981,5138264.0,<spring-boot><session><amazon-ec2><microservices><aws-load-balancer>,aws load balancer configuration spring boot rest service,configure load balancer classic load balancer spring boot rest service redirect request instance time request user session enable sticky session load balancer work request session instance application store datum application context data rest service call request instance datum application context spring boot rest service maintain session stateless help issue solve,0,17,0,0.0,0,2019-10-04T09:52:57,0.0
58215564,5440464.0,<java><spring><microservices><jhipster>,jhipster gateway change default content type,jhipster microservice project gateway module add jackson dataformat xml dependency response return xml request content type application json remain method return xml response object annotate jacksonxmlproperty customresponseobject,0,19,0,0.0,0,2019-10-03T08:54:07,0.0
58275369,8079965.0,<api><flask><jwt><microservices><flask-restplus>,secure authorize flask api jwt token generate seperate java microservice,auth service implement java handle user management token generation api verify token expire service implement python api build flask flask restplus ui service call service api authorize jwt jwt ui pass header add jwt validation security api service,0,19,0,0.0,0,2019-10-07T18:40:18,0.0
58212306,9667372.0,<spring-boot><microservices>,send multipart file array feign client microservice module,client side feignclient file server configuration fileuploadservice multipartsupportconfig class requestmappe public interface fileuploadservice postmapping upload consume multipart form datum apioperation upload file public list uploadfile requestpart file multipartfile file system println hello,0,20,0,0.0,0,2019-10-03T04:26:10,0.0
58266700,1353364.0,<soap><microservices><jax-ws>,integrate soap service microservice,requirement integrate soap base system service functional purpose satisfy integration service payload auth differ approach create stub service set invoke consider service integrate generate stub write mapping code repeat work avoid write generalize code create soap payload service base external configuration implement service configuration client approach implement integration separate microservice service resource respect api hide service api gateway example api aggregate score service integrate lean approach grow complex manage number service require integrate drastically increase thought face situtation project,0,20,0,0.0,0,2019-10-07T09:21:21,0.0
58229279,4911031.0,<design-patterns><microservices><hystrix><fallback><spring-cloud-feign>,feignclient default fallback,default fallback retry server feign hystrix support fallback fallback factory implement fallback logic method fallback logic replace host port request url server configure default fallback strategy achieve purpose client fallback factory,0,22,0,0.0,0,2019-10-04T02:47:06,0.0
58299532,790436.0,<ssl><microservices><consul>,tool provide tls encryption microservice,work project set service deploy corporate environment local network office factory design architecture tool software help build service endpoint corporate environment consider feature nice solution secure consul meet requirement service discovery configuration point view good option consul overkill case sure work well requirement detail search tls solution consul provide regard concept sidecar proxy overkill thing target cloud environment kubernete provide mutual tls authentication service deploy sidecar manage certificate box consul note infrastructure change lot customer customer set static,0,23,0,0.0,0,2019-10-09T07:59:01,0.0
58238176,7803759.0,<node.js><typescript><microservices><seneca>,manage bulljs senecajs,project build microservice message microservice senecajs asynchronous task bulljs problem follow behaviour user send request server server manage request call async task queue server send response client wait answer queue seneca option call request microservice specific time request abort queue bulljs catch error timeout seneca request task state transform state transform personal opinion timeout error task transform state set option queue work catch seneca timeout error queue seneca bull,0,33,0,0.0,0,2019-10-04T14:17:38,0.0
58180724,7227018.0,<docker-compose><microservices><keycloak><netflix-zuul><consul>,dockerize zuul gateway keycloak internal server error authorize,currently build microservice project zuul api gateway keycloak auth server consul service discovery service php docker docker compose develop resource service zuul reverse proxy authorize request keycloak authentication process zuul keycloak authorize token problem request resource token zuul error happen graph understanding directly embe image reputation response postman error debug log apache tomcat zuul application property docker compose yml zuul gateway dockerfile separate docker compose keycloak pack keycloak docker compose yml register service consul,0,47,0,0.0,0,2019-10-01T08:20:55,0.0
58211535,11357623.0,<node.js><microservices><fault-tolerance><resiliency>,nodejs server recover crash,attempt build resilient fault tolerant service test intentionally crash undefined variable catch block call service locally nodejs http client intentionally error continue call service time error call service second time return microservice code intentional error code call microservice endpoint question approach nodejs server recover error subsequent call endpoint endpoint,0,49,0,0.0,0,2019-10-03T02:23:03,0.0
58234224,10738330.0,<spring><spring-boot><microservices><netflix-eureka>,configure multiple instance eureka server hardcode serviceurl,spring cloud doc configure multiple instance eureka server eureka client follow approach explicitly add hardcode multiple eureka server url comma seperate list spawn instance eureka server change client config add entry avoid,0,59,0,0.0,0,2019-10-04T10:04:58,0.0
58146120,12056615.0,<java><spring-boot><microservices><spring-cloud><netflix-eureka>,status registered instance change eureka dashboard,problem spring boot spring cloud eureka project config server connect git eureka server peer active profile peer dev port eureka server peer active profile peer dev port person managment client microservice localhost browser eureka server peer dashboard status person managment shutdown person management client refresh localhost status person managment status change read set shutte person management client person managment disappeare question preservation read change problem preservation mode turn renewal threshold configuration config server eureka server pear eureka server pear person management client,0,60,0,0.0,0,2019-09-28T12:03:11,0.0
58214815,11872687.0,<microservices><ber>,translate ber xer format xml text format,consume external rest service return response xer ber format translate response xml text processing service idea implement,0,16,1,0.0,0,2019-10-03T08:03:01,0.0
58171936,12144137.0,<java><microservices>,scale application cloud foundry fetch multiple time record database write multiple database,application fetch datum database write database scale instance application fetch record multiple write multiple time database,0,10,2,0.0,0,2019-09-30T16:36:10,0.0
58281753,8662097.0,<spring-boot><microservices><spring-cloud><netflix-eureka><spring-cloud-feign>,communicate microservice directly di,find multiple communicate microservice resttemplate webclient reactive stack feign client spring cloud eureka con resttemplate obvious hardcode service url feign client well repeat code create proxy controller annotation workaround target service controller dependency injection,0,32,2,0.0,0,2019-10-08T07:17:20,0.0
58253945,8609847.0,<spring-boot><domain-driven-design><microservices>,call method module microservice spring,module implement spring boot project call function module module simplest solution call rest client function wanna call api service requestmappe sake module call function internally module function call requestmapping directly service implement module read comment,0,37,4,0.0,0,2019-10-06T03:15:25,0.0
49625960,9202285.0,<spring-boot><jwt><microservices><netflix-feign><feign>,spring boot feign client send basic authorization header pass jwt token microservice,create microservice base project spring boot eureka server service discovery registration jwt authentication authorization authentication microservice jwt validation global method security implement controller inter microservice call feign client service main request service approver service approver service call main service invoke method accessible admin jwt validation process main request service side basic authorization header header pass jwt token approver service feign client approverservice code read header request debug filter print token console help pass jwt token microservice,0,1616,1,0.0,0,2018-04-03T08:55:19,0.0
49574595,7379995.0,<java><spring-boot><microservices><resttemplate>,microservice client springboot resttemplate class,client side microservice architecture build rest base client submit mine form datum piece code test code postman exception wrong hit micro service client save datum rest template base method exception,0,306,2,0.0,0,2018-03-30T12:37:30,0.0
49742964,1436313.0,<java><docker><spring-data-jpa><microservices>,scale micro service datum consistency issue,micro service call account responsible manage account service container scale replicas occasionally create account fetch service create account round robin null save saveandflush switch save flush help suggestion code account repo consume service layer rest api service layer redi cache well,0,61,2,0.0,0,2018-04-09T23:08:13,0.0
49601644,2248997.0,<authentication><microservices>,microservice authentication service basic auth,rebuild small static site generator microservice microservice write sourcefile server microservice render sourcefile microservice protect simple basic digest access authentication write sourcefile render microservice sure authentication strategy serverbase call render service writer service handing user basic auth credential php dedicated system user writer service clientbase call render service user browser successful writer service currently prefer clientbase strategy authentication hassle server integrity source rendered file depend work browser net connection,0,103,2,0.0,0,2018-04-01T19:05:22,0.0
49614351,9183903.0,<java><spring><microservices><hystrix><circuit-breaker>,hystrix circuit breaker trigger event spring micro service implementation,identify hystrix move circuit open half open state sleep time interval hystrix trigger event state change happen hystrix property trigger event approach code example helpful nikhil,0,394,2,0.0,0,2018-04-02T15:48:35,0.0
49706750,6872018.0,<java><spring-boot><microservices><spring-cloud>,exception thread main java lang nullpointerexception javainuse controllers consumercontrollerclient getemployee consumercontrollerclient,reference customization eureka server fine add employee producer fine application property bootstrap property employee consumer error strong textconsumercontrollerclient error springboothelloworldapplication,0,24,3,1.0,0,2018-04-07T11:09:58,0.0
49706151,9483730.0,<java><spring-boot><microservices><hazelcast>,embedded hazelcast member time join cluster restart,build node hazelcast cluster spring boot integration configuration follow hazelcast port auto increment true outbound port multicast enable false tcp enable true member change property initially join start restart node min join loop hole configuration join instantly startup,0,258,8,0.0,0,2018-04-07T10:01:07,0.0
47648009,6320617.0,<node.js><database><amazon-dynamodb><microservices>,datum microservice dynamo db,develop micro service architecture service dog event dog participate dynamodb current structure dogid list type basically list dog participate event event dog participate datum combine microservice dynamodb support join good workflow dogname dogprofilepic dogage dogprice event eventname eventdescription eventdate good achieve keep number read write operation minimum avoid handling datum application advance,0,85,6,0.0,0,2017-12-05T07:11:56,0.0
58819586,2756760.0,<spring-boot><mocking><microservices><void>,mock call microservice void method,intend write method whichis invoke message queue rabbitmq method void method annotate internally call void method class property listener class work pretty good call method communicate microservice provide fact message receive rabbitmq change crm perform test mock mock call microservice structure,0,8,0,0.0,0,2019-11-12T13:16:17,0.0
58929171,3839455.0,<microservices><netflix-eureka>,eureka client register multiple eureka server issue,case register microservice multiple eureka server zone defaultzone case eureka client register second,0,8,0,0.0,0,2019-11-19T08:01:01,0.0
58922520,9297554.0,<microservices><orchestration>,service choreography handle behavior multi tenancy,confusion understand service choreography orchestration appreciate program approach scenario multi tenant system ordercreated event fulfillment service listen fulfill order rule change scenario base tenantid fulfillment happen order verify orderverification service tenant fulfillment happen ordercreated tenant ordercreate event orderverificationservice verifiedorder event fulfillmentservice tenant ordercreate event fulfillmentservice scenario choreography fulfillment service logic listen process event base tenatid tenant specific logic scatter service orchestrate build tenantspecific orchestration pipeline common place,0,10,0,0.0,0,2019-11-18T20:36:26,0.0
58870055,6726798.0,<c++><visual-studio><microservices><casablanca>,cpprestsdk casablanca compatibility micro services guidance,find compatibility info rest sdk casablanca find cpprestsdk unable find compatibility info future version cpprestsdk compatible version info secondly port ton code micro service gradually vast majority code usable good separability display logic business logic cpprestsdk micro service framework well easy port ton asp net core recommendation,0,13,0,0.0,0,2019-11-15T03:46:29,0.0
58777981,3804873.0,<tomcat><microservices>,tomcat multiple microservice configuration,host microservice call webservice war sure clear war service call service war setup tomcat basic config war war call ab stress test happen war slow tomcat start respond guess tomcat model thread request basic config thread request call limit request worst issue request request queue request queue queue shuffle cos wait deadlock resource solve idea deploy tomcat call servlet suspend resume webclient spring return deferredresponse callable mono object springwebclient method work pretty fine major rewrite code careful planning async call problem call aysnc request handle threadpool netty threadpool webclient stuff onsuccess developer start thing response query db async bottleneck case netty threadpool select socket stuff sized standard spring netty react spawn thead core method work deploy effort planning microservice architecture happy share option hint good practice scenario terrible english,0,15,0,0.0,0,2019-11-09T09:31:11,0.0
58887971,10288039.0,<spring-boot><docker><microservices><manifest><java-11>,manifest java find docker image,,0,16,0,1.0,0,2019-11-16T05:47:34,0.0
58916187,11802739.0,<spring-boot><microservices><jhipster><jhipster-registry>,jhipster version uaa server microservice gateway,jhipster create three project uaa server microservice getaway download source registry github register uaa project microservice gateway project problem call uaa getaway microservice api swagger registry error error invalid token error description convert access token json basepath services uaa uaa dbd cfcf console access token authentication failure myapp aop log loggingaspect exit mycompany myapp repository customauditeventrepository add result null hibernate insert jhi persistent audit event event event type principal event hibernate insert jhi persistent audit evt datum event hibernate insert jhi persistent audit evt datum event,0,16,0,0.0,0,2019-11-18T13:55:00,0.0
58804154,7298643.0,<java><ssl><https><microservices>,trouble ssl certificate,build microservice micronaut access wix website microservice http access front testing purpose service locally front call follow error currently client server ssl certificate sure solve issue help apprecaite,0,19,0,0.0,0,2019-11-11T15:22:52,0.0
58788210,993822.0,<spring-boot><rabbitmq><microservices>,consume multiple message queue streamlistener rabbitmq,queue produce message rabbitmq queue consume message consumer service base action queue create user add item create user delete ui consume message streamlistener consume message streamlistener consumer class consumer application property consume message depend action consumer class streamlistener,0,20,0,0.0,0,2019-11-10T11:30:18,0.0
58880319,12377737.0,<java><rest><spring-boot><post><microservices>,call microservice api resttemplate streamingresponsebody,problem rest call spring boot call api microservice create pdf client class call pdf api exception async taskexecutor time kind problem doubt understand stream close attach debug immage,0,21,0,0.0,0,2019-11-15T15:40:03,0.0
58864846,2715856.0,<networking><rabbitmq><microservices><message-queue>,software communication architecture recommend decoupling java microservice,develop software solution local processing unit nvidia jetson nano solution microservice process microservice write perform computer vision task microservice deep learn network microservice write java consume event report microservice recommendation communication layer microservice requirement decouple microservice aware communication layer handle event second support client communication layer java rabbitmq queue system suggestion alternative system file system write lot code manage library advance,0,24,0,0.0,0,2019-11-14T19:58:53,0.0
58892667,4291750.0,<docker><tcp><docker-compose><microservices><nestjs>,talk nest js microservice tcp docker compose,code documentation find expect behavior receive response app docker response app docker inside docker problem app work inside docker port pass correctly hybrid app request internally pass tcp micro service work behavior inside docker container port expose port,0,34,0,0.0,0,2019-11-16T16:11:07,0.0
58763972,9250232.0,<spring><spring-boot><microservices><opentracing><jaeger>,trace controller level log spring boot jaeger configuration,language java framework spring boot tool jaeger follow configuration trace log controller level log trace hibernate query execute trace log service repository level log application log reporter class appender class main spring boot class application property pom xml,0,46,0,0.0,0,2019-11-08T09:39:13,0.0
58891134,12382834.0,<spring-boot><microservices>,datum database spring boot application sartup,prepare microservice spring boot datum database prepare list compare request json database happen request database change rarely mechanism read datum database spring boot startup keep db list application scope request access db list comparison prepare list spring boot eventlistener applicationreadyevent unable datum db code help appreciate help satish,0,12,1,0.0,0,2019-11-16T13:17:22,0.0
58790389,139340.0,<docker-compose><graphql><microservices><code-generation>,good share graphql schema code generation,microservice project client drive schema approach lazy code generate angular frontend tool backend plugin generate code work develop sync front backend model easy docker backend frontend separate image compose share schema turn challenge currently symlink schema frontend backend work fine application natively command ide work docker command git submodule mono repo avoid script copy schema file client server directory imply knowledge edit schema file inside module symlink kinda neat approach trade good practice aware completely wrong kind thinking generate frontend backend code,0,19,1,0.0,0,2019-11-10T15:59:46,0.0
58767679,343436.0,<architecture><dependencies><microservices>,micro services entity identity dependency,micro service architecture communicate service keep concept micro service datum sovereignty state event base communication preferable resiliency concept collide follow example micro service newsletter service micro service email delivery service service newsletter deliver order complete task service clearly dependency message create service event contract define queue recognize async response success failure service attach identity message service relay reverse dependency avoid follow sense provide well separation service synchronously invoke message contract define return identity store response indicate operation queue handle return queue topic response publish queue topic service publish event service operation internal queue resiliency case service temporarily unavailable message deliver identity message fine identity service interested hear thought approach,0,24,1,0.0,0,2019-11-08T13:39:55,0.0
58794740,11966626.0,<maven><spring-boot><microservices>,call service microservice,maven spring boot project include module image create module service lot module feignclient create interface client call interface controller call single service call service funtion controller call service module module help,0,37,1,0.0,0,2019-11-11T02:08:33,0.0
58886923,627307.0,<java><performance><server><microservices><resiliency>,common technique java web server detect approach overload,period microservice predominant wonder common technique java web service detect overload start deteriorate cpu topic good heuristic win online resource point number cpu gc pauses network io wonder scientific study document case catch signaling,0,16,2,1.0,0,2019-11-16T02:08:32,0.0
58817731,9534538.0,<security><encryption><microservices><netflix-zuul>,exactly netflix zuul intercept request response,understand micro service architecture request response zuul api gateway directly hit micro service kind redirection request zuul zuul intercept http request air example micro service communicate micro service zuul encryption decryption filter write zuul request plain text micro service zuul zuul micro service encrypt request case exactly zuul help security request plain text http,0,25,2,0.0,0,2019-11-12T11:26:23,0.0
58742595,12335812.0,<spring-boot><microservices><netflix-eureka>,download resource,pom xml,0,41,2,0.0,0,2019-11-07T05:41:39,0.0
58909290,10454736.0,<node.js><kubernetes><microservices><apollo-server><express-graphql>,connect individual microservice expose graphql application gateway aggregation layer,consideration microservice architecture microservice expose graphql write application gateway layer nodejs expose kubernetes ingress rule help follow context call service mention application gateway dependent independent graphql component keep application gateway aggregated schema definition file call resolver,0,50,2,0.0,0,2019-11-18T06:50:36,0.0
58852422,12130018.0,<maven><spring-boot><amazon-ec2><spring-security><microservices>,change key pom xml ec instance,springboot app deploy cloudfoundry setting configuration locate ec instance pom xml change portion configuration file service ip point location change recompile springboot app service restart application service,0,22,3,0.0,0,2019-11-14T08:32:19,0.0
58771079,1085459.0,<java><microservices><jhipster>,build ui change jhipster microservice application,create microservice application jhipster service change directory change content typescript file unable include change docker image build command command build change folder change directory command build ui change,0,28,3,0.0,0,2019-11-08T17:13:11,0.0
58871110,7171265.0,<multithreading><microservices>,monitor thread instance instance service microservice architecture,service multiple instance service thread pool async job service service initiate job service rest call rest call receive instance service whichever instance receive instance thread create job execute job job service rest call service request instance service request instance service job initiate action work kill thread job problem request instance service handle scenario microservice architecture,0,28,3,0.0,0,2019-11-15T05:54:50,0.0
58918851,10997699.0,<java><spring><jwt><microservices>,jwt authentication database access,jwt create microservice introduce jwt authentication website issue token check correctness token connect second site db approach appropriate good user datum follow payload token code websecurityconfig jwttokenfilter jwttockencreator jwtconfigurer usercontroller eclipse error wrong call user adduser add user happen user service call function responsible add user work correctly refer directly rest api work problem happen mistake remind learn understanding,0,72,3,0.0,0,2019-11-18T16:19:21,0.0
58858597,9789035.0,<java><spring-boot><transactions><microservices><orchestration>,api gateway auth server microservice,advance day play microservice spring boot recomendation microservice auth server jwt generate token base secretkey microservice return token user pass system endpoint register user provide username password microservice manage entite user rol second microservice kind core owner pet manage relationship owner user explain owner entity info owner owner username owner street relation user owner onetoone database separate relation colum user ownerid owner userid authserver endpoint set ownerid userid problem build api gateway work orchestrator front app call register user send generic dto user owner plan front invoque api gate recive generic dto user owner info send rest request authserver send newuserdto username pass compose api gateway info receive genericdto receive reponse send request core create owner needed ownerdto ownername ownersurname owner street dto create api gateway whith generic info info return create user fine send request set ownerid de userid cross transsaction recommendation deal apigateway compose response user owner create front responseuserandownerdto question well explain apigateways zuul ¿ recomend simplify coding code set post endpoint api gateway send rest request example feing resttemplate well solution code dependency easy avoid recomentation owner inside authserver microservice good regard,0,24,5,1.0,0,2019-11-14T14:04:58,0.0
46945655,3927150.0,<spring-boot><microservices><jsr>,response spring micro services jsr validation,jsr validate request object rest controller validation work fine response code pojo class validator class,0,26,2,0.0,0,2017-10-26T04:02:34,0.0
46824600,4609725.0,<java><spring><spring-boot><microservices><spring-cloud>,refreshscope propertysource,refreshscope apply class reload property yml file dinamically work configuration class annotate propertysource refresh external configuration file refreshscope work configuration propertysource configuration javadoc annotation provide convenient declarative mechanism add propertysource spring environment conjunction configuration class refreshscope move external property application property remove propertysource configuration annotation filepropertie class exist work approach move property,0,449,2,0.0,0,2017-10-19T07:23:04,0.0
46764407,6507527.0,<java><mongodb><rest><microservices>,mongodb state integer,write rest web service object mongoclient rest web service test postman follow response kindly help,0,151,3,0.0,0,2017-10-16T06:47:32,0.0
46893497,6053536.0,<go><microservices>,test httprouter controller,write test microservice write httprouter answer relevant controller microservice help greatly appreciate createurl function lot,0,156,7,0.0,0,2017-10-23T15:51:01,0.0
50831854,2865528.0,<java><api><spring-boot><ssl-certificate><microservices>,springboot access cacert file local classpath manifest yml,snap manif file jdk add debug option well reason error hit application system http error pcf,0,360,2,1.0,0,2018-06-13T07:53:08,0.0
50842531,3016392.0,<spring><webclient><microservices><reactive>,connection time issue consume rest api service,develop microservice reactive webflux spring webclient consume rest api service work fine personal network connection time error consume rest service microservice work office suspect firewall proxy office network disable window firewall machine work advise issue follow code snippet error,0,589,3,0.0,0,2018-06-13T16:55:53,0.0
50823725,3701985.0,<spring-boot><routing><microservices><netflix-zuul>,content base dynamic route zuul,work micro service base architecture include spring boot eureka zuul key level problem follow service api service post service api service post application yml zuul route service path api service path api common path common endpoint write filter input common endpoint deduct base post request enroute request service service stuck work google search check people problem find solution filter figure forward request service response send common endpoint wrong proceed hardcode url service guide thing discoveryclient instance setroutehost method context throw zuulfilter exception url proper common endpoint append url service discoveryclient stupid thing mind resttemplate request response context response work request forward service receive response help appreciate,0,554,4,0.0,0,2018-06-12T18:37:50,0.0
50866573,186820.0,<.net><azure><microservices><core>,microservice compile eshoponcontainer project,compile project eshoponcontainer heap error compile instal docker signup free trial website instal error error trim miminal error error,0,392,6,0.0,0,2018-06-14T22:05:09,0.0
52534983,647991.0,<docker><nginx><docker-compose><microservices>,single nginx project,follow setup web django application web flask application nginx web frontend serve web web web web complex project service db redi manage docker docker compose annoy current setup nginx project setup serve service tight coupling nginx project web web project example static asset web web copy nginx project redeploy time collect static asset config enable site nginx project acually web web project certificate nginx project respective project originially service project decide service machine conflict appear wasteful nginx instance single machine people solve kind issue link idea structure nginx project frontend project,0,52,2,0.0,0,2018-09-27T10:32:31,0.0
52682938,3554193.0,<java><spring><docker><tomcat><microservices>,docker tomcat response start,simple war file docker container build dockerfile build command deploy command time work good container docker tmc ctrl docker start tmc work main response properly tomcat receive,0,168,2,1.0,0,2018-10-06T20:10:06,0.0
52696134,1385883.0,<database><architecture><microservices><sql-insert>,query update requestobject db spring microservice base application,clarification good practise follow update datum db spring microservice base webapplication scenario webapplication user send request ui process request backend request microservice update request response object table database approach update datum databse query insert request object receive microservice process request processing receive response single insert database request response object avoid multiple db call advise help appreciate,0,15,4,0.0,0,2018-10-08T05:53:44,0.0
52570149,192648.0,<http><ssl><go><microservices>,mass scan ssl certificate hang golang,write microservice validate ssl certificate url basically combine thing implementation ssl checker approach spawn worker api call practically launch small service accept list url validate ssl certificate problem request ssl checker start freeze long time payload log set urls time timeout set pass save day thread hang syscall application peacefully wait userspace time properly issue open file descriptor number reasonable memory cpu consumption pretty low appreciate help,0,65,6,0.0,0,2018-09-29T16:05:49,0.0
52651358,6464983.0,<docker><asp.net-core><rabbitmq><microservices><masstransit>,masstransit docker request response model request consumer exception host find respond,masstransit rabbitmq encounter problem deal rabbitmq server docker small microservice docker container consume event window service host machine task send event masstransit request response model microservice interesting thing event arrive consumer suppose response context respondasync consume method exception model message microservice problem working properly queue yaml microservice bus config windows service windows service connect microservice inside container connect window service fire event finally microservice catch event autofac register requestclient windows service help debug share opinion structure proper http send message client machine microservice environment convert bus gateway approach suitable,0,234,7,0.0,0,2018-10-04T16:18:50,0.0
52661686,7888839.0,<spring><eclipse><microservices>,install spring st microservice plugin eclipse neon,install spring st microservice plug eclipse neon follow error,0,83,13,0.0,0,2018-10-05T08:43:37,0.0
45994603,7567792.0,<azure><elasticsearch><microservices><azure-service-fabric><telemetry>,infra level telemetry micro service application build ms azure service fabric,work micro service application build ms azure service fabric gather infra level telemetry cluster node real time create power bi query prepare chart telemetry power bi dashboard oms high cost hope elastic search tool fine advance application insight log application capture infrastructure detail detail downtime node cluster location cluster micro service host amount traffic cluster,0,61,3,0.0,0,2017-09-01T06:44:03,0.0
45973570,4479594.0,<spring-boot><microservices><hystrix>,hystrix netflix issue,follow property hystrix implementation add code microservice generally fail fallback method add understand three sense time limit hystrix consider failure calculation percantage failure happen fallback picture number request volume atleast mention timeinmillisecond hystrix picture provide seperate method add hystrix manage work expect,0,172,3,0.0,0,2017-08-31T05:08:10,0.0
39617025,2641913.0,<java><web><microservices><decoupling>,decouple module java web application,rumble microservice start alternative decouple module network communication difficulty search lightweight easy method idea communication solution web container interesting solution container support good socket unix domain socket lightweight cost complexity big ball mud module import spring contexts soa microservice service watherver http communication middleware messaging communication jms amqp file slow remotely easy manage communication database pipe pipe neat solution scale osgi question scalable solution keep module decouple allow easy adoption preferably network overhead interface java module invoke hidden implementation endpoint locally expose tight dependency good project architecture keep thing separate mandatory separation time growth project tightly couple fragile picture place decouple place,0,314,2,0.0,0,2016-09-21T12:48:32,0.0
39669522,511837.0,<microservices>,call nested microservice http api,microservice method microservice happen call bump issue big traffic request time server register thread call code code call freeze thread handle pattern deal situation btw personally allow call nest call context decision mine,0,80,4,0.0,0,2016-09-23T21:04:06,0.0
37809567,4511560.0,<docker><microservices><lxc>,microservice communicate implement docker,prefer communication microservice restish protocol url base communication top http docker container network base environment container process http request response communicate container container java application implement jax rs java api restful web service container understand http request response container node js implement rest api node js,0,818,5,1.0,0,2016-06-14T10:35:35,0.0
37904419,1648762.0,<api><flask><frontend><backend><microservices>,design api drive web component good pattern,question design api frontend component example change model field backend propagate frontend change model definition additional field loosely couple backend frontend question sequence pattern work big project scalable solution api driven micro service base project conflict multiple team work kind project good cache api frontend component definition,0,88,2,0.0,0,2016-06-19T06:02:02,0.0
43536377,0.0,<node.js><npm><microservices>,implement servicediscovery mechanism node js,three microservice sender receiver api gateway node js implement sender receiver api gateway register discovery clint sender microservice request discovery client receiver api gateway sender call receiver microservice api gateway microservice picture newreceiver sender call newreceiver port api gateway implement follow error service register advance,0,84,2,0.0,0,2017-04-21T07:22:55,0.0
43570218,0.0,<cassandra><jhipster><microservices>,error jhipster microservice gateway cassandra database,execute command yo jhipster attempt create microservice gateway database cassandra create entity book field publishingdate execute command mvnw order gateway error note jhipster registry separately instal cassandra error solve,0,148,4,0.0,0,2017-04-23T10:53:39,0.0
50130559,1443149.0,<microservices><development-environment>,performance issue local dev environment,large project large set micro service work locally computer barely handle ide mysql mongo inconvenience block add micro service practice work kind environment,0,36,4,0.0,0,2018-05-02T08:46:48,0.0
50210869,6123226.0,<java><spring-boot><microservices><onion-architecture>,port adapter onion architecture domain persistence application,microservice application presumably port adapter onion architecture layer layout domain application infrastructure web application exchange datum web infrastructure layer example object post web layer object send post inventory infrastructure layer processing application layer web layer dto sense domain layer follow transformation web dto map domain object process application layer map infrastructure dto send inventory,0,123,7,0.0,0,2018-05-07T09:23:29,0.0
50147952,1826788.0,<architecture><microservices>,microservice architecture deployment spf single point failure,deploy microservice architecture production env service facade layer facade layer call service datum aggregate generate final result service call rarely call single point failure decide box high server lvs load balancing host facade layer request facade load balance box host service box service box haproxy instance facade layer call service load balance box ha active facade layer box passive facade layer differnt box question allow service call separate haproxy box,0,103,10,0.0,0,2018-05-03T06:02:03,0.0
53668458,15441.0,<microservices><stateless>,benefit delivery workflow stately child microservice library,start microservice great benefit delivery workflow enable align business function delivery cadence business change cadence move faster impact unit easy test child microservice service face user call parent service web application people talk stateless microservice intermediary service pass datum perform function hold microservice consumer point view difference package library call stateless service add point view enable computation data pass stateless microservice stateless hold datum question benefit delivery workflow stately child microservice library,0,8,0,0.0,0,2018-12-07T11:16:30,0.0
53686219,1649971.0,<rest><architecture><microservices>,enforce datum notification pattern microservice,hub speak architecture node speak expose interface list central server interface update node call node interface central server call node well enforce pattern call result datum notification api call central server central server provide pipeline change system idea ideal originally create test call node valid update field await call flawed central server knowledge proper call node method knowledge live api test node node data model complex good solution enforce call result data notification,0,24,0,0.0,0,2018-12-08T19:36:09,0.0
53822456,4527149.0,<spring-boot><jwt><microservices><netflix-eureka><netflix-zuul>,access protect resource microservice architecture api gateway accesstoken spring boot,build micro service architecture spring boot netflix eureka zuul api gateway follow service authentication service register eureka api gateway eureka service registery reservation service access reservation service service api gateway resource protect security step access token authentication service authentication service enter public key resource server reservation service access protect resource direct url reservation service work access api gateway throw unauthorized guild rid issue paste api gateway yaml property note comment detail clarification,0,75,0,0.0,0,2018-12-17T20:21:24,0.0
53714787,7249427.0,<php><docker><nginx><microservices><devops>,php fpm nginx single image crash,service write php cluster docker stack php php fpm docker nginx rabbitmq redi db local edvelopment problem share volume service nginx production bad approach build image php fpm nginx inside php fpm crash error dockerfile nginx config service supervisord config main purpose dpn volume code nginx php fpm container work alongside,0,193,0,0.0,0,2018-12-10T22:40:28,0.0
53815239,5398550.0,<microservices>,micro services architecture performance heavy,monolithic java ee application spring mvc spring jdbc deploy single war application refactore partially accord micro service architecture ui deploy application war service rest service application war file measure execution time metric log file observe monolithic application fast micro services architecture application case statistic application advise approach pro con,0,19,1,0.0,0,2018-12-17T12:26:57,0.0
53755943,10784362.0,<python><rabbitmq><microservices><rpc><pika>,rabbitmq low perfomance high queue amount,project base microservice arcitecture rpc pattern tornado pika command worker create queue command route result number queue grow performance drop work rps delay user request worker answer problem nameko nameko identical realization code tornado handler service connector test worker class greetingservice greeting service test redi base messaging works untill rps wrong messaging system rpc pattern rps stable work,0,45,1,0.0,0,2018-12-13T06:14:16,0.0
53779574,2419434.0,<maven><microservices><spring-cloud><spring-cloud-config>,build spring cloud config server native file,build deploy spring cloud config server deploy config server copy property profile directory path maven plugin,0,30,2,0.0,0,2018-12-14T12:14:02,0.0
53757438,7300643.0,<asp.net-core><microservices><azure-service-fabric>,reach service fabric service,create service fabric application local development machine statless service service service endpoint static port assign service net core web api host kestrel deploy application local cluster acess service follow url access reverse proxy url ide reach service url,0,74,2,0.0,0,2018-12-13T08:06:56,0.0
53749352,7700878.0,<java><maven><microservices><nexus>,good method analyze external nexus dependency lift shift migration move,carry lift shift migration functionality monolithic java spring application standalone deployable snag project pull reference maven nexus external api highlight area codebase dependent code external project large lift shift identify area external figure good dependency play intellij dependency tool analyze dependency class project well tool identify external class api service app depend,0,18,3,0.0,0,2018-12-12T18:38:07,0.0
53634033,10690591.0,<docker><microservices><cumulocity>,cumulocity store docker image support microservice provider,create microservice cumulocity java python error result faced problem suggestion,0,49,3,0.0,0,2018-12-05T13:59:07,0.0
56889705,2922951.0,<deployment><build><module><microservices><apache-flink>,apache flink application module,application module main application driver operator implementation configuration moment build fat jar module party dependency continue develop jar grow grow till heavy build time long recommendation library dependency application flink capability dynamically update party jar build application roey,0,10,0,0.0,0,2019-07-04T14:07:02,0.0
56875457,4468527.0,<laravel><microservices><backend><lumen><micro-architecture>,replace corresponding micro service luman laravel,develop micro service base application independent service employee payroll evaluation store datum payroll evaluation check existence employee employee service display payroll evaluation datum employee uuid type replace employee employee micro service micro service table join solve work,0,18,0,0.0,0,2019-07-03T17:42:01,0.0
56869403,7723137.0,<java><spring-boot><microservices><netflix-eureka><feign>,microservice version microservice,suppose microservice microservice write java springboot version app version project version build build property version property file registry eureka service discovery version feign client thing pointer big help feign success eureka property luck version,0,19,0,0.0,0,2019-07-03T11:45:54,0.0
56872985,8398143.0,<spring-boot><microservices><netflix-zuul>,session attribute netflix zuul,zuul api gateway micro service base application session attribute keep request request issue client swagger micro service request execute web service attribute current session suppose perform treatement base session attribute problem notice second request execute find clean session attribute zuul share session request client,0,22,0,0.0,0,2019-07-03T14:59:29,0.0
56907322,796295.0,<command-line-interface><microservices><spring-cloud><netflix-eureka><spring-cloud-netflix>,microservice register eureka jar command ide,good command bring multiple instance microservice listen port cli multiple instance microservice spring boot application command microservice ide follow output console instance sba register eureka standard dserver port option sba port number instance sba work instance start command register eureka ide change application property file server port property add eureka port property option jar time number micro service instance register eureka instance st ide,0,26,0,0.0,0,2019-07-05T17:41:42,0.0
56823424,4969916.0,<spring-boot><microservices><spring-cloud-feign>,request path dynamic feign clinet,feign client call service example call pass static path path dynamic example pass url dynamic requestmappe path dynamic,0,39,0,0.0,0,2019-06-30T08:19:33,0.0
56906516,324879.0,<microservices><nats.io>,request response rest microservice communication nat,concept request reply loosely couple communication channel replace traditional rest communication microservice concern base fact state doc multiple subscriber subject call response fastest caller behavior hardwire possibility change option nat select subscriber round robin approach send request consider example completely nat scope purpose achieve properly nat edit find queue group feature request reply communication subscriber queue group si call request great question remain concept fine general,0,43,0,0.0,0,2019-07-05T16:25:32,0.0
56882001,1641352.0,<microservices><graphql-java>,pass param graphqlqueryresolver graphqlresolver,graphql java tool receive param pass query access param hold param follow schema,0,57,0,1.0,0,2019-07-04T06:41:24,0.0
56855619,3511426.0,<spring-boot><microservices><performance-testing><load-testing><nock>,mock server load testing,legacy monolith application break microservice monolith application three endpoint flow user hit create verify dependent call activate endpoint expose microservice microservice call endpoint validate expose legacy application return response user response time legacy application constant good approach mock legacy application validate endpoint approx delay load testing avoid initial three rest call legacy application setup phase directly hit microservice validate endpoint understand pro con mock server performance test,0,33,2,0.0,0,2019-07-02T15:21:41,0.0
56851572,11727410.0,<microservices><circuit><ocelot>,ocelot qos break circuit number exception,carry poc ocelot gateway microservice architecture gateway perform route task uptil provide qos service held configuration ocelot json circuit breaker break circuit duration configuration set ocelot json file follow specific route work fine timeout issue break circuit route respond exception case break circuit exception time route call configuration require add nuget package ocelot ocelot provider polly add startup cs file help follow ocelot documentation implement,0,38,2,0.0,0,2019-07-02T11:36:19,0.0
56768870,3000569.0,<rabbitmq><microservices><cqrs><easynetq><rawrabbit>,generic subscribeasync open generic type easynetq rawrabbit,write belong rawrabbit code easynetq code rawrabbit belong code error complete implement error,0,494,2,0.0,0,2019-06-26T08:53:28,0.0
56740539,617157.0,<api><google-cloud-platform><microservices>,good api shadow gcp,transition microservice implementation order properly test production shadow request production service compare result log discrepancy good tool box manage nginx prefer box solution google cloud endpoints apigee,0,14,3,0.0,0,2019-06-24T16:21:59,0.0
56735837,260511.0,<java><microservices><message>,manage transaction microservics env,microservice env multiple service service flow create correlationid cid pass service future tracing purpose understand service create additional eventid internally multiple issue damage deduplication mechanism deduplication mechanism check cid arrive min call dedup throw service call service multiple time flow dedup throw valid message arnt real dedup create internal eventid insert record datasource mysql great example architecture,0,24,3,0.0,0,2019-06-24T11:44:13,0.0
56745988,8838331.0,<microservices>,ensure datum consistent multiple service handle model,service jobservice companyservice service location table location table eventually consistent imagine record location table datum jobservice companyservice jobservice adjust moment message publish job company queue message receive companyservice adjust companyservice moment message publish company job queue jobservice receive datum change record concurrently companyservice receive datum change record synonymous record location table jg jobservice companyservice datum solution orchestration sagas event store api composition app build long time ago datum modifieddate versionid check puzzle solution service datum consistent solution easy handle issue,0,24,4,0.0,0,2019-06-25T02:15:47,0.0
56795815,1113542.0,<http><microservices><wiremock><wiremock-record>,wiremock recording context microservice client call server,project microservice case test microservice independently external service scenario microservice main number crunching microservice targette test independently external service scenario actor request perform action datum perform complex logic return response actor test independently intend wiremock record request response microservice understand wiremock documentation record feature wiremock unable proxy target service respect client request host port wiremock turn forward actual service request response record case microservices service random port actual scenario address service registry manually start wiremock proxye target service reproduce request wiremock turn proxie respect service record desire request response target microservice,0,33,4,0.0,0,2019-06-27T17:09:20,0.0
56849642,179032.0,<java><microservices><jhipster><netflix-zuul><jhipster-registry>,access control policy external api jhipster,add external api zuul route jhipster gateway test postman authentication secure external api authentication provide jhipster advise code add zuul route,0,36,5,0.0,0,2019-07-02T09:46:18,0.0
56736814,9927181.0,<spring-boot><docker><docker-compose><httprequest><microservices>,send http request docker container,send http request container connection refuse nested exception java net connectexception sure error invalid address check issue dockerfile mainapp send request request secondapp dockerfile docker compose yml,0,79,7,0.0,0,2019-06-24T12:39:25,0.0
57738418,2659962.0,<java><microservices><netflix-eureka><pcfdev>,execute request server error pcf,cloud foundry deploy application application service registry microservice intercommunication application pcf bellow error problem,0,13,0,0.0,0,2019-08-31T13:29:51,0.0
57747418,2639353.0,<spring-boot><microservices><netflix-eureka><service-discovery>,setup service discovery properly specific secure environment,production environment specific security rule local http request land port tls protocol service freely call service host unencrypted http consider serviceb host call servicea setup system case follow serviceb query eureka list instance servicea serviceb address previous call fail serviceb send request nginx terminate tls forwards request host setup eureka server client scenario interpret documentation correctly eureka allow register address instance advertize client nginx eureka compulsory well solution,0,13,0,0.0,0,2019-09-01T15:48:00,0.0
57809255,6465635.0,<c#><continuous-integration><gitlab><microservices><gitlab-ci>,execute integration test micro service gitlab pipeline,suggestion best handle scenario gitlab component componenta componentb component separate gitlab repository pipeline integration test execute deploy traffic create separate gitlab repo test trigger pipeline componenta componentb pipeline execute test well find,0,16,0,0.0,0,2019-09-05T16:01:55,0.0
57918477,812032.0,<java><spring-boot><https><microservices>,enable communication spring microservice sign sign certificate,setup microservice core core front communication happen api shorten core shortener communicate internally scenario core connecter https port http port core sign certificate apply shortener hand certificate api accessible communication core shortener fine shortner core response null connection refuse resttemplate host internal subnet bypass certificate ensure call fine,0,17,0,0.0,0,2019-09-13T06:39:57,0.0
57927399,1944160.0,<dns><microservices><consul><dnsmasq><envoyproxy>,consul default dns,consul default dns vm environment vm base environment grow requirement container base services hybrid cloud environment curious consul sidecar data plane envoy proxy service good consul dns server vm base environment,0,19,0,0.0,0,2019-09-13T16:36:59,0.0
57920712,2568741.0,<microservices><opentracing><jaeger>,time difference microservice trace,service service service runne host service invokes service rabbitmq service finishs job ms trace process jaeger three trace span shold real life follow span graph find reason behavior time difference host ms host sync time host solve problem,0,24,0,1.0,0,2019-09-13T09:17:42,0.0
57844919,8817285.0,<scala><rest><apache-spark><playframework><microservices>,cluster apache spark rest play api,repos microservice apache spark play scala language don cluster spark example spark master local node complete distribute cluster note batch distribute ingestion spark repos,0,25,0,0.0,0,2019-09-08T18:59:30,0.0
57862914,3411861.0,<kubernetes><microservices><web-deployment><cdn><continuous-deployment>,synchronize deploy separate server full stack application,scenario react app bundle static asset deploy serve bucket cdn hand api deploy kubernetes frontend backend live repo change master build pipeline kick deploy application question synchronize deployment break change introduce understand easily deploy frontend app server kubernetes cluster serve frontend cdn,0,41,0,0.0,0,2019-09-10T01:25:05,0.0
57903775,869100.0,<django><django-rest-framework><jwt><microservices>,good choice django rest framework jwt ldap microservice authentication architecure,write microservice project auth backend choose service auth service work individual django service service service setting py set question service service code override authenticate interface class basejsonwebtokenauthentication verify token restful call service jwt decode handler locally secret key service,0,52,0,0.0,0,2019-09-12T09:33:12,0.0
57894982,5043766.0,<microservices><load-balancing>,load balance algorithm distribute request service,three micro services call service distribute load ratio micro service ribbon eureka feign spring boot distribute load round robin default algo ribbon help appreciated,0,16,1,0.0,0,2019-09-11T18:34:59,0.0
57820109,1350825.0,<microservices>,retry logic case microservice,write microservice push datum microservice second microservice data push handle approach start retrial thread exponential backoff time failure occur microservice architecture scenario instance retrial thread start kill lead retrial logic fail separate service retrial thing handle,0,18,1,0.0,0,2019-09-06T10:16:17,0.0
57910471,4424617.0,<swagger><nodes><microservices><integration><remote-server>,implement swagger nodejs application micro service machine,write node js application micro service remotely machine swagger setup api documentation single machine aggregate micro service swaggerui aggregation micro service single swagger follow setup swagger node js application work api current machine refer remote swagger file,0,24,1,2.0,0,2019-09-12T15:53:43,0.0
57917081,6364508.0,<spring-boot><apache-kafka><rabbitmq><apache-camel><microservices>,asynchronous split aggregate process microservice apache camel,build highly scalable orchestration service serve datum flow follow step receive flow trigger message queue rabbitmq kafka split message unknown advance divide message group gm advance accord custom logic group gi send message queue qi rabbitmq kafka group gi listen receive queue pi rabbitmq kafka collect correspond response message gi collection response bn queue pm aggregate message case response second step terminate move step previous step find apache camel compose message processor suitable synchronous processing asynchronous communication external service chance message loss duplication step wonder camel support address thesis issue handle experience hint camel design suggestion alternative well,0,29,1,0.0,0,2019-09-13T03:53:44,0.0
57911796,11929122.0,<jsp><microservices><aem><service-worker><progressive-web-apps>,integrate pwa progressiev web app aem,help integrate pwa aem basic idea appreciate website base micro service build aem implement pwa website guide,0,41,1,0.0,0,2019-09-12T17:26:40,0.0
57871948,2244907.0,<c#><docker><.net-core><docker-compose><microservices>,call container api container api docker compose,docker compose yml code call product api product info order api url exactly wrong connection refuse,0,47,1,0.0,0,2019-09-10T13:32:16,0.0
57924518,4951152.0,<c#><asp.net-core><authorization><microservices><asp.net-core-webapi>,permission base auth asp net core microservice,permission administrative panel permission assign group role create idea authentication authorization service login method jwt token microservice client store permit turn store static string authorization api api lose type security mess store permission separate microservice problem disappear problem register permission database assign role group course write service generally dynamically hang permission api method fundamentally wrong,0,58,1,0.0,0,2019-09-13T13:26:30,0.0
57896040,3821302.0,<python><microservices>,build microservice python microservice chassis pattern,tl dr library framework python solve common problem microservice architecture java developer create microservice spring boot solution apply key problem externalize configuration log health check metrics circuit braker distribute trace find python library boilerplate blog couldn find create great microservice python documentation install flask create route microservice course python library sqlalchemy connexion request flask library framework cover usual problem microservice create start project colleague solve issue everyday impossible exist solution microservice chassis pattern exist python,0,95,1,1.0,0,2019-09-11T20:01:49,0.0
57740894,10601430.0,<c#><asp.net><asp.net-core><microservices>,application execute exist asp net core api,asp net core api application identity application error debug console search unsuccessful forum solution,0,240,2,0.0,0,2019-08-31T19:02:23,0.0
57771631,7089716.0,<validation><authentication><authorization><microservices>,authentication datum validation microservice,currently work project graphql service care handle client request communicate microservice graphql service service expose client basically kind api gateway account wonder microservice require authentication authorization handler well input datum validation microservice access graphql service expose public risk perform mention task main graphql service simply care authentication authorization input validation proceed send request microservice step occur,0,26,3,0.0,0,2019-09-03T12:19:38,0.0
57802065,9667372.0,<java><spring><security><jwt><microservices>,send user credential zuul microservice module spring boot microservice,three microservice module auth server zuul server product server send user credential authorise auth server zuul server product server proudct server set token zuul server header product server null product server securitycontext microservice module user credential,0,46,3,0.0,0,2019-09-05T09:07:09,0.0
57767704,1846762.0,<c#><python><architecture><microservices><distributed-system>,easy analyze trace micro service architecture,background system distribute task queue service communicate queue system diagram outcome result performance depend multiple service diagnose failure performance issue hard task hard find chain problem tool provide map processing trace visual diagram find chain problem easily question find solution aim solve problem difficult install tool depend multiple tool zipkin jagger configure easy task documentation pretty narrow creator site wonder easy solution simple problem,0,37,4,0.0,0,2019-09-03T08:20:33,0.0
57843127,1237919.0,<design-patterns><kubernetes><microservices><distributed-computing><distributed-system>,combine microkernel pattern microservice,currently monolithic server application provide workforce management workflow feature monolith unwieldy split modular create microservice container kubernetes idea microkernel plugin architecture core platform hard code feature pub event bus help direct invocation call rest grpc workflow effective pattern combine microservice pattern microkernel plugin pattern configuration file define workflow hook,0,48,4,0.0,0,2019-09-08T15:06:32,0.0
57784417,11439547.0,<c#><asp.net><asp.net-web-api><microservices><cqrs>,connect eshoponcontainer database sql datum connect eshoponcontainer database local machine,microsoft sql server management ssm traye conect eshoponcontainer sqldatabse local machine connect credential share link link servername username password connect order database local machine check table column create create database advace,0,58,4,0.0,0,2019-09-04T08:27:40,0.0
57738315,10341584.0,<spring><spring-boot><microservices><spring-cloud>,unable add micro service eureka client,set sample micro service spring boot application post connect eureka server spre boot application task display task repo task status repo task display communicate retrieve datum problem task display link eureka server follow error task display deploy application java server link eureka,0,32,7,0.0,0,2019-08-31T13:15:01,0.0
55885437,10266882.0,<microservices><orchestration>,design choreography model,stack step create choreography model design microservice,0,15,0,1.0,0,2019-04-27T22:32:30,0.0
55907856,11424150.0,<microservices><spring-boot-actuator>,configure eureka server enableeurekaserver,enable eurekaserver code compile error verify dependency pom xml fine import org springframework cloud netflix eureka enableeurekaserver resolve,0,18,0,0.0,0,2019-04-29T17:02:36,0.0
55889849,169476.0,<cloud><microservices>,split tier web application micro service cloud native,currently work company build product current architecture tier web application front javascript mvc asp net business layer database layer asp net session application backgrounder service process document datum well send email customer iis instance background service well separate database company direction move cloud native micro service frank read lot article cloud native micro service start expert green light,0,26,0,1.0,0,2019-04-28T11:36:05,0.0
55748722,5265527.0,<database><rest><architecture><microservices>,place conversion logic integer label microservice architecture project,work microservice project project involve computate label dataset store database order optimize query database store label integer conversion logic map database enum problem rise store label database user add label exist original model store database currently microservice logic ms entrypoint microservice interact frontend rest api websocket conversion frontend send label modify detect frontend label human readible format integer ms detection microservice receive human confirm label store database expose rest api query database reason receive label format frontend send request save integer format opposite database query develop lookup logic single database collection serve porpouse bad practice violate database microservice pattern enum common library impossible label add time,0,27,0,0.0,0,2019-04-18T14:57:53,0.0
55749216,4189435.0,<docker><microservices><lumen><guzzlehttp><laradock>,curl resolve host laradock multiple project,build project microservice architecture local environment luman laradock project directory tree laradock microauthor microbooks single laradock project follow laradock work fine send request microservice postman send request guzzle http project exception php script help,0,49,0,0.0,0,2019-04-18T15:25:33,0.0
55884398,1957373.0,<jwt><microservices><basic-authentication><kong>,correct kong api gateway authentication process flow,api gateway internal api expose public web mobile read idea post kong authentication implement case basic auth username password combination process register user app event post kong admin username password combination app check correct credential correct send user datum base encode username password question user consumer ratio user api gateway consumer consider implementation openid jwt consumer user authentication party app case good tia,0,82,0,0.0,0,2019-04-27T19:58:28,0.0
55786427,3585050.0,<spring-boot><oauth-2.0><microservices><spring-security-oauth2>,refresh token work spring security oauth,gateway oauth client authorization server grant type thing work correctly uaa gateway resource server locate application yml gateway application yml grant type config authorization server config class authorizedgranttype second refresh token work follow error raise gateway application wrong thing configuration lose refresh token second gateway application automatically token refresh token happen,0,101,0,0.0,0,2019-04-21T20:19:10,0.0
55835988,9261138.0,<microservices><netflix-eureka><netflix-zuul><spring-cloud-netflix><service-discovery>,eureka server find context path client url,build poc micro service architecture spring cloud build microservice netflix eureka service discovery zuul proxy service register service eureka proxy request zuul proxy problem client homepage uri zuul provide client servlet context path manually append client context path url set homepage url status url healthcheck url client include context path help achieve,0,116,0,0.0,0,2019-04-24T17:58:18,0.0
55887509,3945085.0,<spring-boot><microservices><spring-cloud-feign>,feign client restservice call,spring microservice invoke rest service call feign client stock service retrieve kind stock api gateway invoke micro service stock dbservice microservice deploy port stockdb service application class follow follow rest endpoint invoke service follow error provide suitable solution,0,125,0,1.0,0,2019-04-28T06:09:33,0.0
55744085,11378386.0,<java><rest><microservices>,rest endpoint validation service,project request validator separate service future project retire service validate company object rule question endpoint service rest resource url company case sure,0,32,1,0.0,0,2019-04-18T10:26:33,0.0
55843939,5245472.0,<networking><kubernetes><microservices><istio>,istio virtual service match uri cookie work,apply virtual service yaml microservice code block curl uri traffic pod comment code block traffic direct pod image postman set,0,321,3,1.0,0,2019-04-25T07:24:43,0.0
55829516,6765460.0,<java><spring-boot><caching><microservices>,refresh cache microservice crud operation perform db microservice,microservice postgres database microservice directly interact database perform crud operation microservice start application cache database record update insert db microservice update cache microservice currently time base cache refresh update cache microservice hour well approach cache mechanism handle advance,0,95,3,0.0,0,2019-04-24T11:56:59,0.0
55888798,11422352.0,<oauth-2.0><microservices><jhipster>,jhipster gateway forward request access token microservice api,generate microservice application jhipster generate eureka registry zuul gateway uaa server authentication oauth authentication grant type password client send username password request access token return subsequent interaction thing create user access token send request microservice api access token gateway process filter forwards request microservice api expect return error authentication require debug spring oauth authenticationprocessingfilter block request expire token token allow request pass hit microservice api confused write custom code oauth work jhipster write filter check access token validate uaa jhipster document impression work box experience spring security jhipster apology stupid question,0,176,3,0.0,0,2019-04-28T09:18:59,0.0
55783796,11106032.0,<node.js><docker><microservices><moleculer>,node js child process exec bin sh docker find error,create micro service moleculer framework child process exec docker command shell bin sh docker find error absolute path error node version,0,240,5,0.0,0,2019-04-21T14:51:57,0.0
49274995,9490423.0,<python><microservices><deploying>,disadvantage user python source code directly,work vfx studio pipeline td python pyqt pyside integrate third party software maya nuke code include single project database rpc file server permission set distribute system share network drive git repository developer pull code local machine develop thing push vfx studio user local network user mount network drive read permission source code directly python libs pyqt sqlalchemy message numpy include project sys path append import user install python code disadvantage deploying method consider protect source code find monolithic application hard improve test microservice architechture reason user python code directly universal phenomenon vfx studio local network python code comple deploy problem elastic scheduling good practise disadvantage user python source code directly,0,73,2,0.0,0,2018-03-14T10:13:53,0.0
49247544,7055701.0,<microservices><spring-cloud><netflix-eureka>,spring cloud eureka register connection refuse,write microservice demo base wrong time source code follow eureka server pom xml application yml main class eureka client pom xml application yml main class visit wrong error detail follow material demo refer blog post modify code help,0,1663,2,0.0,0,2018-03-13T02:50:18,0.0
49161617,520151.0,<java><spring><spring-boot><connection-pooling><microservices>,spring boot central db connection multiple microservice application,hello stackoverflower work spring boot microservice follow scenario follwe service user services admin services financial service couple spring cloud app read config combination eureka discovery zuul gateway server scenario database legacy break multiple dbs microservice app true microservice concept app start instance service open connection db common database layer db app configure layer,0,452,2,0.0,0,2018-03-07T21:36:28,0.0
49247964,4105895.0,<http><authentication><oauth-2.0><authorization><microservices>,oauth grant service authorize http request server,remote function aw lambda design http request restful server protect oauth http api authorize reason retrieve valid access token lambda actual solution share jwt secret lambda function generate valid access token pretty sure elegance solution reason solution nice well,0,50,3,0.0,0,2018-03-13T03:40:39,0.0
49221539,1116842.0,<python><python-3.x><flask><microservices>,multiple flask process share resource,multiple flask process manage gunicorn serve frontend share resource data structure allow read update protect simple rw lock option regard communication web frontend datum structure follow library pyzmq hold problem service restart client expect datum implement method call de serialization additional layer pyzmq work issue actively develop force gevent pyro provide functionality single instance python thread service bit heavyweight socketserver pretty lowlevel long implement method call de serialization well option,0,106,3,0.0,0,2018-03-11T15:16:06,0.0
48516223,7934206.0,<rest><spring-boot><nginx><microservices>,distribute microservice nginx,microservice architecture three rest service monothlithic architecture convert three micro service seperate db stuff embed web server spring boot fat jar initially serve api reverse proxy map path doamin application three time microservice three port read api gateway implement single point failure diffence monothlithic implement help appreciate,0,79,3,0.0,0,2018-01-30T07:37:07,0.0
48394040,4376402.0,<spring><microservices><pivotal-cloud-foundry>,bind service pcf configuration,observe weird behavior service pcf bind service pcf micro service question configuration application spring interact bind service default spring automatically detect configuration,0,86,3,0.0,0,2018-01-23T04:04:40,0.0
48554808,554073.0,<microservices><netflix-eureka><netflix-zuul><spring-cloud-netflix><api-gateway>,detect rest call dynamically,create api gateway netflix zuul netflix eureka service registration service discovery microservice framework support case micro service expose rest call exist micro service upgrade expose rest call version url eureka dedicated springboot application zuul dedicated application application prop application yml file zuul config zuul route micro service zuul application yml support microservice config bring zuul add snippet config zuul route bring zuul start endpoint happen dynamically eureka dynamically detect micro service zuul sync eureka rest endpoint expose perfectly zuul api gateway suggestion add open source third party achieve helpful,0,108,3,1.0,0,2018-02-01T03:20:06,0.0
58629384,8860971.0,<angular><module><microservices>,angular submodule load dynamically application runtime,core angular application plan application load multiple angular project module specific directory process main application deploy client server add feature rely add project inside directory mention earlier project load dynamically main application add module folder help,0,12,0,0.0,0,2019-10-30T15:59:59,0.0
58622543,1319205.0,<transactions><microservices><event-driven-design>,cart checkout flow event drive design,commerce site amazon flipkart alibaba handle order payment processing realtime process synchronously asynchronously user happen synchronous fashion microservice example event bus event drive design communication microservice explain real flow handle microservice payment deduct amount user account block inventory item cart send confirmation email step single transaction synchronous flow easily handle case event bus handle slight delay event publishing consuming notify user payment validation fail stock unavailable advance,0,17,0,0.0,0,2019-10-30T09:46:35,0.0
58662915,4812170.0,<microservices><serverless-architecture>,serverless microservice bound context,redesign microservice aws lambda serverless develop spring boot define bound context find serverless microservice nanoservice nanoservice definition antipattern service fine grain question define serverless microservice bound context limitation serverless split bound context small service share model bound contexts logical challenge communicate contexts issue handle scenario datum nano service,0,17,0,0.0,0,2019-11-01T16:48:42,0.0
58737346,9145484.0,<kubernetes><microservices><autoscaling><reinforcement-learning><openai-gym>,build custom environment scale cloud vm openai gym,reinforcement learning build custom cloud environment openai gym start suggestion appreciate,0,18,0,0.0,0,2019-11-06T19:34:34,0.0
58658569,2781389.0,<docker><docker-compose><containers><microservices><docker-swarm>,docker stack microservice,multiple microservice service service servicen compose file service deploy follow create multiple stack question stack multiple service group service compose file myservice yml follow method deploy single compose service restart docker orchestrator case multiple stack service belong network issue follow approach currently impact service intention deploy touch service change multiple compose stack single network interlock issue,0,41,0,1.0,0,2019-11-01T11:34:51,0.0
58672447,3760216.0,<go><microservices><trace><opentracing><distributed-tracing>,distribute trace golang http postform,project implement distribute tracing microservice follow structure api gateway start api gateway function start trace code call user service separate task trace post service overcome issue,0,41,0,0.0,0,2019-11-02T15:22:35,0.0
58643515,1609313.0,<microservices><jhipster><jhipster-registry>,access microservice api jhipster gateway,generate microservice stack jwt token base authentication jhipster jhipster register jhipster gateway microservice generate entity microservice gateway reuse exist microservice entity add remove entity gateway ui well actual usecase access url manage resource achieve access service error gateway log output service well identify api doc microservice inside gateway swagger doc select swagger drop message gateway log jhipster edit problem solve api access problem api ur accessible microservice swagger documentation accessible gateway,0,47,0,0.0,0,2019-10-31T12:37:31,0.0
58672911,4206960.0,<java><spring-boot><microservices><distributed-system><hystrix>,hystrix fallback method throw custom exception,springboot wrapper application resttemplate call microservice integrate hystrix open circuit case timeout xx xx reponse propogate fallback method throw custom exception handle controller advice follow exception code property response achieve goal throw custom exception inside hystrix fallback method connection microservice establish,0,52,0,0.0,0,2019-11-02T16:18:04,0.0
58728712,11654492.0,<authentication><microservices>,microservice specific setting user record,microservice architecture user require setting specific microservice auth microservice source truth setting preferable manage set microservice example microservice user number order allow place day limit approach microservice source truth limit add field record database require add command relate concept user muddy responsibility microservice sure true microservice source truth limit populate table subscribe event microservice add field table microservice provide command change setting approach better approach aware,0,16,1,0.0,0,2019-11-06T11:06:39,0.0
58705446,9212278.0,<spring><spring-boot><microservices>,fail inject feign client interface dependency,connect service feign client error inject dependency interface currently follow thing custom interface feign client configuration class inject feign client interface currencyexchangeserviceproxy controller error,0,18,1,0.0,0,2019-11-05T06:13:28,0.0
58707032,1986869.0,<rest><spring-boot><resources><microservices>,rest resource location microservice,micro service architect java application simplification suppose service perform crud operation resource resource structure unstructured resource rest resource xyz structured resource unstructure problem rest controller root request struct unstruct resourceid pattern,0,27,1,0.0,0,2019-11-05T08:12:43,0.0
58688371,12306798.0,<microservices><kong>,api gateway microservice deploy,microservice cluster api gateway connect service consumer kong api gateway swarm microservice question api gateway deploy swarm cluster swarm cluster db save config db deploy,0,26,2,0.0,0,2019-11-04T06:42:52,0.0
58608169,12291147.0,<node.js><docker><rabbitmq><microservices><node-amqplib>,implement rabbitmq node js microservice app,greeting stackoverflow stackoverflow year find answer attempt question feel free wrong currently develop data analytical system base microservice architecture assume system consist dozen sufficient microservice communicate rabbitmq encapsulate docker container system power docker swarm production microservice node js application database connect orm interface task manage serve datum crud manner provide result prepared query base datum extraordinary provide microservice microservice communication assume uncertain current question amqplib oop manner link inter microservice communication network application object relate functionality oop manner possibility replace amqplib rabbitmq long change datum relate logic search example currently work microservice application utilizing amqp pretty appreciate link second question sense build microservice application base event drive principal pass message rabbitmq application main event queue procedure call despite fact internal external event abstract example single microservice event service listener connect service hand rabbitmq connection wait message currently parse forward message eventservice route key event rpc exchange channel approach user class fire user user create response event time create user crutch,0,55,2,0.0,0,2019-10-29T13:13:40,0.0
58691519,7931798.0,<api><asp.net-core><.net-core><microservices><grpc>,api work rest grpc,goal work incremental migration rest api grpc start grpc communication service microservice architecture problem grpc service middleware force http protocol grpc work rest api work swagger documentation work implementation endpoint postman reachable add middleware add http protocol reference net core question rest grpc work time application,0,48,4,0.0,0,2019-11-04T10:29:09,0.0
58609347,4225948.0,<architecture><locking><microservices><distributed-computing>,synchronize write db dynamically scale microservice,background example build stream processing application receive stream datum algorithm datum store result database example question stream purchase purchase geo location purchase store location ip base location stream purchase kafka topic process stream datum output statistic example average purchase price meter square dynamically scale handle spike resource component solution small update database store final statistic kind database average price meter square count sum recalculate datum newly purchase item find relevant square load datum database update memory write update database bit complicated algorithm sake example keep simple sound easy start scale challenge challenge order support high scale multiple instance processing service handle purchase update relevant square database problem occur instance process purchase fall square case race condition result purchase affect final result event occur follow order st instance st purchase load datum database datum instance purchase load datum database datum st instance update data datum write database instance update data datum write database result datum calculate datum purchase purchase thought solve kafka topic partition kafka assign partition topic consumer message single partition topic control partition square purchase square fall partition arrive consumer instance service update square work fine apply dynamic scale kafka consumer add remove kafka assign partition consumer case partition move consumer instance process purchase square limited amount time overcome distribute lock implement database combine kafka topic partition time lock block processing event dynamic scale worker block small period time main issue approach find complicate add lock time latency time question well approach solve problem approach work kafka work edit avoid lock avoid lock update condition mongodb implement optimistic locking strategy square property uniquely add version field document option document exist read exist datum result document exist create insert succeed fail unique constraint failure square insert time option number document exist read exist datum save version update document db send bump version number update condition document version equal version expect update result document update update version change point retry process update succeed explain detail work perform read write operation read write concern set majority lose datum question performance work faster distribute locking majority read write concern update,0,58,4,1.0,0,2019-10-29T14:22:30,0.0
56017298,1406026.0,<list><rest><api><microservices><api-gateway>,api gateway handle list endpoint parameter filter orderby groupby limit offset,microservice provide enpoint return list resource json list endpoint provide possibility add filter attribute orderby well limit offset parameter api gateway provide endpoint gateway resource parameter assume request gateay handle query merge result microservice endpoint request item find gateway implementation framework ocelot aw gateway azure gateway provide functionality box key store union item require attribute filter sort achieve efficient fast list endpoint price redundant datum synchronization slight hint appreciate experience problem good practise,0,10,0,0.0,0,2019-05-07T07:08:39,0.0
55949946,2522819.0,<spring><microservices><consul><spring-cloud-consul>,integrate consul spring boot application,set consul service locally spring boot application embed spring cloud dependency code issue start application service consul ui idea,0,15,0,0.0,0,2019-05-02T09:58:33,0.0
56019577,9055752.0,<c><redis><microservices><hiredis>,centralized logging redis message bus hiredis,hiredis library connect redis server pub mechanism communication purpose task background process machine continuously publish message subscribe process store message redis database log message redis server message bus local text file debug purpose interested service syslog ng save log save message text file,0,40,0,0.0,0,2019-05-07T09:30:25,0.0
56043523,2229772.0,<microservices><netflix-zuul><spring-cloud-netflix>,zuul multiple wildcard nested route,zuul version follow route config find reference path parameter treat suppose zuul work correctly environment path example multiple wildcard path work suppose work workaround nest route,0,43,0,0.0,0,2019-05-08T14:53:03,0.0
55974867,7284946.0,<java><spring-boot><microservices><spring-amqp>,good practice cancel worker thread microservice architecture,three service generate datum thread publish piece generate datum queue second listen queue process piece receive datum spring rabbit listener worker thread publish result queue third second datum piece joint unique key propagate exception thread service cancel work thread work datum key good practice rabbit listener wrap task save reference map key block submit invocation case error publish datum key receive service map cancel worker key service decline newly receive message key future sure good solution,0,51,0,0.0,0,2019-05-03T17:48:57,0.0
55961484,4348401.0,<url><microservices><api-design><url-design>,common url naming convention web api,create website microservice api backend support frontend ui question common practice url convention api public website customer api support manage authentication manage purchasing checkout system pass site product call auth checkout product service currently people yay,0,84,0,0.0,0,2019-05-02T23:32:11,0.0
56008312,2385088.0,<spring><caching><design-patterns><microservices>,design approach web application,plannig develop spring boot application angular follow aspect application huge number record database user login application manipulate datum ui field associate equation internally change field trigger multiple field change change persist database directly click save button improve performance cache good approach achieve requirement whould ideal choice cache,0,20,1,0.0,0,2019-05-06T15:32:43,0.0
55969590,5604249.0,<cassandra><microservices><change-data-capture>,handle update denormanlize mapping datum cassandra,employee table cassandra employee microservice mapping servicelineid departmentid require microservice microservice table mapping employee transport miroservice employeetransport table bustable lot table maintain mapping emplyeeid servicelineid departmentid handle mapping change inform microservice change mapping table mapping update cassandra big challenge table mapping bus table case full table scan check partition key check required record update exist well handle scenario,0,23,1,0.0,0,2019-05-03T12:14:45,0.0
55909639,458370.0,<microservices><trace><opentracing>,opentrace trace user action browser,create span browser user click button trace call backend browser child span javascript library node js open tracing propagate span browser backend service example user click expensive button browser span create manually guess business logic javascript browser complex validation business logic call microservice three child span create visualize three child span original click bonus time javascript trace well order determine perform javascript browser awesome memory cpu usage browser trace api limitation appear allow moment,0,33,1,0.0,0,2019-04-29T19:26:38,0.0
56078511,11420000.0,<java><spring><oauth-2.0><token><microservices>,uri absolute authenticate service,write microservice app user service authentication server car service add car service problem authentication search internet find answer solve problem application property car service resource server configuration car service main car service authorization server config user service resource server user service web security user service call oauth token token call car service token return warn write spring log help,0,160,1,0.0,0,2019-05-10T13:16:35,0.0
56033303,2846635.0,<redis><microservices>,singleton create redis cache connection microservice,good singleton pattern redis cache db connection micro service base application dependency injection class dictionary instance object store key unique microservice url redi cache active connection dictionary object store microservie service key pair singletonrediscachedbconnection class instance memory dependency injection time user user request object singletonrediscachedbconnection create inject time open redi cache db connection advantage class keep redis cache active connectin instance singletonrediscachedbconnection class thread safe case multiple microservice active redis cache connection user user request,0,192,1,0.0,0,2019-05-08T03:55:03,0.0
56035692,9477626.0,<java><microservices><mustache><msf4j>,msf response image improperly close variable,msf mustache project service problem return image image png response entity code realize mustache render return string image object response response image png,0,23,3,0.0,0,2019-05-08T07:33:11,0.0
56075875,3765646.0,<node.js><microservices><loopbackjs>,loopback create relation model microservice,microservice instance model create achieve relation model define service easily confused create relation model model service,0,27,3,0.0,0,2019-05-10T10:35:52,0.0
55945036,11439614.0,<authentication><jwt><token><microservices>,good approach generate jwt token server server communication,plan develop authentication service generate validate jwt token incoming request good challenge mechanism employ generate jwt token request generate applicaiton user username password combination rule case explore area generation token base keystore input highly advance,0,70,3,1.0,0,2019-05-02T02:42:34,0.0
56064136,3759227.0,<java><spring-boot><logstash><microservices><elastic-stack>,spring boot microservice push log logstash,microservice push log logstash centralized logging elk stack docker container logback xml spring boot code logstash conf file create kibana result help appreciate,0,187,3,0.0,0,2019-05-09T16:51:09,0.0
56072703,3959993.0,<java><spring><microservices>,handle multiple request multiple server,application microservice architecture multiple docker application request app app assume instance application app fund deduction method suppose api deduct suppose api expose outer word bank api application suppose person order website integrate bank time order website integrate bank suppose account website deduct money bank microservice architecture request land server handle application ensure handle negative balance case,0,41,4,0.0,0,2019-05-10T07:25:32,0.0
55954727,10601430.0,<c#><microservices><event-bus>,injection dependency integration event controller call,communication microservice eventbus dependency injection controller longer call method basically add client client add notify microservice send datum service bus integration event moment dependency injection controller front longer hit controller return error class building customerintegrationeventservice code example dependency injection startup error persist error thing solution code base microsoft eshoponcontainer,0,103,4,0.0,0,2019-05-02T14:34:48,0.0
45372881,8081281.0,<java><docker><microservices><consul><service-discovery>,bind port host system docker service docker container port,consul docker bear question vague multiple web service docker container consul hashicorp service discovery tool consul agent port default consul host system docker container service discovery tool container consul docker service docker container interact port host system initially assume docker port forward work error consul host system port bind container port,0,109,4,0.0,0,2017-07-28T11:55:06,0.0
45484622,1907902.0,<rest><microservices>,error microservice architecture,microservice frontend user communicate rest api client request frontend internally request user microservice kind status code return frontend service case user answer error,0,373,5,0.0,0,2017-08-03T12:46:14,0.0
45408011,3585050.0,<java><rest><timeout><microservices>,solve timeout time microservice,microservice service rest web service problem difference timeout time assume micro call api micro timeout synchronize wait response time proccessing timeout time losse connection perspective result solve problem word result call method sovle problem standard design pattern problem,0,271,13,1.0,0,2017-07-31T05:22:46,0.0
52912816,2663572.0,<microservices><decomposition><bounded-contexts>,microservice decomposition strategy,monolith decompose microservice microservice logic consume source system api enrich response additional static datum good strategy follow scenario scenario multiple source system functional area consume distinct api source system good decomposition approach microservice functional area microservice source system scenario single source system expose single api functional area consume source system api parameter good decomposition approach microservice functional area microservice source api single microservice,0,57,2,1.0,0,2018-10-21T06:51:58,0.0
52949286,2507373.0,<java><spring-boot><microservices><resttemplate><spring-restcontroller>,spring boot resttemplate composite response empty list,developpe microservice java spring boot face problem involve object data service db interface scheduling service call frontend work response request object eventhough point basically ignore getter setter code datum service jobdetailsresponse jobdetailssingledaterequest scheduling service reportdetailssingledaterequ reportdetailsresponse method check datum data service list job empty read object equal definition spring reflection pass case woke consume microservice add data service dependency scheduling service long post find proper example case example find work list return microservice advance,0,96,2,0.0,0,2018-10-23T12:37:32,0.0
52855473,2219573.0,<architecture><microservices>,context separation microservice,work small company delve microservice expect hit bump work software manage heavy machinery focus small bound context work order sake simplicity omit unnecessary detail bound context compose technician team actual work order team compose group technician team manager technician aspect software technician work order issue happen manager team work order issue member team idea create single service start wonder create service manage team technician manage work order problem second approach logic control order retrieve place inside api gateway bff work order knowledge team correct design api gateway retrieve team technician manager order retrieve work order member team concern business logic leak api gateway sure afraid create anemic microservice hand bound context software concept team create third service coordinate work find reason support idea summarize create three service bind create decide head guy,0,46,9,0.0,0,2018-10-17T12:59:24,0.0
47844769,2619074.0,<spring><spring-boot><yaml><microservices><netflix-eureka>,variable yaml configuration substitute,set microservice spring boot eureka yaml configuration start service register eureka service problem environment variable configuration file substitute interpret string example application yml eureka app google problem find solution happen start solution fairly clue,0,220,3,0.0,0,2017-12-16T10:39:56,0.0
47788938,4051152.0,<jhipster><microservices><gateway>,jhipster gateway restart,develop application jhipster infrastructure newbie set tool gateway work expect custom development profile devh launch application mvnw pdevh restart randomly second start register registry server restart launcher class party start arg property sette spring profile active devh restart attempt application unregister registry server happen advance solve reason empty maven local repository launch actor registry gateway microservice work expect dependency download time deep search happen git branch responsible branch download library library version,0,310,5,0.0,0,2017-12-13T08:53:25,0.0
47886182,5506061.0,<spring-boot><microservices>,good design microservice architecture dependency database,plan migrate product micro service architecture spring boot doubt concern service separate database create separate database service handle table dependency example micro service customer service customer table field customerid customername order service order table field orderid ordername customerid note simplicity mention table service access order detail base orderid retrieve detail customer case option mind resttemplate call customer service customerbyid api fetch required detail set response orderdetail create customer table order service database tool replicate datum customer service order service customer table change customer table customer service database reflect order service customer table easily fetch relevant datum order service preferable sense good handle,0,120,7,0.0,0,2017-12-19T11:39:08,0.0
54220683,10312094.0,<rest><spring-boot><microservices><hibernate-entitymanager><response-time>,spring boot restful service response time high,springboot rest service timestamp time response configure temporal temporaltype timestamp response time configure temporal temporaltype response time great time lose performance pls help entity class service controller entityclass response time temporal temporaltype entityclass secs response time timestamp datum response longer,0,40,0,0.0,0,2019-01-16T15:47:44,0.0
54091034,4947539.0,<spring-boot><microservices><spring-cloud><spring-cloud-netflix>,property versione autorefresh spring cloud config,configure spring cloud config server spring microservice problem developer change property time environment update property promote jar dev qa environment jenkin roll plan configuration follow link good solve problem lose functionality refresh property application deployment refresh property actuator update property tag provide bootstrap yml tag create git kindly achieve rollback versione well auto refresh,0,55,0,0.0,0,2019-01-08T11:37:45,0.0
54095711,9591240.0,<spring-boot><authentication><authorization><jwt><microservices>,create robust separate authentication authorization server spring boot,create server thing authenticate authorize user workflow simple log request log endpoint invoke authentication authorization server respond jwt case authentication authorization server validate jwt permission respond corresponding status jwt implement architecture depict caveat validate jwt check user log permission allowance reach desire endpoint microservice scenario pretty obvious general find complete tutorial build server help share good link topic hesitate share opinion topic,0,87,0,0.0,0,2019-01-08T16:17:33,0.0
54186315,2208562.0,<java><authentication><jwt><microservices>,service service jwt authentication,title imply solution secure communication flow internal microservice goal secure communication store request header claim jwt prevent spoof initial thought gateway create manage sign kind cache policy place internal token pass fourth service service responsible verify incoming request share secret problem service require update httpcontext header case bypass authz service create sign token update claim service shipping request service avoid mix extra processing logic manage token service layer well define microservice architecture caching token option model help performance design perspective well approach jwt internal authn,0,196,0,0.0,0,2019-01-14T17:20:36,0.0
54232979,6841874.0,<spring-boot><microservices><jhipster>,error create bean liquibaseconfiguration unsatisfied dependency express constructor parameter,face issue upgrade microservice jhipster org springframework bean factory unsatisfieddependencyexception error create bean liquibaseconfiguration define file jhipster registermicroservice target class api register config liquibaseconfiguration class unsatisfied dependency express constructor parameter org springframework beans factory unsatisfieddependencyexception error create bean cacheconfiguration define file jhipster registermicroservice target class api register config cacheconfiguration class unsatisfied dependency express constructor parameter org springframework bean factory nosuchbeandefinitionexception qualifying bean type org springframework boot autoconfigure web serverpropertie expect bean qualify autowire candidate dependency annotation,0,142,1,0.0,0,2019-01-17T09:41:48,0.0
54099868,7546936.0,<python><django><amazon-web-services><microservices>,optimize large django project move process dedicated machine microservice,work large django project application server process latex site grow latex processing affect performance site traffic high idea move latex processing separate ec instance optimize process latex texliv create png save png return url image communicate exist django orm update object image url create dedicated machine question kind ec instance computer memory optimize kind web server dedicated latex processing machine microservice django tornado flask exist project communicate dedicated latex processing machine,0,38,4,0.0,0,2019-01-08T21:18:41,0.0
35329057,550283.0,<jpa><spring-boot><data-modeling><microservices>,distribute service share datum schema,build spring boot base web application consist central api server multiple remote worker embrace idea microservice component build separate spring boot app share lot datum schema object handle component currently jpa model definition code duplicate component project time change remember change result poor compatibility version component wonder good well manage component code scenario specific mysql redi datum storage access component redi serve tool data communication component,0,63,2,0.0,0,2016-02-11T01:07:56,0.0
35159886,5043003.0,<spring-boot><spring-cloud><microservices><netflix-zuul>,zuul ignore query parameter empty,zuul configuration problem hit url map api controller read query param empty hit url map work fine help param empty parameter pass empty directly hit api zuul work fine zuul ignore forward api api controller,0,764,4,0.0,0,2016-02-02T17:23:36,0.0
57178228,11818927.0,<curl><microservices>,automate create secret share key curl,create user account grant role generate secret key share key restapi postman step manually deployment copy secret share key property file communicate microservice automation create user generating secret share key curl good scripting programming help write curl achieve starting point start write script sure shell scripting,0,8,0,0.0,0,2019-07-24T08:11:55,0.0
57283079,9758256.0,<spring><microservices><spring-cloud><netflix-zuul>,avoid timeout exception zuul yml,zuul gateway server eureka service discovery connect microservice zuul yml file execute url timeout exception occur ava net sockettimeoutexception read time java net socketinputstream socketread native method java net socketinputstream socketread socketinputstream java java net socketinputstream read socketinputstream java java net socketinputstream read socketinputstream java org apache http impl io sessioninputbufferimpl streamread sessioninputbufferimpl java httpcore jar org apache http impl io sessioninputbufferimpl fillbuffer sessioninputbufferimpl java httpcore jar org apache http impl io sessioninputbufferimpl readline sessioninputbufferimpl java httpcore jar org apache http impl conn defaulthttpresponseparser parsehead defaulthttpresponseparser java httpclient jar org apache http impl conn defaulthttpresponseparser parsehead defaulthttpresponseparser java httpclient jar org apache http impl io abstractmessageparser parse abstractmessageparser java httpcore jar org apache http impl defaultbhttpclientconnection receiveresponseheader defaultbhttpclientconnection java httpcore jar org apache http impl conn cpoolproxy receiveresponseheader cpoolproxy java httpclient jar org apache http protocol httprequestexecutor doreceiveresponse httprequestexecutor java httpcore jar org apache http protocol httprequestexecutor execute httprequestexecutor java httpcore jar org apache http impl execchain mainclientexec execute mainclientexec java httpclient jar org apache http impl execchain protocolexec execute protocolexec java httpclient jar org apache http impl execchain retryexec execute retryexec java httpclient jar org apache http impl execchain redirectexec execute redirectexec java httpclient jar org apache http impl client internalhttpclient doexecute internalhttpclient java httpclient jar org apache http impl client closeablehttpclient execute closeablehttpclient java httpclient jar org apache http impl client closeablehttpclient execute closeablehttpclient java httpclient jar org springframework cloud netflix zuul filter route simplehostroutingfilter forwardrequ simplehostroutingfilter java spring cloud netflix core release jar release org springframework cloud netflix zuul filter route simplehostroutingfilter forward simplehostroutingfilter java spring cloud netflix core release jar release org springframework cloud netflix zuul filter route simplehostroutingfilter simplehostroutingfilter java spring cloud netflix core release jar release netflix zuul zuulfilter runfilter zuulfilter java zuul core jar netflix zuul filterprocessor processzuulfilter filterprocessor java zuul core jar netflix zuul filterprocessor runfilters filterprocessor java zuul core jar netflix zuul filterprocessor route filterprocessor java zuul core jar netflix zuul zuulrunner route zuulrunner java zuul core jar netflix zuul http zuulservlet route zuulservlet java zuul core jar netflix zuul http zuulservlet service zuulservlet java zuul core jar org springframework web servlet mvc servletwrappingcontroller handlerequestinternal servletwrappingcontroller java spring webmvc release jar release org springframework cloud netflix zuul web zuulcontroller handlerequestinternal zuulcontroller java spring cloud netflix core release jar release org springframework web servlet mvc abstractcontroller handlerequest abstractcontroller java spring webmvc release jar release org springframework web servlet mvc simplecontrollerhandleradapter handle simplecontrollerhandleradapter java spring webmvc release jar release org springframework web servlet dispatcherservlet dodispatch dispatcherservlet java spring webmvc release jar release org springframework web servlet dispatcherservlet doservice dispatcherservlet java spring webmvc release jar release org springframework web servlet frameworkservlet processrequ frameworkservlet java spring webmvc release jar release org springframework web servlet frameworkservlet dopost frameworkservlet java spring webmvc release jar release javax servlet http httpservlet service httpservlet java tomcat embe core jar org springframework web servlet frameworkservlet service frameworkservlet java spring webmvc release jar release javax servlet http httpservlet service httpservlet java tomcat embe core jar org apache catalina core applicationfilterchain internaldofilter applicationfilterchain java tomcat embe core jar org apache catalina core applicationfilterchain dofilter applicationfilterchain java tomcat embe core jar org apache tomcat websocket server wsfilter dofilter wsfilter java tomcat embe websocket jar org apache catalina core applicationfilterchain internaldofilter applicationfilterchain java tomcat embe core jar org apache catalina core applicationfilterchain dofilter applicationfilterchain java tomcat embe core jar org springframework boot actuate autoconfigure endpointwebmvcautoconfiguration applicationcontextheaderfilter dofilterinternal endpointwebmvcautoconfiguration java spring boot actuator release jar release org springframework web filter onceperrequestfilter dofilter onceperrequestfilter java spring web release jar release org apache catalina core applicationfilterchain internaldofilter applicationfilterchain java tomcat embe core jar org apache catalina core applicationfilterchain dofilter applicationfilterchain java tomcat embe core jar org springframework boot actuate trace webrequesttracefilter dofilterinternal webrequesttracefilter java spring boot actuator release jar release org springframework web filter onceperrequestfilter dofilter onceperrequestfilter java spring web release jar release org apache catalina core applicationfilterchain internaldofilter applicationfilterchain java tomcat embe core jar org apache catalina core applicationfilterchain dofilter applicationfilterchain java tomcat embe core jar org springframework web filter requestcontextfilter dofilterinternal requestcontextfilter java spring web release jar release org springframework web filter onceperrequestfilter dofilter onceperrequestfilter java spring web release jar release org apache catalina core applicationfilterchain internaldofilter applicationfilterchain java tomcat embe core jar org apache catalina core applicationfilterchain dofilter applicationfilterchain java tomcat embe core jar org springframework web filter httpputformcontentfilt dofilterinternal httpputformcontentfilter java spring web release jar release org springframework web filter onceperrequestfilter dofilter onceperrequestfilter java spring web release jar release org apache catalina core applicationfilterchain internaldofilter applicationfilterchain java tomcat embe core jar org apache catalina core applicationfilterchain dofilter applicationfilterchain java tomcat embe core jar org springframework web filter hiddenhttpmethodfilter dofilterinternal hiddenhttpmethodfilter java spring web release jar release org springframework web filter onceperrequestfilter dofilter onceperrequestfilter java spring web release jar release org apache catalina core applicationfilterchain internaldofilter applicationfilterchain java tomcat embe core jar org apache catalina core applicationfilterchain dofilter applicationfilterchain java tomcat embe core jar org springframework web filter characterencodingfilter dofilterinternal characterencodingfilter java spring web release jar release org springframework web filter onceperrequestfilter dofilter onceperrequestfilter java spring web release jar release org apache catalina core applicationfilterchain internaldofilter applicationfilterchain java tomcat embe core jar org apache catalina core applicationfilterchain dofilter applicationfilterchain java tomcat embe core jar org springframework boot actuate autoconfigure metricsfilter dofilterinternal metricsfilter java spring boot actuator release jar release org springframework web filter onceperrequestfilter dofilter onceperrequestfilter java spring web release jar release org apache catalina core applicationfilterchain internaldofilter applicationfilterchain java tomcat embe core jar org apache catalina core applicationfilterchain dofilter applicationfilterchain java tomcat embe core jar org apache catalina core standardwrappervalve invoke standardwrappervalve java tomcat embe core jar org apache catalina core standardcontextvalve invoke standardcontextvalve java tomcat embe core jar org apache catalina authenticator authenticatorbase invoke authenticatorbase java tomcat embe core jar org apache catalina core standardhostvalve invoke standardhostvalve java tomcat embe core jar org apache catalina valve errorreportvalve invoke errorreportvalve java tomcat embe core jar org apache catalina core standardenginevalve invoke standardenginevalve java tomcat embe core jar org apache catalina connector coyoteadapter service coyoteadapter java tomcat embe core jar org apache coyote http abstracthttp processor process abstracthttp processor java tomcat embe core jar org apache coyote abstractprotocol abstractconnectionhandler process abstractprotocol java tomcat embe core jar org apache tomcat util net nioendpoint socketprocessor dorun nioendpoint java tomcat embe core jar org apache tomcat util net nioendpoint socketprocessor nioendpoint java tomcat embe core jar java util concurrent threadpoolexecutor runworker threadpoolexecutor java java util concurrent threadpoolexecutor worker threadpoolexecutor java org apache tomcat util thread taskthread wrappingrunnable taskthread java tomcat embe core jar java lang thread thread java,0,13,0,0.0,0,2019-07-31T04:14:09,0.0
57134126,8271727.0,<django><nginx><microservices>,authentication issue proxye django project ip,proxye django project nginx port nginx pc authentication port database session store power project server database login main project project proxy endpoint nginx forbid share cache base session store well,0,14,0,0.0,0,2019-07-21T14:31:02,0.0
57187665,6568836.0,<spring-boot><microservices><netflix-eureka><service-discovery>,eurekaclient eurekaserver springboot app,example find create application client server spring boot application service register server ant application server client,0,19,0,0.0,0,2019-07-24T16:39:29,0.0
57258903,2159809.0,<microservices><netflix-zuul>,zuul api gateway return read timeout exception,netflix zuul api gateway service application follow read time exception time zuul gateway configure time application property exception actual reason permanent,0,26,0,0.0,0,2019-07-29T17:40:45,0.0
57255353,1057347.0,<spring><rest><microservices>,spring boot microservice map nest object,build microservice problem mapping object share domain model service map nested object return resttemplate,0,27,0,0.0,0,2019-07-29T13:52:32,0.0
57146303,1617407.0,<microservices><event-driven><event-driven-design>,define event microservice,struggle good approach publish event microservice architecture sure datum include event handle versione event start publish event detail subscriber api call detail example publish invoice create invoiceid subscriber api call item quantity price customer work lot network traffic increase latency add detail event json rabbitmq example publish invoice create event include item quantity price customer problem boundary include customer address increase frequency version change event event rabbit route key versioning start invoice create change publish invoice create event json switch single event collection version version add json array,0,31,0,0.0,0,2019-07-22T12:42:22,0.0
57123551,11811564.0,<microservices>,client side load balance microservice,break head understanding client side load balancing provide spring netflix api eureka provide loadbalance client side load balancing resttemplate zuul internally ribbon load balance ribbon api iteself configure provide custom setting load balance listofserver question freak ribbon annotation automate load balance mechanism provide listofserver yml file configuring ribbon point eureka point eureka hardcode instance host port exactly refreshserverlist ribbon check instance remove instance add instance list read springs doc understand eager loading help example eager lazy loading ribbon api ribbon loadbalance client,0,33,0,0.0,0,2019-07-20T09:48:31,0.0
57223726,8586803.0,<rest><sockets><microservices><message-queue><event-driven>,web socket client server communication microservice system,currently handle communication microservice system basically top level architecture pattern synchronous power request response pattern request asynchronous sort message queue pub pattern hybrid mix quick messaging client server large batch operation choose pattern hybrid approach question client server communication web socket send request wait response synchronously dispatch event action create listener respective response sure implementation work scale pitfall,0,42,0,0.0,0,2019-07-26T16:15:24,0.0
57254880,5996109.0,<django><graphql><microservices><graphene-python>,graphql django graphene microservice weave rest api graphql endpoint,monolith code base slowly break micro service main code base django graphql graphene service account account route field manage account micro service rest api main graphql endpoint follow code sample moment routeid field account routename return null return sample set expect account return datum basically datum account routeid routename,0,46,0,0.0,0,2019-07-29T13:25:40,0.0
57118272,2704032.0,<hibernate><kubernetes><microservices><canary-deployment>,hibernate database connection blow,issue database session application deploy micro service architecture follow technology stack postgress aws base hibernate orm hibernate hbm ddl auto update kubernete scenario happen canary deployment bring server pod schema column table column drop session count start blow server pod cross database connection threshold debugging realize schema update request service time server start sure relate issue avoid,0,56,0,0.0,0,2019-07-19T18:58:13,0.0
57297628,309882.0,<angular><dependency-injection><microservices><micro-frontend>,dynamically create module component access parent injector,currently problem create module dynamically injector dynamically create module provider parent injector implement core stuff integration main app submodule create root injector submodule component di injector create main app injector parent implementation base example short systemjs import single bundle file return export appmodule subsystem service define interface service error injectiontoken injector word intention case well solution find micro frontend integration main app provide core application base layout app multiple subsystem small app provide gui specific business logic kind classic microservice architecture accord gui build subsystem build subsystem deliver gui single bundle integration app load mount app,0,57,0,0.0,0,2019-07-31T19:22:16,0.0
57139371,4184719.0,<spring-boot><microservices>,good tutorial spring boot test drive development,sure platform answer question start test drive development approach application build backend spring boot microservice architecture wide range scattered option web sure good second good tutorial resource form unaware free pay,0,16,1,0.0,0,2019-07-22T04:53:33,0.0
57124655,8885009.0,<architecture><microservices>,graphs dashboard architecture design,start project graph dashboard datum query store sqlserver database site dashboard enforce authorization task architecture site monolith micro service approach architecture web server service serve static file js css datum receive backend display chart api gateway service receive request client route micro service migth responsibility read second question db service service request target datum db query db responsibility create query execute return datum mutate datum receive db auth service authorization service decide user allow perform task introduction question suggestion suited architecture kind task micro service traffic site high day second service guess proper api gateway thing api gateway client request query db api gateway service route db service api gateway client client expect datum db service mutate datum api gateway feel mutate datum responsibility sure data arrive client form help,0,18,1,0.0,0,2019-07-20T12:19:21,0.0
57272277,4913747.0,<sql-server><design-patterns><database-design><microservices>,cross database query bad design,instance sql server database bad practice cross database call aggregate datum stored procedure expose assume service datum aggregation store procedure cross database call create tight coupling possibility scale move database individually design patter case,0,45,1,0.0,0,2019-07-30T12:57:12,0.0
57125489,8131788.0,<java><spring><authentication><microservices>,api call micro service micro service authentication,problem face resource app micro service specific role assign authenticated user access api micro service open webhook system allow public call unknown source accept webhook micro service access app resource fetch entity authentication layer unable fetch resource open resource ip domain workaround well solution solve kind problem,0,49,2,0.0,0,2019-07-20T14:06:28,0.0
57139705,589490.0,<microservices><immutability><cqrs><event-store>,cqrs immutablity,design cqrs base micro service application well event store manage mutation record sense consider immutability record command db mix stuff state change explicitly store event insist mutate state entity introduce command db ensure previous record inactive case,0,37,3,0.0,0,2019-07-22T05:35:42,0.0
57180223,10075283.0,<c#><asp.net-mvc><microservices><asp.net-core-2.1><docker-toolbox>,debug application error docker toolbox window,docker create application debug error visual studio container tool require docker debug project visual studio docker quickstart terminal provide path docker base application open application time,0,152,3,0.0,0,2019-07-24T09:59:19,0.0
57265511,9758256.0,<spring><microservices><spring-cloud><netflix-zuul>,avoid timeout exception zuul zuul,zuul gateway server eureka service discovery connect microservice zuul yml file execute url timeout exception occur ava net sockettimeoutexception read time java net socketinputstream socketread native method java net socketinputstream socketread socketinputstream java java net socketinputstream read socketinputstream java java net socketinputstream read socketinputstream java org apache http impl io sessioninputbufferimpl streamread sessioninputbufferimpl java httpcore jar org apache http impl io sessioninputbufferimpl fillbuffer sessioninputbufferimpl java httpcore jar org apache http impl io sessioninputbufferimpl readline sessioninputbufferimpl java httpcore jar org apache http impl conn defaulthttpresponseparser parsehead defaulthttpresponseparser java httpclient jar org apache http impl conn defaulthttpresponseparser parsehead defaulthttpresponseparser java httpclient jar org apache http impl io abstractmessageparser parse abstractmessageparser java httpcore jar org apache http impl defaultbhttpclientconnection receiveresponseheader defaultbhttpclientconnection java httpcore jar org apache http impl conn cpoolproxy receiveresponseheader cpoolproxy java httpclient jar org apache http protocol httprequestexecutor doreceiveresponse httprequestexecutor java httpcore jar org apache http protocol httprequestexecutor execute httprequestexecutor java httpcore jar org apache http impl execchain mainclientexec execute mainclientexec java httpclient jar org apache http impl execchain protocolexec execute protocolexec java httpclient jar org apache http impl execchain retryexec execute retryexec java httpclient jar org apache http impl execchain redirectexec execute redirectexec java httpclient jar org apache http impl client internalhttpclient doexecute internalhttpclient java httpclient jar org apache http impl client closeablehttpclient execute closeablehttpclient java httpclient jar org apache http impl client closeablehttpclient execute closeablehttpclient java httpclient jar org springframework cloud netflix zuul filter route simplehostroutingfilter forwardrequ simplehostroutingfilter java spring cloud netflix core release jar release org springframework cloud netflix zuul filter route simplehostroutingfilter forward simplehostroutingfilter java spring cloud netflix core release jar release org springframework cloud netflix zuul filter route simplehostroutingfilter simplehostroutingfilter java spring cloud netflix core release jar release netflix zuul zuulfilter runfilter zuulfilter java zuul core jar netflix zuul filterprocessor processzuulfilter filterprocessor java zuul core jar netflix zuul filterprocessor runfilters filterprocessor java zuul core jar netflix zuul filterprocessor route filterprocessor java zuul core jar netflix zuul zuulrunner route zuulrunner java zuul core jar netflix zuul http zuulservlet route zuulservlet java zuul core jar netflix zuul http zuulservlet service zuulservlet java zuul core jar org springframework web servlet mvc servletwrappingcontroller handlerequestinternal servletwrappingcontroller java spring webmvc release jar release org springframework cloud netflix zuul web zuulcontroller handlerequestinternal zuulcontroller java spring cloud netflix core release jar release org springframework web servlet mvc abstractcontroller handlerequest abstractcontroller java spring webmvc release jar release org springframework web servlet mvc simplecontrollerhandleradapter handle simplecontrollerhandleradapter java spring webmvc release jar release org springframework web servlet dispatcherservlet dodispatch dispatcherservlet java spring webmvc release jar release org springframework web servlet dispatcherservlet doservice dispatcherservlet java spring webmvc release jar release org springframework web servlet frameworkservlet processrequ frameworkservlet java spring webmvc release jar release org springframework web servlet frameworkservlet dopost frameworkservlet java spring webmvc release jar release javax servlet http httpservlet service httpservlet java tomcat embe core jar org springframework web servlet frameworkservlet service frameworkservlet java spring webmvc release jar release javax servlet http httpservlet service httpservlet java tomcat embe core jar org apache catalina core applicationfilterchain internaldofilter applicationfilterchain java tomcat embe core jar org apache catalina core applicationfilterchain dofilter applicationfilterchain java tomcat embe core jar org apache tomcat websocket server wsfilter dofilter wsfilter java tomcat embe websocket jar org apache catalina core applicationfilterchain internaldofilter applicationfilterchain java tomcat embe core jar org apache catalina core applicationfilterchain dofilter applicationfilterchain java tomcat embe core jar org springframework boot actuate autoconfigure endpointwebmvcautoconfiguration applicationcontextheaderfilter dofilterinternal endpointwebmvcautoconfiguration java spring boot actuator release jar release org springframework web filter onceperrequestfilter dofilter onceperrequestfilter java spring web release jar release org apache catalina core applicationfilterchain internaldofilter applicationfilterchain java tomcat embe core jar org apache catalina core applicationfilterchain dofilter applicationfilterchain java tomcat embe core jar org springframework boot actuate trace webrequesttracefilter dofilterinternal webrequesttracefilter java spring boot actuator release jar release org springframework web filter onceperrequestfilter dofilter onceperrequestfilter java spring web release jar release org apache catalina core applicationfilterchain internaldofilter applicationfilterchain java tomcat embe core jar org apache catalina core applicationfilterchain dofilter applicationfilterchain java tomcat embe core jar org springframework web filter requestcontextfilter dofilterinternal requestcontextfilter java spring web release jar release org springframework web filter onceperrequestfilter dofilter onceperrequestfilter java spring web release jar release org apache catalina core applicationfilterchain internaldofilter applicationfilterchain java tomcat embe core jar org apache catalina core applicationfilterchain dofilter applicationfilterchain java tomcat embe core jar org springframework web filter httpputformcontentfilt dofilterinternal httpputformcontentfilter java spring web release jar release org springframework web filter onceperrequestfilter dofilter onceperrequestfilter java spring web release jar release org apache catalina core applicationfilterchain internaldofilter applicationfilterchain java tomcat embe core jar org apache catalina core applicationfilterchain dofilter applicationfilterchain java tomcat embe core jar org springframework web filter hiddenhttpmethodfilter dofilterinternal hiddenhttpmethodfilter java spring web release jar release org springframework web filter onceperrequestfilter dofilter onceperrequestfilter java spring web release jar release org apache catalina core applicationfilterchain internaldofilter applicationfilterchain java tomcat embe core jar org apache catalina core applicationfilterchain dofilter applicationfilterchain java tomcat embe core jar org springframework web filter characterencodingfilter dofilterinternal characterencodingfilter java spring web release jar release org springframework web filter onceperrequestfilter dofilter onceperrequestfilter java spring web release jar release org apache catalina core applicationfilterchain internaldofilter applicationfilterchain java tomcat embe core jar org apache catalina core applicationfilterchain dofilter applicationfilterchain java tomcat embe core jar org springframework boot actuate autoconfigure metricsfilter dofilterinternal metricsfilter java spring boot actuator release jar release org springframework web filter onceperrequestfilter dofilter onceperrequestfilter java spring web release jar release org apache catalina core applicationfilterchain internaldofilter applicationfilterchain java tomcat embe core jar org apache catalina core applicationfilterchain dofilter applicationfilterchain java tomcat embe core jar org apache catalina core standardwrappervalve invoke standardwrappervalve java tomcat embe core jar org apache catalina core standardcontextvalve invoke standardcontextvalve java tomcat embe core jar org apache catalina authenticator authenticatorbase invoke authenticatorbase java tomcat embe core jar org apache catalina core standardhostvalve invoke standardhostvalve java tomcat embe core jar org apache catalina valve errorreportvalve invoke errorreportvalve java tomcat embe core jar org apache catalina core standardenginevalve invoke standardenginevalve java tomcat embe core jar org apache catalina connector coyoteadapter service coyoteadapter java tomcat embe core jar org apache coyote http abstracthttp processor process abstracthttp processor java tomcat embe core jar org apache coyote abstractprotocol abstractconnectionhandler process abstractprotocol java tomcat embe core jar org apache tomcat util net nioendpoint socketprocessor dorun nioendpoint java tomcat embe core jar org apache tomcat util net nioendpoint socketprocessor nioendpoint java tomcat embe core jar java util concurrent threadpoolexecutor runworker threadpoolexecutor java java util concurrent threadpoolexecutor worker threadpoolexecutor java org apache tomcat util thread taskthread wrappingrunnable taskthread java tomcat embe core jar java lang thread thread java,0,38,4,0.0,0,2019-07-30T06:25:59,0.0
57193237,4994052.0,<java><spring><spring-boot><microservices><netflix-eureka>,register service eureka spring boot launch access service,register service eureka eureka dashboard service access client browser response browser site reach wrong eureka code property property service main class property pom server pom client add eureka client service url defaultzone client side result eureka dashboard result service reference add console eureka,0,203,5,0.0,0,2019-07-25T01:53:54,0.0
58482296,12227536.0,<java><spring-boot><microservices><netflix-eureka><spring-cloud-netflix>,metadata instance connecte instance env,communicate instance service env dev instance service env dev metadata eureka,0,6,0,0.0,0,2019-10-21T08:15:46,0.0
58534969,12224021.0,<spring-boot><microservices><jhipster><netflix-zuul><consul>,jhipster gateway list server,generate separately gateway server service jhipster consul registry fine authentication perfect crud operation work fine ui log gateway admin credential localhost list server gateway issue help gateway discover list server send route request configuration,0,13,0,0.0,0,2019-10-24T05:58:12,0.0
58463643,6456586.0,<java><maven><spring-boot><architecture><microservices>,project structure spring boot micro service spa application,mention title start project build micro service architecture front spa angular react vue project consist spa gateway share parent pom bom share jar library pojos util class services project build maven dockerize idea mention git repository question repository bom share lib mention maven module executable application option sure node spa application build maven module project kind idea grateful provide well idea experience structure project preferable option project git repository advice,0,16,0,0.0,0,2019-10-19T12:23:29,0.0
58455821,9393159.0,<spring><spring-boot><microservices><netflix-eureka><netflix-zuul>,service time fallback error zuul,route request rest service discover spring cloud eureka zuul proxy expect access candidate service zuul error timeout candidat service time fallback,0,21,0,0.0,0,2019-10-18T17:46:25,0.0
58446126,3943960.0,<model><microservices><relationship><lumen>,set relationship microservice luman,green pea micro service correct microservice build gateway api call service api service gateway table model guess call service single luman project hasmany relationship service structure project api history api inquery define relationship api inquery app inquery api history app history error message advance edit mess goole search find guess eloquent join microservice identical model microservice sake eloquent effective work,0,22,0,0.0,0,2019-10-18T07:41:18,0.0
58394887,12041758.0,<api><microservices><grafana><prometheus><prometheus-alertmanager>,grafana graph min max average response time microservice prometheu,create grafana graph min max average response time microservice prometheus read url understand clearly help good source learn idea advance,0,23,0,0.0,0,2019-10-15T12:35:47,0.0
58471918,1135393.0,<node.js><typescript><npm><microservices>,typescript node js module organization share library micro service,micro service system multiple node js express typescript micro service infra code share node js micro service issue organize build infra library correctly micro service library overlap module implementation detail typescript monoloithic node js app multi service node system monolithic node app typescript share library inside service package single node module create module file ill import internal class export service add dependency package json import class ill basically override cancel internal module directory structure data security bag mixed export prevent option define security datum separate node module package json npm init large maintenance overhead avoid typescript documentation organize code directory package src node module service consumption import export cancel dir structure implement service bottom receive namespace directorie share library type script package module consume service appear understand correctly thing mention clear implement course happy point ahead help guidance time regard james,0,23,0,0.0,0,2019-10-20T10:04:47,0.0
58361853,5035236.0,<java><api><microservices>,java api aggregation microservice,java spring heavy application expose api basically glocal customer datum oracle database transformation tomcat slow faster create business code concern customer microservice access database aggregate modular component well choice proficient api aggregation question good practice api aggregation general api aggregation simply call micro service api well microservice inside api application aggregate micro service big api book ressource,0,25,0,0.0,0,2019-10-13T08:33:08,0.0
58443765,6425695.0,<graphql><microservices><apollo><apollo-client><apollo-server>,write sequential mutation apollo graphql,apollo server connect multiple microservice question suppose endpoint create account microservice endpoint create user user microservice currently mutation resolver connect endpoint support business rule user account onboarde customer require create customer object subsequently create customer object previous find good implement purpose question assume endpoint fail approach ui client submit separate mutation sequential order refrain business logic ui approach write resolver connect endpoint dry resolver endpoint good option approach account microservice expose endpoint responsible create user microservice couple microservice ideal single mutation string automatically ideal sure graphql apollo good approach case,0,43,0,0.0,0,2019-10-18T03:59:46,0.0
58503837,9591875.0,<node.js><express><microservices><gateway>,api gateway nodejs express application,microservice architecture implement api gateway opinion great open source package npm answer appreciate,0,53,0,1.0,0,2019-10-22T12:00:46,0.0
58447652,2781389.0,<rest><web-services><authorization><microservices>,microservice behave authorization server,enterprise team develop microservice enable authentication service example trading application booking service communicate account service protect endpoint authorization server reason independent service behave allow business continuity good resilience approach,0,16,1,0.0,0,2019-10-18T09:13:23,0.0
58369612,11343623.0,<angular><microservices><jhipster><angular-reactive-forms>,jhipster angular microservice implementation unable nest owner side relationship client side,case entity contact relationship contact detail contact owner relationship dynamically add remove save delete contact detail contact component currently select create contact detail attempt datum bind luck jdl,0,17,1,0.0,0,2019-10-14T03:05:33,0.0
58354590,3446201.0,<.net-core><microservices><image-uploading>,send file microservice microservice return invalid uri uri string long,microservice call send image client fileserver interface client fileserver side code call client swagger select image upload error reasease call client,0,21,1,0.0,0,2019-10-12T13:21:02,0.0
58498573,11297047.0,<spring-boot><heroku><microservices><jhipster><jhipster-registry>,testing jhipster spring boot microservice heroku,simple microservice app host jhipster registry heroku build microservice locally jhipster work local microservice connect registry heroku work jwt token registry link password change appropriately work heroku local heroku local web heroku local release web work push heroku git push heroku master work connect registry,0,21,1,0.0,0,2019-10-22T06:51:51,0.0
58494409,8959656.0,<docker><kubernetes><microservices><multi-tenant>,multi tenant microservice design high memory usage tenant,design containerized microservice multi tenant deployment kubernetes tenant app high memory usage data structure initialize memory init call app tenant specific datum structure exploit subsequent rest call assume tenant specific memory datum structure consume mb wonder good path design system account issue auto scale service currently evaluate follow approach server side session python beaker session maintain tenant specific datum structure python object session work container pod auto scale figure session initiate auto scale initialize tenant app access container app tenant orchestration docker side figure network route rule approach design microservice single docker image container code data structure specific tenant app kubernete namespace sure appropriate case allocate namespace app wonder member problem figure path forward ideally single container pod serve multiple tenant app sure thing fall apart scale input delve approach rabbit hole input,0,31,1,0.0,0,2019-10-21T21:32:05,0.0
58464506,11297047.0,<testing><spring-security><microservices><jhipster>,test individual microservice jhipster,start work app build jhipster change microservice local machine error frustrate simply delete securityconfig java file app config keep hit login help,0,20,2,0.0,0,2019-10-19T14:07:28,0.0
58508963,2164335.0,<java><spring><service><microservices><terminology>,spring service component class correspond model service,work model class perform operation model spring service layer component annotate service create create service layer class service postfix classname class confuse word service apear classname module service single service multiple module rule solution solution prefix classname application project word service appear classname well alternative edit finally decide format,0,31,2,0.0,0,2019-10-22T16:50:11,0.0
58400522,947889.0,<c#><docker><docker-compose><dockerfile><microservices>,add postfix docker container exist,add postfix container reason container instance syntax add add auto generate number avoid collision,0,20,3,0.0,0,2019-10-15T18:18:10,0.0
58502932,8279895.0,<java><spring-boot><google-app-engine><microservices><angular8>,springboot angualr microservice google cloud platform,deploy spring boot angualr web project deploy include angular build bundle webapp folder rest api work html content fetch pom xml project structure expect app serve login module default base href property error style js file great help help figure achieve micro service architecture,0,47,7,1.0,0,2019-10-22T11:09:56,0.0
58344168,5845762.0,<java><maven><microservices>,micro service respond,micro service api log minute point log api work respond lot explain,0,51,8,0.0,0,2019-10-11T15:14:49,0.0
54317364,1846299.0,<server><pagination><client><lazy-loading><microservices>,design pattern display large number record web mobile,micro service architecture rest api backend oracle design pattern pull large amount transaction datum easily expose client web mobile pattern pagination api add query string identifier call server disadvantage chatty call pattern,0,9,1,0.0,0,2019-01-22T22:26:22,0.0
54345398,2617179.0,<java><json><spring-boot><microservices>,well datum structure dynamically generatet store format send serialise response,format grow base size serailise send service output spring boot treenode infinite stack overflow error,0,29,1,0.0,0,2019-01-24T11:18:45,0.0
54322468,10212374.0,<sql><microservices><race-condition>,microservice multiple call data conflict,micro service datum sql time request datum create view time server cluster http request datum exist table request datum view second full datum query create view microservice request datum createviewsql select view appdata request happen time server request record view server request record view,0,27,2,0.0,0,2019-01-23T08:00:26,0.0
54434368,4982878.0,<c#><.net><azure><microservices><azure-service-fabric>,read service fabric project configuration project dll,stateful microservice dll read configuration applicationmanif xml service fabric application read config microservice statefulservicecontext class read project share library unable struggle help appreciate,0,22,3,0.0,0,2019-01-30T06:16:21,0.0
54306886,5554070.0,<spring><spring-boot><microservices><netflix-eureka>,spring boot eureka client health check clienthandlerexception address,implement microservice architecture spring boot work perfectly day uat server find strange error eureka client service health check impact interprocess feign call occur frequently exception connection refuse request server exception eureka server reason address exception find exception start microservice port eureka server yml configuration configuration eureka client check eureka server find follow exception note service window service uat server currently microservice host server face exception,0,352,4,0.0,0,2019-01-22T11:04:36,0.0
54263821,4386185.0,<apache-kafka><microservices><kafka-producer-api><transactional>,call kafka transactional producer microservice,build enterprise event scheduler base kafka stream schedule event collect generate microservice cloud microservice worker thread handle user request throughput tps request generate event trigger future event publish kafka stream process exact semantic find lot example internet send record loop begintransaction committransaction producer case thread generate event start transaction message current solution create blockingqueue thread push event singleton kafka producer periodically drain queue send event kafka transaction pretty stable worried request message push kafka individual request perspective push event block queue return caller microservice crash lose event blocking queue solution create producer pool dozen producer create initiate transaction resource intensive wonder well solution case,0,208,9,0.0,0,2019-01-19T03:25:53,0.0
45184507,395898.0,<security><microservices><wildfly-swarm>,redirect request token micoservice architecture,interesste micoservice architecture wildfly swarm sure reach goal service micoservice architecture call frontend security token request redirect authservice authservice check credential ldap keycloak return good case valid jwt token frontend call authservice directly ist solution well architecture,0,48,3,0.0,0,2017-07-19T08:06:05,0.0
45183256,4174356.0,<spring-mvc><tomcat><microservices><netflix-eureka>,eureka server spring,setup eureka server spring download follow war file deploy war local tomcat startup follow log pastebin size main error request execution error read time execute request server dashboard start properly list register replicas replicas unavailable replicas default configuration file change decrease startup time property file currently wrong feel simple configuration mistake,0,311,5,0.0,0,2017-07-19T07:08:05,0.0
51821941,0.0,<message-queue><microservices><event-driven>,microservice data replication synchronazation,point microservice don microservice architecture user work topic service event drive messaging message broker time find add chat functionality send message user work project bound context chat microservice user project enrol datum microservice newly develop microservice switch direct call microservice datum restore state message broker log case handle greet,0,30,2,0.0,0,2018-08-13T12:02:51,0.0
51850765,2597775.0,<spring-boot><module><microservices>,spring boot share code project,read lot micro service module figure achieve scenario spring boot project feature login registration email password reset email account confirmation jwt access web ui database structure feature identical imagine app project duplicate project separate repo point direction base boiler plate spring boot project start point app problem add feature bug boiler plate cascade change project,0,43,2,0.0,0,2018-08-14T22:53:43,0.0
51928006,1970059.0,<database><spring-boot><microservices><flyway>,migrate datum microservice,imagine microservice source service datum xml format inside database target service transform xml zip file service transform xml zip currently microservice store datum schema future separate database microservice task write flyway script mechanism migrate datum source service target service migrate data create strong dependency service start service guarantee good practice tool idea,0,70,2,0.0,0,2018-08-20T09:42:58,0.0
51873270,8713485.0,<spring-mvc><microservices>,method allow resttemplate getforobject,learn micro service spring cloud service provider service consumer send request postman return porm xml code,0,206,2,0.0,0,2018-08-16T08:59:01,0.0
51934569,6822847.0,<oauth-2.0><authorization><jwt><microservices><okta>,stateless microservice architecture oauth jwt,develop microservice architecture springboot netflix library eureka zuul ribbon appear hang security design goal third party web base service manage user applications okta oauth application stateful goal keep application stateless load balance purpose follow service module architecture understanding gateway request route microservice microservice token forward request token request auth service gateway order token okta oauth piece understanding oauth token forward microservice microservice token validate okta group token question okta solely purpose authenticating authorization pass stateful oauth token generate okta create stateless jwt role user info pass microservice wonder service okta microservice architecture keep microservice stateless sure thought process correct,0,461,3,0.0,0,2018-08-20T16:04:04,0.0
51952694,302268.0,<go><protocol-buffers><microservices><grpc>,microservice messaging,work project splitting service monolithic codebase currently service work login authentication service service provide rest api endpoint datum retrieval service feed rest api service exchange datum datum retrieval send datum rest api rest api exchange authentication request response login service technology choice protobufs grpc inconvenient wonder thing wrong example data retrieval record rdbms rest api serve datum json define model struct type record database api reflect annotation database json struct definition sqlx scan query result struct encode json serialize struct json pass datum grpc protobufs setup window protobuf generate struct type manually implement conversion sql row protobufs protobufs json single message type define implement conversion hard introduce opportunity bug code fragility feel reinvent wheel common problem obvious solution,0,59,4,0.0,0,2018-08-21T16:05:07,0.0
51896087,2329298.0,<java><microservices><spring-cloud><netflix-zuul><netflix-eureka>,springboot filesizelimitexceededexception correct parameter set,set parameter application yml ide work fine problem start spring cloud netflix eureka zuul proxy behave paramteter throw set edit bootstrap yml,0,329,10,0.0,0,2018-08-17T13:04:08,0.0
55199108,422543.0,<load-balancing><microservices><linkerd>,load balance linkerd,usinig linkerd service mesh struggle simple configuration unable figure config yaml syntax setup load balance case route incoming traffic instance app route linkerd load balancing help figure configuration kubernete deploy simple vm,0,20,0,0.0,0,2019-03-16T16:43:04,0.0
55259167,10811808.0,<events><apache-kafka><rabbitmq><microservices>,message queue combination pub,event process type service servicetypea servicetypeb servicetypec service multiple instance time event process type service solution kafka pub platform designate single proxy service service type subscriber proxy service rabbitmq message process single service instance rabbitmq differentiate event event event event approach problemmatic type serice add mix preferred approach third option,0,22,0,0.0,0,2019-03-20T11:00:04,0.0
55281057,11159343.0,<spring-boot><session><authentication><microservices><session-cookies>,spring boot microservice session,refactor spring boot application microservice current authentication mechanism work session store cookie http request bring correct session authenticate user authentication service embed monolith create independent service functionality user datum basically userdata webpage call userdata service userdata service request session log user userdata service authentication service authenticate user session create rest endpoint monolith authencation service authenticate userdata service possibility manage authentification session microservice,0,46,0,0.0,0,2019-03-21T13:02:21,0.0
55192687,10719574.0,<java><routing><microservices><netflix-eureka><netflix-zuul>,zuul mapping zuul route shop url work,microservice articlemicroservice shopmicroservice zuul api gateway connect eurekaserver map datas articlemicroservice zuulservice map port shopmicroservice datum article zuul eureka shop problem mapping zuul route shopmicroservice url work configuration articlemicroservice property shopmicroservice property zuulservice property summarise datum article edit configure zuul route url work single time,0,80,0,0.0,0,2019-03-16T01:42:49,0.0
55283281,10719574.0,<java><spring><microservices><netflix-eureka><feign>,postmappe microservice feign eureka,build microservice architecture spring framework feign eureka shop work api gateway realise zuul database microservice database customerservice call cart mapping feign example shop create customer cart method service call method shopservice manage service relationship service code examples customercontroller java update post method send datum postman client wrong shop customerconnectorrequester shopcontroller,0,134,0,0.0,0,2019-03-21T14:53:47,0.0
55154289,6728767.0,<node.js><mongoose><microservices><backend>,shared account backend,write app backend frontend implement app ass app backend additional code front good idea develop app code base point app start feature app point time app essentially subset app env file dotenv module set start configuration server develop nodejs mongo backend server db user app friend app vice versa auth login service share service guy approach,0,17,1,0.0,0,2019-03-14T02:58:30,0.0
55159405,3356616.0,<spring><spring-boot><microservices><consul><spring-boot-actuator>,configure consul health check spring boot actuator health,microservice work create custom health check class extending abstracthealthindicator output register service consul health check status fail configure actuator url consul health check bootstrap fail error path default suggestion edit,0,257,2,0.0,0,2019-03-14T09:51:15,0.0
55292753,5948647.0,<c#><docker><asp.net-core><.net-core><microservices>,asp net core docker connectionrefuse load,work asp net core app docker base microservice architecture start debug app iis express keep socket error load refresh work fine instinct issue http request service docker container start depend clause docker compose file help appreciate throw error call action docker compose program cs relevant startup cs custom startup extension,0,53,2,1.0,0,2019-03-22T04:05:43,0.0
55137973,11195939.0,<java><spring><spring-boot><microservices><netflix-eureka>,war base microservice registration eureka discovery server,client application follow architecture angular base front spring boot base web application talk front spring boot base microservice talk web application eureka discovery client enable web app locate microservice face issue microservice instal application standalone tomcat microservice application main class extend springbootservletinitializer change packaging war help generate war artifact deploy tomcat well register eureka servicable web application service eureka invoke api fail invoke service postman directly browser fail registered url microservice expose web application tomcat resolve eureka suggestion configuration data service deploy war deploy register eureka discovery data service uri correct reach instance happen tomcat port tomcat context manually check uri work,0,235,2,0.0,0,2019-03-13T09:06:59,0.0
55109473,2790522.0,<spring-boot><microservices><spring-cloud><spring-cloud-config>,spring cloud config server client refresh strategy,spring cloud setup config server small microservice setup mysql database table datasource client microservice configuration expect config server client micro server enable actuator refresh notice restart restart springboot app client micro service automatically fetch updated configuration aws microservice instance autoscale fetch update configuration exist instance configuration find solution find spring cloud bus push update configuration microservice instance find clue microservice update configuration restart,0,290,4,0.0,0,2019-03-11T19:59:14,0.0
55262001,2861409.0,<spring><microservices><spring-cloud><netflix-eureka>,spring microservice instance register eureka port,application yml microservice client eureka application yml eureka start eureka port refer microservice microservice fail register eureka follow exception microservice log thing perfectly fine change eureka server port microservice eureka registration port registration microservice succede case multiple time post question behave input helpful,0,871,5,0.0,0,2019-03-20T13:35:10,0.0
52451347,8161747.0,<java><java-ee><microservices><wildfly-swarm><microprofile>,microprofile wildfly swarm time rebuild development environment,work micro service project microprofile wildfly swarm problem development enviroment build time minute change project rebuild project test time rebuild project swarm install fraction start proccess time project development problem avoid rebuild install fraction start publish code hotdeploy swarm microprofile,0,253,2,0.0,0,2018-09-21T21:40:45,0.0
52286165,9216165.0,<java><spring><microservices><spring-webflux><spring-cloud-config>,spring webclient configserver,develop microservice spring webclient generate client microservice code snippet hard code fine problem host field change frequently configserver component deploy architecture component host host receive error create bean service client,0,68,3,0.0,0,2018-09-12T01:21:24,0.0
52442471,2063564.0,<javascript><node.js><ecmascript-6><microservices><moleculer>,es import require microservice framework node js,moleculer microservice framework node js es example error instal babel javascript compiler well idea,0,549,5,1.0,0,2018-09-21T11:10:55,0.0
45020092,6521658.0,<node.js><amazon-web-services><lambda><microservices><serverless-framework>,lambda execution result query datum log output,nodejs lambda function connect rds select datum output log output help pass parm output code attach nodejs function connect rds mydata execution result,0,45,3,0.0,0,2017-07-10T19:23:23,0.0
44987508,1907919.0,<sql><mapreduce><microservices><aggregation>,satisfy aggregation join http microservice,saas product decide apart product service buy logic shopping cart product order payment transaction main application wrap http microservice reason account maintainability testability tech stack ecommerce microservice global customerid root proper perform cross query main application unexpected bi instance list company employee people buy product month problem ecommerce data store customer attribute list top company payment size company problem ecommerce microservice customer company application level final customerid mix example perform query sql proper handle problem business report work datum instant aggregation query,0,52,3,0.0,0,2017-07-08T15:00:53,0.0
44962992,3187965.0,<angular><security><microservices>,secure sensitive logic datum angular microservice,microservice angular platform hide service access username password sensitive datum front hide sensitive code front angular minify uglifying code,0,138,4,0.0,0,2017-07-07T05:13:35,0.0
44910623,7956469.0,<docker><microservices>,java lang illegalstateexception locate propertysource fail fast property set fail,default generate application microservice start springboot connect registry java net unknownhostexception config java net unknownhostexception config console view,0,1570,5,0.0,0,2017-07-04T16:27:41,0.0
44902486,1893822.0,<asp.net-core><microservices>,create micro service net core,create micro service net core search find micro service design concept design proxy micro service design pattern technology stack suitable create micro service net core specific tool micro service net core chandran,0,198,6,0.0,0,2017-07-04T09:44:37,0.0
56117847,503805.0,<mongodb><microservices>,recommend approach micro service base multi multi tenant implementation mongodb,link consider collection tenant approach wrong answer link year update mongodb collection tenant approach better secondly work microservice base solution single database service design microservice database expect collection max collection tenant approach tempt lead,0,16,0,0.0,0,2019-05-13T18:18:51,0.0
56184380,6507405.0,<spring-boot><microservices><netflix-zuul><spring-cloud-netflix>,zuul single entry point microservice configure point,setup zuul underlie microservice service context example microservice microservice access microservice zuul follow microservice microservice set request route correctly zuul url route correctly route path serviceid work check configuration help application property file configuration microservice advance,0,16,0,0.0,0,2019-05-17T10:18:07,0.0
56172833,982166.0,<microservices><jhipster>,jhipster microservice user entity,jhipster build microservice base application wonder skip creation user entity microservice case uaa keycloak identity management,0,30,0,0.0,0,2019-05-16T16:21:47,0.0
56239805,3781025.0,<spring-boot><spring-data-jpa><microservices><spring-cloud><hikaricp>,keep max number db connection multiple instance microservice,consider microservice architecture microservice scale instance max db connection configuration consider article hikaricp prove simultaneous connection db performant guess core server hard disk connection pool call nice round number low wager easily handle front user simple query tps setup load test tps rate start fall front response time start climb push connection pool hardware limit number simultaneous connection multiple instance microservice achieve good performance relational database,0,31,0,0.0,0,2019-05-21T13:49:31,0.0
56261085,2221222.0,<java><spring-boot><microservices><netflix-eureka>,eureka throw refresh error application context,big application netflix eureka service include discovery service api gateway service time start api gateway service exception describe code application context call idea full debug log positive negative match autoconfig post lot set fetch registry true false registerwitheureka true false,0,41,0,0.0,0,2019-05-22T16:13:59,0.0
56146390,10432429.0,<node.js><e-commerce><microservices><merchant-account><amazon-pay>,service allow user url personal merchant account url request,server receive business logic prepare url query param redirect service require body param fine api service logic feature service database cache extra action developer user customer yeah useless case becasue remember provide personal merchant account wrong guess security stuff question service allow user personal merchant account redirect upd add link amazon pay paypal,0,83,0,0.0,0,2019-05-15T09:49:50,0.0
56115652,8315823.0,<tomcat><server><microservices>,inbuilt tomcat server mcroservice,add file tomcat server web inf lib folder case microservice application add jar file tomcat server folder exception java lang noclassdeffounderror message initialize class sun xml messaging saaj soap envelopefactory add jar file error track analyis,0,14,1,0.0,0,2019-05-13T15:38:31,0.0
56286309,11543178.0,<node.js><amazon-web-services><microservices>,divide database closely table small database,monolith application divide small service database layer divide database small independent database implement process database breakup closely table,0,20,1,0.0,0,2019-05-24T05:24:54,0.0
56180850,7967140.0,<algorithm><microservices><graph-algorithm>,destribute load heavy algorithm microservice,work project algorithm base breadth search convert datum relational database memory graph heavy function large data set algorithm api enable multi thread conversion big case minute read microservice divide load multiple simultaneous call heavy machine question improvement performance microservice case tackle problem advance,0,23,1,0.0,0,2019-05-17T06:35:52,0.0
56224867,10683800.0,<spring-boot><spring-security><microservices><netflix-zuul><spring-session>,delegate token validation downstream service zuul gateway,spring boot spring session spring security hazel cast cluster downstream micro service authentication login api return auth token call zuul gateway service problem subsequent api call micro service pass auth token header delegate request downstream micro service return auth token validate successful token validation api call pass respective downstream micro service zuul delegate auth token validation downstream micro service zuul configuration gatewayconfiguration zuul gateway work zuul gateway delegate request downstream auth token validation,0,28,1,0.0,0,2019-05-20T16:29:01,0.0
56299298,9860374.0,<java><spring><spring-boot><oauth-2.0><microservices>,microservice user registration login oauth spring boot,java spring boot implement microservice ecossystem registration flow thought user personal gender address contact medium save resource server authorization server imagine situation microservice authorization server hand microservice resource server imagine decide create user personal microservice resource server microservice authorization server expose follow endpoint microservice resource server expose follow endpoint send request user microservice receive token resource server transaction token user personal microservice request send request log user log user personal personal protection token atribute token simple resource server validate spring authorization server database username role password resource server database follow firstname lastname address contactmedium gender decide follow track main problem resource server protect resource base log user user token request resource synchronize synchronize database authorization resource correct resource server serve user personal authorization server serve user login,0,298,1,1.0,0,2019-05-24T20:40:10,0.0
56294465,7519376.0,<java><rest><microservices><micronaut>,require argument genresavedto dto,currently learn micronaut java example work expect code crudrepository java genrerepository genrerepositoryimpl convention spring webapp genresavedto java genrecontroller java server test api curl console log kind error advance,0,141,1,0.0,0,2019-05-24T14:15:45,0.0
56288431,10157889.0,<spring-boot><express><microservices><ejs><feign>,render ejs express eureka client spring boot service rest controller eureka client feign,form ejs file express app add pacient send datum spring boot rest service throw zuul api gateway controller pacient service spring boot client app service feign proxy pacient service render pacient express client pacient service spring boot throw error,0,55,2,0.0,0,2019-05-24T08:11:51,0.0
56186816,11487746.0,<reactjs><file-upload><microservices><jhipster>,upload file error,microservice upload file error javascript code upload file swagger work perfect work curl wrong mine code,0,133,2,1.0,0,2019-05-17T12:52:05,0.0
56205704,11522914.0,<rest><microservices>,keep property file local memory read rest microservice api,interview interviewer property file disk github rest api read api read file designate location store local memory subsequent request api return require property property file local memory file save answer local cache eh cache cache db local memory,0,20,3,0.0,0,2019-05-19T07:37:40,0.0
56165333,2555212.0,<spring-boot><jboss><microservices>,embed server microservice equivalent application server jbosseap,jboss eap full blow application server spring boot offer portable embed server embed server tomcat jetty equip capability full blow application server area case embed server work application server suit requirement future micro service base architecture interested legacy application difference micro service deploy jbosseap microservice embed server,0,34,3,0.0,0,2019-05-16T09:31:51,0.0
56162518,5709081.0,<java><spring-boot><logging><microservices><jhipster>,spring boot illegalargumentexception logback,application monolithic gateway micro service architecture generate jhipster micro service fine individually add dependency relate project service logback illegalargumentexception exclude spring boot starter dependencie exception exception occur dependency pom file,0,46,3,0.0,0,2019-05-16T06:57:51,0.0
56270693,1748429.0,<kubernetes><jvm><out-of-memory><microservices><minikube>,minikube resource,company kubernete environment well local macbook minikube microservice jvm require large amount memory start face issue stack minikube memory local machine multiple solution create cloud development environment developer work single microservice local macbook redirect outbound traffic cloud local minikube solution create problem pod inside cloud dev env send datum local developer machine single request response scenario developer overlap version service deploy cloud set developer separate namespace huge cluster support second solution tool skaffold draft deploy current code cloud development environment solve issue problem slow development cycle build java image push remote cloud wait init time developer work face issue antoher kubernetes support multiple node add node remote node sit cloud local minikube main issue minikube single node solution find resource web thought connect minikube docker daemon remote machine minikube local machine docker container remote cloud server luck minikube crush manipulate find resource web well solve issue,0,97,3,0.0,0,2019-05-23T08:06:09,0.0
56269434,7504836.0,<flask><microservices><dcos>,microservice chance change ip address reload set ip port microservice,deploy microservice dcos communicate rest api microservice regist user create post reload ip address confused set ip port microservice picture ip change situation picture ip address change,0,18,4,0.0,0,2019-05-23T06:44:19,0.0
56206885,2313177.0,<heroku><microservices>,microservice application heroku free plan,create application consist microservice heroku free plan free dyno correct microservice deploy heroku app heroku app dyno heroku apps microservice free dyno,0,102,4,0.0,0,2019-05-19T10:26:41,0.0
56207447,9044084.0,<c#><database><database-design><domain-driven-design><microservices>,save enum database thing,sample project approach approach store enum enum enumeration explain good practice example exit class enum store database store database refer foreign key,0,61,5,0.0,0,2019-05-19T11:44:23,0.0
56220958,2662168.0,<microservices>,microservice sense microservice database connection,microservice bad practice imagine user microservice order microservice create report base user order consume user order microservice api sense report microservice database connection user order microservice read microservice io decomposition join query hard create endpoint handle join article report read access database imagine database microservice,0,25,6,0.0,0,2019-05-20T12:23:54,0.0
50268293,9624727.0,<spring-boot><microservices><ignite>,ignite cluster work,novice apache ignite requirement replace coherence cache ignite cache understanding cache distribute cache configuration configuration integrate spring boot ignite develop microservice deploy server server microservice server ignite provide port ip address case deploy server ip cache configuration cache day deployment cache plan migrate schema db cache help,0,124,9,0.0,0,2018-05-10T08:03:39,0.0
39504785,430035.0,<service><microservices><integration-patterns>,connect version service,business drive crazy connect application version service version service differe property ideal configuration change version service good pattern thing,0,35,3,0.0,0,2016-09-15T06:57:20,0.0
39475569,0.0,<spring-boot><microservices><spring-rest>,microservice code https dzone article spring boot create project,day hear lot microservice wonder create order apply project scratch read lot blog mocroservice find link code mention link feel simple sure role example understand technical point view theoretically understand guide code reference application java applicationconfig java customer java customerrest java order java orderrest java product java productrest java,0,84,2,0.0,0,2016-09-13T17:13:29,0.0
39369490,2371715.0,<esb><microservices><aws-api-gateway>,api gateway transformation asynchronous messaging,api gateway handle aspect transformation request response multiple api ideally handle aspect fit landscape asynchronous messaging synchronous rest call insight appreciate,0,146,2,0.0,0,2016-09-07T12:05:09,0.0
57327254,9649176.0,<microservices><reactive>,reactive microservice duplicate library entity,option reactive microservice communicate webclient share domain object thing lot example webclient exactly case microservice build seal business context second couple microservice pull domain class library modify microservice affect argument library modify place,0,7,0,0.0,0,2019-08-02T13:14:37,0.0
57425897,10849556.0,<spring-boot><microservices><api-gateway>,configure gateway filter communicate microservice,endpoint post api customer customer microservice api loanapplication customer customerid post api loanapplication loan application microservice configure api gateway routelocator filter appropriate client request turn appropriate service current approach rest endpoint customer microservice post method loan application microservice work fine gateway api loan application microservice sure change work,0,40,0,0.0,0,2019-08-09T08:05:39,0.0
57390680,8398143.0,<filter><microservices>,filtre datum micro service,micro service application spring boot thing fine untill filter imagine micro service database filter datum micro service base criterion micro service roam internet read lot article question stackoverflow pertinent solution document post question order gather opinion experience problem,0,10,1,0.0,0,2019-08-07T09:02:35,0.0
57375297,2477201.0,<rest><spring-boot><microservices><keycloak>,communicate rest api keycloak client,spring boot application port keycloak client example myclient application expose api secure keycloak itemid rest call application error unauthorized expect audience find list work fine remove security api expose unsecured api application solution unsecure rest api work,0,26,1,0.0,0,2019-08-06T11:43:04,0.0
57330714,11148948.0,<microservices><distributed-transactions><2phase-commit><distributed-tracing>,exactly phase commit work,pc general idea understandable question regard coordinator pc separate service datum store prepared stage finish commit store server service keep memory advance łukasz,0,35,1,0.0,0,2019-08-02T16:55:50,0.0
57395222,11697611.0,<python><django><postgresql><django-rest-framework><microservices>,access share model django microservice,splitte application monolith microservice architecture database microservice fetch datum application model application datum display application problem proper answer exist question propose request access datum feel good practice alot request record,0,35,1,0.0,0,2019-08-07T13:07:19,0.0
57394083,10256891.0,<spring><spring-security><microservices>,security microservice,create application microservice architecture problem public endpoint call private endpoint authentication better describe case microservice login service function allow user enter email password function public require token call function microservice account service datum user validate login microservice login service function microservice login public zuul ignore security call function microservice account service microservice login throw exception feing call microservice microservice securityconfig class zuul authenticationfilter class implement authorization logic extend onceperrequestfilter avoid kind problem ignore security endpoint authentication call public endpoint,0,33,2,0.0,0,2019-08-07T12:03:25,0.0
57475363,11921573.0,<asp.net-core><cloud><microservices><pcf>,communicate instance service net,microservice host pcf cloud microservice scale instance communicate listen instance action happen instance communicate instance instance guess java spring cloud bus achieve achieve net,0,32,3,0.0,0,2019-08-13T09:57:45,0.0
57356824,11883819.0,<spring-boot><microservices>,problem zuul eureka stand local tomcat,create eureka server zuul server port embed server perfectly problem deploy war local tomcat eureka server perfectly zuul find eureka server start zuul war local tomcat error java net connectexception connection refuse connect multiple instance tomcat port,0,41,4,0.0,0,2019-08-05T10:34:55,0.0
57402188,6738557.0,<java><spring><spring-boot><microservices>,util class microservice,project base microservice spring boot application lot util class base class search good solution microservicese sake simplicity create stringutil create crudservice interface microservice opinion solution search good practice option mind duplicate util class microservice horrible solution maintenance hell create separate project util class build install dependency project publish central repository nexus service dependency recommendation advice advice,0,59,4,0.0,0,2019-08-07T20:56:08,0.0
57393515,11865837.0,<java><rest><spring-boot><service><microservices>,consume rest service,create multi module rest service project spring boot api impl module api module model dto entity service interface method call service example return relate user interface method register login user impl module dependency api module provide implementation method module well restcontroller annotate requestmapping restcontroller annotation map request service correct method implementation create client side project ui add dependency api module client project inject bean service instance example bean config class provide url service impl module create instance service api interface rest template web client example method return userservice instance annotate bean provide implementation api depend impl module consume bean normal service client project example client project find service return time service project port sure wrong pretty rest service sure approach good bad sure initilize service bean client project ip address work result error,0,62,5,0.0,0,2019-08-07T11:35:30,0.0
54539659,3271997.0,<java><spring><spring-boot><design-patterns><microservices>,well design approach invoke multiple main class single microservice,micro service ms architecture company db ms json wrap class send ms format json send base business type suppose grow lot future define field class ms return class object format response db ms finally persist db create class business type interface implementor business type separate config file link main class class port controller point trigger db ms receive object parameter question controller autowire follow main class spring boot application boot business logic service class future business type change controller create class class business type affect spring boot application exist business type good design developer sign design well approach community create ms business type individually maintain bit bucket single click deployment hassle application grow,0,30,0,0.0,0,2019-02-05T17:09:04,0.0
54629927,7020219.0,<node.js><microservices><netflix-eureka><netflix-zuul><api-gateway>,zuul exception connect node app,node app register eureka follow exception api gateway eureka js client node module java net unknownhostexception utility api eureka client configuration docker deployment app express server,0,36,0,0.0,0,2019-02-11T11:47:01,0.0
54661875,1356704.0,<spring><spring-boot><microservices>,narayana arjuna node identifier null,three separate spring boot project coordinate transaction restat rest atomic transaction scenario follow exception node identifier null find full source code github reproduce error wrong,0,92,0,0.0,0,2019-02-13T03:06:47,0.0
54483018,9151832.0,<java><spring-boot><rabbitmq><microservices>,rabbitmq error create bean queue define class path resource,fetch message queue json convert specific datatype store db couple solution stackoverflow dint work add exchange queue routekey application propertie dependency add json rabbitmq gson jsafactory work configuration public class test listener class component public class mainlistener error org springframework beans factory beancreationexception error create bean queue define class path resource demo test class match factory method find factory bean test factory method queue check method exist static,0,101,0,0.0,0,2019-02-01T16:01:53,0.0
54603069,2044756.0,<docker><deployment><microservices><metrics>,deploy docker microservice single host,build web app docker microservice experimemtal critical idea deploy service host bare minimum infrastructure analyse evaluate expand server sense slave example single host job good approch tool recommand metric good alternative docker swarm mesos,0,33,1,0.0,0,2019-02-09T04:05:45,0.0
54655628,8849071.0,<oauth><oauth-2.0><jwt><microservices>,authentication authorization node microservice,guy currently develop follow micro service architecture scheme clarity micro service talk user frontend question good approach secure read oauth jwt sure example resource owner credential flow implement auth service client credential flow authorize request userinfo content api service idea,0,35,1,0.0,0,2019-02-12T17:30:09,0.0
54596984,1797038.0,<.net><asp.net-core><microservices>,unit testing eshoponcontainer integrationeventslog,question relate eshoponcontainer integrationevenglog service follow class mock pass mock memory dbcontext mapper care param dbcontext mock integration service class mock properly prefer memory context vagueness sure,0,39,4,0.0,0,2019-02-08T16:53:15,0.0
54525994,11015132.0,<java><spring-boot><stream><microservices>,monitor datum pattern field microservice response period time,monitor pattern json response period time microservice ensure datum quality depend pattern decision application flow requirement analyze click pattern stream perform analysis microservice response timeframe framework idea,0,15,7,0.0,0,2019-02-04T23:49:48,0.0
51419149,1252174.0,<meteor><connection><microservices><meteor-blaze>,meteor cluster microservice,base simple implementation doc implementation service communicate appui loggerservice appiui port loggerservice port start server keep error log understand discovery backend secondly meteor default bundle mongo test stand mongo pass error,0,95,4,0.0,0,2018-07-19T09:34:15,0.0
51419960,1252174.0,<meteor><microservices><meteor-blaze>,meteor cluster option undefined,meteor cluster simple setup presently log opinion configuration find documentation point full setup,0,28,6,0.0,0,2018-07-19T10:12:25,0.0
51450207,1400909.0,<java><asynchronous><apache-kafka><microservices>,kafka inter service communication bedirection communication issue,build system base microservice kafka inter communication api gateway http request block http connection send request kafka topic service read topic return result topic result api gateway read message find connection wait response send client question multiple instance api gateway service match instance http client connection kafka topic message api gateway instance read partition kafka topic result filter useless message optimal cpu intensive scalable,0,255,7,0.0,0,2018-07-20T20:50:55,0.0
42763897,1891745.0,<node.js><microservices><api-design>,api design rpc business logic hide business logic resource post,reach situation resource edit simple change field resource complex business logic operation example resource call book operation book sale example scene update boolean field onsale book database table book insert row table call book history question hide business logic post controller book url create url controller rpc putbookonsale book price parameter,0,28,2,0.0,0,2017-03-13T12:41:15,0.0
42787013,7708989.0,<mysql><docker><microservices><seneca>,install mysql server docker container,microservice seneca docker create image dockerfile instal mysql server hang manually install mysql server inside docker container instal service mysql start fail everytime help,0,91,2,0.0,0,2017-03-14T13:14:15,0.0
42816953,874608.0,<python><rabbitmq><apache-kafka><microservices><messagebroker>,sequential tag queue processing,queue tag message tail head worker example sequential processing tag example message processing befor message becouse alredy processing second message ready incorrect comment,0,53,5,0.0,0,2017-03-15T17:39:46,0.0
42624750,7507598.0,<asynchronous><request><response><batch-processing><microservices>,design microservice service async batch sync ui request,microservice write java purpose validate request accord set business rule return result source system aw docker container ecs cluster currently implement batch request batch system publish sns message topic sns subscriber post message microservice sqs queue microservice process request microservice publish message topic response sns subscriber post response batch system sqs queue batch system process response case ui reuse logic microservice case ui receive response display result user ui post message microservice sqs queue api gateway guarantee timely response lot message queue batch system create microservice ui request,0,499,7,0.0,0,2017-03-06T11:41:46,0.0
42763068,2104385.0,<security><service><cloud><microservices><azure-service-fabric>,azure microservice unable acquire ssl credential certificatenotfound,stick error message unable acquire ssl credential certificatenotfound azure micro service connect micro service remote procedure call ssl call work fine add code communicate ssl certificate error message follow article instal certificate local machine mmc explorer help great appreciate view ssl certificate,0,227,14,0.0,0,2017-03-13T11:56:43,0.0
46223823,6679946.0,<docker><jenkins><microservices>,docker images jenkins server efficient space usage,currently jenkin ci check code github perform static analysis build jar file create docker file create docker image push docker file private docker registry three microservice find jenkins job create image jenkins server cost gb sudo docker image docker file single microservice gb image grow poc imagine microservice simple solution delete jenkins server push repository suggestion improve process,0,27,2,0.0,0,2017-09-14T16:07:10,0.0
46169197,3585050.0,<spring-boot><weblogic><microservices><spring-cloud><netflix-zuul>,zuul work weblogic,microservice zuul netflix tomcat java jar command context root api gateway application yml context root microservice config rout api gateway tomcat weblogic weblogic xml webapp web inf directory search google find suitable result problem specific configuration config weblogic answer true api gateway microservice small application great application server weblogic,0,354,5,0.0,0,2017-09-12T06:18:08,0.0
56634757,4993253.0,<docker><microservices>,invalid ip address add hos … docker service ps log,scale service image service fail status service error desire state ready current state reject second ago error invalid ip address add hos … docker microservice unable complete error log fetch log command docker service log log,0,11,0,0.0,0,2019-06-17T15:45:11,0.0
56695795,5240428.0,<oauth-2.0><microservices><jhipster><jhipster-registry>,user detail well role underlie microservice jhipster microservice architecture,jhipster gateway keycloak integration microservice generate jhipster question user info role store keycloak underlie microservice,0,12,0,0.0,0,2019-06-21T01:34:20,0.0
56545052,8308389.0,<node.js><microservices><backend><scheduler>,task post scheduler architecture suggestions nodejs stack,build task post scheduler recur task task perform future best backend architecture create system nodejs module pretty high level investigate solution well internet keyword pretty standar scheduler solution architecture post scheduler request scheduler save schedule db schedule task nodejs module problem backend kind state hold server side good standard sure scheduler handle schedule job istance death schedule lose initialize scheduler schedule save db register loose head,0,13,0,0.0,0,2019-06-11T13:38:21,0.0
56692622,10733499.0,<python><node.js><django><rabbitmq><microservices>,django theader consume rabbitmq queue error,microservice pattern django app view send message consumption node js call message process return django application entire communication process rabbitmq http request arrive endpoint application django send message queue process work consume answer launch theader consume answer queue launch theader client django close connection rabbitmq app ready rpc interface start django application method start theater call rabbitmq log client close connection rabbitmq client unexpectedly close tcp connection code project,0,16,0,0.0,0,2019-06-20T19:22:43,0.0
56695971,4199161.0,<.net><asp.net-core><microservices><reverse-proxy>,replace url response message serve swagger ui custom net core reverse proxy,build reverse proxy base follow tutorial net core reverse proxy work well rest api load swagger ui properly clue replace response message allow successful working swagger ui net core proxy,0,29,0,0.0,0,2019-06-21T02:02:56,0.0
56514206,5733940.0,<java><spring><servlets><thymeleaf><microservices>,spring urltemplateresolver forward cookie resolve remote template,custom urltemplateresolver resolve thymeleaf template remote host cookie set browser transmit template resolve request workaround send cookie urltemplateresolver resolving request urltemplateresolver add springtemplateengine piece html call remote thymeleaf fragment servlet catch request urltemplateresolver place access cookie datum example enter browser cookie send debugger request send urltemplateresolver cookie,0,30,0,0.0,0,2019-06-09T11:28:11,0.0
56713424,10533237.0,<spring-boot><microservices><kafka-consumer-api><spring-kafka><pcf>,microservice health check pass kafka connection fail,microservice endpoint connect kafka consume record requirement kafka microservice respond endpoint configure kafka health check api fail pcf irrespective kafka connect health check pass health type http path contextpath healthcheck remove healthcheck step endpoint repond internal server error healthcheck hit provide,0,31,0,0.0,0,2019-06-22T07:14:43,0.0
56651425,11632038.0,<java><microservices><netflix-zuul><consul><service-discovery>,add path zuul route serviceid,add path zuul route serviceid consul incoming url zuul map specific microservice entdpoint service discovery consul work pretty fine basic mapping problem route result add service customer path middle course enter url work avoid register consul service application yml zuul mapping springboot application file pom xml,0,59,0,0.0,0,2019-06-18T14:28:33,0.0
56693499,5404569.0,<spring><debugging><visual-studio-code><microservices><jhipster>,debugging jhipster generate microservice,explain proper setup debug jhipster generate microservice lot document post monolith app debugging note microservice,0,25,1,0.0,0,2019-06-20T20:32:22,0.0
56576579,208623.0,<domain-driven-design><microservices><next.js><decoupling>,decouple nextjs app microservice datum,nextjs app mantaine team ssr integrate datum remote microservice sake discussion team maintain microservice microservice receive input app respond datum elaborate render nextjs app approach write client microservice nextjs app logic call client npm module pass datum micro crunch response order serve result function express route definition middleware approach doesn work don couple app micro development nextjs app small prs team ddd nextjs app microservice clearly domain good approach keep thing decouple idea write react component npm module logic order include react component nextjs app work ssr write third micro node app serve html nextjs app care call micro provide app,0,116,1,0.0,0,2019-06-13T08:37:14,0.0
56523041,4420355.0,<c#><.net><rabbitmq><microservices><masstransit>,microservice receive rabbitmq message,add user follow code call destination receive event configuration identiyserverservice start bus configuration difference add consumer profileservice add well create user message receive publish rate increase total number message change connection expect queue expect implement inside receive message error log warning receive message queue edit send message rabbitmq management receive message follow error,0,82,2,0.0,0,2019-06-10T08:38:28,0.0
56683894,6614056.0,<deployment><microservices><dependency-management>,manage dependency version service micro service architecture,current team close micro service cloud challenge face release manage dependency build version service micro service change release update version service blindly considerable amount time understand current scope release change dependency version service leave rest unchanged well manage dependency release open source tool process team,0,36,3,1.0,0,2019-06-20T10:21:12,0.0
56619273,11655028.0,<java><microservices>,microservice error start application,start application face error exception encounter context initialization cancel refresh attempt sure hibernate dependency version,0,32,5,0.0,0,2019-06-16T13:27:01,0.0
56566112,392957.0,<c#><microservices><windows-authentication><asp.net-core-2.1><httpcontext>,httpcontext user identity propagate call chain web application api,asp net mvc application send user window authentication web api setup window authentication app site add trust intranet site internet option ensure window send user call application talk service bus communication micro service currently web api cover domain application check user httpcontext user identity user identity user bus bus call web api lose identity limit chain call identity propagate info api currently window server app pool server domain client intranet application,0,30,9,1.0,0,2019-06-12T15:51:04,0.0
28264162,3527207.0,<java><rabbitmq><message-queue><amqp><microservices>,embedded java amqp broker federation capability,micro service communicate amqp message local queue connection establish rabbitmq server send federate message local queue server apache qpid java broker federation capability proposal small embed java amqp broker work java tool actively send message local queue remote server,1,218,0,0.0,0,2015-02-01T15:07:42,0.0
28953200,1630586.0,<rabbitmq><microservices>,microservice queue http request,backend dozen worker connect api gateway context worker handle db decouple db worker worker infrastructure interesting understand kind request response pattern handle context request worker common db microservice article deal applicable situation http request pattern pattern heavy,1,1105,3,0.0,0,2015-03-09T22:49:41,0.0
30708162,1514220.0,<spring><jpa><spring-data-jpa><microservices>,spring jpa amqp,micro service architecture business application communication ampq question standardise communication program example database request spring datum jpa create code send request amqp request object service amqprepositorie standardise idea experience,1,71,4,0.0,0,2015-06-08T11:37:45,0.0
31941887,1287643.0,<architecture><protocols><microservices>,channel microservice interact http,wonder well approach build microservice orient system pair service interact appropriate http durable option good pair service exist virtual physical machine exist require simple stream input stream output pipeable write language node clojure python,1,102,3,1.0,0,2015-08-11T12:31:34,0.0
33910833,3828260.0,<security><architecture><authorization><microservices>,service service authorization micro service,scenario multiple micro service authenticate sso layer service rest call service process common service service service service authenticate sso prevent service call service help,1,118,2,0.0,0,2015-11-25T07:35:22,0.0
36355567,3332099.0,<soa><microservices>,soa microservice,agree disagree question statement soa microservice soa service microservice service obvious point point difference service soa service web service soap service monolithic system separate inside monolithic system service start monolithic system access point web service connect enterprise service bus individual service concept microservice soa service deployment monolithic system deployment separate service deploy individually clear difference soa microservice check internet definition discussion microservice soa statement find clear statement define difference soa microservice best regard chris,1,515,5,0.0,0,2016-04-01T11:47:53,0.0
38132927,6535351.0,<heroku><microservices><netflix>,spring cloud sidecar rails app heroku,sense advantage netflix oss components zuul eureka rail api microservice deploy heroku deploy rail app spring cloud sidecar heroku dyno single web process recommend approach centralized dynamic configuration heroku spring cloud config archaius etcd,1,170,0,0.0,0,2016-06-30T20:44:45,0.0
54813470,11097542.0,<spring><spring-boot><oauth-2.0><microservices><spring-security-oauth2>,spring boot oauth client bearer token session,basic oauth app set work well single instance request detail microservice environment instance null authentication work correctly case library authenticate google hint persist bearer token session refresh,1,49,0,0.0,0,2019-02-21T18:01:52,0.0
54753366,2613233.0,<spring><spring-boot><microservices><fluentd>,integration fluentd java application,work integrate spring boot application fluentd fluentdlogger application source forward fluentd config file log entry log file provide log level log statment spring boot application default statement print file tag tail log framework log file fluentd tail file file appender logback log framework java,1,170,0,1.0,0,2019-02-18T18:32:09,0.0
44706654,641298.0,<oauth-2.0><microservices><openid-connect><identityserver4>,oauth openid connect persist user identity microservice,spa single application call service access token return service call internal service standard drive approach persist user identity service example service simply pass jwt token receive service real industry accept standard case acceptable pass jwt token internal service oppose internal service retrieve token call service,1,138,2,0.0,0,2017-06-22T18:12:15,0.0
44879399,5200714.0,<spring><maven><spring-boot><microservices><netflix>,multi module spring boot structure microservice,develop application micro service architecture netflix open source library module structure micro service design spring boot spring datum lot search internet find concrete solution well multi module structure,1,835,3,0.0,0,2017-07-03T06:52:29,0.0
30597881,2318656.0,<spring><rabbitmq><microservices>,rabbitmq producer consumer java spring micro services,idea message queue rabbitmq message broker implement concept project currently spring micro services integrate rabbitmq project understand publisher subscriber workflow rabbitmq confused segregate producer consumer spring micro service micro service invoke base correspond micro service pass message queue wrong correct thought helpful implement provide sample spring mvc rabbitmq google find helpful answer tia,1,470,3,0.0,0,2015-06-02T13:43:50,0.0
31517036,3318813.0,<api><rest><oauth><uml><microservices>,oauth multiple client rest api,question good model account service multiple profile multiple rest service imagine profile platform chatting write stuff community second profile platform buy thing platform profile ecosystem connect account oauth follow client typical oauth fetch switch account proper capable task improve security problem,1,302,3,1.0,0,2015-07-20T12:51:47,0.0
34825402,4189441.0,<asp.net><social-networking><microservices><azure-service-fabric>,distribute network microservice,read lot microservice case azure service fabric great framework develope service find nice usage pattern service fabric example microservice type represent user reliable stateful actor user instance service thousend user thousend actor instance facebook update feed feed friend easy example state user actor service store social feed social feed friend entry social state easy fast low latency display work well user thousend friend store public feed entry social state user iterate user actor instance alle state fast find actor instance pattern good practice stateful service type represent social state public user update social state automatically update feed friend service fabric example update public feed social state public user filter public social state addition feed friend feed good implement function client user connect actor service instance request feed actor service instance connect public service instance request filter public feed entry actor instance merge entry entry user display datum client connect servcie public service instance user actor service instance directly result merge client side good practice trade problem point direction,1,75,0,0.0,0,2016-01-16T09:23:42,0.0
34744060,1108290.0,<java><rest><gradle><microservices><vert.x>,vertx concrete gradle maven example specific configuration,currently struggle vertx jersey work find representation runner lot problem hk vertx org glassfish hk api unsatisfieddependencyexception quick example work great,1,96,0,0.0,0,2016-01-12T12:44:22,0.0
43032712,7770457.0,<microservices><consul><pivotal-cloud-foundry>,consul agent pcf alongside application,consul agent pivotal cloud foundry application service spring boot app service node js app service follow video provide overview spring cloud starter consul locally machine agent locally work question production cloud environment appreciate example approach docker container appreciate guideline,1,382,0,0.0,0,2017-03-26T18:16:13,0.0
42876385,4481703.0,<docker><spring-boot><spring-cloud><microservices><reactor>,event source microservice spring cloud reactor,currently build microservice spring boot docker luckily find blog kenny bastani find github project source code example functionality technology ubuntu desktop os instal follow software mention blog maven java docker docker machine docker compose execute follow script base blog reduce virtualbox memory virtualbox disk size avoid computer freeze docker machine create event source demo driver virtualbox virtualbox memory virtualbox disk size eval docker machine env event source demo sh sh script follow snippet error occur create docker image link establish connection log detail,1,388,0,1.0,0,2017-03-18T15:44:35,0.0
42941770,7748909.0,<java><wildfly><microservices><wildfly-swarm>,java lang classnotfoundexception org jboss shrinkwrap descriptor impl jbossmodule moduledescriptorimpl,start wildfly swarm demo app error happen wildfly swarm command simple mvn package command dependency ps pom xml generate site generator pom xml,1,218,1,0.0,0,2017-03-22T02:44:38,0.0
42951764,4519163.0,<python><r><machine-learning><microservices><forecasting>,export arima model application model forecast time series,work microservice application write python script script require create arima model python script require create arima model forecast time series script achieve create model compare export python script model pmml savepmml arimamodel function create pmml file receive error error function class fdef mtable unable find inherit method function savexml signature list error object type difference export create arima model python script predict time series script,1,346,6,1.0,0,2017-03-22T12:33:03,0.0
33373964,1496984.0,<python><django><microservices><12factor>,twelve factor app docker microservice deployment,idea apply small microservice style deployment python django project django project package docker container deploy docker hub thing understand deal configuration file environment variable common wisdom factor app configuration store environment variable source control implement check environment variable file dev set environment variable production docker declare environment variable dockerfile add check dockerfile source code defeat purpose create additional file production check source control copy production file build image command developer access db credential set custom build trigger code update source control build trigger issue image build building node add file deploy server feel third option sense case config item store file environment variable idea,1,556,4,1.0,0,2015-10-27T16:55:41,0.0
33312427,4233586.0,<microservices><nosql>,secondary indexing sort microservice entity detail reside microservice,microservice manage store user user detail email manage store user group list user ids group limit user requirement group microservice fetch user group position size sort email time register generally microservice architecture denormalize user detail group store sound major pain keep datum sync break concept keep user group single microservice general approach secondary indexing involve break concept separate concern,1,136,10,0.0,0,2015-10-23T22:40:33,0.0
46581022,894095.0,<rest><asp.net-web-api><microservices><api-design><api-gateway>,api gateway share service model,short version question wrap head model share api gateway internal microservice assume gateway responsible transform call multiple service return aggregated representation datum gateway model microservice simple example api gateway user service restaurant service user service rest service expose endpoint model restaurant service rest service expose endpoint model api gateway api gateway allow call return dish cook basic user detail model point identify model class internal service representation datum return api gateway unsure api gateway user restaurant service model couple model directly api gateway well essentially share code gateway microservice desirable,1,240,1,1.0,0,2017-10-05T08:24:56,0.0
41605538,7407908.0,<microservices><netflix-zuul><netflix-eureka><netflix-ribbon>,dynamically route request client microservice,achieve set micro service type version set account ms ms ms set account ms ms ms service set version set version netflix zuul select micro service instance account basis version request example request client access account service version step return ms ms ms request version request header ribbon client side load balance lot advance,1,196,0,0.0,0,2017-01-12T05:11:40,0.0
42341953,433141.0,<microservices>,reduce async communication overhead micro service architecture,micro service manage user datum micro service require user datum replicate messaging queue micro service update datum base user datum publish result queue service wich depend result service service aggregate datum publish result issue update user datum service result update service trigger update service update trigger update service chain require datum base bad datum base version user datum service aggregate result inconsistent datum solution pattern problem currently mind service include result version datum base wait consistent version datum base version disadvantage solution datum form base,1,71,1,0.0,0,2017-02-20T10:21:57,0.0
41859137,589309.0,<android><spring-cloud><microservices><netflix-eureka><spring-cloud-netflix>,android spring cloud eureka service registration,write android app call microservice write spring boot work integrate eureka service discovery move cloud native architecture read lot documentation eureka spring client call write native android app spring option service discovery api gateway,1,300,3,1.0,0,2017-01-25T18:39:37,0.0
41752527,3735715.0,<spring-boot><microservices><gemfire>,start gfsh exception jmx manager startup fail org eclipse jetty server handler,connect gfsh gemfire exist locator locator gemfire server connect verify unit test spring boot connect gfsh locator follow message command explicitly localhost port error start server help appreciate,1,226,3,0.0,0,2017-01-19T22:02:05,0.0
39887185,3237415.0,<database-migration><rethinkdb><microservices>,rethinkdb migration keep actual schema,start learn rethinkdb good pracitc keep actual schema table suppose rethink message bridge microservices api data parser api create document state pende subscribe update parser subscribe change load datum update state case keep table auto create table exist microservice maintain database suppose api raise exception table find lazy code validation imho case exception raise boot api service avoid error service work,1,165,1,0.0,0,2016-10-06T03:45:13,0.0
39813972,178840.0,<microservices><akka.net><akka.net-cluster>,fault tolerant redundancy,result biased opinion base answer close question basic requirement improve time speed main compete approach traditional pub akka net issue currently expect concurrency control basic workflow datum analysis manipulation persistence result step capture work object work step execute work load produce result step save result traditional pub easy micro service step push message step datum require point datum step message queue topic subscription software provide nice ability geographically spread load source data locate increase number worker subscribe increase push central support idea connect worker minimal learning curve component set worker component workflow queue message queue wait component online component disconnect add component easy register subscription topic pretty box easy joy assume sensible aggregate bounded context pattern adhere seek advise write good distribute code deploy support debug rouge corrupt message akka net offer akka net clustering production ready good understand main question message store prior arrive long publisher access messaging bus software endpoint software store hold message wait subscriber connect pick message obvious assumption subscription register message queue akka net cluster handle tooling exist operational support queue mailbox akka net cluster tool operator insight mailbox receive wait process tool exist view publish receive compete pub software operational tool comparison debug rouge missing corrupt message trust software bad message system spiral control eject bad message system modify message behave differently business answer message system wait receive receive mailbox component hard recycle hardware failure restore mailbox queue message process acceptable lose tolerance message mailbox lose tolerable persistence tolerance light review appear advocate supervisor pattern build software marshal message guess manage release concurrency lock concurrency issue box pub mechanism support basic message remoting internally define code component subscription topic pub software object push message central potential single point failure component code aware consume message expansion nirvana compare school manually push message object rebuilding recompile class message keen build message router instance component offline step remember queue remember message push blindly step software delete subscription message keep queue base rule define ttl provide,1,239,4,0.0,0,2016-10-02T04:50:51,0.0
53007599,5631320.0,<authentication><microservices><api-gateway>,microservice authentication api gateway,progress implement microservice architecture single entry endpoint client api gateway authentication flow client spa pass user credential api gateway pass authorization authentication service auth service validate credential issue form opaque token pass client api gateway client send token header request api gateway exchange opaque token jwt auth server store cache jwt attach downstreame request internal microservice validate jwt issuer audience doubt oauth openid protocol support box implement desirable well solution authentication service locate api gateway advance,1,506,0,0.0,0,2018-10-26T11:19:15,0.0
53162700,5378109.0,<kubernetes><microservices><srv>,perform srv kubernete port perfom service call,srv perform port kubernetes service exactly perform yml file nslook port main port point btw,1,38,5,0.0,0,2018-11-05T21:46:42,0.0
50658419,7717158.0,<spring><microservices><spring-cloud><spring-cache>,database cache spring cloud maintain consistent list microservice general,spring cloud microservice general concept struggle understand microservice connect mongo database enable spring cache annotation set thing save persist object mongo add cache remove object mongo remove cache work fine single instance microservice happen stand instance microservice share cache work individual cache happen objecta add instance cache database remove database instance objecta instance cache remove mongo hopefully clear,1,49,2,0.0,0,2018-06-02T15:29:15,0.0
50603703,1510266.0,<java><spring-boot><microservices><apache-zookeeper><apache-curator>,curatorframework spring boot,service service implement curatorframework access zookeeper cluster spre boot application spring boot app fire request period time service start throw outofmemory unable create native thread thread dump notice follow help sure thread wait,1,344,3,1.0,0,2018-05-30T11:38:08,0.0
38270537,1678568.0,<jenkins><continuous-integration><hudson><microservices>,share config set developer multiple job,team develop micro monolith application application spit multiple module microservice pattern tomcat container linear workflow environment dev qa production commit dev jenkins automatically build test deploy application dev environment develop multiple exclude feature simultaneously multiple dev environment allow developer easly set share property jenkins par feature branch environment work feature person set property push change repository jenkin automatically build deploy commit set environment sharing require build pipeline service share configuration application case share config step people good solution easy set parameter good parameterize job people possibility parameter currently set,1,40,0,0.0,0,2016-07-08T15:36:24,0.0
55495138,217648.0,<architecture><microservices>,define design microservice,define microservice base follow requirement application microservice care create member create web application kind relationship member create microservice inside application create member correct solution becuase microservice belong application owner member database change member create update publish service microserivce belong application requirement member exist member member db belong application save database additional member dosn exist create add member db add db microserive additional good solution define microservice message broker pub communication microservice,1,29,0,0.0,0,2019-04-03T12:24:24,0.0
55400319,8115372.0,<spring><spring-boot><microservices><netflix-eureka><netflix>,discover eureka third party application spring boot eureka client,work application communicate microservice cluster configure feign client microservice side communicate maven dependency application order feign client work good encounter problem application fact add eureka client configuration application discover eurek server communicate microservice work configuration file eureka client property situate classpath ressource question property application yml accord spring profile create eureka client property spring profile note discover work file register application eureka application normal spring boot application,1,35,0,0.0,0,2019-03-28T14:38:23,0.0
55340101,10211074.0,<.net><rabbitmq><microservices><core><rawrabbit>,rawrabbit net core newtonsoft parse,code wanna basically connect app rabbitmq work problem json parse solution problem move somemessage direcotry reference class service avoid leave definition message service appreciate suggestion,1,47,0,0.0,0,2019-03-25T14:28:31,0.0
55361427,4982771.0,<odata><microservices><api-gateway>,odata api gateway microservice architect,odata api gateway example odata rest request service entity framework provider service provide datum service deferent type database sql sql odata service provider architecture client endpoint send odata request manage service response request search find create custom provider odata odata api gateway,1,63,0,0.0,0,2019-03-26T15:59:05,0.0
55309629,11245378.0,<c#><python><.net><signalr><microservices>,python signalr client application connectionid connection signalr hub,time poster experience develop microservice net client rest api request service api microservice result send client rest api signalr return datum callback client application expect develop net python consumer service successful test net client microsoft aspnet signalr client python client signalr client trigger callback api specific client send response client work reason net client application connect hub connectionid hubconnection connectionid rest api call pass connectionid api connectionid send response signalr python client find connectionid attribute connection object connectionid python client approach follow net client work python client find connectionid,1,138,1,0.0,0,2019-03-23T01:05:01,0.0
55350278,5665799.0,<web-services><http><design-patterns><redis><microservices>,redi http communication service,monolithic rail api serve websocket outgrow actioncable decide move websocket elixir phoenix model client interact rail application http request phoenix handle websocket traffic rail communicate phoenix datum send channel phoenix essentially passthrough rail send initially set redis pubsub communication rail phoenix work well current scale start inferior choice list pro con redis pro order message case proper queuing mechanism wicke fast dead simple publishing rail con competitive consumer manually implement balance multiple phoenix consumer real possibility concurrency difficult implement well elixir strength http pro concurrency free load balancing free request fulfil single phoenix consumer simple implement con unordered message slow send message rail manually implement retry timeout http request rail message lose server restart good weigh find hard claim clear choice pattern redi http communication service alleviate problem prefer consider con simple alternative overlook involve rabbit mq avoid,1,119,2,0.0,0,2019-03-26T05:16:23,0.0
49483449,615916.0,<microservices>,propagate xx error user occur internal communication upstream micro service,three micro service assume client call client call micro service call call return xx error user client receive response actual error detail message assume bad request error xx error user bad gateway propagate xx error user client bad gateway xx error error detail response body example xx error error detail response body auth error time error,1,76,3,0.0,0,2018-03-26T03:19:58,0.0
43969425,4310065.0,<node.js><authentication><authorization><token><microservices>,authorization authentication microservice,develop auth service nodejs handle authentication authorization endpoint implementation sure logic endpoint method auth token header db lookup token exist expire method ii user database auth service store user info endpoint authorization token expire decode token user info db lookup exist user db,1,273,2,0.0,0,2017-05-14T22:28:11,0.0
43815141,5902017.0,<rest><oauth-2.0><jwt><microservices><laravel-passport>,communicate frontend microservice architecture,struggle set reliable performant solution communicate frontend microservice maintain csrf frontend service solution stack php laravel passport jwt oauth axio current approach start approach laravel passport oauth authorize user website service jwt token return communication token save cookie website user authorize website jwt token manage request additional oauth server send jwt token cookie http header withcredential authorize user website request csrf token create service user authorize cookie apply unauthorized website access service kill performance retrieve csrf request assume laravel passport approach create csrf jwt token mistake concern regard james ward post understanding set jwt website cookie domain set access site request service access jwt csrf secure potential attack service jwt achieve good term performant generate csrf service sure communication vulnerable attack site advice appreciate,1,569,3,0.0,0,2017-05-05T23:40:29,0.0
52189008,5882375.0,<docker><kubernetes><microservices><minikube>,uri absolute calling microservice kubernetes pod,develop microservice respond kubernetes deployment minikube load balancer service order expose service reach postman request error recognize query param email recognize,1,88,0,1.0,0,2018-09-05T15:42:21,0.0
52141712,10307949.0,<swagger><microservices><jhipster><swagger-ui><springfox>,serve swagger ui jhipster server microservice,jhipster server microservice serve swagger ui microservice gateway aggregate api doc serve place custom swagger ui angular frontend standalone jhipster server microservice frontend swagger ui instance force server microservice serve swagger ui,1,445,1,0.0,0,2018-09-02T23:30:03,0.0
52158366,4082198.0,<database><transactions><microservices><distributed-transactions><2phase-commit>,pc prevent commit failure,distribute transaction thing study phase commit work distribute transaction micro service architecture understanding phase transaction coordinator node ready commit agree ahead commit prevent follow failure node respond ready commit transaction coordinator ahead commit node fail commit database constraint connection timeout node commit distribute transaction corrupt short node ready commit assume node normal database distribute transaction,1,25,3,2.0,0,2018-09-04T03:23:33,0.0
52060716,1312992.0,<.net><microservices><masstransit><contracts>,masstransit share contract,recommendation share contract publisher subsciber mircroservice orient architecture masstransit service bus well separate nuget package copy contract microservice,1,290,3,0.0,0,2018-08-28T14:49:08,0.0
52045330,2204050.0,<docker><logstash><kibana><microservices><elastic-stack>,setup logstash conf microservice architecture,microservice base architecture microservice container process set elk stack container microservice log host machine inj microservice log path logstash conf follow question request request log message trace request microservice set type filter logstash view kibana jas,1,48,3,2.0,0,2018-08-27T18:47:54,0.0
39172254,3090403.0,<microservices><netflix-eureka>,eureka support restful endpoint,netflix eureka support restful endpoint requirement client discover amqp base endpoint provide rabbitmq main competitor eureka consul zookeeper essentially key store store,1,110,2,0.0,0,2016-08-26T18:04:01,0.0
44074241,8034022.0,<security><microservices><azure-service-fabric><service-fabric-stateful>,secure communication service service fabric standalone cluster,secure service fabric cluster client node node node follow reference doc help set security communication microservice application type inside service fabric example sample application angularjs front stateful service service service good practise secure call angularjs front service service red arrow diagram reference document book refer,1,356,3,0.0,0,2017-05-19T15:49:56,0.0
35669660,165473.0,<java><webhooks><microservices>,microservice webhook client,server publishe state change form webhook invocation scaleable consume webhook payload post request json payload java microservice framework library,1,295,0,1.0,0,2016-02-27T12:16:24,0.0
35630836,2568351.0,<node.js><database><microservices>,transaction microservice seneca,start develop web application microservice architecture senecajs framework good documentation understand solve problem transaction microservice implement suggestion,1,258,1,0.0,0,2016-02-25T14:58:25,0.0
35721702,4445454.0,<json><node.js><sails.js><microservices>,call microservice gui form,create application microservice architecture create form save datum independent service example form create profile upload showcase modify request response object application work standard http request relay http tcp define schema req help req object,1,153,2,0.0,0,2016-03-01T11:30:20,0.0
35654979,2597407.0,<spring><mqtt><microservices>,spring mqtt broker,implement mqtt broker microservice spring find documentation help idea,1,805,4,2.0,0,2016-02-26T14:58:15,0.0
50944450,1223817.0,<node.js><spring-boot><microservices><netflix-eureka><seneca>,design microservice service registry seneca eureka,interese design microservice environment spring nodejs spring easy find plenty resource netflix eureka number consul nodejs find opportunity allow microservice communicate method design microservice architecture static ip port map code config file dns service discovery eureka consul blockchain seneca regard nodejs youtube find video attention video seneca father richard rodger title nodejs microservice registry problem seneca work base main microservice service discovery microservice ip port website peter finish microservice architecture knowledge microservice spread swim protocol difference seneca pattern match forward message microservice travel base main microservice seneca service registry service registry tag ip code theorical env moment,1,294,0,0.0,0,2018-06-20T09:10:43,0.0
50913125,3066708.0,<laravel><microservices>,web laravel application microservice,web structure transform monolithique application scalable application microservice nodejs module problem module laravel middleware example modules return json format url view microservice node package composer package luman lose microservice concept source,1,330,0,0.0,0,2018-06-18T15:44:44,0.0
51060065,6266171.0,<microservices>,microservice communication soap service,prepare microservice design application microservice communicate ui straight forward achieve microservice communicate third party system soap sync communication avoid sync communication build component component responsible fetch datum third party system store local database consider separate module microservice communicate internal module problem solution application achieve async communication real time request store transaction datum database database communication,1,93,0,0.0,0,2018-06-27T10:09:37,0.0
51035005,7185662.0,<rest><django-models><orm><django-rest-framework><microservices>,access model orm django instance microservice architecture,django rest project postgre database app project decouple move server current view place import model app perform operation orm keep mind access model app separate django instance server perform query,1,102,2,0.0,0,2018-06-26T04:41:05,0.0
56398668,3945085.0,<java><spring-boot><microservices>,ribbon loadbalancer microservice,microservice develop stock application structure stock ui ui application vaadin stock dbservice microservicefor db call stock serviceregistry eureka server discovery server stock apigateway api gateway zuul ui app api gateway db service service call load balance couple question explicitly mark eureka service registry eureka internally perform loadbalancing ribbon,1,20,0,0.0,0,2019-05-31T16:23:59,0.0
56405235,10331780.0,<spring><spring-boot><jwt><microservices><netflix-zuul>,authentication spring boot microservice zuul,spring micro service architecture create microservice currency conversion currency exchange currency converstion work help currency exchange eureka server netflix zuul gateway zuul secure spring jwt oauth configuration entry point microservice zuul call currency conversion microservice authenticate problem face currency conversion contact currency exchange gateway feign rest template token knowledge store token send request microservice talk exact help,1,38,0,0.0,0,2019-06-01T08:56:13,0.0
56447816,9625776.0,<spring><security><spring-security><microservices><gateway>,forbidden access deny request ressource spring cloud microservice,secure auth service jwt request ressource jwt header work fine implement eureka service discovery zuul gateway request secured ressource follow response meesage occur send request gateway unsecured ressource gatway problem secured ressource security configuration auth service,1,114,0,0.0,0,2019-06-04T16:23:07,0.0
56462077,6897492.0,<microservices><ribbon>,active standby microservice spring boot,situation microservice environment service load balance work active standby time serve request service instance request route instance instance service request option override ribbon irule prefilter service implementation case,1,44,1,0.0,0,2019-06-05T14:01:22,0.0
56479577,11609464.0,<automated-tests><integration-testing><microservices><bdd><cucumber-jvm>,microservice integration test suite cucumber bdd,basically advice design integration test suite qa cucumber bdd microservice integration application environment qa maintain separate code base github repository test suite well code reside inside application code base build integration testsuite cucumber bdd test enterprise application platform application platform microservice build springboot integration app apache camel fuse currently test suite build project eclipse ide sense micro service integration app code base src main folder cucumber test correspond src test folder system test integration test app deploy test trigger jenkins pipeline test dependent app service domain access restriction qa team create maintain separate test application test standalone repository maintain application level integration test integrate jenkins pipeline trigger feature app proper cucumber tag deployment main app suggestion,1,51,1,0.0,0,2019-06-06T14:22:00,0.0
56404620,6844591.0,<java><rest><spring-boot><spring-security><microservices>,spring boot microservice zuul secure annotation,zuul proxy gateway application project application micro service create project rest controller access url face access deny issue response project micro service project application comment globalsecurity annotation work perfectly authority check happen projectcontroller gateway zuul property discovery microservice property,1,55,2,0.0,0,2019-06-01T07:11:39,0.0
44276559,6181208.0,<varnish><microservices><vert.x>,varnish microservice architecture,microservice call call redundant plan varnish cache layer save redundant call follow question varnish suitable case tool configure varnish maximum throughput minimum latency service vert base service async call,1,264,2,0.0,0,2017-05-31T05:43:25,0.0
44291613,121400.0,<rest><coldfusion><microservices>,coldfusion microservice framework,sample cf microservice rest api framework coldspre help advance,1,265,4,0.0,0,2017-05-31T17:53:35,0.0
44661253,5635833.0,<mysql><docker><microservices>,good mysql docker base microservice,develop microservice stack spring cloud database mysql easily explain service mysql database question good deploy mysql database production container base enviorment mysql docker mount host local file system docker local path var lib mysql install mysql host docker engine access docker add host localhost update mysql grant allow connect ip aws ec instance ip good practice update grant recommend mysql microservice production,1,236,0,0.0,0,2017-06-20T19:11:45,0.0
41356089,4911175.0,<spring-cloud><microservices><resttemplate>,loadbalance resttemplate load balance resttemplate brixton release,migrate spring cloud version brixton release github documentation explicitly mark loadbalance resttemplate object observe rest template pick load balanced list server ribbon investigate find loadbalancerinterceptor include resttemplate object resttemplate object early cloud release loadbalancerinterceptor include resttemplate declare manually forward pls share,1,806,2,0.0,0,2016-12-28T05:49:21,0.0
41425946,7364960.0,<oauth-2.0><cloudfoundry><microservices><pivotal-cloud-foundry>,detect rest call originate cloud foundry,microservice base architecture microservice cloud foundry expose rest interface rest interface invoke browser requirement rest call originate browser authenticate request microservice authenticate oauth rest call originate browser carry jwt microservice expect verify jwt request originate microservice carry jwt peer microservice expect detect request originate cloud foundry allow pass spring security filter microservice detect request originate cloud foundry,1,47,1,0.0,0,2017-01-02T11:25:46,0.0
41221800,7315654.0,<distributed-computing><microservices>,strategy distribute compute inside microservice architecture,advice follow problem work people microservice architecture microservice distribute machine resource machine limited currently communication message broker case microservice occasionally heavy computation perform computation machine low cpu usage memory space idea machine install microservice publish cpu usage memory space message broker microservice distribute workload fit machine install worker microservice fly result publish message broker resource limited worker microservice uninstalled find case guy better exist solution topic microservice distribute computing appreciate advice help,1,109,4,1.0,0,2016-12-19T11:40:44,0.0
41276590,7094134.0,<node.js><docker><microservices><docker-swarm><seneca>,senecajs docker,currently work project server side base nodejs express docker swarm load balancing scalability fact build docker image deploy node swarm handle rest load balance read day concept microservice docker build microservice read senecajs build microservice combine touch current architecture interested microservice senecajs separate function express build microservice docker swarm build container load balance facilitate deployment server,1,201,1,0.0,0,2016-12-22T05:54:46,0.0
48273705,192759.0,<django><authorization><jwt><microservices>,distribute central authorisation django microservice,build django rest framework base service complicated permission microservice stack auth jwt authentication service user add user add service service authorization user database share read read write access database challenge consist user multiple group specific service user read access item group user allow create user access group user role service allow access read list group manage user provide access thing gitlab group provide access gitlab project permission service service talk chatty data divide sure exactly conversely django rest framework service shadow entry user account db advice appreciate feel slow day,1,451,9,0.0,0,2018-01-16T03:33:30,0.0
46519575,7574116.0,<microservices><spring-cloud><spring-security-oauth2><netflix-zuul>,add oauth base ui zuul gateway,microservice create sample application microservice architectural style scenario microservice call customer vendor spring security implement order access microservice pass separate url customer vendor bring zuul api gateway access url gateway property file implement access url respect customer vendor unable access oauth base url help figure gateway include oauth base token sample example output respect oauth behavior gateway gateway example gateway url example gateway url input url help wrong follow link implement gateway advance,1,289,0,0.0,0,2017-10-02T04:37:15,0.0
46397643,6287860.0,<java><excel><csv><testing><microservices>,define test datum backend testing,backend testing work brand project team member design framework java drive test datum store excel test respective endpoint module excel multiple sheet test class read excel sheet parse column create request response body assert optimize data setup convert csv start create individual csv endpoint micro service project problem numerous csv file module wonder well,1,35,2,0.0,0,2017-09-25T04:30:13,0.0
46296177,6289262.0,<maven><spring-boot><jenkins-pipeline><microservices><multi-module>,deploy individual microservice jenkins pipeline multimodule spring boot microservice project,microservice project structure multimodule maven project spring boot microservice module microservice module parent module parent pom microservice pack scm repository setup ci cd pipeline jenkins pipeline microservice change microservice module repository deploy microservice module webhook notify jenkin change parent repo packaging deploy microservice affect reason deploy microservice huge build deployment time test stage add time continuous delivery pipeline jenkin webhook trigger deploy change service maven incremental plugin serve purpose context microservice package maven multimodule projectd achieve approach follow good approach context,1,662,5,0.0,0,2017-09-19T09:02:42,0.0
47065165,8585202.0,<node.js><database><concurrency><architecture><microservices>,duplicate data insert multi container service,problem service replica process datum code datum socket insert datum db problem container service insert duplicate datum db insert docker kubernete,1,33,6,0.0,0,2017-11-01T23:20:19,0.0
53945230,941499.0,<java><aws-lambda><microservices><aws-api-gateway><amazon-cognito>,add extra jwt claim aws api gateway lambda function cognito,follow scenario aws cognito handle user pool generate jwt aws api gateway resource endpoint request process lambda function cognito user pool verify autorize incoming call endpoint access extra user datum claim claim change request cognito pre xyz lambda processor fit sort intercommunication lambdas retrieve user datum claim occur endpoint single request read database endpoint request nice add custom api gateway lambda function entry point retrieve user datum claim decode jwt add extra user datum entry point endpoint jwt claim embed read datum jwt wonder solution guide correct path appreciate,1,126,0,0.0,0,2018-12-27T12:36:15,0.0
53990080,2036945.0,<vue.js><frontend><microservices>,split monolithic frontend independent project compose single,monolithic spa compose distinct apps layout divide header navbar link app user main container select app render develop single repository app completely indipendent rewrite frontend vuejs vuetify split monolith indipendent project good solution share navbar app solution google iframe iframe recomende ssi lack resource complicated set manage deploy single app web component vue cli build wc web component create vue cli rely global vue object sure work properly performance suffer kiss pattern problem project mosaic single spa case,1,35,2,0.0,0,2018-12-31T17:48:09,0.0
53956907,5284909.0,<java><spring><spring-boot><microservices>,spring cloud api gateway microservice,build api gateway microservice develop spring boot microservice include user thing group alert notification service deploy server build common gateway front interact service find simple example route request microservice json response example,1,220,3,0.0,0,2018-12-28T10:19:10,0.0
54001986,8253466.0,<spring><spring-boot><logging><microservices><spring-logback>,spring boot – configure log level time actuator endpoint multiple instance microservice,enable dynamic log level change spring microservice actuator endpoint multiple instance microservice,1,385,6,0.0,0,2019-01-02T06:12:01,0.0
53886546,2929562.0,<spring><microservices><spring-cloud><netflix-eureka>,parameter method websocketroutingfilter org springframework cloud gateway config gatewayautoconfiguration require bean type,develop code reference example spring boot spring cloud dependency error start error start resolve gatewayapplication java bootstrap yml proxyapplication java proxyapi java spring boot,1,503,6,1.0,0,2018-12-21T14:36:39,0.0
40655018,1909698.0,<git><laravel><dashboard><microservices>,multiple laravel instance dashboard,build dashboard navigation item lead laravel instance couple reason intranet application microservice case seperate api view seperate application well approach repository dashboard master template js file css file model fetch navigation database dashboard repo dependency build sure easily shareable accross instance massive ovearhead idea advance,1,39,3,0.0,0,2016-11-17T12:34:02,0.0
40664690,4596721.0,<spring-cloud><microservices>,dependency microservice,configure simple microservice architecture spring cloud start infrastructure component service registry sr config server cs auth server configuration sr cs retrieve configuration startup cs register sr discoverable cyclic dependency sr cs exception connect solution remove dependency example wait service,1,182,5,0.0,0,2016-11-17T20:46:41,0.0
53499399,691183.0,<microservices><spring-cloud><spring-cloud-config><spring-cloud-bus>,refresh spring cloud config queue,spring cloud config change configuration git read startup microservice manually call actuator refresh endpoint actuator example propagate change realtime involve spring bus cloud require installation rabbitmq kafka overkill simple thing require add queue dependency service eureka discovery service instance register easily bit call actuator refresh instance change configuration write custom solution describe,1,112,1,0.0,0,2018-11-27T12:10:40,0.0
53501885,2544698.0,<node.js><docker><nginx><microservices>,config nginx request multiple microservice node,configure nginx manage request redirect proper microservice node express microservice work fine connect redi postgre manage port url dockerize microservice dockerize microservice dockerize microservice currently docker multiple image relevant file idea docker compose yml nginx conf,1,142,1,0.0,0,2018-11-27T14:26:41,0.0
53529166,8610661.0,<java><microservices><soa>,adapter microservice dependency,suppose core system base spring boot call extend communicate external service call restful asynchronously synchronously send json request body xml file regard best effective practice solve bear mind architecture divide develop microservice solution service send request external application deploy microservice receive json body translate internally request xml body send service service adapter connector module additional module core application module module translate logic json body xml connect service point exact request generate build core application adapter connect service parse json body xml body logic adapter connector jar library add dependency core system import core system point bear mind future requirement connect service external application api service hope clear appreciate advice,1,41,2,0.0,0,2018-11-28T22:38:23,0.0
53486345,8051548.0,<java><spring-boot><microservices><netflix-zuul><spring-cloud-netflix>,zuul api gateway highly load balancer,plan zuul api gateway entry point microservice web mobile client connect api gateway doubt suggestion api gateway highly load balancer server side load balancer front multiple instance api gateway server side load balancer select api gateway round robin fashion,1,140,2,0.0,0,2018-11-26T17:38:22,0.0
48675967,6507932.0,<rabbitmq><microservices><asp.net-core-webapi>,intercommunication asp net core web api rabbitmq,web api publish message specific controller call work subscribe receive message work config web api web api action publish message web api receive message work project rawrabbit library scenario update code work,1,357,3,1.0,0,2018-02-08T01:15:29,0.0
36158632,6009890.0,<spring><oauth><spring-security><microservices><spring-oauth2>,spring oauth client credential ui,process break apart monolith microservice microservice write spring spring security oauth monolith custom security spring security user log monolith homegrown security idea ms app user base monolith app user service set oauth auth server working log client credential access rest api problem microservice include uis access directly admin microservice user login monolith hopefully client credential monolith user log second time work access uis hit login oauth server redirect uis authenticate authorize expectation log oauth server client credential scene auth token front user authenticate front question implement client credential login bypass login ui postman credential access token protect ui url header authorization bearer redirect login ui app securityconfig,1,422,0,1.0,0,2016-03-22T15:31:24,0.0
36198621,5846345.0,<spring-mvc><spring-security><spring-boot><microservices><netflix-zuul>,spring mvc ui service zuul check csfr,ui service base spring mvc ui service zuul reverse proxy reverse proxy generate csfr token token ui service insert form send client ui service resource server oauth terminology,1,116,1,0.0,0,2016-03-24T11:01:11,0.0
36238043,2551098.0,<java><jpa><wildfly><microservices><wildfly-swarm>,wildfly swarm entitymanager null,microservice scheduler timing job rest json follow tutorial add persistence xml work failure message nullpointerexception entitymanager create table problem add persistence xml problem connect datasource test work properly schedulermain schedulerestresource schedulebean persistence xml pom xml,1,1304,6,1.0,0,2016-03-26T16:52:20,0.0
42453884,3247425.0,<intellij-idea><dropwizard><microservices>,face difficulty import dropwizard microservice project intellij,unable import dropwizard microservice project intellij import project structure expect add source main folder main main project structure project structure import actual project structure,1,164,11,0.0,0,2017-02-25T08:47:18,0.0
37650349,5406870.0,<javascript><node.js><mariadb><microservices>,insert array question mariadb senecajs microservice toolkit nodejs,nodejs senecajs orm,1,76,0,0.0,0,2016-06-06T05:51:33,0.0
56984170,9133021.0,<python><git><installation><microservices><git-submodules>,good practice independent python git submodule installation,work huge python project multiple python repository import main project git submodule main problem submodule import git repo repo setup py simply python setup py install repo repo repo import easy bash script install dependency easily wonder well easy kind question order well developer well practice structured google concrete good find problem package private sure pip package huge git repo stand application good advice good direction experience kind development problem nice clearly bad python project management blunt answer well,1,48,1,1.0,0,2019-07-11T07:50:55,0.0
56936669,3797309.0,<microservices><jhipster><avro><openapi><jdl>,openapi jdl avro schema good practice generate entity object definition,build microservice piece software api approach entity microservice generate object definition place dto open api entity jdl avro schema create openapi definition dto generate describe entity jdl file format entity allow structure relational database liquibase schema registry avro validate data structure generate object definition good practice generate entity share service edit understanding generate avro schema entity push schema registry allow service schema generate entity service responsible generate entity schema jdl retrieve schema order generate entity solution,1,71,1,0.0,0,2019-07-08T14:04:21,0.0
57072959,1317264.0,<java><microservices><jhipster><jhipster-registry>,jhipster gateway call directly microservice,create gateway microservice find call directly address port sufficient call request process setup,1,64,8,0.0,0,2019-07-17T09:43:18,0.0
45728518,125927.0,<message-queue><microservices>,backfill data create microservice,microservice system queue sqs sn rabbitmq example service example create book service create book edit publish service datastore book create publish message book publish lending service user lend book service read message create book service book exist store loan send message book loan return create service statisitc loan listen create book service message book listen lending service gather statistic good practise datum book create statistic service service kafka datum availible queue datastore create book service,1,70,1,0.0,0,2017-08-17T07:00:49,0.0
42077066,6067957.0,<node.js><rest><orm><microservices>,node js good implement orm style model api endpoint datum source,implement microservice base environment separate datum service db management service business logic service call datum service find relate result endpoint manually declare write http request envision orm sequelize bookshelf declare model attribute link table hasmany belongsto link specific data service api endpoint data source time chris,1,100,0,0.0,0,2017-02-06T20:52:17,0.0
38859525,2564580.0,<mongodb><microservices><database>,good practice create database table application bootup,start application verify database collection appropriate exist create verify fail mis match good practice application bootup separate process currently mongodb question limit database,1,29,0,0.0,0,2016-08-09T20:06:39,0.0
54917316,7834565.0,<java><spring><callback><microservices><conductor>,update database workflow complete fail,spring micro service crud endpoint update entity register workflow orchestration system netflix conductor workflow responsible convert entity specific config format apply configuration arbitrary device issue workflow fail micro service database accurate entity updated state configuration fail apply proper design implement callback service task workflow store database change commit invalidate callback long running transaction,1,24,0,0.0,0,2019-02-28T02:06:27,0.0
54968693,5358640.0,<docker><microservices><spotify><spring-boot-maven-plugin><docker-toolbox>,docker image build issue eclipse,build docker image spring boot microservice project spotify error append stat mnt sda var lib docker tmp docker builder build image docker file help issue docker tool box window build image eclipse,1,51,0,0.0,0,2019-03-03T12:16:38,0.0
55087283,10719574.0,<java><spring><spring-data-jpa><dependencies><microservices>,deal dependency microservice spring framework,code three separate micro service customermicroservice cartmicroservice ordermicroservice connect spring cloud broker pattern service discovery pattern problem dependency microservice example work copy class micro service lot exception execute micro service spring data jpa find class micro service deal,1,55,9,0.0,0,2019-03-10T11:40:38,0.0
57531965,2332194.0,<transactions><microservices><commit><saga>,pc solution compensation distribute transaction,compare saga phase commit analysis pc prepare phase persist datum pende state avoid lockin transaction final phase commit change cost saga pattern case pc interesting saga example transaction email send saga revert case fail pc assume bussiness finally doubt pattern pc follow write pattern adaptation pc ps read article question public,1,22,0,2.0,0,2019-08-16T22:58:07,0.0
57567958,11949948.0,<python><rest><go><rabbitmq><microservices>,syncronyze rabbitmq message,application app integrate service service support communication rabbitmq send request queue listen response decide move rabbitmq separate service service communicate rest api call problem app synchronous response call service synchronize request http request send request rabbitmq wait response rabbitmq http response single http session response rabbitmq order example send request receive order,1,49,2,0.0,0,2019-08-20T06:40:51,0.0
57657725,6262169.0,<node.js><express><microservices>,start micro service nodejs express framework,read microservice break large code completely entity tiny unit require create microservice website app authentication registration login dashboard datum user event total event count event module crud operation node js express framework nosql well sql database microservice write api login signup keep server write api dashboard keep server write crud operation event module keep server code microservice event model event count dashboard datum microservice independent achieve unlimited guy help suggestion helpful,1,72,2,1.0,0,2019-08-26T12:12:14,0.0
57706526,11491219.0,<microservices><hibernate-mapping>,association mapping microservice,microservice student library student library eureka client microservice common db scenario student issue multiple book library monolithic application implement anotate list librarybook studententity add table store book student currently loose mapping binding datum datum create table db column studentid bookid student book library add bookid table delete record book return save delete problem implementation verify bookid save record well implement implement relationship microservice implement association mapping microservice implement association mapping microservice,1,33,3,1.0,0,2019-08-29T08:54:16,0.0
47331857,6546074.0,<web><installation><microservices><offlineapps>,create installation process micro service web application,strange enterprise application microsoft team foundation server implement micros service architecture deploy cloud premise team foundation server simple installation process server course cloud develop type application curious find appropriate answer,1,22,0,0.0,0,2017-11-16T14:11:48,0.0
47260201,8780001.0,<mongodb><web-services><scalability><microservices>,build microservice scheduler scalable,build microservice integrate datum soap webservice scheduler day search datum write mongodb database standard microservice database service service integrate datum serve datum service scale microservice thing problem integrate datum duplicate datum solution divide microservice responsible integrate datum webservice soap responsible serve data scale service problem escape concept microservice database service keep single microservice solve problem scalability create parameter microservice scheduler leave microservice responsible integrate datum work bad solution good solution alternative,1,305,1,0.0,0,2017-11-13T08:51:22,0.0
47335488,4070724.0,<database><microservices><soa>,health check materialized view microservice architecture,microservice architecture microservice private datastore bring challenge maintain consistency multiple service implement query retrieve datum multiple service regard query retrieve datum multiple service implement materialized view pattern search microservice example materialize view asynchronously update event drive design pattern achieve atomicity event drive architecture event table mine database transaction log event source opinion day possibility unforseen circumstance consistency materialized view completely guarantee microservice pattern execute health check materialized view respective datum microservice microsoft net core environment,1,373,2,0.0,0,2017-11-16T17:11:55,0.0
55530017,741242.0,<java><docker><microservices>,package spring boot app sidekick container,op team push deliver spring boot microservice package sidekick call sidecar container alpine idea jre container volume map sidekick claim allow easily swap jre version repackage entire application produce version favor solution change jre difference feeling major version change application opinion,1,41,0,0.0,0,2019-04-05T07:10:51,0.0
55577918,7776688.0,<spring-boot><oauth-2.0><microservices><openid-connect><keycloak>,keycloak secure microservice microservice call,question bit lost idea follow microservice spring boot app interact call directly good idea ot secure idea step call client authentication create realm client config add client config rest endpoint rest template clientcredential provider call ms ms redirect question wrong idea deal good practice well idea ingress controller kubernetes authentication thx advance,1,61,0,0.0,0,2019-04-08T16:34:31,0.0
55551229,8416815.0,<python><automation><microservices><grpc>,automate grpc base microservice python,automate grpc base microservice python achieve reference appreciate,1,29,1,0.0,0,2019-04-06T16:44:18,0.0
55516466,3139390.0,<.net-core><microservices><azure-api-management><azure-kubernetes>,resolve http error notallowedmethod,create net core rest api service method locally debug mode work expect deploy service azure kubernetes service api management call method receive http error endpoint case resolve issue idea,1,69,3,0.0,0,2019-04-04T12:51:14,0.0
49030929,1343888.0,<microservices><netflix-eureka><netflix-zuul><service-discovery>,server side load balancing third party discovery zuul consul eureka,plan build project microservice architecture define zuul api gateway decide service registry consul eureka server side load balance zuul combine zuul consul eureka don registration pattern plan third party registration combine zuul consul eureka tool alternative registrator work docker lot advance help,1,177,0,0.0,0,2018-02-28T13:39:28,0.0
49043697,6314676.0,<azure><asp.net-core><microservices><azure-service-fabric>,warning fail contact naming service attempt contact failover manager service,problem deploy service fabric application visual studio power shell error error service fabric cluster azure certificate security solution online issue remain,1,520,4,0.0,0,2018-03-01T06:19:04,0.0
48919813,1737014.0,<node.js><express><download><microservices>,download file express,curious problem download request browser pass microservice express layer serve frontend service query db generate csv fly stream fetch file express server stream browser directly pipe file browser expose micro service endpoint,1,66,4,0.0,0,2018-02-22T04:44:39,0.0
43220454,1207900.0,<apache-kafka><microservices><apache-kafka-connect>,kafka connect break microservice strategy,understanding microservice service exclusive access database word service share database suppose kafka connect save datum kafka persistent storage mysql create rest api fetch datum persistent storage microservice,1,227,4,0.0,0,2017-04-05T01:45:32,0.0
40120359,5837255.0,<sql><architecture><microservices><azure-service-fabric>,azure service fabric stateful service mirror sql schema,question relate architecte stateful fabric service bunch table sql patient patient visit doctor patient clinical data patient doctor question create reliable collection exactly mirror table schema order replicate db middle tier complex join reliable dictionary data spread multiple partition billion patient visit record decide create partition base hash function query search record long time single partition talk multiple simultaneous query system load tackle load balance stateful service single partition case record single partition distribute query load multiple server practical record single partition regard,1,357,6,0.0,0,2016-10-19T00:53:28,0.0
40219273,520658.0,<version-control><architecture><soa><microservices><production>,version management large soa microservice architecture,embark large programme work migrate small number hugely monolithic tier framework soa microservice architecture thing manage nail version management note word management control core principle programme component absolutely independent design develop build versione deploy operate monitor deprecate independently consumer service principle future hold client service operation reliably dependency service version api production consumer service dependency tree large complex question guy manage maintain enterprise version matrix correct terminology,1,450,2,0.0,0,2016-10-24T13:06:11,0.0
58988452,12414492.0,<spring-boot><microservices><netflix-eureka><netflix-zuul><jwt-auth>,explain void dofilterinternal httpservletrequ request httpservletresponse response filterchain chain work,learn microservice architecture implement service call user management api gateway zuul proxy eureka server authenticate user detail json web token reference code implement zuul proxy authorization hit login uri gateway uri generate json token code method call void dofilterinternal redirect user management service understand working generate token current gateway response,1,17,0,0.0,0,2019-11-22T06:11:14,0.0
59046093,12342443.0,<go><graphql><microservices><twirp>,wire microservice twirpql server,gateway bundle create switch follow official documentation wrap microservice inside multiple graphql layer microservice expose microservice create entry point request send respected microservice enlighten correct usage,1,17,0,0.0,0,2019-11-26T07:51:27,0.0
59027543,1588252.0,<java><microservices><spring-cloud><netflix-eureka>,manage microservice personal linux bare metal,situation eureka server docker container default port bunch service foo jar bar jar foobar jar random port restart service uniquely identify pid single java process good method manage start restart microservice container service solution edit jps work properly jar port list,1,34,3,1.0,0,2019-11-25T08:16:43,0.0
49891578,1261913.0,<node.js><docker><redis><microservices>,redislab free tier hydra router docker container,implement micro service cool hydra package micro service redis database coordinate service setup free tier redislab create service hydra express properly hydra router service access system accord local redis setup redislab setup hydra router redis database redislabs password protect,1,48,2,0.0,0,2018-04-18T05:06:48,0.0
49921667,919844.0,<php><ssl><https><microservices><persistent-connection>,mitigate https overhead php microservice,main webservice microservice main service call lot query profile design blaze fast code perspective microservice main webservice request main service request microservice security reason enable http communication tls note add negligeable overhead tls handshake architecture allow reuse handshake heavy https optimize request allow apache nginx keep connection open reuse php curl extension allow life curl handler reproduce kind behaviour request main webservice curl feature mention,1,82,3,1.0,0,2018-04-19T12:53:56,0.0
51282692,9210480.0,<java><scala><microservices><lagom>,error call consecutive command lagom,call consecutive command follow compilation error headerservicecall follow correct,1,61,0,0.0,0,2018-07-11T10:05:49,0.0
51205484,1117178.0,<microservices><access-control><account>,assign user specific resource entity microservice architecture,description assign user partial list resource entity limit access visibility pretty common assign device user currently implement authorization rest api level base resource http verb control read write access allow user manage device solution maintain user device association filter base extract auth token fly con introduce dependency service repeat implemenation type entity service solution implement user device association api gateway level service simply provide filtering optional extract userid auth token con solution burden api gateway association checking well standard approach deal kind resource entity level access control microservice,1,33,1,1.0,0,2018-07-06T07:51:01,0.0
57943633,12069825.0,<kubernetes><microservices><istio><envoyproxy>,route request external service webhook istio,micro service base infrastructure redirect request service external service change code affect original route good redirect request specific configuring additional code service redirect request multiple destination,1,73,2,0.0,0,2019-09-15T11:22:41,0.0
58092697,8208331.0,<spring-boot><microservices><spring-tool-suite>,suncertpathbuilderexception unable find valid certification path request target error create project,create spring starter project face issue application corporate environment issue exact issue,1,77,3,0.0,0,2019-09-25T06:55:34,0.0
58110187,11524369.0,<signalr><microservices><asp.net-core-webapi>,send notification microservice asp net core signalrhub,webapp feature realtime start signalr database change datum client realtime approach function change datum call signalrhub send datum connect client process trigger sql server dependency sql server table dependency send notification connect client client reload datum notification microservice constantly fetch datum change database integrate core asp net core project data change microservice manner call signalr hub microservice question,1,42,5,0.0,0,2019-09-26T05:35:50,0.0
41072098,763398.0,<powershell><azure><microservices><azure-service-fabric><appveyor>,service fabric fail contact naming service build server,deploy fabricapplication ps script deploy cluster visual studio work expect appveyor build server exact powershell script parameter throw fail contact naming service error start fact fail dev enviornment qa environment work build server well cluster touch setup configuration change sudden error start happen include detail question exact deployment script parameter fail environment work visual studio assume safe cluster profile setup correctly parameter pass deployment script belowser applicationpackagepath publishprofilefile deployonly false unregisterunusedapplicationversionsafterupgrade false overrideupgradebehavior overwritebehavior sameapptypeandversion skippackagevalidation false erroraction,1,790,4,1.0,0,2016-12-10T04:13:43,0.0
40983887,827480.0,<java><asynchronous><ipc><microservices><synchronous>,communicate gui microservice module monolithic application,legacy monolith application redesign mandate redesign bite sized approach moment implement public face web service module advantage situation split service stick issue server generate gui strut monolith datum microservice obvious answer provide rest interface json protocol buffers web service monolith consume order provide result user choice ideally move asynchronous communication monolith service user specific datum microservice asynchronous process user wait gui synchronous event communication protocol gui webservice synchronous well instance user microservice upload datum bulk csv file microservice process datum provide option user manipulate datum ready api call business option gui view download uploaded file essentially monolith responsible gui request file service return user structure design synchronous ipc monolith microservice,1,226,13,0.0,0,2016-12-05T21:42:06,0.0
51644428,2831852.0,<cookies><oauth-2.0><microservices><jhipster>,oauth authentication jhipster gateway uaa cookie,test jhipster create microservice doubt authentication oauth create project gateway uaa project test authentication notice authorization update csrf token cookie wonder remove data cookie header remove cookie csrf token refresh token cookie gateway address access uaa ideal documentation oauth authentication stream gateway uaa,1,141,0,0.0,0,2018-08-02T01:49:07,0.0
51655264,1201830.0,<java><spring-boot><microservices><spring-el>,spel pass enviroment variable directly property file form require,build micro service work generic generate documentation create situation set variable static service depend environment service deploy inject base directly environment variable application yml file profile example imagine syntax regular property application yml clear situation deploy profile proxy hostname reference proxy host people attempt call service directly proxy environment profile time desire environment variable property proxy design service counter intuitive store multiple profile application yml file nb well accomplish feel free,1,27,2,0.0,0,2018-08-02T13:45:03,0.0
53275350,10569528.0,<node.js><microservices>,micro services transaction nodejs,develop micro service node js loop orm apache kafka message broker achieve transaction micro service handle transaction nodejs experience kindly provide solution advance,1,35,0,0.0,0,2018-11-13T06:50:46,0.0
53257088,10638902.0,<microservices><spring-cloud-netflix><hystrix>,hystrix dashboard metrics reset,hystrix turbine read metric service hystrix dashboard add maven dependency enablehystrixdashboard service class read metric metric reset useless client increase timeout interval configuration yml file work help issue dependency,1,74,0,0.0,0,2018-11-12T06:46:01,0.0
58218730,12158994.0,<spring><spring-boot><microservices><spring-cloud-config>,spring cloud file system backend placeholder work,spring cloud config server file system backend placeholder access property file inside subdirectory directory structure access property file inside app config directory unable read inside directory application property bootstrap property read post stackoverflow understand issue occur version version late wonder wrong,1,21,0,1.0,0,2019-10-03T12:04:05,0.0
49715142,7803797.0,<microservices>,implement security message pass micro service,micro service application technology stack development application sbt stack scala akka play web framework external client communicate micro service security mechanism authorization authentication user oauth protocol white list allowable http method perform input validation thing implement security mechanism microservice call microservice internally require implement security message pass micro service help highly appreciate advance,1,37,0,1.0,0,2018-04-08T06:31:49,0.0
49597274,1207420.0,<security><docker><microservices>,secure internal rest api traffic,lot google hit find satisfactory answer currently adopt micro service architecture current concern internal rest api call read plenty call internal encrypt traffic great good approach work ignore issue http retrofit https current thought http micro service docker container docker encrypt traffic example network overlay easy option sign certificate deploy docker container general service communicate ip address hostname service client load balance require create sign certificate java happy https call service sure well pointer appreciate,1,53,0,0.0,0,2018-04-01T10:50:48,0.0
49555067,4653937.0,<spring-boot><microservices><netflix-zuul><netflix-eureka>,zuul read timeout exception,zuul connect student service eureka instance student service register eureka zuul suppose connect student service load balance observe student service instance response time increase instance response time increase assume service instance eureka zuul time resolve service instance call reduce response time,1,590,0,0.0,0,2018-03-29T11:37:47,0.0
49757754,9621608.0,<azure><microservices><azureservicebus><servicebus><stateless>,azure service bus receive message separate subscription parallel,service fabric stateless service listen service bus subscription message code split service bus topic currently listen separate topic base priority stateless service listen topic parallel split process message high priority topic process message low priority topic concurrently basically sure message low high priority topic process simultaneously problem programming model well alternative avoid create separate stateless service priority base topic,1,113,0,0.0,0,2018-04-10T15:37:42,0.0
47576715,1549901.0,<azure><docker><cron><microservices><docker-swarm>,schedule dockerize import job azure,cron hourly inside docker container swarm microsoft azure container currently time unix cron keep trigger import script interested elegant schedule job scheduler spin container start import script handle execution interval fail job thought cheer tibor,1,34,0,1.0,0,2017-11-30T15:15:40,0.0
47470426,8394973.0,<spring><spring-boot><jenkins><microservices><spring-cloud-config>,centralize deployment environment property spring config server,microservices xservice springcloudconfigserver service implement springboot springcloudconfigserver service expose application property deployment property json format xservice deploy cloudfoundry kubernetes environment deployment yamls manifest yaml deployments xservice bootstrap property configure configserver uri problem environment variable instance memory set environment database setting provide configserver service inject xservice yaml file build process xservice point application deploy achieve spring spring boot spring cloud config jenkin good approach problem,1,74,0,0.0,0,2017-11-24T09:44:21,0.0
47555078,5705247.0,<apache-camel><jms><cxf><message-queue><microservices>,apache camel perform asynchronous messaging inside route,camel route client call synchronous soap service route transform request asynchronous message send message queue mq route wait correlate reply message message queue mq finally route send reply client include asynchronous request reply phase inside route handle synchronous ws invocation implement message queue instance retain correlation incoming message original request optimize performance free resource wait ensure multiple instance service mq bundle basically chain three service message queue bundle service service chain return final result service service result meditate precede service instance message queue opinion implement soap service callback meshanism easy camel point synchronous invocation convert asynchronous chain operation join synchronous vital service aware final result intermediate service forbid result produce service chain eip pattern define specific problem track example route send message mq,1,222,0,0.0,0,2017-11-29T14:26:08,0.0
47552197,2290016.0,<logging><microservices>,microservice change log level dynamically,service docker container container dynamically change log level rest api containerized service stateless docker container cloud mesos marathon change log level dynamically time debug service cloud,1,229,0,0.0,0,2017-11-29T11:52:01,0.0
58817814,9915549.0,<java><session><microservices><spring-session><session-management>,spring session issue micro service,handle session microservice application spring session store session mysql database pom xml specife database configuration spring session attribute set session time hour spring session jdbc initialize schema spring create require table create session till work fine session create hour database table problem session clear automatically time search lot issue configuration add extra work expect,1,29,0,1.0,0,2019-11-12T11:30:29,0.0
58765489,7467726.0,<go><microservices><rpc><go-micro><micro>,high wait time response context deadline exceed micro,grpc client write micro call grpc microservice connect elastic search search result web service create grpc client grpc service connection elasticsearch register registry consul enable tls configuration client call grpc service request successful context timeout exceed sure consul time return service connection issue elastic search issue grpc client help stick issue long advance change connection pool size grpc client increase registry ttl registry timeout work consul github micro plugins registry consul uncomment timeout consul watch error service health check request timeout coz block query registry consul grpc client call elastic search service elastic search client grpc client timely response grpc service context deadline exceed,1,27,2,0.0,0,2019-11-08T11:13:59,0.0
46833043,4609725.0,<spring-boot><microservices><hystrix>,bulkahead pattern semaphore hystrix,explain essentially basic strategy hystrix support offload work dedicated thread pool work current thread rely semaphore dedicated thread pool bulkhead pattern strategy case call thread unblocked timeout expectation set well semaphore current thread busy till work complete timeout claim support release branch side question timeout expectation set well semaphore semaphore method tryacquire wait timeout timeout claim support release branch side dedicated pool meaning thread pool service,1,335,0,0.0,0,2017-10-19T15:04:30,0.0
46771150,2913050.0,<backend><microservices>,microservice arquitecture,project production build monolith arquitecture ecommerce move microservice read site microservice arquitecture understand pro con understand real deploy example create service handle business unit user catalog order moment api expose method operation operation monolith arquitecture mvc codeigniter understand microservice arquitecture separate service database serveretc communicate service api request clear create subdomain microservice example htt apiusers site create php curl request communicate service good,1,188,3,0.0,0,2017-10-16T13:08:18,0.0
46775871,7458937.0,<spring-boot><ssl-certificate><microservices><spring-cloud><netflix-eureka>,enable http https ssl certification miscro service spring boot,currently work micro service project spring boot service eureka server micro service register eureka server change eureka server http https ssl certificate keystore instance register eureka server change micro service http http problem configure micro service keystore file problem help configuration application yml,1,137,5,0.0,0,2017-10-16T17:28:11,0.0
50857974,5037494.0,<microservices>,ordinate process microservice,read accept answer post question monitor process choreograph approach author quote book write exactly monitoring system work find properly describe understand store kind representation process work service update cron monitor send message complete time deduce process fail reply caller accurate interpretation author allude,1,51,0,1.0,0,2018-06-14T12:50:07,0.0
50884127,4860590.0,<python><flask><web-applications><containers><microservices>,toggle multiple separate flask application share structure repo,apology pithy explain tl dr good real example slack team switch functionality wrt team entirely remain window save session datum case context essentially work organizational note tool comprise template data structure entity category collection tag example bookmark manager entity represent bookmark category group documentation tutorial collection group project skill involve interact bookmark manager interface organize base query feel search tag datum science search collection project category note app repeat process separate app note structure course material organize spotify playlist sound bit silly organize bookmark list hierarchical nest structure cut deploy package essentially create bunch factory app reuse code plan keep template app datum structure plan extend base entity class specific attribute depend app idea repository switch separate app entry point behave slack sure good visualize central login allow toggle multiple app depend log unrealistic grandiose read containerization la docker well work best app independent interact directly expect app share template configuration misinterpret appreciate nudge direction small,1,48,1,0.0,0,2018-06-16T00:39:54,0.0
50697576,3759227.0,<java><angularjs><spring-boot><design-patterns><microservices>,micro services booking payment approach,poc hotel booking platform micro service approach spring boot mysql front angular simple case check hotel availability book hotel payment divide code follow micro service booking service payment service hotel inventory service suppose ui click book button follow sequence event occur book service api fire order create pende state event create order create event hotel inventory service read order create event create success event assume inventory booking service read success event change status state booking successful question redirect user external payment gateway approach event base well approach implement case,1,62,2,1.0,0,2018-06-05T10:13:53,0.0
50745145,4050313.0,<microservices><spring-cloud><gateway><netflix-eureka><spring-cloud-netflix>,eureka server hang min service registration,create spring cloud setup eureka server auth server gateway micro service zuul gateway configuration eureka server main class application propertie gateway main class property micro service property help advance application work fine individually start cluster service discovery hang min exception discovery client auth server application property,1,141,3,0.0,0,2018-06-07T15:33:25,0.0
52503801,10182311.0,<oauth-2.0><microservices>,oauth microservice,afternoon implement micro service architecture success great problem security read oauth work spring cloud implementation api getaway oauth client solution api gateway login oauth access business service recognize oauth login api gateway follow example wrong example,1,39,2,0.0,0,2018-09-25T17:30:28,0.0
52711738,10475771.0,<java><spring-boot><microservices><jhipster><spring-cloud-feign>,jhipster authorizedfeignclient dynamic,dynamic authorizedfeignclient annotation multiple instance microservice contact microservice client instance contact,1,77,3,0.0,0,2018-10-09T00:27:52,0.0
52502559,8718377.0,<java><spring-boot><microservices><netflix-zuul><http-status-code-504>,prevent zuul send error http http,build application component microservice web client call api zuul zuul send call time hibernate work unactive filter zuul send http unknown error client,1,249,4,0.0,0,2018-09-25T16:13:34,0.0
52565036,10388556.0,<microservices><consul>,fabio consul microservice structure,create microservice architecture base discovery load balancer basically consul discovery backend frontend service database service service health check fabio interact main idea consul dns establish connection front database expose fabio balance instance microservice case idea consul dns connect database fabio balance microservice connection,1,310,11,0.0,0,2018-09-29T04:11:14,0.0
45991612,4524867.0,<amazon-web-services><spring-boot><microservices><netflix-eureka><amazon-elastic-beanstalk>,register client eureka aw,set microservice architecture aw beanstalk springboot example eureka registration service service find service locally fine aw blocker ip address register client service start correctly register eureka access service individually hit url directly send request service eureka service register access url register guess url private individual service service separate beanstalk application complete red herre piece config puzzle point direction,1,300,2,0.0,0,2017-08-31T23:55:53,0.0
45925414,8076655.0,<spring><spring-integration><microservices>,spring integration microservice communication,pretty spring integration application write spring integration rest call microservice spring boot application request pure string request message header payload content type set text plain microservice controller consume mediatype plain text initiate request microservice spring integration application throw error unsupported type throw error alternative json request response unformatted string input format string output,1,222,2,0.0,0,2017-08-28T18:39:41,0.0
45879878,719278.0,<spring><spring-boot><soap><spring-security><microservices>,implement soap dos prevention java,technology stack company provide webservice client query service term secure soap service webservice spring oauth security spring basic auth client flood server send huge amount request short period time implement provent happen ideally client base call interval recognize high calling frequency ban client force client wait code scratch wonder library reuse spring good provide solution enterprise issue find thing hint ideally work sample great edit ideally implement fully rely http server tomcat apache handle implementation offer fine grain rule long interval kind customised message return implement monitoring mechanism treat client traffic allowance,1,65,8,0.0,0,2017-08-25T10:59:28,0.0
39596490,6602247.0,<rest><war><microservices>,micro service application java,ui supply angular web application responsibility micro service application limited supply json support rest path monolithic giant meaning jar bind dependency war app well keep war application supply json ui war sake sure mix,1,55,0,0.0,0,2016-09-20T14:14:12,0.0
50065333,7992211.0,<microservices><mesh><consul><istio><envoyproxy>,configuration istio envoy consul,build service mesh istio currently docker compose rest service sidecar envoy send http request servicea forward serviceb return result work fine control plane implement mesh realize envoy configuration config file follow servicea service implement istio control plane replace configuration istio pilot overwrite route rule envoy config file implement istio route rule example configure connect data plane service plane istio route rule affect service good martin,1,557,0,0.0,0,2018-04-27T15:08:21,0.0
53840626,4993125.0,<java><scala><microservices><spray><lagom>,lagom framework mix java scala service,migrate version base json rest api service service developer fluent scala force fluent scala mix java scala lagom service bit,1,83,0,1.0,0,2018-12-18T20:33:36,0.0
53717617,8245400.0,<rest><microservices><apache-karaf><hot-code-replace>,microservice karaf hot code replacement,write microservice planning karaf understand karaf osgi base container microservice provide modularity question suppose write rest base extend bundleactivator service deploy java code bundle karaf change service deploy continue downtime hot deploy java code module downtime support module invoke api service call,1,52,1,0.0,0,2018-12-11T04:59:23,0.0
53809319,6261078.0,<docker><swagger><microservices><reverse-proxy><traefik>,swagger ui add request url http traefik reverse proxy,app base microservice architecture docker container traefik reverse proxy request microservice request url append add hit button empty response body response code request traefik reverse proxy work good example help add label traefik docker service level modify code change swagger doc change docker stack file reference,1,170,1,0.0,0,2018-12-17T05:16:07,0.0
56850977,8177428.0,<java><proxy><microservices><envoyproxy>,envoy healthy upstream,build envoy proxy help bit problem blog ip address wildcard match url keep thing port url admin command blog open ip problem open webpage person service product service browser provide blog display browser postman idea regard zipkin question relate find answer solve problem help,1,264,0,0.0,0,2019-07-02T11:00:06,0.0
56726144,4371768.0,<django><python-3.x><microservices><amqp>,django channel communicate microservice,develop microservice communicate rabbitmq add django app mix currently elegant solution django communicate rabbitmq find mention send message specific exchange preferably specific routing key topic exchange translating asgi protocol channel amqp protocol rabbitmq doc understand enable publish message,1,41,0,0.0,0,2019-06-23T17:08:55,0.0
56883964,126500.0,<microservices><eda>,microservice event choreography ui interaction,implement event drive microservice architecture application struggle concept event choreography ui interaction issue membership signup process user enter bunch detail ui submit membership service process publish event natural event consume payment service step business process payment payment service process event fully payment user enter ui ui natural user enter signup detail ui logic display payment form complete submit detail payment service duplicate business process front feel wrong payment service notify payment advice good flow scenario feel piece understanding struggle find article discussion deal,1,41,3,0.0,0,2019-07-04T08:46:12,0.0
57907032,1335677.0,<rest><transactions><microservices><camunda>,data coherence complete camunda user task update external db,camunda rest service app complete user task app action write datum local data base complete task camunda rest api operation transactional problem code code transactional solution split camunda user task node don idea create service task message receiver user task diagram unclear irrational problem,1,24,0,0.0,0,2019-09-12T12:44:39,0.0
57866850,11719228.0,<java><spring-boot><microservices>,auditable entity microservice architecture,implement abstract auditable entity current microservice architecture work fine single module confused pass securitycontext multiple module transfer token header zuul service auth server core module null pass securitycontext feign client work,1,31,0,0.0,0,2019-09-10T08:30:19,0.0
57816043,1874080.0,<c#><asp.net><reactjs><jwt><microservices>,jwt secure reactjs ssr,hour read jwt confused start jwt secure stateless application understand hacker stole jwt valid user game currently start build commerce reactjs struggle thing achieve multiple api asp net web api project work productsapi paymentsapi kind reduce version microservice struggle communication api gateway thing order accomplish user username password authorize correct api generate jwt validate api project understand option stateless application jwt authentication server save localstorage access api insecure hell reactj inside asp net mvc server side rendering cookie httpcookieonly access api good approach plan jwt thing add claim sessionid generate asp net mvc jwt secure steal person talk thing time confused find good post internet suit,1,32,2,0.0,0,2019-09-06T05:07:48,0.0
55820218,976837.0,<microservices><reactive-programming><spring-webflux><spring-cloud-stream><project-reactor>,spring webflux performance sync rest call,description understand sync rest api throughput time bad async rest api scale model reactive microservice webflux rest endpoint streamlistener message endpoint kafka sync flow manager waiting implement async flow respond request start separate mono chain communicate performance measurements time incoming http request message receive throughput message system process concurrent jmeter thread measure backend dropwizard metric test processing time throughput limit sync throughput question sync api bottleneck exactly limit throughput well implement sync api webflux webflux netty reactor parameter tune increase throughput delegate wait web server gateway wait server scale low cost free resource work server code,1,237,2,1.0,0,2019-04-23T22:26:32,0.0
55899604,1641352.0,<java><microservices>,java fetch hierarchical datum table generate tree,set hierarchical angular tree view database table category table output format category column parent java code fetch data form json tree structure angular tree view generate ui component category repository category model categorydto set dto recursion success datum depth level method implementation call post fetch db pass param recursive method work expect output error message syntaxerror json parse unterminated string literal column json data,1,80,3,0.0,0,2019-04-29T08:31:26,0.0
49259468,2170491.0,<node.js><docker><npm><microservices>,docker build – layer cache multiple nest micro package,basic docker image consist multiple nest package dependency consider directory structure regular package increase docker speed cache package dependency change skip case structure large package consist small package manually sequentially cache blow dockerfile lead error docker layer face issue recommendation solve problem,1,51,0,0.0,0,2018-03-13T15:03:06,0.0
49279230,9491741.0,<rabbitmq><microservices><api-gateway>,rabbitmq communication microservice architecture create api gateway top,basically small software microservice architecture currently rabbitmq communication ui service work great create microservice api gateway basically rabbitmq logic ui encapsulate service entry point service benefit encapsulate logic access service add authentication api gateway http request interact api move messaging logic ui major drawback approach find example rabbitmq example api gateway overthinke bit,1,586,3,0.0,0,2018-03-14T13:38:15,0.0
49303551,7820032.0,<microservices>,microservice hit microservice multiple time,microservice debug mode recognise code multiple time request job microservice understand happen multiple eureka instance avoid,1,69,4,0.0,0,2018-03-15T15:35:37,0.0
49188757,1259498.0,<spring-boot><microservices><spring-cloud><resttemplate><spring-cloud-netflix>,client app zuul resttemplate login json,experiment microservice architecture issue zuul gateway client web application login form controller inside zuul gateway route microservice define zuul application yaml config microservice register selve eureka server user authenticate database jdbcauthentication user enter address browser zuul display login form successful login user redirect controller controller additionally execute resttemplate call user info microservice zuul proxy address define config user route json response microservice login form html code access rest endpoint browser nice clear object attribute json response resttemplate lost pass authentication session add config code example zuul config zuul client web app controller controller user microservice rest controller hope clearly explain situation help advance,1,302,8,0.0,0,2018-03-09T07:36:09,0.0
48540069,2455862.0,<microservices><spring-cloud><netflix-eureka><netflix-zuul><spring-cloud-netflix>,netflix ribbon log server choose,create microservice system zuul server ribbon connect eureka return service instance perform load balance work great log instance choose ribbon add extra logging instance place read ribbon documentation find grateful help,1,455,4,0.0,0,2018-01-31T10:38:00,0.0
58624341,11045249.0,<.net-core><microservices><api-gateway>,upstream downstream service micro service base architecture,hear term upstream service downstream service general term article micro service architecture term upstream downstream service micro service base architecture explanation upstream service depend service downstream service depend upstream service front downstream service depend develop micro service net core,1,44,3,0.0,0,2019-10-30T11:25:20,0.0
58610715,2076060.0,<amazon-web-services><microservices><amazon-cloudformation><amazon-ecs>,pass list keyvaluepair aws cloudformation template,build cloudformation template bunch microservice ecs top level template include microservice nested stack create dozen template file service microservice template parameter define microservice list service problem microservice require additional unique environment variable add variable template default microservice empty environment variable unwieldy confusing ideally pass list keyvaluespair unique environment variable work join list exist list common env variable search high low unable find viable solution close reference year ago relevant answer,1,61,5,0.0,0,2019-10-29T15:36:46,0.0
56026310,5037022.0,<java><unit-testing><junit><microservices><pact>,pact test pactproviderrule detect,start pact test follow example create test producer return datum user simple json firstname lastname consumer test consumer class notice test nullpointerexception test mock datum provider declare rule don detect mock provider suggestion,1,68,0,0.0,0,2019-05-07T15:50:46,0.0
56106551,8547991.0,<angular><docker><flask><docker-compose><microservices>,deploy microservice angular front flask docker,deploy aplication microservice architecture docker deploy deploy front microservice dockerfile docker compose deploy service dockerfile angular docker compose work fine access localhost server response time deploy front nginx apache well question url angular service attack url depend service methodology sure url advance,1,83,0,0.0,0,2019-05-13T06:05:22,0.0
56109035,7540897.0,<node.js><docker><visual-studio-code><microservices><development-environment>,develop nodejs microservice docker code,experiment docker micro services refactore exist nodejs app separate entity locally save change redeploy locally instantly set vscode docker extension work vscode create dockerfile docker compose yml file micro service guide find place imply push change image repo small change long wind edit build deploy manually build command cmd git bash minor frustration live automate change happen inside directory start build process,1,77,1,0.0,0,2019-05-13T09:06:05,0.0
55992766,8441046.0,<database><microservices>,extend datum model microservice architecture,personal project attempt learn microservice architecture incorporate industry work read lot book article microservice architecture work multiple software component support architecture rabbitmq unstuck initiation data model requirement simple form requirement microservice high level requirement note exclude webapi bridge microservice ui microservice process focus backend microservice house core data requirement provide ability customer log portal add register scheme allow add money credit record multi tenant solution datum place single database multiple database cover microservice responsible table tenant credit microservice enable define customer microservice microservice marketing microservice define reference example customer microservice responsible manage customer system email address microservice expose function create customer update exist customer delete customer finally retrieve customer basic crud operation microservice feed datum directly internal crm customer relationship management system integration cover datum scheme customerid firstname lastname emailaddress customer create event post message queue inform microservice customer create credit microservice responsible manage customer balance scheme enrol default customer enrol scheme deposit credit account microservice expose function enroll member scheme addcredit account well retrieve customer scheme balance real life change scheme option keep simple example system microservice responsible store transaction credit well separate table database unique schema single database instance define irrelevant issue hand data scheme customerid schemename balance microservice responsible listen event customer microservice create customer unique sql table allow customer enrol add credit account issue ui element application admin user list customer include enrol application well credit customer enable credit functionality identification cover tenant enable microservice setup issue fact data store table master microservice create microservice customercredit join table readonly display result api call customer microservice retrieve call credit microservice retrieve relevant join example work practice multiple microservice extend schema customer model example marketing store email customer edit confirm structure,1,53,2,1.0,0,2019-05-05T14:04:29,0.0
45482847,4404962.0,<linux><memory-management><load-balancing><microservices>,custom priority logic load balance microservice,industry port monolith solution modular microservice diagram describe architecture customer microservice resource microservice customer basically send process request resource load balancer resource require load model disk model upper bind amount model customer send process request load balancer processing request include specific model resource processing request include random model naive approach round robin load balancing performant resource receive request random model evict model reload time follow random distribution note problem uma numa problem hardware question tool solve performance problem load balancer request queue manager route request customer resource exist,1,104,4,0.0,0,2017-08-03T11:26:21,0.0
52948486,3595843.0,<rest><microservices><restful-authentication><session-management>,security issue restful authentication session management,implement authentication session management microservice order process restfully understand kind token base authentication avoid track client session datum server follow quote security stack exchange nicely sum understanding implementation understand stateless session maintenance advantageous scalability flexibility explain leave application expose serious problem hacker intercept credential exchange http rest call execute server fact session token store client side hacker retrieve requisite localstorage sessionstorage debug app monitor incoming outgoing http call dev tool require token encrypt token simply start fake rest call server window datum finally client session token server authenticate token server maintain session token user mapping defeat purpose stateless rest base architecture problem gap understanding case clarity basic concept technique address specific problem,1,23,0,0.0,0,2018-10-23T11:56:27,0.0
52770754,6093604.0,<go><protocol-buffers><microservices><stack-trace><grpc>,create stacktrace logic call micro service grpc exchange,create microservice order form microservice architecture afraid face issue handling error check verify error datum runetime crash stack trace error sure integrate time microservice altogether weird behavior add work update microservice course microservice fast trace idea create generic sure work microservice exchange pass stacktrace message map stacktrace microservice pass lot redundant code wrong create proto file microservice object struct definition idea code service method message box spot level tracing trace level logic break,1,43,0,0.0,0,2018-10-12T00:56:04,0.0
52767532,4913567.0,<api><microservices><gateway><rbac><role-based-access-control>,role base access control rbac approach api gateway layer,excited kong enterprise implement architecture base microservice price high enterprise functionality rbac question approach rbac service api gateway layer set role permission service,1,143,0,0.0,0,2018-10-11T19:26:05,0.0
52856812,1312034.0,<microservices><spring-cloud><netflix-feign><spring-cloud-feign><feign>,invoke feign client url,url feign client invoke service dynamically runtime interface autowire method invoke autowire feign client invoke method url time edit code work perfectly fine companysearch class invoke companyapi service datum feign client service method check feign accomplish apache httpclient explore feign equivalent,1,670,1,0.0,0,2018-10-17T14:03:31,0.0
52854051,5866393.0,<spring><oauth-2.0><microservices><jhipster><keycloak>,inter microservices client communication issue keycloak jhipster,create gateway application jhipster service discovery keycloak oauth server microservice core jhipster configure zuul forward request microservice static url manage infrastructure wen call webservice front microservice gateway well issue core microservice call web service gateway gateway return login body content core microservice configure feignclient gateway side authorisation bearer pass header request core gateway gateway side consider anonymous session log support,1,423,1,0.0,0,2018-10-17T11:42:01,0.0
52910490,2663572.0,<security><microservices><api-gateway><stateful><penetration-testing>,harden privilege escalation microservice,consider follow scenario system set business owner user system business owner map set customer business owner login system order manage customer business owner select single customer onward session bind select customer set microservice require processing microservice exposes microservice expose consider sensitive encrypt form vulnerable privilege escalation business owner mistakenly share encrypted customer bookmarks avoid server side authorization customer business owner slow operation api repeat authorization process microservice stateless encrypt session key stateful microservice session good idea authorization gateway intend perform business logic prevent privilege escalation situation,1,33,2,0.0,0,2018-10-20T22:03:08,0.0
52944479,6318261.0,<api><security><microservices><kong>,secure microservice api kong api gateway,experiment kong api gateway nice feature api key hmac authentication plugin implement security api trade suppose payment service check api key create request interceptor request payment service provide valid api key kong reverse proxy payment server upstream move api key validation kong payment service service plain secure api nice write interceptor service ip payment service directly hit payment service kong api gateway achieve kong api gateway reverse proxy kong plugin validation api key basic hmac configure service avoid security hole address api hit directly bypass kong security keep api programmer write simple api keep secure advance,1,194,2,0.0,0,2018-10-23T08:28:30,0.0
52878875,10525072.0,<c#><sql><entity-framework><microservices><.net-standard-2.0>,unable sqlquery method port net framework net standard,currently port project net framework net standard feed nuget package net core application currently issue handle issue unable sqlquery method net standard framework error receive well library originally sqlquery method implementation fromsql work return int fromsql return tentity,1,315,3,0.0,0,2018-10-18T16:47:52,0.0
47692609,9066607.0,<spring-boot><retrofit><microservices><executorservice><netflix-feign>,microservice throw rejectedexecutionexception load testing issue,develop spring boot microservice heavily close hit second feign rest client completablefuture hit service datum async scenario hit service object function completablefuture config follow tomcat thread size executor thread pool size code hit external service service springboot service feign internally load testing call jmeter internally call call external service achieve rate hit aw instance increase load instance start rejectedexecutionexception aws instance load balancer expectation scale linearly hit achieve hit load increase rejectedexecutionexception solution tweak configuration feign bottleneck client retrofit,1,95,0,0.0,0,2017-12-07T10:13:52,0.0
47774541,9086315.0,<authentication><authorization><microservices><ownership>,authentication resource ownership microservice system,develop microservice base system manage company retailer product contract system allow user register create company invite user join company base role inside company manage company retailer contract course company retailer retailer handle contract behalf company system core service follow authentication component release jwt token include user permission registry component manage user company retailer info contract component handle datum company contract status moment registry component hold model describe user company retailer contract component describe contract system external reference retailer stipulate contract system user authenticate behalf company company authenticate authentication service hold reference user permission user token state permission user respect company belong find follow dilemma course solution contract component contact registry component retailer request business compare user clearance state token break service containment contract component dependent registry component solution involve store owner represent resource uuid business contract retailer business messy introduce lot redundancy question handle resource ownership microservice system create interdependency microservice rely central authority,1,144,0,2.0,0,2017-12-12T14:04:14,0.0
47698072,1759063.0,<java><database><jdbc><integration-testing><microservices>,java microservice handle test verify sql request send jdbc database side,jdbc connection external db easily dump deploy side secret sql request send jdbc connection work integration test emulate real connection external machine mock introduce kind docker container java code accept jdbc connection manner real db parse incoming request verify extract datum jdbc driver jdbc client side problem problem fugure api java write database accept incoming sql request event kind application integration test microservice architecture prever integration test real network connection mock,1,55,2,0.0,0,2017-12-07T15:09:58,0.0
47742971,4858616.0,<c#><asp.net><microservices><pool>,asp net core async controller,project build microservice architecture cosider service long operation background send datum processing operate chunk service aggregator aggregator stay time limit possibility time perform request service time service aggregator guess pool provide example code well idea reply,1,79,2,0.0,0,2017-12-10T20:10:45,0.0
47738444,3492805.0,<java><spring><microservices><netflix-zuul><circuit-breaker>,spring cloud circuit breaker zuul,install circuit breaker zuul proxy behaviour expect forward request consecutive failure return error provide fallback method service time recover achieve add dependency luck,1,392,2,0.0,0,2017-12-10T11:37:40,0.0
47734535,1736601.0,<microservices>,design simple chat application microservice,table read microservice deploy database microservice sql instance user microservice messaging microservice read expose microservice sort rest graphql api messaging microservice thing question access datum microservice basically talk example frontend enter chat channel display message return list point display suppose call user microservice api single message user delete feel extra work reach microservice delete message remove channel thing sync lastly bit overkill single frontend suppose single frontend talk microservice microservice suppose frontend web app split url frontend multiple frontend sense context mobile app trouble appreciate advice clarification,1,809,3,4.0,0,2017-12-10T00:05:43,0.0
54221594,651465.0,<java><spring-boot><redis><microservices><load-testing>,slow redi proxy,load chaos testing java springboot microservice slow dependency include redi inject latency downstream call soap rest sql db behave thing redi basically sure read write second java thing add slow proxy front sentinel port add slow proxy front server sentinel server slow server check read write call definitely second java app whatsoever combination,1,38,0,1.0,0,2019-01-16T16:42:11,0.0
54193926,10371864.0,<spring-boot><cassandra><microservices><datastax><spring-data-cassandra>,cassandra compare current set datum previous,cassandra db store set datum table periodically minute set datum record insert set datum cassandra table record tie partition key meaning record node minute batch record store fashion partition key goal compare set datum find difference record compare record previous find change business logic change timeuuid partition key record timeuuid node search maintain incremental counter cassandra good maintain counter table single node anti pattern distribute design guy optimal solve problem simple word requirement compare current set datum previous springboot connect write datum cassandra advance,1,50,1,0.0,0,2019-01-15T06:47:58,0.0
54092849,443259.0,<spring><spring-boot><microservices><netflix-eureka><spring-cloud-netflix>,client side load balance practice server side load balancing,load balance client call intermediate server decide instance actual server microservice call load balance client call intermediate server api gateway instance configure load balancer instance server instance decide instance microservice call include api gateway client client ip address exact server send request lot server side load balancing include api gateway client weird deploy server client,1,317,5,0.0,0,2019-01-08T13:27:05,0.0
35281281,127320.0,<spring><spring-cloud><microservices>,spring cloud config server deployment multiple datum center,application deploy datum center deployment strategy config server enable ha disaster recovery follow choice wonder deploy option datum center git datum center cluster config server talk respective git datum center option centralize git datum center datum center cluster config server source centralized git repo option centralize git config server cluster span datum center config server datum center,1,157,3,0.0,0,2016-02-08T23:28:57,0.0
57201292,3398989.0,<spring-boot><microservices><spring-cloud><netflix-eureka><discovery>,fetch docker container microservice register eureka server,eureka server container image registered application work spring boot microservice application image registration subsequent health check eureka server provide lot application register object container image query application metadata approach din achieve task,1,21,0,0.0,0,2019-07-25T11:48:44,0.0
57130590,2563050.0,<oauth><microservices><spring-cloud>,service service api call authentication spring cloud,spring cloud call micro service api call api gateway authentication token oauth call service frequently,1,55,1,0.0,0,2019-07-21T05:30:46,0.0
57290107,8559800.0,<microservices><dto>,create git submodule dto share microservice avoid code duplication,experience monolithic application learn microservice architecture problem notice send lot dto microservice microservice create lot dto create microservice lot code duplication good idea separate dto separate git submodule case avoid code duplication additionally dto consistent microservice thought,1,23,3,0.0,0,2019-07-31T11:51:44,0.0
57303927,11867253.0,<microservices>,separater service user api gateway,route api api item create api item list api item detail install service gateway api kong application type user guest register guest user access route create service base design service treatment depend route access service,1,25,5,0.0,0,2019-08-01T07:33:50,0.0
58389130,6181404.0,<java><spring><graphql><microservices><netflix-zuul>,graphql zuul graphql work rest endpoint zuul api gateaway,microservice base application spring cloud zuul api gateway change graphql traditional rest company usecase create graphql api microservice work zuul handle reroute hysterix perform fault tolerance maintain hysterix dashboard,1,33,0,0.0,0,2019-10-15T07:13:40,0.0
58429553,8193960.0,<java><spring><spring-boot><microservices><master-slave>,master slave configuration spring boot configuration microservice,plan instance application ec instance aw aw provide load balancer distribute request requirement schedule component fetch datum database periodically publish micro service problem instance datum publish time plan handle situation introduce master slave configuration spring component extra flag db solve plan implement master slave help achieve spring boot instance,1,45,3,0.0,0,2019-10-17T09:40:57,0.0
58434108,9107502.0,<java><spring><spring-boot><spring-security><microservices>,micro service architecture bypass api gateway authentication,assume follow micro service architecture situation netflix zuul base api gateway connect netflix eureka power discovery service ideal kind external third party client access micro service api gateway zuul responsible token base authentication detail filtering validate authentication token authentication successful access grant request redirect target micro service discard malicious client attacker client detain client call micro service directly bypass gateway authentication authorization approach prevent situation java spring base micro service architecture,1,43,4,0.0,0,2019-10-17T13:42:17,0.0
54418729,10983894.0,<java><microservices>,template base code generator create generate basic microservice application java,template base code generator create generate basic microservice application java developer plug code relevant business rule,1,45,0,0.0,0,2019-01-29T10:19:29,0.0
54341521,1727204.0,<spring><spring-boot><microservices><spring-cloud-stream><spring-cloud-dataflow>,spring datum flow spring cloud stream build datum processing pipeline choreography approach,plan implement datum processing pipeline microservice architecture java spring boot implement microservice investigate rest spring component help address requirement find spring cloud stream help implement solution event drive approach sure spring datum flow single point failure orchestration microservice tool help visualize pipeline deployment kubernetes cloud foundry work passively pipeline fail reason pipeline work interruption clarify combination spring cloud stream spring cloud datum flow provide approach article refer good orchestration choreography,1,49,0,0.0,0,2019-01-24T07:38:33,0.0
54368598,1592612.0,<angular><spring><spring-boot><oauth><microservices>,good pass application token spring boot backend angular frontend oauth negotiation,architecture frontend angular application backend spring boot application requirement authenticate user google oauth backend refresh token store oauth access token refresh token backend system furthur backend operation return custom backend generate token frontend furthur api usages current approach launch google oauth sign module frontend click login google button redirect url point backend fetch authorizationcode callback url backend user consent send request google access token refresh token assume successful negotiation backend save access refresh token storage backend create custom token frontend send angular client connection frontend complete oauth scenario question send application token angular frontend oath negotiation good practice question operation place backend system create custom application token redirect user call specific angular component redirect call application token query param angular component receive call token check custom token backend ensure save localstorage redirect user sure proper handle send application token call backend angular component visible well handle security issue current approach,1,143,0,0.0,0,2019-01-25T15:45:31,0.0
54329900,710618.0,<go><rabbitmq><microservices><go-micro>,set broker subscriberoption micro,configure rabbitmq broker framework notice broker interface micro allow configure parameter autoack queue unable figure pass start broker simple rabbit micro setup method list allow set allow setting dig code micro unable figure method expose correct struct call fully flesh api,1,153,0,0.0,0,2019-01-23T14:51:20,0.0
54263212,10796217.0,<node.js><axios><microservices><consul><api-gateway>,connect service consul service discovery node js,work create api gateway manage work single instance hard code ip port server api gateway connect example accomplish service discovery consul node js find work watcher work pass ip port combo connect service file thing app js file test service difference app js test service route file api adapter file expect send request axio http endpoint service server ip port consul actual result pick url default localhost port bit lost build application consul consul io doc great guide base online easy learn guess question api adapter request service case,1,153,1,1.0,0,2019-01-19T00:57:40,0.0
54328092,9186685.0,<c#><docker><microservices><asp.net-core-2.1>,call microservice microservice docker work,microservice dockerize application web api project second web mvc application call web api mvc application note net core call error call browser work fine code docker call web api mvc app work fine enable cor help solve issue spend alot time unable understand issue read answer question stackoverflow understand api url explain answer api url produce error,1,284,2,0.0,0,2019-01-23T13:13:07,0.0
51912596,498100.0,<web-services><service><timeout><microservices><latency>,good practice latency timeout service service communication,good practice set efficient timeout read source answer area downstream service promotion understand latency communicate appropriate timeout relevance service find source discuss topic confusing latency measure talk response time outgoing response time callee perceive time caller callee responsibility communicate timeout latency percentile geographic location caller impact timeout assume promotion service offer api return datum ms percentile caller datum center appropriate timout ms caller data center set appropriate timeout hope avoid caller wait long active thread cascade failure wait long retry,1,224,0,0.0,0,2018-08-18T21:13:37,0.0
51953991,4588448.0,<java><spring><spring-boot><microservices>,externalize configuration spring cloud config,microservice application rest controller objectmapper trip definition service microservice application create bean objectmapper trip common service build trip common service keep jar dependency trip definition service configuration create trip common objectmapper follow objectmapper create trip common trip definition service start trip definition service find bean type help suggestion,1,50,4,0.0,0,2018-08-21T17:37:48,0.0
55160122,2548264.0,<microservices><jhipster><netflix-zuul><netflix-ribbon>,ribbon response weblogic,follow spring boot application structure gateway application zuul proxy backend application microservice hit rest service backend zuul route ribbon load balancer response remove ribbon load balance work fine happen deploy web logic work fine tomcat happening solution code change work weblogic change ribbon remove work weblogic,1,35,0,0.0,0,2019-03-14T10:25:31,0.0
55226543,3819295.0,<java><spring><microservices><feign>,spring multiple overriding abstract method find interface,face difficulty understand deal feign client extend interface method point restcontroller microservice main service create feign client extend controller previous service implement follow bean sure complain,1,95,1,0.0,0,2019-03-18T17:04:29,0.0
55096319,1933641.0,<microservices>,consistency handle gateway aggregation,scenario candidate additional complexity aggregation implement consistency service call good pattern implement saga gateway,1,31,2,0.0,0,2019-03-11T06:31:49,0.0
55239354,5693563.0,<architecture><microservices>,combine datum microservice central place,microservice find project partition question microservice merge datum microservice space build admin panel manage datum,1,58,3,0.0,0,2019-03-19T10:57:21,0.0
52436548,7510748.0,<microservices><netflix-eureka>,ip control backup service connection registery service,eureka normal scenario microservice register eureka microservice multiple backup server question server register eureka backup server ip ip registration backup server happen backup server choose,1,22,0,0.0,0,2018-09-21T04:19:25,0.0
45065175,8156167.0,<cloudfoundry><microservices><resttemplate><netflix-eureka><pivotal-cloud-foundry>,instance microservice host pcf,host microservice pcf eureka server client service microservice client suppose call service rest template call service return string instance eureka server client instance service client service register eureka dashboard access service client rest template call instance service access service directly browser work fine return string url call rest template return exception mention suggestion help,1,263,3,0.0,0,2017-07-12T18:31:30,0.0
44980096,1037167.0,<rest><microservices><long-polling><service-discovery>,achieve long polling multiple server,service multiple server client connect server wait event connection client server long polling style server respond event happen client keep connection open example server client connect currently problem event trigger server example connect trigger event event relate event ready respond,1,138,3,0.0,0,2017-07-07T21:45:45,0.0
56165022,10264526.0,<node.js><microservices><express-gateway>,configurate interaction authentication server express gateway,microservice architecture general applictaion break microsrvice advise api gateway client request router choose express gateway unauthorized user send request request redirect authorization service authorization service sms code validate jwt generate token send client save express gateway system future express gateway check token successful validation redirect request service implement solution option express gateway consumer management system authentication logic,1,46,1,0.0,0,2019-05-16T09:16:58,0.0
56166545,697961.0,<authentication><kubernetes><microservices>,method horizontal authentication microservice restful,simple approach authentication microservice kubernetes dig previous discussion aware trade depend situation approach mutual tls safe tool istio learn curve overkill application application simple privacy critical datum prefer simple approach meet tight deadline release cycle approach utilize kubernete secret ssl handshake example keep pair asymmetric key kubernetes secret service access service service sign request timestamp send sign result service service decrypt check,1,34,3,0.0,0,2019-05-16T10:34:59,0.0
50375348,1839104.0,<reactjs><spring-security><microservices><spring-security-oauth2>,spring security oauth react spa,head spring security oauth create auth microservice react spa application login popup register screen create microservice user provide user management apis login register call auth microservice create api auth microservice directly ideally avoid implicit grant flow create separate ui application handle login create user microservice allow password grant flow reuse exist login register screen ideal appreciate pointer,1,447,0,0.0,0,2018-05-16T15:59:04,0.0
50368474,2674303.0,<java><architecture><oauth-2.0><microservices><spring-cloud>,authenticate microservice spring cloud,learn microservice architecture currently follow architecture user access clear implement user authorization oauth achieve oauth spring security oauth clear authorize explain stuff find full source code watch presentation find follow slide implementation attempt work,1,242,1,0.0,0,2018-05-16T10:29:20,0.0
50302891,9779490.0,<spring-boot><microservices>,design multiple json object response rest webservice spring boot,spring boot rest webservice requirement create rest webservice crud operation response expect request schema send list entity table metadata datum send actual entity object client good design practice achieve design class kind response spring boot rest service comment share link design pattern achieve plan create object map entity class good,1,316,4,1.0,0,2018-05-12T04:38:02,0.0
50232495,1504667.0,<spring-boot><microservices><spring-cloud><netflix-eureka><spring-cloud-config>,eureka client register configure config server,spring datum microservice connect config server mysql property service talk config server property load unable register eureka discovery client unable heartbeat work register fine config server dependency remove property lie application yml file help appreciate config server configuration eureka server configuration discovery client configuration stacktrace exception,1,1505,6,0.0,0,2018-05-08T11:27:07,0.0
39416033,5967892.0,<java><apache-storm><scaling><microservices>,apache storm cluster manager,apache storm core technology project production cluster operation ppl support time lot service component fit realtime computation system description benefit feature storm cluster automatic scale multi node deployment recovery crash worker process thought implement simple wrapper start regular java application topology storm cluster management system good idea architectural point view,1,86,1,1.0,0,2016-09-09T16:32:13,0.0
57489821,9912767.0,<azure><microservices><azure-service-fabric><service-fabric-stateful>,multiple service fabric reliable dictionary notification single entry reliable dictionary,stateful service fabric service replica count stateful service reliable dictionary track notification crud operation perform reliable dictionary follow link integrate reliable dictionary notification node cluster replica count notification operation create update delete node cluster replica count three notification operation duplicate record business logic notification operation expect notification replica dictionary update help resolve issue,1,41,3,0.0,0,2019-08-14T07:15:19,0.0
57439687,1046184.0,<microservices><spark-java>,spark framework routing limitation,attempt spark framework access web apparent limitation handling route limitation appear handling parameter order process parameter pass request spark require queryparam method request object problem single parameter receive spark server call method properly string text appear work single parameter parameter queryparam method param text avalue param null note unknown reason parameter queryparam actual parameter map request object empty parameter second critical problem occur load actual web load html route follow resource follow http request html file load problem html file content css javascript file follow route file undefined spark fail load course route server find file problem couple server specific place style javascript file incorporate set html file directory structure find file create route accommodate edit html file javascript style dile structure define route accept directory directory html request css file example subdirectory server style directory find css file note attempt solve problem staticfile location staticfile externallocation method solve problem base follow question parse parameter request case text avalue separately parse route syntax thast file subdirectory style access solve problem read spark framework documentation tutorial find handle multiple parameter fact find queryparam method stack ovwerflow spark documentation detailed route syntax figure solve problem solvable,1,45,3,0.0,0,2019-08-10T05:54:33,0.0
54668038,4311785.0,<microservices><high-availability><event-sourcing><availability>,availability calculation event drive microservice architecture,microservice produce datum event source replicate microservice ui talk api sit top microservice internally replicate data availability calculation individually microservice calculate availability system example user api work albeit stale datum stumble scenario,1,89,6,1.0,0,2019-02-13T10:33:47,0.0
54588281,2274757.0,<docker><nginx><docker-compose><microservices>,hide api connection microservice docker,docker set application service docker compose file microservice load balancer nginx conf load balancer dockerfile connect client client server api load balancer connection string docker network call browser change connection string localhost ip public server idea expose port api configuration implement transparent connection microservice,1,72,8,0.0,0,2019-02-08T08:13:00,0.0
51519340,10133240.0,<cross-browser><cross-domain><microservices><cross-domain-policy>,cross domain sharing state microservice architecture,moment project work microservice architecture frontend transfer state save reboot main redirect domain example visit site domain popup appear confirmation cookie user agree condition cookie store share domain resource visit site domain popup appear user agree term domain example scheme decide iframe save cookie domain testing find approach work browser safari incognito mode browser firefox work great chrome safari security policy forbid save cookie cookie save visit personally user partially solve call solution toxic work correctly version safari save datum localstorage cookie save iframe action localstorage work example code represent advance answer,1,154,0,1.0,0,2018-07-25T12:50:26,0.0
51413949,186820.0,<https><microservices><kestrel>,microservice https endpoint configure kestrelserveroption listen,work identityserver microservice issue exception place usekestrel inside buildwebhost program cs file thing configure certificate folder eshoponcontainer project generate file identity server docker compose config,1,415,0,0.0,0,2018-07-19T03:35:27,0.0
51425719,9236477.0,<apache-camel><microservices>,apache camel request reply pattern fail micro service,return response three microservice api backend service backend service message api block timeout issue troubleshoot service service communication leave camel read source unsure good implement synchronous transaction micro service eip pattern accommodate service communicate overview camel route service api backend service backend service,1,56,2,0.0,0,2018-07-19T14:50:20,0.0
51481251,9202894.0,<spring-boot><microservices><spring-cloud-feign>,deal large datum feign client,spring cloud database web application microservice explanation application st db account database user store satisfy manager employee relationship parent column account table account table email parent database task task employee store task table task desc assign user requirement requirement fetch task employee manager fetch employee manager manager user feign client find task assign employee user work fine problem employee manager bit large final service task slow min probable solution side pass childemployee userid userid auth token feign request service fast sure good solution idea helpful advance,1,147,2,0.0,0,2018-07-23T14:29:47,0.0
51488694,186820.0,<microservices><identityserver4><claims-based-identity>,identityserver microservice claim,error log identity server implicit grant type web api swagger ui fine type client scope popup redirect identity server login screen type login detail error configure web api identity server fine claim identity server database code inmemory setting inside database,1,664,2,0.0,0,2018-07-24T00:01:38,0.0
51473064,7458887.0,<java><spring><hibernate><spring-boot><microservices>,audit log spring microservice,develop micrsoservice application implement datum auditing database postgresql log auditing separate microservice enable audit log microservice spring app,1,726,7,0.0,0,2018-07-23T06:52:33,0.0
42769868,697630.0,<proxy><microservices><service-discovery>,service discovery service proxy,service discovery irrespective client side service discovery server side service discovery place service proxy hard time envision piece puzzle fit suppose infrastructure piece control access api thing denial service attack rate limit number connection header enforcement authentication control sort proxy infrastructure piece call pass proxy hard time understate service discovery relevant case service register service registry expose address proxy enlighten architectural idea deal aspect microservice design,1,177,0,0.0,0,2017-03-13T17:32:38,0.0
46151080,8030367.0,<maven><spring-boot><gradle><microservices>,unable webservice registry eureka server convert spring boot microservice project gradle maven,work spring boot microservice project reference link follow project work properly gradle convert maven multi module project convert project gradle maven config server face issue microservice refer configuration yml file config server git uri webservice registry eureka server follow error nforeplicator redirectingeurekahttpclient request execution error sun jersey api client clienthandlerexception java net connectexception connection refuse connect sun jersey client apache apachehttpclient handler handle apachehttpclient handler java jersey apache client jar provide solution solve issue regard shilpa kulkarni,1,69,0,1.0,0,2017-09-11T08:16:25,0.0
46151007,8572526.0,<load-balancing><microservices><netflix-eureka><service-discovery>,eureka server store service detail maintain registry,spring cloud check eureka tutorial question figure eureka service registry store micro service detail memory hashmap metadata log health check service connection establishment client service udp tcp web socket replication eureka server work peer awareness provide replication,1,144,0,0.0,0,2017-09-11T08:12:11,0.0
46066331,117700.0,<c#><powershell><azure><microservices><azure-service-fabric>,update service fabric manifest,follow tutorial change fabricsetting set change change manif setting service fabric,1,170,0,0.0,0,2017-09-06T03:29:10,0.0
56597647,1085660.0,<authentication><oauth-2.0><microservices><pingfederate>,oauth server server expire token,oauth validate server server interaction grant type client credential service servera well token expire scale service server client servera request token serverb request token second request token invalidate st token loop authserver setup return token server problem request token expire servera serverb reasonably share token encounter design challenge,1,34,0,0.0,0,2019-06-14T11:53:04,0.0
56534159,4811392.0,<visual-studio><docker><.net-core><microservices>,debug multiple solution micro service architecture,work project follow micro service architecture service currently solution multiple project ongoing effort move project solution create container api api communicate project common solution debugging straightforward solution start multiple startup project breakpoint place api endpoint call question easy debug solution thought solution simultaneously write script wonder establish solution,1,41,1,0.0,0,2019-06-10T22:13:48,0.0
56562589,691183.0,<rabbitmq><queue><microservices>,queue inside microservice,imagine clean sheep herd sheep clean time clean task sheep queue bunch shepherd clean multiple sheep time number sheep big variable die bear request clean sheep random approach shepherd microservice instance architecture sure sheep clean time shepherd clean multiple sheep time sheep clean multiple shepherd time sheep automatically clean multiple clean task send sheep solution memory queue shepherd work multiple shepherd clean sheep external queue rabbitmq force create separate queue sheep variable number sheep impossible mantain idea,1,34,3,0.0,0,2019-06-12T12:46:31,0.0
28844069,504248.0,<authentication><oauth><architecture><authorization><microservices>,single sign authorization microservice architecture,good design single sign authentication authorization microservice architecture thought build microservice handle authentication authroization async interface messaging bus rmq kafka authentication service user microservice manage identity user username password email authorization service responsible provide auth token user allow access role sso service authorize microservice publish message bus hear reasearch find legged oauth internal web micro service oauth depend http http call internally overhead internal system,2,1023,1,0.0,0,2015-03-03T23:31:02,0.0
29315097,1969921.0,<oauth><architecture><microservices>,microservice oauth architecture,learn microservice architecture question imagine arhitecture simple html example main developer login sign login example login lot oauth button facebook google twitter client state generate request save session redirect url redirect url point microservice auth example oauth code state change code token send request user info save db aka registration update user generate jwt token call api return token user redurect dashboard example user api api example jwt token microservice main site info login example auth server authorize authentication auth example api service api example question check state oauth provider redirect example store state session auth example rebbitmq jwt token body send response http redirect redirect dash boardexample glad hear opinion advice dima,2,526,0,0.0,0,2015-03-28T08:20:52,0.0
33651930,3717943.0,<spring-cloud><microservices><netflix-eureka><netflix-zuul>,zuul server high volume fail,create sample zuul server base demo service call dummy service ribbon eureka server zuul demo service dummy service throw zuul request second jmeter start fail config change application property implement hystrix fallback method zuul equation hit demo service directly throw request second success question zuul support transaction second configuration config order support high volume zuul route service load balance instance service ribbon success state thred second help appreciate,2,1054,1,0.0,0,2015-11-11T13:47:25,0.0
33542171,2968101.0,<rest><amqp><microservices>,microservice amqp rest,microservice architecture amqp rest metric hey guy careful amqp rest,2,137,0,1.0,0,2015-11-05T10:27:26,0.0
35568117,3047741.0,<java><ssl-certificate><yaml><dropwizard><microservices>,test microservice dropwizard ssl configuration setup,yml configuration log full postman invoke url response determine configuration yml correct ssl,2,320,4,0.0,0,2016-02-23T03:13:49,0.0
37168867,6244459.0,<java><spring><spring-boot><spring-cloud><microservices>,spring cloud turbine amqp work,problem spring cloud turbine amqp work exploit local rabbit broker box service dependency bootstrap yml turbine service execute datum type ping cycle rabbitmqctl list queues queue cfa time client service execute turn queue remove turbine server write wrong,2,560,4,0.0,0,2016-05-11T16:53:42,0.0
38070702,608142.0,<akka><apache-kafka><actor><microservices><messagebroker>,akka cross microservice messaging toolkit,framework platform easily support cross microservice communication guide akka kafka unable find set case find specific message work base article message site compile set expectation akka kafka open point review correct point platform microservice cluster implementation microservice cluster system implement set microservice application microservice interact akka messaging api multiple instance microservice mailbox share instance microservice actor akka connect kafka transport message broker kafka api encapsulate akka api kafka performance throughput reliability akka remoting message initialization create actor system supervisor ii share pre configuration microservice actor cluster ip uri message type case worker actor add instantiate time find supervisor uri ii add work actor child ability broadcast message child wildcard wait response child hower native akka api code clear sample stackoverlow ability subscribe type event define filter condition subscription case filtering – inside actor onreceive method case broadcast actor receive message decide applicable message trace debugging tool capability akka actor execution chain case process control pass case method akka cluster provide api app lifecycle mgmt start start scale support implement graceful shutdown build monitor capability check app availability health infrastructure monitoring care conductr nice service discovery eureka reactive communication async message message broker affinity stickiness care akka offer area balance addition akka work underlie kafka good example find sample datum streaming event message processing,2,362,5,1.0,0,2016-06-28T08:17:05,0.0
54705313,4463429.0,<database><microservices><high-availability>,scale database microservice architecture,microservice μs microservice require database table service scale include database query option μs instance db instance scale horizontally vertically μs instance db instance instance service read write database simple scale service processing bottleneck μs instance ha db cluster instance service read write ha database good scale database read write bottleneck great operation cost μs instance ha db cluster instance service read write ha database cluster service database ha db cluster scale database alongside service require solution trade read write performance operation cost recommend solution scale database service database equal scale service require scale database service require processing time service scale database database require processing time service opinion servise high write solution rest solution,2,215,1,1.0,0,2019-02-15T08:35:08,0.0
54773232,903501.0,<microservices><event-sourcing>,mechanism response aggregation event source base microservice,implement event source base microservice main concern aggregate datum response example entity school student microservice responsible handle school relate business logic handle student query rest endpoint student expect school student detail follow service chain example api gateway aggregate response couple request couple microservice replicate service essentially datum duplicate service call extra bit solution work hard scale basic idea event source question,2,43,3,2.0,0,2019-02-19T19:01:16,0.0
30670403,3929266.0,<spring-boot><swagger><swagger-ui><microservices>,consolidate spring boot micro service swagger,start create project springboot multiple micro module controller expose controller single host port combination swagger list api controller pointer collective war controller inside springfox io challenge api list springfox swagger provide jar module add module springfox config create separate module server controller tomcat springfox list api case,2,530,2,0.0,0,2015-06-05T15:29:53,0.0
30681058,2968101.0,<rest><hateoas><microservices>,microservice rest hateoas ressource owner,context create restful api deal book category book application splitte client api key user client manage post delete multiple book category book relate client link follow rest principle person create ressource ressource owner manage ressource problem context user share book user relate ecosystem meaning share user share api key client manage owner list book object second problem explanation api key correspond client client store user object permit share user correspond client third problem admit work rest hateoas java context hateoas work create specific object permit hyperlink ressource json hateoas key user link user exist better problem admit work microservice architecture user microservice authentication book microservice send amqp protocol microservice kind exchange queue topic fanout kind send network ressource hateoas inside tunnel response,2,184,2,1.0,0,2015-06-06T09:16:55,0.0
33423726,1613392.0,<meteor><microservices>,manage microservice meteor,build poc play microservice meteorjs service simple crud manage contact second manage product order learn join microservice understand understand unify thing aim simple app example connect user add product basket create layout call webservice connect add basket point microservice option send email order confirm simple option find option service example beautiful admin,2,400,2,0.0,0,2015-10-29T20:12:50,0.0
41476147,401393.0,<reactjs><webpack><microservices>,multiple webpack configs single react library chunk,apply microservice concept front big benefit achieve independently deployable ui component react app composite frontend approach app multiple webpack config main component single react lib chunk example webpack config reference common chunk webpack config,2,133,0,1.0,0,2017-01-05T01:52:59,0.0
41613051,3254233.0,<java><maven><docker><microservices>,docker maven plugin nullpointerexception,multi module maven java project module create docker container build phase follow sample project microservice base project plugin configuration follow work base project container build correctly update groupid artifactid parent child module follow error build child module switch child module consider parent groupid artifactid example work upload parent module declare registry,2,472,3,0.0,0,2017-01-12T12:17:28,0.0
40471707,5767888.0,<java><spring-boot><spring-integration><microservices>,rollback restful microservice orchestrator service,develop orchestration service java call multiple microservice orchestration process method updateyyy fail call reverse action addxxx case add update database transaction call rest service reverse call operation restful service propose aligent design pattern,2,202,5,0.0,0,2016-11-07T18:08:16,0.0
36973635,18044.0,<c#><azure><httpclient><microservices><azure-service-fabric>,httpclient delegatinghandler hold state,build application compose stateless microservice azure service fabric artifact service fabric service return endpoint instance service client fail communicate service naming service endpoint instance developer create naming service string identify service set identifier property handler stateful result object longer share call service handler private class change property exist handler annoying thing httpclient enforce baseaddress property relative urls delegate handler require state service discovery well solve,2,120,0,1.0,0,2016-05-02T00:50:06,0.0
42286951,111866.0,<microservices><foreman><procfile>,refer process port procfile,procfile currently manually pass automatically assign port well automatically populated,2,43,0,0.0,0,2017-02-16T23:53:39,0.0
42157097,2089767.0,<python><celery><message-queue><microservices><django-celery>,celery micro service django,celery micro service django access instance celery multiple service create open celery connection service separately suggestion implement task advance,2,301,0,0.0,0,2017-02-10T10:30:26,0.0
41720763,1048282.0,<spring><spring-cloud><microservices><spring-cloud-netflix><spring-oauth2>,setup spring zuul gateway cilent credential oauth flow,resource service zuul gateway serve angular application resource service endpoint restrict oauth isclient setup zuul gateway perform authorisation oauth cilent credential flow restricted resource secret access token client store gateway application property file note authenticate user simply client,2,396,2,1.0,0,2017-01-18T13:30:13,0.0
53113938,3096059.0,<docker><kubernetes><rabbitmq><microservices><rabbitmq-exchange>,host find address messagebus kubernetes,work green field project containerized docker micro service architecture micro service host kubernetes base requirement communicate service microservice service microservice rabbitmq image describe project architecture communicate service host kubernete time face error masstransit endpointnotfoundexception host find address rabbitmq localhost service messagebus url delete service microservice microservice kubernete locally work fine url messagebus deploy service kubernetes,2,228,3,1.0,0,2018-11-02T06:59:38,0.0
50600320,5705247.0,<docker><authentication><ssl><certificate><microservices>,docker microservice manage key certificate,build docker compose base development environment java micro services struggle logistic key management trust certificate deployment automate build environment build process produce three image unique ssl key pair generate java key store correspond sign public certificate export image file system automatically deploy trust certificate image component distinct image build bootstrap environment good pattern certificate management dockerize micro services environment,2,90,0,0.0,0,2018-05-30T08:50:13,0.0
50498328,1290321.0,<scala><config><microservices><lagom>,access config instance lagom service descriptor,recommend inject access application typesafe config instance lagom service interface trait impl case creation request header filter depend configurable env specific secret inject constructor argument descriptor function expose reference config include abstract field service lagom bomb complain field generate service recommend essentially call currently lagom scala,2,116,2,0.0,0,2018-05-23T22:24:21,0.0
38330918,278659.0,<go><jwt><microservices><kite>,jwt koding kite library,implement rest api base microservice technical stack select proof concept programming language koding kite microservice library labstack echo http framework implement api gateway idea implement authentication microservice return jwt dummy test microservice require authentication read article authentication deal api gateway microservice care security kite api wrong kite documentation info kite service securely deal jwt traditional rest api explain jwt kite,2,99,0,0.0,0,2016-07-12T13:53:47,0.0
55487111,1641352.0,<angular><microservices><angular-library><micro-frontend>,communicate angular library,angular app basically concept library library lib lib group accord microservice serve import library main app app thing till lib component uploadcomponent responsible upload type medium file video image doc work fine app independently component selector loading route lib component createcomponent upload functionality import uploadcomponent call inside modal window upload component emit message unable capture createcomponent uploadcomponent library handle situation,2,162,5,0.0,0,2019-04-03T04:31:10,0.0
49422756,9224611.0,<ssl><microservices>,ssl authentication secured service,application testa second testb testb application secure http ssl certificate web service application testb testa pass ssl authentication application testa parameter argument key pass call web service form test,2,39,1,0.0,0,2018-03-22T07:21:08,0.0
43869713,7986130.0,<java><wildfly><microservices><wildfly-swarm>,memory heavy wildfly swarm,problem wildfly swarm build micro service java main problem excess memory wildfly deploy consume mb memory solution resolve,2,665,8,0.0,0,2017-05-09T12:21:15,0.0
52245606,3198603.0,<java><servlets><jar><war><microservices>,micro service deploy jar file,micro services component service suite independently deployable service provide service http request talk term java ee http request handle servlet deploy servlet web app container archive packaging war file understanding archive jar file war file correct update duplicate understand diff jar war clear post question context microservice microservice deployed jar open answer,2,354,10,0.0,0,2018-09-09T14:44:23,0.0
43981658,1437243.0,<javascript><vue.js><microservices><vue-component><polymer-2.x>,good approach isolate ui microservice integration,currently face challenge integrate multiple api microservice correspond ui web app allready ui solution reuse search good structure client ui microservice approach divide javascript context share window object polymerjs thougth script tag polymer component window object unique component share polymer component big problem develop module base view libarie implement amd module belief microservice ui solution good isolation component dependency approach prefer iframe divide webapp dedicated document model view microservice personaly prefer solution vue js find sample divide ui webapp single view don load component demand question solution webcomponent share window object good approach create microservice ui component vuejs create isolate ui microservice webapp suggestion regard ui microservice approach,2,473,1,0.0,0,2017-05-15T14:09:10,0.0
51000425,9928438.0,<spring-boot><oauth-2.0><microservices><netflix-zuul>,integrate spring security oauth zuul proxy,question spring security oauth implement single project authorization resource server access token postman implement zuul seperate microservice access microservice port number implement zuul proxy context spring security oauth integrate zuul proxy spring securtity oauth second question create custom controller spring security oauth valuable suggestion advance,2,641,0,3.0,0,2018-06-23T10:50:37,0.0
56395875,3302091.0,<java><oauth><oauth-2.0><microservices><micronaut>,micronaut oauth client,micronaut application provide diverent endpoint secure oauth keycloak user login token application access microservice endpoint secure oauth token token machine machine token user login require problem httpclient access microservice oauth machine machine token micronaut application request token token endpoint client client secret find documentation solve problem good documentation,2,196,4,0.0,0,2019-05-31T13:19:07,0.0
44398143,601493.0,<spring-security><oauth-2.0><microservices><kerberos-delegation>,delegation oauth microservice architecture,general question delegation oauth watch great understand individual microservice resource server totally fine read token relay understanding life easy plan forward token token relay behalf user upstream service limitation resource server allow perform operation behalf user fact user allow perform operation resource server allow perform operation user behalf remember kerberos big deal delegation individual service permission spns delegate horrible setup understand consider implementation detail oauth obvious concept,2,312,0,0.0,0,2017-06-06T19:18:01,0.0
40836227,801130.0,<php><debugging><curl><xdebug><microservices>,xdebug debug microservice type architecture,code base currently work difficult work guess base microservice type architecture badly execute consist main service call curl separate service result call complicated xdebug debug monolithic code xdebug tend follow rabbit hole hit wall curl call service jump gap speak intercept curl call start xdebug service call xdebug call debug service main service result,2,215,2,1.0,0,2016-11-28T02:14:25,0.0
38929072,0.0,<azure><spring-boot><microservices><azure-cloud-services><netflix-eureka>,configure microcervice cloud comunication,deploy spring boot micro service azure cloud micro service deploy eureka register micro service eureka task send datum micro service spring boot local system perform task work fine azure micro service communicate unable establish connection feign client rest template ip hostname dynamic configuration achieve task configure eureka property application property service azure service azure call rest api service service unknowhost exception code snippet,2,328,3,0.0,0,2016-08-13T04:06:00,0.0
41403968,1790300.0,<node.js><microservices><seneca>,seneca js role microservice architecture separate docker container,planning phase move net monolithic application node js implement microservice architecture event drive app seneca js docker separate microservice container host aw elastic beanstalk read recommendation confused review seneca js docs process communication occur allow multiple client subscribe event rabbitmq seneca js time microservice perform action event route handle scenario subscriber fail event microservice seneca js allow expose rest api microservice allow client gain access internal database datum approach incorrect aspect,2,333,1,0.0,0,2016-12-30T23:29:01,0.0
46451874,6288659.0,<microservices><arangodb><foxx>,arangodb foxx support auto scaling microservice,arangodb foxx support auto scaling microservice configure foxx increase deploy instance specific microservice,2,84,1,0.0,0,2017-09-27T15:32:43,0.0
46481469,6647800.0,<node.js><mongodb><mongoose><error-handling><microservices>,good wrap mongoose validation error,mongoose provide easy validation suppose express mongoose build microservice client web app mobile app consume prefer response json simple error code message case client create message depend language user default catch error mongoose json response json response restful api controller model product js expect wrap error message simple consumer leverage mongoose valiation accomplish loop erros property combine code case client side validation call api case error throw api idea,2,488,1,1.0,0,2017-09-29T03:40:07,0.0
47210006,6343341.0,<http><architecture><load-balancing><microservices><rate-limiting>,horizontally scale micro service perform rate limiting,traditional tier webapp background good implement rate limit microservice docker container instance microservice trouble figure limit number request short share state call redi example incoming request basic rate limiter api gateway component protect large number request suppose microservice charge rate limit base business logic parameter implement architecture blog article light,2,107,1,0.0,0,2017-11-09T19:26:23,0.0
40746220,452701.0,<api><user-interface><architecture><microservices><granularity>,fine grain ui service difficult efficient microservice,web application microservice architecture ui service decoupling front business service api gateway ui fairly granular service control bind datum simple relevant practice ui service fulfill request request relevant datum microservice level granularity time simple ui control update underlie business service dao retrieve substantial datum object typical picture microservice cache avoid introduce lot finely granular method microservice api feel tightly couple business service interface ui alternatively well granular ui service allow large dto web javascript,2,66,4,0.0,0,2016-11-22T15:51:37,0.0
53446080,895477.0,<apache-kafka><microservices><jhipster><spring-cloud><spring-kafka>,spring cloud dispatcher subscriber channel,create microservice jhipster face strange problem receive message kafka computer internal lan test kafka server gateway microservice blog microservice change user gateway microservice send message correctly kafka second receive follow error blog microservice kafka configuration class consume message error happen gateway microservice add message topic suspect microservice listen process message wrong,2,565,1,0.0,0,2018-11-23T11:44:03,0.0
42541086,469652.0,<microservices>,access authorisation check microservice architecture,assume follow service service check user valid subscription service feature subscribe user access user access service check user subscribe access service learn communication microservice asynchronous loosely couple achieve idea jwt service return long list list ownership permission jwt practical,2,43,1,0.0,0,2017-03-01T20:10:04,0.0
47995844,8599870.0,<python><django><microservices><pika><event-based-programming>,pika django event base microservice django rest framework,experience implement pika django basically event base microservice django rest framework rabbitmq message bus default library case celery light version implement simple pub message implement service pika question spawn pika separate process django elegant solution advance update publisher spawn separate thread publish high volume keep pika connection alive subscriber spawn separate worker process separate container django context django setup consume message rabbitmq,2,548,1,0.0,0,2017-12-27T16:52:25,0.0
47986998,6504267.0,<java><spring-boot><microservices>,spring boot implement micro service polling external web service,requirement datum login start day logout day poll second datum receive dump data store pseudo code implement functionality add additional point health check service discover monitor centralized monitoring system spring boot solution implement micro service external client expose rest point monitor micro service relate pattern problem,2,1527,4,0.0,0,2017-12-27T05:50:59,0.0
57070948,11414155.0,<spring-boot><docker><oauth-2.0><microservices><netflix-zuul>,invalid redirect uri parameter google oauth spring boot microservice docker implementaion,spring stack spring boot release create site delegue user authentication registration google oauth implement spring cloud microservice zuul gateway port google oauth server spring security oauth client implement separate microservice cloud deploy localhost work fine microservice deploy machine docker oauth login work invalid redirect uri parameter error zuul configuration docker eureka configuration docker authserver configuration debug oauth condition unequal uri request response,2,87,0,0.0,0,2019-07-17T07:48:01,0.0
41946279,7492114.0,<ruby-on-rails><api><authentication><microservices>,rails api microservice api authentication,build micro service service rail api big wall hit handle build authentication user oauth provide good structure follow lose point figure follow work flow post image flow flow easy user api flow follow closer oauth implementation issue constantly check token auth server help example tutorial clear implementation helpful,2,481,0,0.0,0,2017-01-30T22:09:45,0.0
54982087,5265527.0,<python><multithreading><apache-kafka><multiprocessing><microservices>,kafka producer process work python,microservice python implement handler kind message message receive launch corresponding handle method computation involve tensorflow method inherit super class send message kafka code synchorize process target work correctly producer timeout long process datum process error message producer produce message reason edit reason time microservice exception occur consumer process read message wonder raise exception message send add solve problem confused,2,99,0,0.0,0,2019-03-04T11:14:32,0.0
57590695,2747047.0,<java><microservices><compile-time-constant>,tackle compile time constant microservice word,time ago modularize monolith small component store dedicated git repository versione release independently team problem define place public static final constant module build dependent module compile constant byte code module software package deliver customer production stable milestone quality newly implement feature test production environment simplify illustrate problem module deliver production environment define public staic final constant common module current sprint modify module common update constant module common recompile release customer receive package installer lead problem module compile bytecode constant update sprint decide recompile well module detect module public constant common module develop team increase version module java code change decide rebuild keep version problem deliver bug production release require change module deliver compile constant sprint include deliver version common tackle problem wrong side solution solve problem require lot effort achieve advance suggestion,2,50,1,0.0,0,2019-08-21T11:34:01,0.0
57671502,7387224.0,<c#><single-sign-on><microservices><identityserver4>,sign client identityserver,set identity server multiple client implement single sign client user sign client user sign client identity server signoutasync oidc signoutasync cookie delete cookie help logout method client application sign client application sign application initiate sign,2,98,1,0.0,0,2019-08-27T09:22:33,0.0
55571359,3629330.0,<rest><graphql><microservices>,microservice architecture cloud advice,build system base microservice web application connect rest api implement authorization system authentication basically define user system perform action implement role permission system dilemma architecture option mind thought advice pro con move forward specific microservice handle user permission role basically microservice access database table association user role role permission common solution consider option pro con opinion keep microservice cache table user permission specific microservice time user perform action microservice delete order ordering microservice microservice check table grant access user perform action pro microservice microservice independent service work totally autonomously rest system main microservice handle user permission crash rest microservice continue work con update user permission microservice handle send message microservice update correspondent permission table create api gateway microservice middleware frontend rest microservice graphql frontend longer rest microservice microservice intercept request frontend check user permission microservice user permission action call correspondent microservice pro business logic decide user access single microservice duplicate microservice authentication implement middleware microservice double check user authenticate internal microservice succesfully authenticate update cache table internal microservice user role permission update con defeat definition microservice architecture middleware microservice crash system thought,2,46,2,0.0,0,2019-04-08T10:30:02,0.0
58113729,4200001.0,<asp.net-web-api><authorization><microservices>,reuse api partner website custom backoffice spa,web api internally backoffice js spa externally external partner website order control authorization design code authorize attribute case example caller updatepersonalaccount permission internal admin user define system assicate role group permission internal admin user identify spa js application verify require permission api level intent expose api external partner website litlle bit confused plan expose api external website create fake service account set permission internal authorization service wrong effective standard,2,20,2,0.0,0,2019-09-26T09:32:10,0.0
58034170,7136237.0,<java><spring><spring-boot><microservices>,java spring boot windows service alternative,multiple spring boot project running window server deploy project window service docker reduce amount window service change microservice architecure alternative osgi nice recommend spring boot app osgi alternative create java controller app start microservice controller app deploy window service well alternative create controller app docker nice spring boot service osgi,2,72,4,0.0,0,2019-09-20T19:28:06,0.0
53300341,8295625.0,<single-sign-on><microservices><jhipster><openid-connect><keycloak>,sso single sign share keycloak session application,monolithic spring boot application generate jhipster microservice gateway jhipster secure keycloak openid monolithic microservice gateway work keycloak token app configure sso securityconfiguration client keycloak web app default jhipster provide keycloak config authenticate credential app login monolith sign gateway miscroservice app visa versa configure sso authentication application keycloak session jhipster generate spring boot app,2,344,0,0.0,0,2018-11-14T12:32:31,0.0
49569245,7789533.0,<docker-compose><kibana><microservices><netflix-zuul><netflix-eureka>,call kibana zuul,multiple service node service docker docker container node service register call external network question call kibana service efk zuul route register kibana eureka docker compose efk snippt docker ps solution,2,123,0,0.0,0,2018-03-30T06:04:20,0.0
49541648,9270326.0,<microservices><arangodb><foxx>,query slow foxx microservice,notice performance decrease move aql query arangodb rest api custom foxx microservice expect example multithreaded load test remote machine count document document collection return length mycollection api cursor rest endpoint process request second call microservice return db query length mycollection process request second decrease throughput complex query path traversal decrease query involve geospatial decrease sure degradation insight greatly appreciate,2,221,6,0.0,0,2018-03-28T18:26:45,0.0
47509361,7697959.0,<cassandra><persistence><microservices><lagom>,column family mismatch error persist datum cassandra micro service environment lagom,start service lagom service create table cassandra error service create table keyspace error refer answer problem create table statement collision generate table dynamically multiple client exist case table create keyspace service individually error occur fine application conf,2,236,4,0.0,0,2017-11-27T11:01:01,0.0
46909836,8824542.0,<nginx><kubernetes><load-balancing><microservices><haproxy>,kubernetes sticky session load balance header,work project kubernete docker microservice implement create permanent http connection service provide modify service pro user client order send asynchronous cloud initiate message user follow request client connection challenge term scalability request client route instance microservice create permanent connection service thing bad fact client change ip cookie send custom header identify haproxy nginx find option load balance request header approach issue idea,2,438,2,0.0,0,2017-10-24T11:50:47,0.0
50679665,364746.0,<websocket><microservices><jhipster><jhipster-registry>,jhipster support websocket microservice architecture,implement websocket microservice project find zuul proxy support websocket default jhipster developer recommend add websocket gateway project well solution problem proxy allow add websocket microservice,2,305,2,0.0,0,2018-06-04T11:35:51,0.0
50885668,2726496.0,<spring-boot><microservices><netflix-zuul><netflix-eureka><spring-cloud-netflix>,springboot microservice slow response,project develop springboot eureka zuul ribbon deploy gcp kubernetes cluster rest call postman work fine long time response load test server follow result load test consider request connect database hit point return hardcode request low configure server handle load configuration consider discovery server zuul api client server springboot project discovery server application property file zuul gateway application property file resttemplate call microservice follow code resttemplate call microservice,2,359,2,1.0,0,2018-06-16T06:51:32,0.0
52617902,4913567.0,<elixir><schema><graphql><microservices><absinthe>,graphql schema stitch elixir absinthe,develop deploy independently decompose schema separate microservice erlang ecosystem elixir absinthe ready feature question posible elixir absinthe create single graphql schema multiple underlying graphql api,2,202,0,1.0,0,2018-10-02T23:50:57,0.0
39766200,278638.0,<java><maven><google-app-engine><ear><microservices>,googleappengine build multi service application maven,build googleappengine standard app default web service dynamic scale basic scale worker periodically second complete work modern thing service maven follow instruction manage app build deploy classloader error maven beginner well basic stuff find documentation example structure app ear configure maven build sidetrack thing equivalent multiple service thing google cloud platform doc find difficult navigate plethora api software plugin service exist good app structure tree configuration create sort microservice architecture describe maven,2,159,0,0.0,0,2016-09-29T09:15:06,0.0
38562514,888269.0,<java><thymeleaf><microservices><uicomponents>,include html fragment thymeleaf api,include html fragment thymeleaf api service process transform monolithic application microservice architecture portal application integrate downstream system web service soap restful jms vertically slice application front step step current monolithic application strangler application cms integration well provide content update functionality technical staff challenge provide unique user experience functionality multiple web application time avoid static resource duplicate application introduce common application header footer library js theme css component include common template application api allow avoid resource duplication maintain consistency multiple application plan thymeleaf template reference allow include html fragment service point share reference achieve thymeleaf good mechanism achieve desire goal,2,218,2,0.0,0,2016-07-25T08:02:29,0.0
50097325,2906332.0,<django><foreign-keys><microservices><django-migrations>,remove foreignkey constraint django,django application table table column foreign key table migrate table separate microservice order break foreign key constraint column table keep simple column achieve django migration drop exist column table live datum production system,2,616,3,0.0,0,2018-04-30T09:09:07,0.0
53824375,1619821.0,<docker><docker-compose><microservices><laradock>,laradock project deployment workflow,docker currently confused setup dev environment laradock follow container laravel workspace image php fpm postgres pgadmin python config nginx work well local machine mac idea upload project server goal develop production server check response time docker docker compose docker compose yml php fpm postgre pgadmin nginx python python build context python socket port volumes app code path host app code path container sftp access ssh access server deploy develop project simple deploy project server fast code update test purpose,2,312,0,2.0,0,2018-12-17T23:20:51,0.0
53829046,9184636.0,<java><spring-boot><microservices><spring-cloud><server-sent-events>,maintain sseemitter list multiple instance microservice,language spring boot js overview implement server send event functionality application deploy cloud foundry base message queue subscribe micro service send update client browser eventsource maintain sseemitter list mainitaine active sseemitter server side receive message queue base field queue message emit message correspond client problem scenario work scale application create multiple instance instance receive queue message happen active sseemitter maintain instance solve,2,120,0,0.0,0,2018-12-18T08:32:16,0.0
53794849,6579725.0,<architecture><microservices>,architectural perspective good implementation specification microservice,generic solution business requirement customer customer implementation differ microservice reduce code duplication base specification top implementation rest parameter decide implementation strategy pattern sound better approach bring question good implementation jar file require customer required implementation change customer client microservice microservice customer call choose implementation build theirselve wonder deploy unnecessary implementation customer environment sound odd good approach,2,31,2,0.0,0,2018-12-15T16:00:52,0.0
53728251,9831971.0,<java><spring-boot><jpa><microservices><spring-transactions>,spring transaction default timeout property work spring boot,build microservice mysql database spring boot framework provide database property application property spring transaction default timeout property file explicitly initialize datasource entitymanager auto configure spring problem transaction remain block state lock acquire transaction database table cancel transaction wait time exceed configure property mention work note explicitly initialize datasource entitymanager jtaplatfromtransaction manager work help resolve issue advance,2,1039,4,0.0,0,2018-12-11T16:19:27,0.0
53667906,5181276.0,<java><maven><spring-boot><microservices>,springboot command error duplicate slf library loading,spring boot mvn clean install build success navigate specific module folder execute error help appreciate,2,106,5,0.0,0,2018-12-07T10:44:07,0.0
56849273,11723866.0,<c#><asp.net-web-api><.net-core><microservices>,create xunit test case await propertyrepository unitofwork saveentitiesasync,test addcommandhandler guide write test case write test case fail propertyrepository addcommandhandlertest cs,2,41,3,0.0,0,2019-07-02T09:25:51,0.0
55744976,5709081.0,<java><spring-boot><jwt><microservices><jhipster>,access gateway user micro service,module gateway micro service generate jhipster database user permission entity gateway database component generate user micro services database table table column create store user gateway user table component create requirement api require list component corresponding user single propose solution achieve access gateway user table micro service question access table database micro service,2,36,0,0.0,0,2019-04-18T11:23:56,0.0
49218227,8818013.0,<python><django><docker><containers><microservices>,error create multiple container multiple django project,multiple django project individual container project structure structure throw error file exist basically command file inside folder start link,2,275,1,0.0,0,2018-03-11T08:45:36,0.0
58643618,7490367.0,<node.js><express><microservices><helmet.js>,power helmet micro service,remove help helmet npm package microservice node js default remove header case reinstall browser cache clear work work error console config work backup plan,2,25,0,0.0,0,2019-10-31T12:43:39,0.0
58728940,5292158.0,<sql><oracle><microservices>,database good practice schema user microservice,create oracle database microservice stick standard xxx owner xxx user switch simple single user schema monolithic application database tend common application necessitate user good practice monolithic application xxx owner schema object create xxx user application access object create inside schema owner schema heavy handed approach microservice microservice schema lock service drawback ditch user strategy move single user strategy case microservice approach approach single user simple develop deploy operate concern team move age good practice user practice well approach microservice database,2,53,9,0.0,0,2019-11-06T11:18:22,0.0
45517534,3198603.0,<java><web-applications><microservices>,design convert exist application micro service,multi module application high level maven module depend low level module module search business logic relate common search module user creation business logic relate user module util common helper method notice email business logic relate email module common single db convert module email micro service mine understand email separate war application continue common db authentication mechanism module send username pwd email service verify db early transaction boundary span module email module transaction boundary question transaction module microservice example single transaction user create send email email micro serv error occur roll complete transaction,2,36,1,0.0,0,2017-08-05T02:01:27,0.0
45511324,3324626.0,<spring><spring-boot><microservices><hystrix><turbine>,spring turbine authentication,currently authenticate microservice arch hystrix microservice oauth resttemplate communication case control request add authentication thought interceptor add parameter access token intercept request turbine background idea intercept request well solution,2,86,1,0.0,0,2017-08-04T16:11:22,0.0
45444443,1490277.0,<asp.net><iis><microservices>,include request guid correlation iis log,watch request failure response client determine uniquely generate correlation good entry point api net web api application receive request iis track request fail succeed iis log file include unique guid assume activityid web api gather activityid correlationmanager activityid host server level report request successful fail iis start include unique correlation identifier logs touch,2,399,2,1.0,0,2017-08-01T17:38:07,0.0
52933302,8177720.0,<docker><microservices>,microservice java class docker,maven project include multiple java package implement set interface function define interface java application change architecture project microservice architecture subsystem execute container application interface execute container containerize class implement interface class main function provide example find web simple java application execute container,2,53,8,0.0,0,2018-10-22T15:54:06,0.0
35219255,5097551.0,<spring-security><spring-cloud><microservices><oauth2>,method secure config server oauth token,method secure config server oauth token plan implement spring cloud config server oauth token client server fetch property feasible meet problem start demo service eureka start implement service register discovery oauth enviroment auth server jwt oauth server configuration start secondly inmemory user config server start thirdly application yml pc gateway client server ui server start lastly test secure uri redirect enter user password redirect oauth server oauth client fine set follow configuration bootstrap yml start pc gateway service fetch config server unauthorized error help,2,775,0,2.0,0,2016-02-05T08:16:41,0.0
54424688,306404.0,<oauth><authorization><azure-active-directory><microservices>,azure active directory behalf flow microservice solution,microservice solution api gateway front microservice authorization happen microservice level spa client implicit flow acquire token call api api behalf flow acquire token call relate microservice user microserice appear user authorization perform question behalf flow api gateway app level permission access microservice api app level service service client credential grant flow capability rely gateway api perform authorization bad idea bad idea api call scenario question approach allow flow user identity microservice proper authorization occur example header identity server lack behalf option identity server btw realize pass user identity string lose sign token benefit provide level certainty token tamper,2,94,3,1.0,0,2019-01-29T15:43:45,0.0
55237200,10027912.0,<amazon-web-services><aws-lambda><salesforce><microservices>,subscribe aw lambda salesforce platform event,integrate salesforce micro service structure aw article subscribe lambda platform event salesforce find code example node js lambda work great sure lambda,2,489,5,0.0,0,2019-03-19T09:11:34,0.0
55265021,6598701.0,<python><apache-kafka><microservices>,send python object kafka,work distribute project send python object microservice kafka communication system send message kafka producer read message consumer serialize deserialize message change deserializer parameter mgspack pickle consumer read message course remove service order field work perfectly problem object serialization good exchange object kafka,2,196,6,0.0,0,2019-03-20T15:53:19,0.0
52407950,3753879.0,<oauth-2.0><microservices><jhipster>,jhipster oidc authentication jhipster uaa stateful stateless,help bring clarity follow topic follow documentation state jhipster uaa documentation state follow feature question solution decide stateful stateless nature provide detailed,2,132,0,2.0,0,2018-09-19T14:14:27,0.0
44905526,7592169.0,<spring-boot><microservices><mockmvc><spring-boot-test><spring-cloud-contract>,spring cloud contract mockhttpservlet throw illegal argument exception,spring cloud contract write test micro service eureka ribbon generate stub theyr deploy send request consumer service throw illegalargument exception add header exception code exception,2,334,3,0.0,0,2017-07-04T12:03:53,0.0
39352746,1760803.0,<php><magento><redirect><microservices><http-redirect>,post redirect php,detail flow description magento site send post api api middleware microservice save order db redirect payment gateway payment gateway response redirect api payment redirect callback magento magento code send post api code api middleware redirect payment gateway question redirect payment gateway api middleware send post magento site,2,235,2,0.0,0,2016-09-06T15:28:35,0.0
57364333,11720393.0,<sbt><microservices><git-submodules>,git submodules library dependency scala microservice project,multi project sbt build config bunch microservice repo microservice separate repository call share model microservice handle dependency project microservice git submodule approach properly fit case solution create submodule main repo microservice dependent module solution add specific dependency common microservice pro con approach proper manage share code relation general advance,2,38,0,1.0,0,2019-08-05T18:37:22,0.0
54627665,3538126.0,<unit-testing><microservices><background-process><asp.net-core-hosted-services>,good practice write unit test net core ihostedservice,background task initiate net core startup inherit backgroundservice implement startasync stopasync executeasync task update datum database table periodically base business logic backgroundtask application test log db check help tool unit testing test backgroundtask register task service dependency trigger start method assert actual expect appreciate basic sample unit test method test timer base net core ihostedservice backgroundtask basic test start sample complete thought exact working test help community add assert assert verify,2,287,0,0.0,0,2019-02-11T09:44:06,0.0
51411250,5627137.0,<java><wso2><microservices><spring-cloud>,spring cloud netflix oss wso,goal build multiple microservice fault tolerant resilient microservice currently build spring boot key difference wso api manager spring cloud component spring cloud build comparable solution akin wso api manager general api manger component spring cloud mix match component spring cloud wso api manager compatible wso api manager spring cloud example load balancer ribbon service discovery eureka spring cloud security analytic component ws,2,247,0,0.0,0,2018-07-18T21:30:19,0.0
42747278,5255298.0,<spring><azure><microservices>,spring cloud microservice azure service fabric,microsoft azure work microservice pivotal cloud foundry deploy spring cloud microservice azure service fabric work pivotal cloud foundry program change,2,290,0,0.0,0,2017-03-12T12:18:32,0.0
42723080,7240977.0,<node.js><logging><microservices><elastic-stack><winston>,log nodejs microservices application winston,write server side application devide serveral microservice currentlly write nodejs winston logging library elk monitor log discover monitor log comfortably view kibana request microservice view log request enter microservice send microservice throw unique request entity send generate unique request add generate method application elegant solution change log alot,2,642,1,0.0,0,2017-03-10T16:21:35,0.0
46093496,487291.0,<microservices><aws-api-gateway><distributed-system><api-gateway>,merge datum api gateway level microservice level,api gateway order microservice resource publicly follow situation simplify microservice serve provide product price product price microservice provide product availability product availability order product price availability follow microservice dependent microservice product price availability endpoint api gateway consume microservice microservice order provide price availability resource basically question merge datum microservice level api gateway level,2,334,5,1.0,0,2017-09-07T10:01:13,0.0
30887937,977741.0,<node.js><amazon-web-services><docker><microservices><weave>,docker auto spawning require connected container type demand,systematically clone scale docker container microservice bottleneck instance container type web routing database eliminate system essentially reconfigure respond load profile container system discoverable communication service ec instance system resource maxe weave connect container newly aws scale instance balance load nodejs,3,195,5,1.0,0,2015-06-17T09:43:18,0.0
29960156,3894414.0,<.net><rest><swagger><swagger-ui><microservices>,swagger work multiple microservice,interested swagger microservice architecture microservice write net webapi separate application host path ideally swagger specification describe api generate client side consumer api definition model invoker service read find concrete example start play net swagger library install swagger ui app microservice effectively host api help,3,459,0,1.0,0,2015-04-30T06:03:08,0.0
36046296,5043003.0,<spring><spring-cloud><microservices><netflix-zuul><spring-cloud-netflix>,zuul pass content type service,zuul api gateway mapping service custom error message exception handle service problem content type suppose wrong hit api custom message handle scenario content type zuul intercept throw error add error postman throw zuul ignore hit service custom error message corsfilter zuul handle cross domain issue log zuul,3,998,7,0.0,0,2016-03-16T20:28:36,0.0
34499843,2496779.0,<multithreading><apache-kafka><microservices><kafka-consumer-api>,kafka message queue microservice,background question consider kafka channel inter service communication micro service micro service web nature web server rest server soap server communicate exist endpoint point asynchronous channel micro service consider kafka message broker scenario restfull microservice job push message kafka queue micro service web server embed tomcat small rest layer consume message reason consider messaging queue receive micro service reason incoming message add queue datum flow disturb reason kafka persistent queue typically kafka consumer multi thread question receive micro service web server concerned create user thread servlet container manage environment work consider fact user create thread bad web application confused approach scenario,3,658,2,0.0,0,2015-12-28T19:54:09,0.0
44828479,2805065.0,<rest><security><google-app-engine><reverse-proxy><microservices>,verify request project app engine mix flexible standard,context setup setup google app engine project reverse proxy service api gateway microservice project recommend google engineer request client microservice route gateway underlie service respect header build url security problem malicious user forge header application call endpoint domain protect underlying service isolate external accept request project gateway microservice app engine standard validate project find app engine flexible assert request app engine project flexible environment avoid implement share secret leak mechanism service check gateway request validate service header adhere expected format beat purpose header place,3,242,5,0.0,0,2017-06-29T14:50:27,0.0
34757449,2759595.0,<javascript><api><ionic><key><microservices>,store private key ionic,ionic create hybrid mobile app app micro service architecture backend assure app reach microservice simple solution encripte param send hmac key send parameter encription token backend repeat process key token key change problem relate store key ionic javascript easily inspectionable wonder store dynamic private key change key week inside ionic app hardcode help,3,308,0,0.0,0,2016-01-13T02:35:00,0.0
41722881,2402339.0,<api><authentication><oauth-2.0><authorization><microservices>,good practice microservice authorization,hope clarification proper handle micro service authorization structure find lot great resource understanding flow flow authorization server provide token user log api service request check token token request authorization server check valid valid user flow authorization server provide token api request service authorization server hit api service return datum question flow good standard practice good structure user datum api service standard user table token prove good user authorization server flow skip fourth api authorization server request store marker user session bad practice unsafe lot question sure firm handle structure flow help,3,234,0,0.0,0,2017-01-18T15:10:45,0.0
39851730,2342229.0,<rspec><integration-testing><cluster-computing><microservices><consul>,test cluster microservice,clearly test server good case problem follow microservice architecture auto discovery service service query project express tool ruby python choose integrate consul serverspec great project tackle issue,3,155,0,1.0,0,2016-10-04T11:59:41,0.0
49491255,4982878.0,<c#><.net><azure><microservices><azure-service-fabric>,troubleshooting azure service fabric deployment issue,service fabric local dev cluster error publish application visual studio output window service ready fabric explorer generic error source system fm partition target count check configuration fine troubleshoot help appreciate,3,197,6,0.0,0,2018-03-26T12:15:09,0.0
39259293,3443096.0,<authentication><nginx><oauth-2.0><microservices><kong>,kong request transform dynamic redi,implement security mechanism base oauth jwt micro service base explain kong org point accord approach article gateway case kong translate access token jwt hand request final microservice jwt include final request translation simple lookup preferably redi plugin kong request transformer allow modify header currently allow dynamic redi plugin kong quick googling lead discussion wonder pointer work raka,3,665,1,2.0,0,2016-08-31T21:28:33,0.0
35831108,566597.0,<docker><jetty><docker-compose><dockerfile><microservices>,call docker container container,deploy docker container host rest service deploy jetty endpoint configure container throw connection refuse exception configuration question access endpoint deploy container container connection refuse exception expose port container work,3,2211,2,0.0,0,2016-03-06T18:57:41,0.0
40866787,78640.0,<.net><f#><microservices>,server,good easy create standalone microservice http socket server suave raw library good example,3,104,2,0.0,0,2016-11-29T13:12:21,0.0
40970114,1341775.0,<java><angularjs><spring><microservices><netflix-zuul>,error access rest endpoint zuul api gateway,help twist mind day work api gateway application security config resource server sample yml zuul route app security application security config resource server config request browser successful authentication follow url localhost security oauth return json response currently log user angularjs app return find angularjs controller,3,564,3,2.0,0,2016-12-05T08:38:10,0.0
39069689,992706.0,<jenkins><spring-boot><swagger><microservices><slate>,combine integrate swagger slate spring microservice,set dockerize microservice spring boot jersey application deploy ec instance service expose rest api create spec step include swagger core spring boot app generate json yaml file serve http rest resource service slate serve api specification service single resource aggregate individual json yaml file http slate markdown format serve static content library swagger markup generate markdown file aggregate api specs json yaml file service json yaml file generate markdown file slate default middleman build static content serve http question consider good practice seamlessly integrate process jenkins build,3,487,0,0.0,0,2016-08-21T23:23:46,0.0
40702967,913622.0,<node.js><docker><kubernetes><jwt><microservices>,manage authentication micro service,currently semi microservice architecture api php frontend website react node backend management website react node backend organisation website react node start write backend service node add endpoint exist api exist api manage user authentication jwt good approach manage user authentication service split auth create api gateway,3,562,2,0.0,0,2016-11-20T10:29:08,0.0
48043245,4716474.0,<google-app-engine><microservices>,authentication microservice google app engine,build micro service project gae host multiple service gae standard java flexible python environment implement authentication service service client service communication client service form base authentication model authenticate client service exchange domain cookie base auth token generate service successful authentication microservice gae replicate auth token generation validation logic well move authentication logic central authentication service web android client communicate backend service fashion establish authentication authorization service service communication read gae documentation application security check help setup authenticate communication microservice gae security provision setting offer gae limited general riddled caveat quick appengine header inbound appid work custom domain firewall rule service account setting work application level service level base read write dedicated authentication service generate validate jwt token communicate party client service generic customizable solution fit future requirement sso login minimal effort wonder code authenticate authorize communication microsservice gae mixed standard flexible setup custom domain generous share experience,3,592,8,2.0,0,2017-12-31T14:27:26,0.0
37581538,5523033.0,<api><nginx><protocols><microservices><gateway>,api gateway write guideline interact client,ton microservice find single piece code write api gateway understand client service api gateway allow client request iot gateway gateway request internally service build response article nginx case suppose support client android angular app browser tangible user story client online shopping store shopping store service break server service build platform language database completely scale cloud scale entire application intense algorithm payment payment service spin server balance load decrease user wait time write java http rest expose api consume write golang node matter language expose api http protocol api gateway handle response client request thing load shopping cart list view shopping item current special client request api gateway apigateway apiv api gateway request service serviceshoppe apiv shoppinglist servicecart apiv cart servicespecial apiv special point service write language protocol service request response client single response concatenate json object specific schema confused long post simple question setup conceptualize explain,3,170,0,0.0,0,2016-06-02T02:07:48,0.0
45664485,1006944.0,<microservices><metrics><datadog>,display count day counter metric data dog,counter metric micro service push datum datadog display total count time frame count day axis axis count achive query representation total number count time frame bar graph axis axis count datadog,3,777,2,0.0,0,2017-08-13T20:09:50,0.0
47255576,2072419.0,<spring><microservices><spring-cloud><consul><service-discovery>,spring set datasource service discovery,start programmatically set datasource configuration app service discovery sure functionality manage spring case consul discovery service read find answer question prolly flawed knowledge spring configuration basically configure discovery system file set natively concept involve,3,178,1,0.0,0,2017-11-13T00:29:49,0.0
40191917,1025782.0,<php><symfony><microservices><guzzle>,attach correlation guzzle request,wonder pass correlation request guzzle request find question satisfy decide create micro service symfony stack communicate http guzzle unique request generate entry point case commmand query start pass request service app fetch generate request communication dependent service add follow request request helpful log event efficient generate unique attach request metadata header handle symfony pretty easy api client thought course attach header place request bit smelly hard maintain create method api client class remember add header request consider create guzzle middleware responsible attach header symfony implementation guzzle psr legal course symfony psr http bridge convert request afraid break compatibility class inject solution good hear advice maintain easily keep principle clean architecture clean design answer,3,272,0,2.0,0,2016-10-22T12:01:35,0.0
37419561,1100135.0,<java><microservices><spring-cloud><netflix-eureka><netflix-ribbon>,service registry external service,custom application service registry ribbon automatically fail build external service elastic search node work node eureka fail achieve thing,3,131,0,2.0,0,2016-05-24T16:50:52,0.0
57949785,5402521.0,<php><laravel><api><microservices>,controller exist laravel,restructure laravel file rename app file infrastructure create api file module create inside app infrastrucure modify routerserviceprovider code load route inside module load default route work inside module work write create controller method class infrastructure http controller purchasecontroller exist composer install composer dump composer dump autoload add inside composer json autoload api infrastructure directory error wanna add module inside api directory route php file sry property,3,56,1,0.0,0,2019-09-16T02:39:59,0.0
58804953,6093604.0,<authentication><microservices>,microservice authentication approach,today sure approach term microservice architecture login register authentication approach service api users service authentication process share api user service example login api find combination username password user service success generate token return user api handle authentication token redi move forward microservice loosely couple approach people split authentication datum user datum age phone number follow approach api send datum authentication service success request adduser getuserbyid user service return datum authentication service hold user account user service hold user good approach fail manage case authenticate user service crash process user create account user profile case hard interesting point view,3,38,5,0.0,0,2019-11-11T16:15:51,0.0
46886957,2178209.0,<api><amazon-web-services><graphql><microservices><gateway>,aws api gateway multiple graphql microservice endpoint api route,graphql microservice microservice docker container host microservice single aws api gateway aws api gateway point endpoint base method contexturl case graphql request post api query body challenge help guidance appreciate,3,281,0,3.0,0,2017-10-23T10:17:04,0.0
50838480,4030664.0,<node.js><microservices><pm2>,pm fail watch change file,build nodejs application microservice architecture follow architecture root folder demo ms bootstrap demo ms gateway demo ms authentication demo ms user demo ms product manage demo ms product feed demo ms utility root folder multiple micro service folder demo ms bootstrap pm ecosystem file problem change microservice code watch change restart server set pm process individually microservice folder properly separate pm service microservice folder create single ecosystem config js microservice relate pm configuration demo ms bootstrap folder demo ms bootstrap ecosystem config js code root folder work require lot rework apart move pm ecosytem config js configuration demo ms bootstrap folder alternate solution,3,202,1,0.0,0,2018-06-13T13:27:27,0.0
39749378,601311.0,<reverse-proxy><microservices><netflix-zuul>,zuulpostfilter rewrite location header,configure zuul reverse proxy local backend server response xx http code redirect write filter handle rewrite location header zuul configuration filter work expect change url service filter fail rewrite header filter hang wrong return method app filter extract specific address belong service,3,570,0,1.0,0,2016-09-28T13:45:26,0.0
38506793,6024617.0,<python><amazon-web-services><docker><amazon-elastic-beanstalk><microservices>,elastic beanstalk multiple environment url route,start create website docker microservice amazon web service service reside domain domain search point search service domain auth point authentication service domain static point bucket static file domain point static html implement angularjs app note mention directory point service search autocomplete point search search authentication load balance independent service implement web api python falcon container set listen port webserver embed container search invoke authentication confused sure elastic bealstalk tool hope point direction,3,80,0,0.0,0,2016-07-21T14:20:10,0.0
53777817,2000301.0,<.net><asp.net-core><swagger><microservices>,api gateway microservice swagger collection,api gateway aws front multiple microservice net microservice expose swagger documentation independently aggregate swagger endpoint multiple api api gateway expose client single documentation example java springboot sure net example,3,181,0,1.0,0,2018-12-14T10:24:48,0.0
48493053,1767308.0,<azure><microservices><messaging><azure-service-fabric><stateful-actor-service>,azure service fabric – service remoting http messaging system,actor produce datum db terrible idea actor interact db add service middle service write db batch communication actor service service remoting http asynchronous messaging system service remote good solution data persist actor statepersistence persist service remoting handle actor concurrently call service mention negative service remoting approach,3,504,2,1.0,0,2018-01-29T01:02:36,0.0
48535965,3177669.0,<spring-boot><microservices><spring-cloud><weblogic12c><spring-cloud-netflix>,spring cloud weblogic,develop spring boot microservice netflix oss spring cloud development environment embed tomcat work well deploy weblogic deploy service registry api gateway inside manage server open eureka server api gateway register service registry service registry application yml api gateway application yml service registry help follow query deploy spring cloud weblogic correct deploy microservice separate manage server configuration api gateway register service registry,3,403,6,1.0,0,2018-01-31T06:39:13,0.0
52779431,4256749.0,<c#><asp.net-core><swagger><microservices><autorest>,service transfer generic jsonpatchdocument service,build application azure asp net core involve microservice client application microservice follow method define method accept apply generate swagger autorest follow auto generate method auto generate client microservice controller accept jsonpatchdocument problem lose type constraint longer advertise microservice require list update type question microservice transfer generic microservice manipulate datum,3,165,0,0.0,0,2018-10-12T12:20:01,0.0
57149221,4104887.0,<java><spring-boot><microservices>,avoid excessive datum duplication microservice,advice implement microservice arhitecture microservice microservie catalog entite share multiple microservice microservice lot catalog entity approach duplicate datum good solution lot duplicate datum keep synchronize postgresql java spring boot microservice problem filter sort datum avoid datum duplication overhead syncronize datum microservice,3,66,2,1.0,0,2019-07-22T15:27:26,0.0
55160779,9114332.0,<web-services><microservices><resttemplate><spring-restcontroller>,response service service microservice,face strange issue response string service service create microservice service call service response print log return response null create method code work fine code call service service method return response controller result return success failure result print controller success client print null create exact method signature return result success microservice jordan,3,40,0,0.0,0,2019-03-14T11:00:10,0.0
56294568,1068446.0,<microservices><docker><devops><monorepo>,developer create docker artifact lerna monorepo development environment,start lerna manage monorepo development work fine lerna create symlink package tool tsc watch nodemon work fine detect change package problem create docker image environment project structure scenario development fine kind live reload server symlink work dependency work create docker image backend walk scenario package json dockerfile npm install work common utility package publish build command backend add build node module docker file work build backend command node module symlinke docker ignore symlinke folder workaround unsymlink node modules work step build docker image publish npm package work check code base modification work privledge publish npm package configure command treat external treat external build build occur technique webpack bundle include code common cumbersome manage simple problem solve code currently work machine pull docker container remember key thing achieve check code base modify package build docker image development environment obvious lerna technique devops frame reference solve problem,3,320,3,0.0,0,2019-05-24T07:20:44,0.0
57322178,4613155.0,<docker><asp.net-core><docker-compose><microservices><osrm>,osrm server setup docker compose container exit,setup osrm server top docker configure docker compose yml side micro service project net core docker compose yml file error container exit response url thing configuration suggestion,3,106,0,0.0,0,2019-08-02T07:59:58,0.0
42691123,3106388.0,<c#><asp.net><asp.net-web-api><asp.net-core><microservices>,call multiple asp net core microservice location,asp net core micro service create multiple asp net core webapi project call url web application call http url route call specific url return result client sure create api gateway asp net core help appreciate,3,717,4,1.0,0,2017-03-09T09:11:24,0.0
56648153,1978285.0,<cloud><microservices><hystrix><resiliency><resilience4j>,alternative hystrix request collapse,netflix hystrix officially maintenance mode start alternative nice library resilience pattern circuit breaker bulkhead retrie thing find alternative request collapse hystrix aware library provide functionality benjamin,3,92,0,0.0,0,2019-06-18T11:31:44,0.0
30159795,2375952.0,<amazon-web-services><amazon-ec2><amazon-elastic-beanstalk><embedded-jetty><microservices>,elastic beanstalk embed jetty,build bunch service embed jetty prefer deploy service elastic beanstalk elastic beanstalk support environment tomcat require environment service elastic beanstalk bare bone ec instance java embed jetty application capable port docker container good service case sure environment,4,612,1,0.0,0,2015-05-11T04:42:21,0.0
35033505,5213999.0,<scala><swagger><microservices><akka-http>,document microservice build akka http swagger,build microservice design approach akka http scala design imho swagger find boilerplate implementation swagger work akka http proceed find thread talk extent find conclusion approach maintain version library swagger community find indicating ensure implementation adhere swagger spec develop blend well java scala,4,710,5,1.0,0,2016-01-27T09:32:36,0.0
35408768,1622453.0,<java><spring><spring-boot><microservices>,update upgrade spring boot cloud application,find good update spring boot application production affect client call microservice spring boot application consul service registration spring boot app service client call service start register consul suppose work workaround reduce downtime start update version spring boot app case server register consul version version kill version,4,392,0,0.0,0,2016-02-15T11:56:39,0.0
36423188,6017603.0,<jhipster><microservices>,generate entity relationship user entity jhipster microservice,create jhipster entity relationship user entity jhipster microservice user entity exist jhipster microservice,4,450,1,6.0,0,2016-04-05T10:03:17,0.0
49406766,4265479.0,<php><laravel><rabbitmq><microservices>,consume message rabbitmq laravel luman,work set microservice moment message publish queue great consume message separate microservice app laravel luman register consumer thought register method app service provider point direction find example laravel app literally register consumer laravel,4,1042,3,0.0,0,2018-03-21T12:49:17,0.0
44430810,2972221.0,<docker><docker-compose><microservices><consul><registrator>,list container service docker compose inside container,smart list service container docker compose file inside container prefer volume pass statically compose file container parse pass list infromation envoirment var perfect result docker compose config service return list service compose pass container host list container compose application monitor registrator consul,4,748,3,0.0,0,2017-06-08T08:44:12,0.0
47015950,2107890.0,<authentication><httprequest><microservices><lumen>,lumen auth microservice,work microservice base application microservice architecture api gateway reduce number request client single entry point inside app authorization check handle login registration auth check passport oauth api gateway allow route access authenticate user good approach capture http request authentication handle authentication microservice idea ping service request inside middleware check response code api gateway continue access microservice api gateway return ui graphic representation idea question good approach architecture pass request api gateway luman authentication microservice luman check le pass request pass header check solution edit manage solve issue middleware technique append authenticate user request user datum controller call authentication microservice route authentication protect user datum handy,4,978,1,3.0,0,2017-10-30T13:01:10,0.0
54027787,7758110.0,<spring><spring-boot><microservices><spring-cloud-netflix><reactive>,service discovery spring webflux webclient,ribbon eureka service discovery spring webflux webclient code error integration test reactor core exception errorcallbacknotimplemente java lang illegalargumentexception uri absolute auth service auth service validate manager client access,4,395,0,1.0,0,2019-01-03T18:23:41,0.0
47938144,3572717.0,<microservices><devops><system-design>,serve static file microservice environment,preferred serve static file application deploy microservice architecture production simplicity application server load balancer forwards request server load balancer store file serve imminently request load balancer forward static file request application instance request instance good practice,4,505,1,0.0,0,2017-12-22T08:26:51,0.0
51353251,1044067.0,<c#><.net><microservices><dbup>,dbup concurrent environment,multiple binary process reference backend database load balancing documentation find good practice update database concurrent environment experience issue production environment,4,73,0,0.0,0,2018-07-16T00:25:07,0.0
39784719,6825250.0,<java><rest><spring-boot><microservices>,maven archetype create micro service application,maven archetype create multi module maven project structure micro service application rest api skeleton base spring boot docker,4,801,1,0.0,0,2016-09-30T06:04:39,0.0
48428120,6475860.0,<microservices><grpc><event-sourcing>,real microservice grpc event sourcing,learn microservice confuse approach well service orchestration event sourcing service choreography framework allow build application event source build framework difficult talk web company microservice grpc rpc orchestration direct call service oppose event source sagas event good implement microservice grpc service orchestration implement event source system service choreography asynchronous event,4,1401,8,1.0,0,2018-01-24T17:13:05,0.0
35251874,1757145.0,<java><soa><distributed><microservices><event-driven-design>,testing event drive architecture,guidance test event drive architecture create automatic test check event spawn service consume service pacto rest communication event,4,532,0,1.0,0,2016-02-07T09:37:25,0.0
55219903,10988894.0,<java><spring-boot><kubernetes><microservices>,share datum replica microservice dynamically restart application,microservice kubernetes scale pod create object set dynamically rest api object update single pod rest api share pod single url time restart application hazelcast requirement require admin privilege provide error,4,132,8,1.0,0,2019-03-18T11:03:59,0.0
44983214,3289087.0,<angular><webpack><angular-cli><microservices>,micro application angular,architecture solution help develop project dependency development mode production isolate project spa monolith application release time currently team build angular module publish npm typescript shell orchestration project consume application compile javascript deploy thing time project deploy downtime application change package json consume project download monolith file btw angular cli build project suggestion,4,246,8,3.0,0,2017-07-08T06:24:51,0.0
42983171,613483.0,<c#><visual-studio><asp.net-web-api><https><microservices>,test local service production client,company variety microservice web client saas software service product modify behavior specific service write webapi spot check integration behavior client call service developer work service locally prefer clone build specific web client local setting point local server order interact local server change ideally navigate deploy version client develop rc prod redirect request client send deploy version service local server attempt tool result response error verify correct behavior server tdd unit test occasion nice deploy client test local server well feel break integration test automate build standard sort microservice testing involve local buildin configuring web client,5,77,0,0.0,0,2017-03-23T17:36:56,0.0
41556693,7249023.0,<docker><microservices>,ribbon hystrix eureka docker haproxy microservice,find reason ribbon hysterix eureka load balancing fault tolernace service discovery simply deploy micro service docker compose help advantage fact docker compose dockercloud haproxy service discovery zuul proxy server register url service point docker container happroxy,5,611,0,0.0,0,2017-01-09T20:50:50,0.0
55766545,335794.0,<.net-core><microservices><windows-firewall>,add firewall exception net core application,net core microservice currently dotnet xyz dll currently work fine order talk course firewall exception script netsh add exception dll appear work intend dotnet compiler dll complicated technical sense sound add exception dotnet exe sound bad idea solution compile exe add exception update add background case series microservice deploy nomad copy file store machine script program work firewall course deploy exe compile variant placement target nomad order pick correct netsh work window conditional environment cross post dotnet core well place,5,125,1,2.0,0,2019-04-19T18:57:53,0.0
45150009,8320923.0,<node.js><microservices><netflix-eureka><hystrix><netflix>,netflix tool nodejs micro service,service discovery eureka circuit breaker pattern hystrix client side load balancing ribbon api gateway zuul implementation nodejs nice integration component spring framework java nodejs netflix provide alternative jvm language prana actively support alternative suite production ready component nodejs ideally benefit micro service service develop language good option implement,5,1081,1,0.0,0,2017-07-17T17:11:41,0.0
45060577,8296156.0,<authentication><oauth><authorization><microservices><openid-connect>,authentication authorization oauth openid connect microservice,implement oauth openid connect microservice architecture base java spring cloud current problem token propagation microservice message broker rabbitmq topic talk find thread propose answer case microservice receive request initiate user api gateway carry valid access token jwt scope claim correspond final user username email permission problem case microservice process request st problem happen microservice call microservice st solution microservice send access token microservice happen token expire arrive microservice solution client credential grant propose oauth aka service account microservice request access token credential call microservice solution datum relate user username permission lose example call method microservice user work user set query stre method call user access token microservice validate user query string equal user jwt token method call service access token microservice validate query string trust microservice cas hear draft oauth idea interesting allow microservice convert user access token access token permission forge microservice mecanism draft implement lot product problem happen microservice pushs message rabbitmq microservice receive message st solution authentication authorization manage rabbitmq vhost account user relate datum lose repository manage authentication authorization solution problem client credential grant well solution advance,5,758,3,3.0,0,2017-07-12T14:30:42,0.0
50326457,5606344.0,<python><elasticsearch><flask><architecture><microservices>,python microservice elastic logic,implement python flask microservice serve elasticsearch query dive pro con approach send passive curl request response active session elasticsearch py hear advice approach experience reliable safe simple maintain flask service elastic server interesting mapping active session server,5,145,0,1.0,0,2018-05-14T08:55:32,0.0
39466964,3399047.0,<ruby-on-rails><video-streaming><cloud><distributed><microservices>,base microservice concept,plan build base microservice picture current idea feature upload large text video file stream video display user web app native mobile application tech stack finally set initially web app reactjs angular backend app ruby rail follow doubt current concept api gateway work router redirect request user specific microservice dedicated app ruby rails app api authorization separate microservice user upload file request third microservice big datum upload authorize access microservice earlier api gateway authentication authentication microservice upload large file user transfer large file video compress text file raw datum mobile app backend http request api gateway redirect big datum upload microservice app save file object storage path upload file shortcut file route short video stream user upload video file place asset object storage amazon video user web app mobile app transcoder service cdn load balancing reasonable load balance control flow instance microservice picture api gateway green microservice good approach lose request recipient user api gateway bottleneck concept architecture good potential easy scalability opinion course omit hardware software configuration,5,385,3,2.0,0,2016-09-13T09:47:19,0.0
49318889,9497325.0,<c++><c++11><asynchronous><microservices><grpc>,asynchronous model grpc,team design scalable solution micro service architecture planning grpc transport communication layer decide async grpc model design example provide viable scale number rpc method create class rpc method create object short example code hard code flexibility lose rpc method implement class cumbersome inefficient handle rpc request solution bad design bear overhead creation object single request kindly provide workaround async grpc simple sync companion edit favour situation clear struggle grasp flow async example write understand correct wrong async grpc time bind unique tag completion queue poll server rpc hit client infer returned unique tag type call address current object unique tag register rpc call completion queue poll client hit rpc fill tag polling code snippet unique tag register queue address calldata object call fine rpc logic inside rpc time inside calldata polling call logic rpc postgres call rpc mongodb call write program inside function avoid class derived class class rpc logic inside work solution avoid write class solution keep rpc function logic function maintain global register rpc unique tag queue store corresponding logic function surely hard code statement bind parameter require unique tag key polling lookup map key call corresponding saved function hurdle inside function logic code spread module rpc base hope clear situation implement type server easy,7,2553,4,3.0,0,2018-03-16T10:47:30,0.0
51390284,5709472.0,<c#><multithreading><rest><windows-services><microservices>,equivalent ihostedservice asp net framework background task,restful micro service web api net call fire forget function time endpoint call database cleanup work don task reliable dedicated process job find lot article discussion ihostedservice net core long running background task find equivalent net framework iregisteredobject help direct resource note host api windows service iis time question apology question claer,7,687,3,5.0,0,2018-07-17T21:14:29,0.0
45616764,2976358.0,<authentication><jwt><microservices>,authentication microservice approach,currently build api base microservice architecture jwt authenticate user understand user send login request jwt user identity role permission return token send user subsequent request server send request correct understanding normal monolithic architecture work well explain transfer microservice architecture establish trust microservice simple forward user jwt downstream microservice allow downstream microservice upstream microservice send request example location microservice allow restaurant microservice call location microservice product microservice call location microservice code product microservice call location microservice suggestion,8,4759,4,4.0,0,2017-08-10T14:38:52,0.0
49475984,2294243.0,<python><node.js><microservices><grpc><go-micro>,connect grpc nodejs python client,grpc server micro work fine test web app iri local grpc setup keep error error node code face problem python code error python code,9,2128,2,3.0,0,2018-03-25T12:43:55,0.0
49624372,3087605.0,<docker><docker-compose><kibana><microservices><netflix-eureka>,register external service msa eureka discovery registry,kibna inside docker kibana docker compose docker compose yml enroll kibana application eureka discovery registry call api gateway sample enroll api gateway eureka api gateway spring boot application straightforward kibana docker image achieve help appreciable advance,13,388,4,2.0,0,2018-04-03T07:18:40,0.0
58883823,5331921.0,<java><spring-boot><microservices>,schedule rest service spring boot,rest service dependent service call st service service call service service time frontend app call service service automatically hour continuously sample code documentation helpful,-5,39,7,0.0,0,2019-11-15T19:54:27,0.0
58638415,12291147.0,<microservices><amqp>,share work example microservice amqp,greeting stackoverflow info microservice architecture example abstract microservice single operation real implementation single microservice provide functionality procedure work entity communicate database load datum external resource classic http rest api application pretty straightforward bring functionality inter microservice communication network uncertain share real work example single microservice utilize amqp base message broker,-3,17,1,0.0,0,2019-10-31T07:12:48,0.0
59118382,3125947.0,<linux><docker><.net-core><microservices>,dotnet command hang linux container,face issue container specific machine build image microsoft dotnet sdk execute dll container image locally work linux vm work third environment image work work docker compose container create example docker log command return empty output enter container type dotnet mydll dll command stay hang local machine enviroment image work perfectly strange thing image work environment microservice work expect suggestion idea dockerfile docker version output advance update perform docker system prune delete image volume network perform clean container issue container,-2,37,6,0.0,0,2019-11-30T17:04:48,0.0
58954937,5973611.0,<microservices>,microservice size base team size dependency rest api,online article learn standard micro service maintainable pizza size team confused service unavailable upgrade server problem api mental hard time decision micro service base team size dependency rest api suppose example api module manage single team best design principle base micro service architecture inside single service service state helpful share thought practice rule follow determine size micro service dependency api standard team size factor,-1,23,3,0.0,0,2019-11-20T12:59:30,0.0
58741868,6118822.0,<microservices>,application development framework fit micro service architecture,application micro service architecture application development framework incorporate view web fetch datum multiple micro service micro service java base base web application fetch datum micro service application development framework provide solution build app framework java base framework micro service base architecture,-1,14,2,0.0,0,2019-11-07T04:09:51,0.0
58663489,324446.0,<amazon-web-services><go><cloud><microservices>,find ip addr aws ip parse aws ip range golang,aws post ip range ip find ip addr aws ip find aws region ip belong json file ip follow cidr format help implement golang,-1,16,0,0.0,0,2019-11-01T17:36:29,0.0
29148547,4194831.0,<spring-security><spring-security-oauth2><microservices>,spring security oauth authorizationserver,play spring security oauth build microservice authentication backend set simple spring boot project follow dependency configuration class implementation client userdetailsservice simple return object receive accesstoken receive error full authentication require access resource receive error bad credential point view work configuration thing oauth unclear build spring mvc application spring security custom login form handle token request refresh cycle spring security redirect authentication app case event drive application ensure token valid case failure user click button event write processing hour process event user credential,0,906,0,0.0,1,2015-03-19T15:22:41,0.0
30273152,3056507.0,<web-services><architecture><microservices>,logical layer connect multiple net service,sure appropriate place conceptual modular design architecture separate logic individual service allow plug play type scenario dependency service list feature enable facilitate realise type middleware connect control flow datum sure specific appropriate achieve plan implement service net soap base service case tibco suggestion appropriate start great description sense hopefully image bit clear describe relationship service,0,62,0,0.0,1,2015-05-16T07:49:15,0.0
26247474,202859.0,<apache-camel><mule><spring-boot><microservices><spring-cloud>,apache camel irrelevant spring cloud,involve design service spring cloud apache camel aback today colleague advocate well term apache camel perspective downstream system talk rest base integration framework recollection correct imply microservice integration framework incompatible start passionately spring cloud help solve deployment op issue integration framework solve integration issue orthogonal requirement protocol system communicate unknown protocol integrate customer environment integrate system communication protocol unknown follow statement martin fowler james lewis esb microservice incompatible resist mention jim webber statement esb stand egregious spaghetti box statement apply integration framework apache camel generally colleague point integration pattern place microservice,0,1343,0,0.0,1,2014-10-08T00:38:08,0.0
28828573,717065.0,<angularjs><rest><proxy><delegation><microservices>,create delegate angular multi host site,work environment develop solution lot server microservice style role model upgrade system switchable replaceable include user interface runtime principal solution decide portal proxy visible system user proxy aware af support server proxy basic user interface instance menue collaboration subsystem entry menu user request dynamic content portal relays proxy query content subsystem rest call client proxie main server rest call course simple angular understand mix point number course tough subserver visible iframe eeek case sort delegation microservice flagship handle user interface,0,68,0,0.0,1,2015-03-03T09:47:08,0.0
28997963,1821792.0,<immutability><microservices>,send email immutable microservice container docker,naturally microservice immutability hype real life question send email containerized application immutable suppose support multiple provider range plain smtp transactional mail provier sendgrid mailjet mandrill mailgun software system build architecture principle problem solve plugin mechanism allow override default smtp provider wordpress example consider bad design break immutability application,0,395,0,0.0,1,2015-03-11T21:42:42,0.0
31295897,1287386.0,<microservices><frisby.js>,frisbyjs rest api testing,develop complicated project microservice architecture provide rest api sure system work stably development staging production deployment testing framework frisby help prevent issue suggestion case advance,0,383,0,2.0,1,2015-07-08T14:37:41,0.0
30910817,1138353.0,<rabbitmq><zeromq><masstransit><microservices>,keep microservice datum consistent,current project base microservice architecture good start approach keep consistent state term datum basically split accord main entity solution entity work independently well dependency involve update set microservice entity microservice modify tackle challenge route consider rabbitmq good solution problem microservice send message change exchange fan consume microservice queue good solution bit worried data consistency error consumer implement strategy revert change consume microservice consider brokerless technology zeromq trick broker bottleneck masstransit route slip pattern implementation solution compensate error easy fond sequential set activity consume change approach rabbitmq consumer work parallel kinda impasse wonder developer choose solution problem discard technology solve issue,0,455,1,1.0,1,2015-06-18T08:57:44,0.0
32750861,2062836.0,<grails><microservices>,search grail web micro rest call work,web micro profile grail write microservice search field previous version grail add field query string return zipcode object zip work grail web micro,0,91,3,0.0,1,2015-09-23T23:03:17,0.0
31912285,2194137.0,<java><gradle><artifactory><microservices>,set artifactory microservice,currently build multiple micro service java gradle example micro service dependent dependent release today build clone checkout master branch cd call gradle build build fetch war jenkins artifactory setup concern build commit push jar artifactory change pick late artifactory build push war artifactory change relate build rebuild push artifactory dependent doesn rebuild artifactory build war push artifactory build version build standard practice artifactory micro service manage micro service multiple branch manage release version dev version approach,0,124,0,0.0,1,2015-08-10T05:39:57,0.0
32071088,2032333.0,<design-patterns><microservices>,container docker,read microservice keep hear read microservice article mention container resource read container help understand relate microservice problem solve book recommend microservice,0,151,0,0.0,1,2015-08-18T11:25:11,0.0
32106454,511837.0,<overriding><microservices>,intercept override microservice,imagine build app http microservice change behavior work work default change behavior oo simply extend class microservice example imaginge api return datastore add parameter userid request set user datum relate user word override example microservice tool help build api nowday java scala override service change behavior note override code code override microservice api,0,39,0,0.0,1,2015-08-19T22:09:07,0.0
32167881,702246.0,<python><ruby><nginx><reverse-proxy><microservices>,setup nginx proxy service machine,write micros service python ruby python serve api request ruby serve api request python listen port handle user feed request ruby listen port handle order product request follow config file work nginx error request direct python service response setup nginx configuration file route request ruby service,0,454,0,0.0,1,2015-08-23T14:44:38,0.0
29610354,2968101.0,<java><node.js><rest><microservices>,discovery pattern rest api endpoint,study microservice architecture pattern api gateway pattern discovery pattern rest api endpoint explain work example api gateway nodejs base rest api java write implement pattern find code schema help understand bit advance,0,780,3,0.0,1,2015-04-13T16:27:09,0.0
33706599,2156341.0,<node.js><soa><microservices><etcd>,store configuration retrieve etcd nodejs,config http call store config serialize filesystem attach global implement service discovery nodejs service registry store application wide,0,264,3,0.0,1,2015-11-14T08:34:03,0.0
33669733,2180005.0,<java><architecture><message-queue><microservices>,microservice message consumption mixed sync async interaction,develop document management system dms microservice architecture service interact direct synchronous call netflix ribbon hystrix message system apache kafka middle asynchronous document process process document service provide public api pretty fat decide worth consume document create microservice delegate document processing diagram variant hand create microservice hard control instance microservice fat microservice multiple instance,0,254,0,1.0,1,2015-11-12T10:49:47,0.0
35589008,1340582.0,<service><spring-boot><monitoring><microservices><spring-boot-actuator>,advice monitor micro service,transition build application monolith application server microservice orient application spring boot publish health sb actuator http jmx option good practice monitor service total input,0,998,2,0.0,1,2016-02-23T21:54:58,0.0
32398245,4644434.0,<javascript><node.js><socket.io><rabbitmq><microservices>,node js rabbitmq socket io,project microservice microservice save datum publish message rabbitmq state datum couchdb microservice process problem lie third service frontend update real time socket io client update node js instance update well follow problem cleanly node split file ofcourse module create handler rabbitmq socket io process datum send message queue client datum process info,0,1033,3,1.0,1,2015-09-04T12:35:57,0.0
32364506,4240774.0,<multithreading><process><docker><microservices>,monolithic micro service thread process,monolithic application single process thread thread accomplish specific task move application microservice docker architecture worker thread docker process monolithic microservice thread process discussion case original thinking monolithic thread performance share memory microservice arch push process model suit performance point view kind stuck approach problem,0,2532,4,0.0,1,2015-09-02T22:58:59,0.0
33180090,4888332.0,<spring><spring-security><microservices>,spring security post request,follow guide set spring security microservice send basic post request request post request error expect csrf token find session expire set basic authentication microservice,0,1896,0,0.0,1,2015-10-16T21:50:29,0.0
33194778,1268688.0,<search><solr><microservices>,keyword search microservice base architecture,advice search implement search keyword relational database microservice microservice relational db microservice deploy docker container good search engine apache solr microservice database achieve keyword search advance,0,1233,0,2.0,1,2015-10-18T05:51:39,0.0
35862481,1353182.0,<authentication><grails><spring-security><microservices>,grails micro service externalize authentication,multi project compose follow app app rest client app install spring securyty core plugin app question externalize authorization process app create user role domain class app app app user handling,0,152,0,0.0,1,2016-03-08T08:31:52,0.0
35926145,3490004.0,<microservices>,micro service conceptual clarification good practice,tenet micro service develop deploy independently micro service table decoupled independent talk business expose micro service entirely true normalized database table user user address user address residential comercial table telephone reason micro service os client table case classify micro service understanding micro service incorrect incomplete classify micro service correctly develop micro service assumption micro service table decouple case micro service resume crud exposition,0,82,2,0.0,1,2016-03-10T20:03:42,0.0
35914674,2483271.0,<meteor><package><cluster-computing><microservices>,cascade microservice meteor,scale meteor idea create super service user connect general core package micro service api app salessite package super service route appropriate micro service app provide functionality package super awesome idea cascade service superset super service allow cleverly inherit functionality service cascade service style unauthedapp guestapp userapp modapp adminapp application functionality previous service inherit precede service chain extra functionality add inherit edit provide example implement pattern micro service big edit solution fit problem explain question answer base issue solution implement basically inherit lack well word package depend functionality code unnecessarily send wire start core package library service add functionality add package serve base service api service render appropriate role base package specific package add thought service chain traverse generic specific service finally composition package multiple service guestapp core package generic package generic app package unauthapp package guestapp package unneccessary package add imaginary pattern describe add core package microservice deal core package top package traversal discuss worry forget add package inherit package hope reasoning sense hope guy good practice,0,191,11,1.0,1,2016-03-10T11:06:08,0.0
28664781,4541683.0,<nginx><architecture><health-monitoring><microservices>,monitor cluster micro service web queue db ha proxy,design architecture micro service cluster instance web server cluster db cluster queue system cluster worker send email send sms consume queue task push web server wonder good practice order detect cluster micro service healthy fail fast service case micro service unavailable service sit nginx ha proxy nginx monitor fail check health micro service,0,304,0,0.0,1,2015-02-22T23:38:28,0.0
28635179,1113726.0,<python><flask><docker><soa><microservices>,microservice flask,build pretty large system expose rest api mongodb database redis cache layer backend computational library currently flask restful build api reason instance flask provide database resource layer top front face site blueprint solution decouple service machine ec plan apache wsgi production server flask server require unique port nightmare manage microservice hear concept gateway api find documentation implement practice microservice soa huge deal day sense architecture design trouble find info practice specific setup management server potential nightmare feel docker solve headache curious people container tldr lot flask server microservice architecture idea manage,0,4027,0,0.0,1,2015-02-20T17:50:37,0.0
28565187,3467037.0,<meteor><microservices>,add custom service meteor loginwith externalservice,application architecture separate login service rest api handle user login account functionality create user authentication valid login set appropriate session variable bad approach create custom service,0,469,0,0.0,1,2015-02-17T15:38:47,0.0
36400599,421753.0,<spring-boot><microservices>,spring boot issue start jetty container,start spring boot application throw follow exception sure fat jar include servlet container relate os relate exception application,0,754,5,0.0,1,2016-04-04T10:50:21,0.0
37219072,6332162.0,<c#><architecture><domain-driven-design><microservices>,microservice erp,develop erp system logistic wms sale ddd apply microservice enter big question organize microservice erp responsabilide core function practical example,0,600,1,0.0,1,2016-05-13T20:45:22,0.0
37084619,216534.0,<architecture><microservices>,task ownership microservice architecture,system task store central place service pick task handle execute multiple instance service handle demand question sure task execute instance service common pattern microservice architecture,0,125,2,0.0,1,2016-05-07T04:50:56,0.0
34163944,4237127.0,<microservices><netflix-eureka><netflix-zuul>,zuul autodiscovery issue,process stand microservice architecture zuul front bunch tomcat enable microservice backend service start register eureka client call service zuul wire work fine couple question architecture dynamic thing assume box ribbon eureka find solution add service backend archiaus update zuul eureka client property file zuul ribbon client update service detail vipaddress load balance algorithm thing work update property file restart zuul ughhh example today microservice backend zuul eureka ribbon client configuration include ribbon client niws clientlist service service zuul ribbon namespace zuul client service zuul client deploymentcontextbasedvipaddresse myservice service zuul client niwsserverlistclassname netflix niws loadbalancer discoveryenabledniwsserverlist service zuul client deploymentcontextbasedvipaddresse myservice service zuul client niwsserverlistclassname netflix niws loadbalancer discoveryenabledniwsserverlist tomorrow assume add service observe add detail configuration zuul restart configuration parameter allow dynamically introduce service detail roll eureka ribbon client ribbon client niws clientlist service service service zuul ribbon namespace zuul client service zuul client deploymentcontextbasedvipaddresse myservice service zuul client niwsserverlistclassname netflix niws loadbalancer discoveryenabledniwsserverlist service zuul client deploymentcontextbasedvipaddresse myservice service zuul client niwsserverlistclassname netflix niws loadbalancer discoveryenabledniwsserverlist service zuul client deploymentcontextbasedvipaddresse myservice service zuul client niwsserverlistclassname netflix niws loadbalancer discoveryenabledniwsserverlist question relate add client configuration eureka client property service zuul route point service maintain relate client configuration zuul bit clumsy globally configure zuul load service client list eureka base service metadata eureka dynamically update list service register eureka,0,518,0,1.0,1,2015-12-08T19:04:35,0.0
34109946,1847482.0,<model-view-controller><mobile><nginx><architecture><microservices>,delivery tier example forrester tier model mobile web app,forrester report tier architecture mobile app client delivery aggregation service article describe model understand typical implementation client aggregation service tier struggle understand delivery tier typically implement understanding model client client device js browser delivery unclear combination load balancer apache http server nginx correct aggregation app reside tomcat netty communicate service microservice behalf client typically rest service internal external app description correct simple example delivery tier typically implement preferably java stack include cdns answer interested example,0,500,0,0.0,1,2015-12-05T19:37:27,0.0
30991404,442008.0,<scala><sbt><akka><spray><microservices>,spray microservice assembly deduplicate,template develop microservice sbt file project compile fine assembly terminal option,0,171,0,0.0,1,2015-06-22T23:13:55,0.0
34230517,2587904.0,<playframework><sbt><akka><microservices><multi-project>,play akka microservice multi project,learn microservice demonstration purpose combine frontend backend services sbtmulti project compilation well suited face problem main class find navigate correct module dependency resolve define correctly follow,0,238,0,0.0,1,2015-12-11T18:48:31,0.0
37989016,3536548.0,<ruby><avro><microservices>,example avro ruby intercommunication microservice,intra microservice communication stumble find interesting problem find example avro communication link resource aim ruby completely misunderstood purpose micro service,0,132,0,0.0,1,2016-06-23T10:28:28,0.0
54739695,11076754.0,<spring-boot><spring-mvc><controller><microservices>,create controller method save object object,create controller microservice vehicle object create vehicle object save registration object vehicle controller unsure registration object save vehicle object json object json input json output,0,26,0,0.0,1,2019-02-18T02:27:34,0.0
54862649,487291.0,<events><microservices><distributed-system>,share datum distribute system environment,question regard share datum distribute system environemnt scenario push message system remote queue amazon sns sqs expect system pick message system alternative sure good basically system push message local queue local queue push message system prerequisite system queue specific system system push message duplicate local queue good alternative consider scenario backup plan scenario remote queue unavailable lose message case system remote queue,0,26,0,0.0,1,2019-02-25T09:03:47,0.0
54839811,9243790.0,<node.js><http><asynchronous><microservices><mqtt>,manage parallel http request base message queuing listnener nodejs,sure kind problem resolve time find question formulate micro service handle communication infrastructure mqtt broker time http request receive send alive room xxx message mqtt broker client register xxx alive topic answer wait millisecond close request send response receive client work well handle request screw request time express route handle http request getesppassport work mqtt listener problem boolean request ongoing create object request identify unique timetamp mqtt listnener unique solution mind sure work feel handle nicely good day,0,29,0,0.0,1,2019-02-23T08:46:21,0.0
54738039,3900318.0,<amazon-web-services><spring-boot><microservices>,measure scale web app aws,discover good measure webapp scale amazon aws app consist microservices backend spring boot angular frontend test limit ec instance max number simultaneous request frontend single instance connection backend ec instance good case direction measure helpful app hit hard visitor day,0,33,0,0.0,1,2019-02-17T21:52:12,0.0
54843989,1642219.0,<javascript><node.js><microservices><seneca>,mongoose model inside service senecajs,seneca service port create separate mongoose connection service port create mongoose model service port connection service js plugin code service js plugin code client service work work pass model create,0,33,0,0.0,1,2019-02-23T17:10:34,0.0
54772387,5246133.0,<java><spring><web-services><microservices><api-gateway>,communication ecommerce webservice payment gateway,query relate microservice suppose ecommerce aplication select product purchase select payment service initiate payment direct third party payment application payment redirect ecommerce website reason website type transaction handle service,0,42,0,0.0,1,2019-02-19T18:04:06,0.0
54860973,8703727.0,<api><asp.net-web-api><microservices><soa><api-gateway>,implement api gateway asp net web api net core,develop service asp net web api net core develop gate client connect point gateway decide api call process incoming request return response client web api gateway reroute request return response client api gateway appropriate web api develop simple good practise asp net web api idea,0,1074,0,0.0,1,2019-02-25T06:58:34,0.0
54792112,1797006.0,<docker><ssl><ssl-certificate><microservices><lets-encrypt>,provide ssl certificate docker image private registry create start,advice good practice regard provision ssl certificate letsencrypt org docker image creation certificate start container lot howto question site regard creation certificate wrap head idea store certificate docker image upload registry protect credential create certificate start image design microservice,0,52,0,0.0,1,2019-02-20T17:25:55,0.0
54846504,1056020.0,<node.js><microservices>,nodejs memory footprint oom,small nodejs application start oom error action memory dump mb size prior error print console process memory usage ubuntu host high interpret output correctly node process mb resident memory basically memory leak accord google default memory node process ubuntu gbs puzzle process fail node process memory base find people increase memory node max space size flag solution puzzled node memory hungry app write java springboot perform excellent mb memory nodejs vm instance gbs memory node microservice expensive java term cloud cost hope gap nodejs knowledge simple node app fit vm mb gb micro vm appreciate thought link suggestion lot,0,158,0,0.0,1,2019-02-23T21:42:06,0.0
54850548,547885.0,<spring><spring-boot><docker><jenkins><microservices>,create pipeline jenkin spring boot microservice,spring boot project microservice eureka service registry config server zuul gateway userservice repository parent project docker compose yml read dockerfile microservice project application docker yml bootstrap docker yml trigger jenkins pipeline commit git compile deploy microservice docker eventually production configuration deploy image kubernetes aws order work microservice start order configserver eureka service registry gateway good practise separate repository microservice figure easy deploy single microservice assume configserver eureka service registry reality change single repository keep develop microservice separate jenkin file microservice jenkinsfile parent project docker compose work article online help find sense jenkins,0,681,0,0.0,1,2019-02-24T09:35:49,0.0
54824668,8007430.0,<node.js><angular><microservices><amazon-cognito><aws-amplify>,node js microseervice aws cognito amplify good practice,work node js api divide small api microservice communicate request response angular front secure api cognito aws amplify confuse place aws amplify code project front separate node js api handle security well approach node angular java developer help appreciate,0,189,0,0.0,1,2019-02-22T10:08:02,0.0
54761267,2427605.0,<structure><microservices><project>,project structure microservice,project work project architect layer separate maven project entity bean maven project dao interface separate project dao impl project service interface project service impl project controller project controller add entity dao service project dependency structure drawback benefit structure micro service project structure microservice project feel clumsy,0,48,1,0.0,1,2019-02-19T07:59:26,0.0
54826145,7160316.0,<microservices><envoyproxy>,route envoy second service,deploy service envoy front proxy configuration service main site work second service office administration work admin problem start declare prefix service envoy doesn route traffic admin service front envoy yaml advice,0,248,1,0.0,1,2019-02-22T11:31:21,0.0
54706015,7277680.0,<html><angular><typescript><microservices><web-component>,embed angular application angular application server microservice,problem follow microservice architecture server serverhost serverclient serverhost host webpage route webpage serverclient iframe control webpage angular read angular element webcomponent figure implement server point article examle grateful edit clarification goal microservice webpage configuration webpage reach shell serverhost sever basically host webpage emebed user land main list link click link main navigation menu shell vanish user open webpage communicate route btw server write,0,41,3,1.0,1,2019-02-15T09:17:11,0.0
54810635,217648.0,<asp.net-core><microservices><akka.net><messagebroker><event-based-programming>,microservice development akka net,implement microservice architecture create application current environment asp net core generation microservice request reply communication pattern message broker message broker year effort term av development adapt microservice message broker publish subscribe communication pattern year good approach akka net message broker implment akka net microservice pub communication pattern appriciate kind advice,0,485,3,0.0,1,2019-02-21T15:26:30,0.0
54822795,1401631.0,<angular><api><docker><microservices>,docker microservice angular application production,angular app java backend app docker container virtual machine production angular app expose backend app expose angular app datum api backend port expose unable access api app host expose angular access api access advance,0,121,5,0.0,1,2019-02-22T08:20:02,0.0
44690557,1455043.0,<api><cross-domain><microservices>,pro con browser query front server query separate backend directly query backend,front write react backend api connect db datum write separately service front server bunch route connect backend api wonder pro con route directly access backend api example structure front server serve html browser js browser js post request front server front server request post request backend api alternative front server serve html browser js browser js post request backend api pro con prior developer bypass cor obscure ip address backend api worth trouble consider extra code test front server write maintain addition extra network hop wonder crucial reason inexperience gut second note microservice architecture,0,98,0,1.0,1,2017-06-22T05:05:56,0.0
44774754,811071.0,<google-app-engine><microservices>,app engine threadmanager usable,gae standard environment call error service module backend instance document deprecate method allow mark instance backend,0,131,0,0.0,1,2017-06-27T07:41:57,0.0
44839692,3310115.0,<microservices>,individual microservice orchestration interact,product migrate microservice architecture micro app ui orchestration layer microservice individual microservice micro app interact architecture individual microservice interact directly despite presence orchestration layer contrary read understand understanding individual microservice interact directly orchestrator understanding correct,0,141,0,0.0,1,2017-06-30T06:09:42,0.0
44873885,477955.0,<amazon-web-services><aws-lambda><microservices><aws-api-gateway>,aws api gateway interprocess communication,learn microservice architecture proof concept hit wall user service serverless host amazon aws lambda public api gateway allow query user database pretty simple api authorization associate user allow user user return result write authentication service email address password return token approach user datum user service love call rest api authorization public public api return hashed password field question separate private api inter service communication return magic authorization key send api identify requester internal service supplementary question public api magic auth code call fetch public api url client side service call internal amazon url,0,417,0,0.0,1,2017-07-02T18:19:41,0.0
44697767,4453462.0,<azure><communication><microservices><azure-service-fabric><stateless>,implicit reference conversion statelessservice microsoft servicefabric service remote iservice,write azure service application communicate service remoting reference face error code stick,0,246,0,0.0,1,2017-06-22T11:14:30,0.0
44785897,4524867.0,<java><rest><spring-security><architecture><microservices>,secure user account microservice spring,create microservice structured application spring boot microservice web handle incoming web request client user account manage client account login product manage client product web microservice client register login send rest request user account microservice manage account detail login log client add product associate account rest request product microservice plan security add spring security web microservice client log add jwt token header client log authentication access product microservice lock spring security assume sound reasonable thing unsure lock user account microservice rest request web microservice attempt login user register user web microservice send authentication token system user detail user account microservice lock rest access user account microservice spring security apology basic architecture question whilst complicated oauth,0,254,0,0.0,1,2017-06-27T16:56:42,0.0
44786479,4930231.0,<c#><caching><microservices><grpc>,grpc architecture cache layer,monolithic system currently break microservice grpc currently enyim cache client monolithic code create grpc service confused cache layer move grpc service code service service caching code lead lot duplicate caching code create dll cache relate code grpc microservice place duplcate configuration grpc service handle cache monolithic code call grpc service case cache suggestion,0,668,3,0.0,1,2017-06-27T17:32:08,0.0
44758955,5545789.0,<java-ee><yaml><microservices><jgroups><wildfly-swarm>,wildfly swarm jgroups yaml,download wildfly swarm example move configuration main class yaml file work ribbon example configuration example project convert yaml file project source yaml file exception startup jgroup sepcific exception sure wrong guy hint,0,421,3,0.0,1,2017-06-26T11:42:23,0.0
30613574,2205763.0,<microservices>,datum share microservice,implement event drive microservice architecture imagine follow scenario chat service ability conversation send message conversation multiple participant registration login service deal registration user login user service update user profile registration login service emit follow event newly create user object chat service listen store field user redis cache listen store token delete token user service follow event fire listener chat service update datum correspond user redi chat service user service listen thing chat service question follow good feel bit counterintuitive share datum advice,0,477,1,0.0,1,2015-06-03T07:31:09,0.0
31605799,333643.0,<scala><authentication><oauth-2.0><openid-connect><microservices>,auth service insulate webapps database,company develop currently internal webapps authenticate main database store authorization info table work create webapp scala completely insulate main database true microservice hopefully thing gradually move microservice direction gui allow predefine user log authority authentication authorization exist main database webapp direct access database user info main database accessible service external auth service place exist app eventually question auth service oauth openid connect service simple shelf moment sso requirement nice future,0,86,0,1.0,1,2015-07-24T08:35:17,0.0
31608784,2486743.0,<wildfly><resteasy><java-ee-7><microservices><wildfly-swarm>,wildfly swarm jax rs multipart form notsupportedexception,fairly simple jax rs application wildfly resteasy multipart form application wildfly swarm understand resteasy multipart provider fraction suppose care multipart feature include swarm fat jar package include compile dependency break swarm application refuse start boot,0,429,0,0.0,1,2015-07-24T10:56:42,0.0
31493493,1222729.0,<ruby-on-rails><ruby><oauth-2.0><single-sign-on><microservices>,leverage oauth implement sso micro service app,establish sso microservice app commerce site user login main app user automatically allow access cart app connect micro service search oauth spec find relevant answer specific case thing differ wrt oauth user authorize resource cart app identify provider seamlessly backend identify provider facebook google main app identity provider question standard procedure define oauth handle kind authentication authorization popular alternative info app build ruby rail good gem find couple question relate broader google help mark question duplicate,0,255,0,0.0,1,2015-07-18T17:03:48,0.0
34730542,639172.0,<java><docker><spring-boot><microservices><netflix-eureka>,eureka docker container unknown host exception,start eureka server spring boot docker container follow exception unknownhostexception eureka config property file hostname localhost exception hostname container hostname define eureka property file container define host resolve fine container ip entry host note reproducible oracle java work fine openjdk clue problem inplace localhost eureka property success eureka config file content exception stack trace,0,3177,0,0.0,1,2016-01-11T20:32:33,0.0
34841907,3601411.0,<ruby-on-rails><http><microservices>,ruby rail microservice http explanation,currently pretty big monolithic rail app split app separate micro service api main app gateway read lot understand info communication main app micro services understand variety http provide example setup communication work code main app micro service,0,168,2,0.0,1,2016-01-17T18:20:27,0.0
42969532,4544963.0,<cloudfoundry><microservices><pivotal-cloud-foundry>,sure db server multiple deployment cloud foundry,newbie cf microservice deploy service multiple time understand time deploy space application database server schema cloud foundry db server time multiple deployment environment,0,26,0,0.0,1,2017-03-23T07:18:56,0.0
43018613,1863627.0,<spring-boot><cloudfoundry><microservices><netflix-eureka>,spre boot config cloud foundry service registry netflix eureka service,setup eureka server locally register service issue create eureka server pivotal cloud foundry service registry service application register app follow create service registry cloud foundry marketplace bind application service register application service log manage gym yml file main class service registry,0,562,0,0.0,1,2017-03-25T16:02:36,0.0
42846703,1397518.0,<spring-boot><spring-cloud><microservices><spring-cloud-netflix>,spring cloud multiple ui service,spring cloud create integration multiple web ui application common service integrate url menu application addition base previous description distribute application multiples server reference eureka secure zuul service,0,177,0,0.0,1,2017-03-16T23:38:12,0.0
33315965,1689858.0,<java><java-stream><microservices><project-reactor>,java streams batch combinatory call,question day combinatory operation build microservice fictionnal scenario build dashboard dashboard compose bunch people infos history review purchase product search read spring cloud spring reactor blocking solution call multiple microservice user service review service search engine service guess load user load review load history combine datum pseudo code approximative load user estimate http call user additional call big linear bad case microservice delegate datum load xyz microservice user call include review call xyz call calculate big quadratic avoid load user extract call earch microservcie batch microservice load datum list review map original called merge thesis list kind zip function summary read question summarize strategy unique user start chain user performance problem,0,69,0,0.0,1,2015-10-24T08:09:44,0.0
46657234,4409705.0,<multithreading><microservices>,micro services multiple response controller,iam micro service project call twp url endpoint controller time base response create third response send third response controller doubt simultaneously call url controller springboot application,0,31,0,0.0,1,2017-10-10T01:14:56,0.0
46600671,231582.0,<docker><routing><docker-compose><microservices><docker-swarm>,docker swarm mode internally service unique domain port,setup microservice deployment deployment file service http hopefully https communicate internally expose network add proxy service expose specific feature docker swarm mode possibility define deployment docker compose yml initiate api urls internally kubernete setup work great work docker swarm mode dns work problem docker swarm mode allow service listen port keep complain port conflict service unique domain identity provider group specific network driver working currently overlay domain random port call service simple remember port add complexity setup fine super cut edge version docker ce help,0,147,0,0.0,1,2017-10-06T07:39:12,0.0
46566667,2520207.0,<php><database><api><design-patterns><microservices>,datum microservice api join main app datum,client application move monotith system microservice architecture simplistic core application database product microservice database object relate product scenario product apple relate datum microservice easy apple core app database retrieve additional datum product microservice good scenario list product condition core app database condition microservice database example product database core app call microservice additional datum product send query api call datum api service portion example api call item option scenario warehouse microservice list product sort ascending flag true warehouse product core app db call api check flag final list product low list item warehouse bad idea item execution time api response size acceptable generally idea merge datum db datum db return user view app write php guy experience ee solution problem edit find closer,0,444,0,0.0,1,2017-10-04T13:51:58,0.0
46521195,5946299.0,<docker><docker-compose><microservices><dockerhub>,multi service node js web application backend free docker repository,fairly docker workflow goal write web application frontend graphql api authserver microservice follow easily deploy application root server commit master branch bitbucket automate build docker hub stay free account docker hub free repository achieve requirement project structure follow docker compose yml root folder automatic build docker hub dockerfile build image service image container currently machine question dockerize multi service web application docker image container free docker hub repository,0,522,1,0.0,1,2017-10-02T07:32:09,0.0
46532286,4884808.0,<rabbitmq><microservices><consul><apache-servicemix>,organize service dataflow eip,vm service technology python net java middleware rabbitmq redi dynamically handle interaction service provide scalability example service push datum rabbitmq data process service fetch additional datum service decentralized system pull datum push total mess scale microservice omg xd moment change thing lot system affect esb couple service message transform adapter middle change dependenciesat runtime stream service example microservice good idea stateless scale easily deploy container good tool program manage datum flow rabbitmq support enterprise integration pattern advice,0,47,1,0.0,1,2017-10-02T19:20:30,0.0
46562115,1711882.0,<azure><communication><microservices><azure-service-fabric>,service fabric flow pattern,maintain vast amount datum separate table database write multiple console application responsibility instance application seed database process datum filter datum service sequential hand depend result application previous automate process flow service fabric service commune pattern main service control output service send proper correct wildly service fabric,0,154,1,0.0,1,2017-10-04T10:03:18,0.0
46647028,6450189.0,<go><microservices><prometheus><exporter>,multiple endpoint prometheu,currently work program write monitor prometheus program serve endpoint scrape prometheu expose metric request request latency scrape query api metric expose prometheus create counter serve stuff query api extract update gauge expose gauge endpoint fire server port create collector custom metric,0,539,2,0.0,1,2017-10-09T12:55:00,0.0
46717204,8767338.0,<multithreading><microservices><partitioning><seq>,microservice sequential datum processing,suppose receive stream unordered sequential datum time example input entity identify field large amount entity processing input time problem process event order receive entity consider solution message kafka topic partition receive parallelism create local storage receive message mark process message entity successful processing machine thread pool question good solution reach functionality scale datum consumer number service create instance well solve kind problem,0,57,3,0.0,1,2017-10-12T19:10:19,0.0
46586380,4539470.0,<java><spring><security><spring-boot><microservices>,secure micro service spring cloud security oauth,spring cloud security oauth secure micro service pom follow http maven apache org xsd maven xsd spring boot main class authorization server configuration follow note authentication manager auto wire authorization config class authentication manager configure return abean autowire class application property spring boot application mvn spring boot application start ready accept request port localhost postman send post request access token background aoauth flow password grant authorizationserverconfig class define password grant flow register simple web app client secret client configuration memory post man request access token authorization server follow post request basic auth header header username webapp password websecret request return access token json follow access resourse endpoint access token follow return text return service resourse endpoint return login help note authorization server resourse server configure application poc spring cloud security separate,0,598,3,1.0,1,2017-10-05T13:05:29,0.0
41566244,2540300.0,<.net><iis><docker><containers><microservices>,container share framework,aware docker container share data volume share framework instance net service iis share framework,0,520,0,0.0,1,2017-01-10T10:09:26,0.0
41492081,387808.0,<containers><kubernetes><google-cloud-platform><microservices>,kubernetes container cluster convention,kubernete gcp build microservice amazing bit confused good approach create container cluster service create container cluster multiple service depend situation example manage find cover hunch kind hunch kind basic understanding container find answer luck guess figure search keyword hope find answer,0,50,0,1.0,1,2017-01-05T18:25:05,0.0
41556946,6357613.0,<wso2><jwt><wso2is><microservices><msf4j>,secure wso microservice jwt wso identity server,find answer call url wso identity server authenticate send username password send json web token jwt call authenticate retrieve jwt avoid pass jwt wso microservice authorization bearer header microservice automatically validate jwt user build security context expect call wso identity server call step step guide work involve redirect user log wso identity server generate jwt app client specific user specific front center msf documentation,0,334,0,0.0,1,2017-01-09T21:06:57,0.0
40383122,6304278.0,<node.js><heroku><microservices>,good approach docker,application follow architecture microservice implement question docker three scenario doubt efficient service easy scale application amount request stay heroku wonder three scenario effective microservice idea good approach,0,32,0,0.0,1,2016-11-02T14:57:47,0.0
40429027,2281116.0,<mongodb><jhipster><microservices><consul>,jhipster throw error ui microservice fail,jhipster microservice architecture consul service discovery micro service connect docker instance mongodb test stock angular ui save entity find disable database throw error ui consul ui service fail health check pass enable db gateway log assume consul refuse service gateway configure gateway handle request unavailable service,0,79,0,0.0,1,2016-11-04T17:56:45,0.0
40304324,7084856.0,<java><ibm-cloud><microservices><service-discovery>,configure service discovery bluemix microsrvice write java,microsrvice acmeair mainapp main service acmeair acmeair bs acmeair cs acmeair fs application include sd application configure follow bluemix documentation thing transparent follow step bluemix docs add code register service sample code nodejs python curl application write java help proceed,0,148,0,0.0,1,2016-10-28T11:41:17,0.0
40296029,83181.0,<node.js><npm><kubernetes><microservices><inode>,npm inode issue docker kubernetes environment,kubernetes cluster environment time pod container single node node ish micro service nodejs npm app eat inode time pod container node basically eat inode server node question deal issue minimize number file kind bundler node module,0,181,0,0.0,1,2016-10-28T00:02:56,0.0
40496999,1171622.0,<spring-boot><microservices>,spring boot microservice,pardon ignorance springboot understand aid set spring project simplify dependency management opinionated view pain associate gather dependency apart twist package thing package container app uber jar war deployment thing kind blur web app web app opinion understanding remotely micro service article sound microservice springboot springboot microservice breath notion spring building microservice wrong,0,145,1,0.0,1,2016-11-08T21:47:08,0.0
40469391,1860517.0,<reactjs><microservices><jestjs><enzyme>,wait condition enzyme jest eventual consistency assert timeout,simple test fail action eventually set assertion happen eventually settimeout example work well assert find example jasmine equivalent call enzyme jest edit content component button party library component,0,653,4,0.0,1,2016-11-07T16:00:53,0.0
36858626,328560.0,<apache-kafka><apache-zookeeper><microservices><distributed-system>,design system message queue coordinate service,design system doubt message queue coordinate service zookeeper great clarify concept understanding mq system design producer service create message add mq consumer consume message appropriate action consumer ack message process completion mq move offset message sure message consume system consume message exactly close follow question base understanding producer consumer instance high availability dc producer consumer separate zookeeper service service microservice separate zookeeper server instance instance solve problem message consume consumer ack mq consume complete processing action whatsoever require understand fast system request second read message wait ack till process case consumer failure message process understand consumer work parallel clear concept work explain consume configure interaction component optimize well persistent high reliable close exactly model edit plan java zookeeper kafka cassandra system,0,135,0,0.0,1,2016-04-26T07:52:25,0.0
42250009,6948742.0,<tomcat><containers><microservices><activiti><bpmn>,activiti timer event ephemeral environment,currently activiti handle approval event organization build rest api containerized environment containerized tomcat instance share persistence layer ephemeral nature instance state maintain activiti envision problem timed boundary event tie wide question activiti timer work execution timer function time expression keep permanent persistence layer evaluate engine interact expression process keep clock fire expire preferable case recommend keep track boundary timer activiti layer impermanent ephemeral tomcat layer blow time,0,39,0,0.0,1,2017-02-15T12:54:45,0.0
42356195,1028270.0,<google-app-engine><google-cloud-platform><microservices>,google cloud modules namepace service,confuse three construct google cloud understand fit read module service read google cloud modules apply service namespace service module generally mutually exclusive good example thing shared resource storage dbs namespace multiple module service access app engine request access namespace namespace resource bind project container create service access namespace resource single project environment dev prod project,0,51,0,0.0,1,2017-02-20T23:46:35,0.0
42327562,1125151.0,<scala><exception><microservices><lagom>,lagom server java lang illegalargumentexception,create module lagom project module kafka consumer consume message store message event cassandra define service initialize empty start application follow exception code declare empty service lagom alternative future require create service module resolve issue,0,94,0,0.0,1,2017-02-19T13:07:46,0.0
42289439,7578664.0,<jenkins><microservices><jenkins-pipeline><continuous-delivery>,manage continuous delivery micro service,work jenkin ci cd agile methodology sprint wonder manage release software example develop shopping site business development consist application consume micro service component application user interface micro service sale micro service user micro service product initial state shopping site start develop shopping site scratch work agile methodology sprint sprint develop products micro service develop user micro service sprint time apply micro service testing unit testing contract testing application ready testing functional testing base entire system well deploy uat environment beta version user user exploratory testing wait application sale micro service finish beta version user apply type test sprint develop sales micro service develop application sprint component finish accomplish user requirement continue pipeline apply testing beta version user dollar question scenario jenkins gitlab understand micro service independent component system entire system depend example add micro service ship functionality application interface release system dependency ship micro service application interface development fully test user requirement deploy production confusion post complety topic,0,337,2,0.0,1,2017-02-17T04:32:03,0.0
42142284,1729795.0,<apache-kafka><spring-cloud><microservices><spring-cloud-stream><spring-kafka>,query event repository microservice event source architecture spring cloud stream kafka,clarification notice question form db implement event source architecture handle distribute transaction ordersservice receive order request store order broker main doubt query kafka broker imagine search order user state,0,663,2,1.0,1,2017-02-09T16:45:17,0.0
42135552,4865777.0,<java><spring><spring-boot><datasource><microservices>,implement datasourceautoconfiguration spring boot,micro service database apart property common include class commondatasource java include property call commondatasource micro service datasourceconfig java implement class concept kindly help implement class project,0,1219,2,0.0,1,2017-02-09T11:31:03,0.0
41800036,8160856.0,<hibernate><entity><microservices>,packaging orm entity microservice design,build microservice architecture java technology spring hibernate scenario entity java class instance microservice entity microservice entity relationship import class class declare microservice design package service create project share library include entity inside include microservice solution solution,0,1330,0,1.0,1,2017-01-23T05:55:06,0.0
41779458,615025.0,<microservices>,application manager microservice,migrate app web container microservice spring boot question application manager systemd programing language agnostic manager manage application systemd require linux admin start application fyi docker moment,0,61,0,0.0,1,2017-01-21T12:39:43,0.0
41783283,4734344.0,<java><spring-boot><microservices><spring-rabbitmq><embedded-server>,rabbitmq embed broker start spring boot application,unable send message customerq queue rabbitmq broker configure rabbitmq broker embed server spring boot error code connect message queue error appreciate help,0,1885,0,0.0,1,2017-01-21T19:02:28,0.0
41749456,6589814.0,<python><ruby-on-rails><r><ruby><microservices>,integrate machine learn ruby rail application,python huge machine learn library easy train machine learn model rail provide fast build web app good practice integrate machine learn model write python rail application tool pro con,0,1928,0,1.0,1,2017-01-19T18:47:59,0.0
41830058,3388184.0,<rest><architecture><microservices>,communication restful microservice reasonable notification,book article state cycle micro service bad introduce mutual interdependency result big dependency versioning deployment problem solve suppose service call service suppose call initiate lengthy calculation call synchronous solution service pass resource url service calculate result post result url follow restful paradigm final resource sort callback approach solve problem explain paragraph introduce cyclic dependency solve problem,0,696,0,0.0,1,2017-01-24T13:56:08,0.0
41809373,570002.0,<testing><sql-injection><microservices><penetration-testing><security-testing>,pen test security testing microservice,test microservice security requirement google find good blog url sql injection vulnerable dorks inurl php test url php stuff check vulnerability security testing area help,0,796,1,0.0,1,2017-01-23T15:03:25,0.0
41783704,3679001.0,<kubernetes><microservices><restful-architecture><application-design><openshift-enterprise>,route request pod kubernetes service openshift,build jboss brm application microservice spring boot rule generation srv rule execution srv idea generate rule generation microservice srv persist database versione process execution microservice load persist rule pod memory query share database follow scenario happen problem lie issue rest request api load balance kubernetes service request hit pod rest load specific rule programatic design change help achieve construct application achieve capability load version rule pod serve execution microservice,0,588,3,0.0,1,2017-01-21T19:42:36,0.0
39848800,0.0,<spring-boot><microservices><netflix-eureka>,enrol micro service eureka,enroll microservice eureka server ms api gateway enrol eureka registry server write property achieve objective,0,29,0,0.0,1,2016-10-04T09:31:04,0.0
39876079,6523944.0,<docker-compose><jhipster><microservices>,jhipster doubt development microservice architecture,build microservice system jhipster platform problem º eureka service discovery unknown registry screen idea º docker compose application great browsersync development application inside docker container change code appear screen refresh action execute build change docker compose start doubt post stackoverflow solution work greatful help good regard vinicius carvalho,0,306,0,0.0,1,2016-10-05T14:01:25,0.0
39916051,2558023.0,<spring><jsp><spring-mvc><spring-boot><microservices>,sharing view microservie,split monolith web service microservice spring boot reduce duplicate code extract share maven module microservice monolith application healthcheck state service debbuge infos implement spring mvc jsp view microservice good duplicate view controller add web module share maven project controller view spring mvc setting sure good web module microservice,0,141,0,0.0,1,2016-10-07T11:24:30,0.0
39982623,2737240.0,<maven><microservices><wildfly-swarm>,wildfly swarm start browser mvn,possibility open browser tab localhost html mvn wildfly swarm appreciate answer,0,196,0,0.0,1,2016-10-11T16:55:50,0.0
53048229,1331578.0,<web-services><microservices><versioning><documentation-generation>,web service inform supported feature,service version support feature example version service support feature version support feature standard practical inform feature support current service version commit description standard service inform,0,20,0,0.0,1,2018-10-29T14:59:44,0.0
53025888,5685702.0,<microservices><amqp><queuing>,messaging message,question message queue service architecture find topic situation microservice microservice microservice deal entity keep general avoid discussion boundary case send message event entity event somethingcreate somethingid consume message fetch somethingid second approach message meta datum event somethingcreate somethingid somefieldkey somefieldvalue lean message pro network usage structure message con demand mechanism catch network failure fat message pro con attach pro con intention overview approach answer advance,0,23,0,0.0,1,2018-10-27T20:13:54,0.0
53176607,2052544.0,<c#><azure><process><architecture><microservices>,create process microservice architecture achieve design,currently mvc web application host iis window server azure vm console application myconsoleapp exe web application aware location myconsoleapp exe web application create kill process time create process ui web application create process myapplication exe process log sql database pid guid ui decide kill process fetch console app log diagram architecture process create console app number process create example transform application microservice net core replace sql mongo question replace create separate process web app web app microservice container spin container remotely imitate process currently sound awful architectural solution design consider implement vision process trouble,0,49,0,0.0,1,2018-11-06T17:02:53,0.0
53086837,5674536.0,<microservices><jhipster>,develop billing system jhipster microservice application,currently work microservice base application include gateway uaa micro service application password grant access refresh token authenticate microservice aware add bill user purchase product month year allow access micro service three option store bill uaa mysql table jhi user request access service feign client uaa microservice develop billing microservice feign client microservice copy bill microservice store database well question choose lot communication check bill request microservice restful api impact performance appreciate idea,0,61,0,0.0,1,2018-10-31T15:23:12,0.0
53121905,4469946.0,<testing><microservices><pact>,json schema pact contract testing,start experience pact ago wonder guy idea pact support json schemas describe flow suppose microservice microservice consumer microservice provider provider expose api basically post request expect explicit json body payload field require require property suppose provider change behaviour expect json payload additional property question detect breaking contract pact framework good test scenario help,0,196,0,0.0,1,2018-11-02T15:55:00,0.0
53123523,10452984.0,<sockets><microservices><nestjs>,nestjs multiple websocketgateway,nestjs websocketgateway time parameter microservice,0,232,0,0.0,1,2018-11-02T17:46:04,0.0
53170707,917467.0,<rest><microservices>,design rest api post microservice,sort trivial question rest api post prefer design start post request user google place microservice architecture choose design rest api microservice sense microservice user post gplace case endpoint sense preferrably option variant gplace gplaceid post objection domain path segment microservice architecture base uri gplace belong gplace api,0,43,1,0.0,1,2018-11-06T11:11:33,0.0
53139553,10602564.0,<rest><api><spring-boot><microservices><ignite>,apache ignite rest api call idea apache ignite sdk,store datum xml apache ignite cache set kubernates cluster azure spring boot application add ignite dependency parse xml jaxb pojos store datum ignite cache operation lot time deal xml alternative rest api call provide ignite application question work example spring boot ignite sdk send request rest template spring boot send json response rest api example response help lot,0,149,2,0.0,1,2018-11-04T09:54:20,0.0
53175163,1662865.0,<c#><entity-framework><asp.net-core-2.0><microservices>,duplicate datum multiple instance microservice,problem duplicate datum client call api multiple time fill grid api instance service check data exist create datum problem method create data heavy long time method time save datum create duplicate queue api call exucte time achieve code api,0,94,14,0.0,1,2018-11-06T15:39:50,0.0
50598938,9684016.0,<api><docker><service><microservices><docker-swarm>,connect docker service docker service docker swarm cluster,docker swarm cluster launch service sv web sv api stack deploy file web deploy stack deploy file api deploy connect service inside application write connect service deploy real ip host cluster find connect api service web service,0,33,0,0.0,1,2018-05-30T07:38:54,0.0
50628676,4471919.0,<events><apache-kafka><microservices><apache-zookeeper><event-sourcing>,explication eventsource microservice cqrs,currently build app microservice pattern graphql communication kafka rabbitmq authz auth apollo prisma docker find ressource event source advantage disavantage stuck work real apollo engine monitor request response auth authentification management authz authorization graphql gateway sadly find reliable solution guess apollo graphql tool merge schema ideally prisma read side bill ms nodejs write side bill ms understand correctly apache kafka zookeeper kafka message broker zookeeper eventstore assume validate request valid write side event event store aka zookeeper validate request mutation write side snapshot traditional database validate request mutation publish event kafka assume kafka update zookeeper automatically message read side update private snapshot entity course message ms apache kafka zookeeper well messaging service rabbitmq shape usage main difference event sourcing basic messaging usage event store entity snapshot case assume event store tactic validate event store private database explain event store,0,303,0,0.0,1,2018-05-31T16:17:22,0.0
50583823,1776268.0,<docker><docker-compose><microservices><amazon-ecs>,aws ecs instance microservice,suppose stupid question idea find answer check resource docker compose yml file aw ecs cluster instance micro example service eurekaserver configserver zuulserver database example big instance aws ecs task definition sure help,0,60,0,0.0,1,2018-05-29T11:57:29,0.0
50584687,4486280.0,<spring><testing><integration-testing><microservices><pact>,pact support application javascript content type,third party service microservice interact return response content type application javascript charset utf pact json response body string matching rule empty body follow pact dependency,0,62,0,0.0,1,2018-05-29T12:41:19,0.0
50527363,9774735.0,<java><microservices>,httpclienterrorexception spring microservice java,create microservice st call add method check content review set approve flag approve receive exception rest st microservice second wrong call microservice st,0,205,0,0.0,1,2018-05-25T10:42:29,0.0
50673143,4284622.0,<java><spring-boot><log4j><microservices>,log info log file error log file,print info debug log success log file error log error log file log java programmatic level config class help,0,1163,1,0.0,1,2018-06-04T03:41:09,0.0
50499849,2695504.0,<rest><spring-boot><microservices><log4j2>,classcastexception cast logger object wrapper logger,write wrapper logger class extend logger log class method message error exception detail exception xml slf logger slf bind exception pom xml log xml,0,48,2,0.0,1,2018-05-24T02:01:28,0.0
50508388,8942907.0,<spring-boot><microservices><configserver>,multiple search path config server spring boot,create dedicated config server list microservice follow snippet application yml config server face problem access microservice configuration documentation mention wildcard application label profile searchpath variable segregate directory path great help help issue,0,1226,2,0.0,1,2018-05-24T11:36:26,0.0
38352227,15441.0,<java><web-services><design-patterns><microservices>,intermediary pattern,intermediary java web service application application build spark java incidental http parameter generate url call url return result original caller kind microservice pattern specific term pipeline solicitor mediator question intermediary pattern,0,123,5,0.0,1,2016-07-13T12:48:52,0.0
38178208,2535215.0,<rest><cakephp><cakephp-3.0><microservices><cakephp-2.8>,cakephp develop web app base micro service architecture,evaluate php base framework development highly scalable application base micro service architecture documentation cakephp design development micro service laravel php mvc framework base symphony capability base luman module component appear cakephp framework suit design development big gigantic monolithic app point documentation example cakephp designing web app base micro service architecture,0,644,5,0.0,1,2016-07-04T06:35:33,0.0
38265103,2746227.0,<angularjs><web><mustache><microservices><msf4j>,msf serve static content,application serve static content mustache template engine develop rest service consume develop angular web app package angular app micro service render browser consume service ajax call,0,164,0,0.0,1,2016-07-08T11:04:24,0.0
38397672,4219776.0,<mongodb><haxe><microservices>,multiple database management,currently work multiplayer game database mongodb authentication login game specific datum separate user game specific datum build micro service user future bit uncertain handle validate game specific database operation tho log game perform post request rest api validate user return datum game tcp socket connection handle real time gameplay save game specific datum database authoritative server game logic server link datum game specific database specific user find authentication database,0,185,6,0.0,1,2016-07-15T13:44:30,0.0
38403001,3550875.0,<node.js><microservices>,listen micro service port node js,micro service create application micro service listen micro service port application good tutorial online blogpost tutorial help create application micro service create bus booking application service bus service bus availability user service connect user detail bus create nodejs application combine application microservice listen port,0,1226,9,1.0,1,2016-07-15T18:33:54,0.0
38389706,1702069.0,<go><deployment><microservices>,help manage microservice golang,currently deal microservice daily basis touch write php software engineer sysop manage app familiarity infrastructure build pipeline setup sysop devops guy love golang side project create fairly large web application lot move write design code easy learn lot day job deploy manage golang web app executable update file apache serve lot build deploy microservice app keep thinking problem solve tinker idea docker add complexity learn managing storage image large good practice good manage golang application deploy keep track microservice process build deploy setup assume microservice server container vm manage independently jenkins build deploy consul service discovery configuration health check service microservice register consul start deregister solution hopefully docker thought create deploy service manage service add remove well register consul find well solution path help appreciate question confusing couple people answer wrong topic hand clarify help microservice bring point question basically ability manage process microservice deployment start process update code easy worry app difference microservice harder keep track supervisord sure direction question,0,493,2,0.0,1,2016-07-15T06:56:33,0.0
55300859,2127562.0,<.net-core><microservices><pcf>,authentication micro service pcf,ensure servicea call serviceb set whitelisted service service independent service gateway completely independent good microservice pattern follow,0,26,0,0.0,1,2019-03-22T13:37:52,0.0
55400493,1817845.0,<microservices><naming-conventions><naming><conventions><url-pattern>,url naming convention fetch column resource,microservice endpoint list company detail db url pattern develop url fetch company db understand reuse url fetch column fetch column guide url pattern case,0,28,0,0.0,1,2019-03-28T14:47:12,0.0
55488560,1676947.0,<javascript><node.js><aws-sdk><microservices><amazon-cognito>,cognito javascript sdk multiple device,application user accessible mobile android ios devices mobile app web portal user access duplicate cognito sdk code android ios web application achieve single server side api point special code single api point secure validate store session device code plan advance,0,34,0,0.0,1,2019-04-03T06:36:58,0.0
55368678,8787250.0,<spring-boot><gradle><microservices>,disable gradle plugin environment,environment low env production gradle dependency download production block plugin download activate prod plugin add prod development test environment,0,35,0,0.0,1,2019-03-27T01:58:39,0.0
55390023,5437050.0,<spring-boot><microservices><business-process-management>,bpm workflow implement micro service,implement spring micro service application requirement initiate workflow software ag achieve approach ui layer directly call bpm bpm call micro service initiation second approach ui call microservice call bpm call bpm initiation update task approach good approach case pro con approach suggestion great help advance,0,36,0,0.0,1,2019-03-28T04:09:19,0.0
55389966,3401200.0,<microservices><saas>,database pattern saas microservice,phase build saas solution requirement customer version app datum customer isolate microservice database tenant find design database thought service tenant database service db tenant db well valid approach design route connection service correct tenant db,0,50,0,0.0,1,2019-03-28T04:01:25,0.0
55479787,2165743.0,<java><mongodb><spring-boot><docker><microservices>,configure spring boot microservice docker container access local mongodb database,microservice develop spring boot connect mongodb local create docker container microservice mongodb receive error connection refuse connect mongodb localhost work problem address docker network adapter server find configure spring boot container connect mongodb local approach wrong wanna dockerize mongodb future application database linux ubuntu,0,60,0,0.0,1,2019-04-02T16:43:52,0.0
55476139,3083605.0,<node.js><mongodb><mongoose><microservices>,connect mongo mongoose nodejs microservice error populate,nodejs node application create businessschema nodejs application node create campaignschema business schema fetch campaign node error missingschemaerror schema register model business mongoose model schema error occur monolith application error occur remove populate help multiple connection application model schema declare connection process case,0,66,0,0.0,1,2019-04-02T13:34:07,0.0
55497011,11306045.0,<api><architecture><microservices>,migrate thick client cloud,current situation thick client write net computation software maintain kernel work people leave year code code technical expert migrate cloud public api order serve spa application thick client application recommendation problem lift shift lift adjust shift rearchitecte redevelop ground repurchase cloud solution,0,66,0,0.0,1,2019-04-03T14:00:56,0.0
55303810,11106032.0,<docker><microservices><docker-swarm><moleculer>,metric micro service deploy docker swarm host,create micro service moleculer framework communicate micro service deploy host docker swarm total number call service service well metric amount datum pass service bandwidth service total number call service service decide micro service deploy host deploy micro service call single host,0,72,0,0.0,1,2019-03-22T16:17:51,0.0
55443582,3813733.0,<security><microservices><istio>,traffic sidecar main process encrypt istio,istio support mtls inter service communication istio proxy find documentation official site explain state traffic istio proxy container main container pod assume kubernetes manage cluster traffic encrypt proxy main container default config plugin enable behaviour appreciate help,0,83,0,0.0,1,2019-03-31T17:32:59,0.0
55489049,2826532.0,<c#><user-interface><domain-driven-design><microservices><micro-frontend>,decompose ui micro front ends,continuation question splitting microservice decompose ui microfrontend well imagine user registration form fill form age address prefer communication sms email radiobutton microservice usermanagement service communication service user register create aggregate service user usermanagementcontext usercommunicationsetting communication feel ui component microservice place form ui happen user click submit button component send datum service,0,112,0,0.0,1,2019-04-03T07:08:06,0.0
55437840,9794003.0,<c#><.net-core><rabbitmq><microservices><keep-alive>,keep consumer app alive net core,bunch simple asp net core microservice http request subscribe command rabbitmq reduce extra headache asp net core simple net core console application problem console app stay alive simply die reach main function scope good practice keep consumer console app alive worth mention production environment docker container simple infinite loop console readkey work tnx,0,119,0,0.0,1,2019-03-31T04:21:36,0.0
55478554,9625776.0,<spring><docker><kubernetes><jwt><microservices>,setup spring backend jwt kubernetes,implement spring backend responsible store datum user lecture backend secure jwt work fine study enhance backend microservice architecture monolith purpose requirement docker kubernete read article write authorization server ressource server jwt microservice architecture correct gateway zuul purpose help structure project advice technology stack project single server implement molotithical backend secure jwt,0,246,0,0.0,1,2019-04-02T15:34:46,0.0
55382665,2432942.0,<amazon-web-services><microservices><load-balancing><aws-load-balancer>,aws load balancer https microservice,microservice http https endpoint sole purpose pull datum activemq queue set load balancer require http https listener microservice,0,40,1,0.0,1,2019-03-27T16:56:04,0.0
55315214,11125669.0,<web-services><design-patterns><service><architecture><microservices>,split service multiple service configuration service split store service,monolith set configuration split service job central workflow engine store configuration service store configuration service service input respective job service invoke,0,46,1,0.0,1,2019-03-23T15:17:22,0.0
55391195,11235767.0,<grails><microservices>,fetch datum microservice rest grail,rest microservice microservice table table datum fetch rest write rest democontroller throw error signature method democontroller restbuilder applicable argument type fetch datum microservice rest,0,51,1,0.0,1,2019-03-28T06:14:41,0.0
55323318,1909812.0,<azure><kubernetes><microservices><azure-aks>,size azure kubernetes service ak cluster,size aks cluster understand follow number micro service replication copy primary parameter resource usage micro service prediction usage increase year consider totally scatter reach number ak size sizing node assign configuration node pod consider ip number reserve base number pod,0,197,1,0.0,1,2019-03-24T11:29:27,0.0
55296641,4959470.0,<microservices><spring-cloud><netflix-ribbon>,load balanced access microservice ribbon springboot,consider scenario call datum set datum set microservice instance load balanced ribbon client side load balancing prepare application property instance property list server search google dzone nginx spring example github forum find conclusion scenario,0,26,2,0.0,1,2019-03-22T09:35:00,0.0
55414562,1826788.0,<architecture><microservices>,architecture microservices file upload service facade,microservice architecture service facade layer top add file upload functionality basically microservice responsibility upload file local server create version image question regard architecture file upload call call trigger facade individual microservice validation security validation call service file upload service file upload service define pattern file upload,0,151,2,0.0,1,2019-03-29T09:45:10,0.0
55453298,11290958.0,<java><spring-boot><microservices><netflix-zuul>,skip custom zuul filter,skip filter route filter request route micro servicea define pre filter skip pre filter execute shouldfilter route achieve configuration application property application yml,0,214,2,0.0,1,2019-04-01T10:45:45,0.0
55461160,4621020.0,<java><maven><spring-boot><microservices>,package find maven compile error mvn clean install,micro service base application build locally situation micro service depend micro service include pom dependency error code class recognize mvn clean install command error package recognize well find symbol class change execution goal maven plugin repackage pom confirm jar file correctly build local maven repository folder sure class code break maven command command maven clean install pom ms pom ms,0,199,5,0.0,1,2019-04-01T18:09:12,0.0
49324723,7173575.0,<microservices><netflix-zuul><netflix-eureka><netflix>,combine springboot zuul eureka bind service localhost,set zuul routing eureka service discovery work fine set eureka bind actual service access api gateway combine zuul eureka work access actual rest endpoint network application property eureka service discovery application property zuul api gateway application property actual rest service remove rest service property file course access resource achieve microservice access request pass zuul api gateway eureka service discovery chance provide second instance serif,0,1088,0,0.0,1,2018-03-16T15:45:57,0.0
49345233,919480.0,<amazon-web-services><caching><microservices><aws-step-functions>,amazon states language global transaction cache,flow base application development system level cache exist cache transaction currently trigger input cache destroy transaction failure second cache transaction happen cache create state machine start time destroy termination state machine bit overhead maintain cache elastic cache service state machine provide feature early programming experience ibm cic product work area global transaction level exactly micro service orchestration engine definitely handy keep track transaction system feature help,0,68,0,0.0,1,2018-03-18T06:48:49,0.0
49502594,2944955.0,<oauth-2.0><microservices><cloudfoundry-uaa>,access token additional scope login,work cloudfoundry uaa sure standard oauth situation user log app receive access token refresh token keep acquire access token original scope access permission change scope add access token log refresh token access token modify scope advance,0,382,0,0.0,1,2018-03-27T00:22:58,0.0
49334373,1749786.0,<microservices><spring-cloud><spring-cloud-stream><spring-kafka><spring-rabbitmq>,amqpconnectexception connectexception connection refuse connect,spring cloud send message rabbitmq follow tutorial josh long youtube os windows git url import reservation client eureka service config service start service time hit service json payload error message input url body output json error console connection error kafka rabbitmq binder help example implement unix base platform help,0,477,0,0.0,1,2018-03-17T09:16:50,0.0
49353369,1839104.0,<microservices><messaging>,microservice messaging,process restructure application microservice messaging event drive architecture content microservice retrieve content source add message queue process query content microservice store content database well redundant messaging,0,56,3,0.0,1,2018-03-18T22:16:25,0.0
49390064,218635.0,<kubernetes><containers><cluster-computing><microservices>,create expose kubernete service base deployment command,feel manage find doc ideally add service exposure detail deployment yaml file service host port issuing create command deployment yaml,0,26,5,0.0,1,2018-03-20T16:57:44,0.0
43763479,3625317.0,<docker><microservices><consul>,consul agent architecture node issue upgrade conceptual issue,sure root problem explain big picture short symptom upgrade consul agent explain longer connect cluster leader dublicate node happen explain fully understand big picture question follow setup application stack container service micoservice db type single consul server stack consul server software stack reason offline deployable stack live consul server handle registration service discovery kv configuration questionable container consul agent start consul agent config dir consul connect server configuration include file encrypt token acl token wonder servicename replace macro image build time client secure gossip key acl key container hardware node server configuration addition acls acl master client token gossip json file configurtion folder tltr reason explanation multi agent setup agent container reason tiller configure container dimploy gem connect localhost acomplish consul configuration extraordinary complicate local agent forwards request actual server handle encryption key acl negation stuff consul watch task server trigger configuration localhost extra configuration reason agent container simplicity local service talk consul backend authentication long connect level security final question multi consul agent design reason understand node duplication issue start host hardware node identical consul agent design wrong generate node fine,0,306,0,0.0,1,2017-05-03T14:52:29,0.0
43753039,7719775.0,<containers><openshift><kubernetes><microservices><fabric8>,openshift container platform fabric,fabric microservice platform search alternative comprehension find red hat openshift container platform fabric open source figure major benefit red hat solution openstack,0,915,0,0.0,1,2017-05-03T06:49:48,0.0
43892712,3378434.0,<microservices>,merge microservice frontend,merge serveral frontend microservice website idea frontend backend database microservice familiar microservice create website frontend article tutorial stackoverflow explain depth tool microservice,0,216,6,0.0,1,2017-05-10T12:35:58,0.0
43821553,5456690.0,<node.js><npm><microservices>,good npm package demand mircoservice instal locally,npm package publish npm package single function write nodejs code package instal locally sdk interface server api install require package cache good security concern prevent simple diagram note example package npm cache example ttl equal minute client request function function server instal timestamp client request function instantly instal timestamp update delete ttl stay client request,0,140,8,0.0,1,2017-05-06T14:20:55,0.0
43319806,2204202.0,<api><design-patterns><akka><microservices>,api gateway pattern implementation microservice base akka cluster,create microservice base akka cqrs microservice write send command cluster read side read projection database http endpoint main problem microservice question collect complex api client find answer api gateway pattern question implement create separate project implement api gateway pattern simple case reverse proxy full stack pro api gateway separate project abstraction con balancer fast proxy api gateway project api gateway auth implement microservice load balancer collect endpoint complex api full stack pro direct access cluster database fast response con complex microservice blend layer variant preferable good,0,770,0,0.0,1,2017-04-10T09:42:16,0.0
43295417,872487.0,<java><spring><spring-boot><spring-cloud><microservices>,spring boot registration server eureka server,work spring boot registration server eureka server currently work configuration project registration service inside main method system setproperty spring config registration service yml file file registration service content configuration application start change spring config work start connection refuse exception happen spring config yml file project specific enableeurekaserver enable spring boot application yml write spring application eureka server spring boot application current project registration service write eureka server lot thing help understand,0,541,0,0.0,1,2017-04-08T14:40:26,0.0
43395580,2101345.0,<testing><automated-tests><spring-cloud><microservices><end-to-end>,spring cloud application automatic testing,application base spring cloud eureka server service discovery system couple microservice recommend approach automatic ent test system docker easy start system course soapui write test java keep project,0,216,0,0.0,1,2017-04-13T14:56:06,0.0
43465704,921054.0,<.net><testing><microservices><staging><abtest>,kind testing fallback,well term exist aware grateful edit subject question appropriately consider web api service deploy production server treat work source truth example update external dependency change infrastructure code directly affect core business logic service public contract pass phase staging deploy production kind change codebase expect service work previous version work integration issue risk alter behavior system live expect unit test good safety net prove practice deploy production proxy service dispatch depend configuration fail request service generic configurable solution functionality exist,0,50,1,0.0,1,2017-04-18T07:03:52,0.0
43382402,1807888.0,<security><authentication><jwt><soa><microservices>,preferred approach inter service communication microservice soa,architecture internal service communicate identity access management service store user role coarse grain permission component exhaustive service service iam service service full access ip whiteliste user manage iam service service interrogate role permission consider approach create opaque api key user service store service service call service pass api key service call iam service validate key acquire service role process request service cache response iam service reduce chattiness solution involve api gateway assume traffic network redirect internal traffic sake convert opaque token jwt,0,845,1,0.0,1,2017-04-13T02:06:30,0.0
43512572,5113666.0,<database><relational-database><microservices>,microservice database database intensive service,monolith application server break multiple microservice good principle application currently database table service question separate table service approach service table interact database service approach create database table,0,362,1,0.0,1,2017-04-20T07:09:57,0.0
43515150,7894637.0,<azure><microservices><azure-service-fabric>,control service azure sf application,azure sf application service deploy application local cluster deploy service service,0,37,2,0.0,1,2017-04-20T09:12:50,0.0
43446605,3734081.0,<firefox><spring-boot><microservices>,microservice architecture firefox require exception add port,work distribute web application spring microservice design pattern individual service port user call user management open url domain url internally call product management domain url assume certificate sign browser unknown exception manually add browser case chrome work fine firefox add exception domain port internal call well wait internally security exception add result api call fail firefox behaviour wrong aj,0,46,2,0.0,1,2017-04-17T06:49:20,0.0
43306842,1173307.0,<.net><authorization><microservices>,net microservice authorization,start project consist microservice implement authorization microservice architecture follow web project consist asp net core site angular module menu item submenus communicate microservice microservice database microservice permission ms crud products ms crud order question mention microservice database ms hold product database ms order database permission well store microservice share code microservice code actual auth checking isalllowed permissiontype repeat microservice code redundancy,0,359,4,0.0,1,2017-04-09T12:46:57,0.0
43326844,1679307.0,<spring-boot><microservices><swagger-ui>,swagger springboot microservice produce response ui,create micro service spring boot resource folder add swagger support follow add swagger dependency add docker class add swagger ui dependency result response expectation response expectation expect response browser console error find microservice class,0,98,5,0.0,1,2017-04-10T15:11:06,0.0
52071872,4179955.0,<node.js><microservices><pact><seneca>,pact js seneca js,pattern couple day love pattern microservice pact work http api wonder pact work microservice system build seneca js work benefit consumer drive contract seneca js,0,36,0,0.0,1,2018-08-29T07:31:02,0.0
52126065,1634263.0,<microservices>,redundant class microservice architecture,move project legacy code microservice problem service common class change class microservice change rest api well tiring workaround problem,0,61,0,0.0,1,2018-09-01T07:46:59,0.0
52140623,8421492.0,<elasticsearch><architecture><microservices>,architecture question elasticsearch instance microservice,approach microservice easily easy deploy manage develop monolith microservice pattern database instance microservice case matter case explain problem example web service user upload image user comment rate view counter implement service upload image service user upload image website image meta description title tag upload comment service user add comment image service handle request create entry database attribute content videoid userid view counter service user view click image request service create entry db user video store service database service completely independent communication service rest api db elasticsearch problem create fourth service image search service common task search function youtube good search result attribute precede service search depend course tag description upload dislike influence view comment image high view count rank higher example store separate dbs consider query full text search experience idea solve problem good practice ride event source solution special problem course create three request service create algorithm merge result elasticsearch man job,0,91,0,0.0,1,2018-09-02T20:04:50,0.0
52161943,6406165.0,<c#><service><registry><microservices><azure-service-fabric>,migrate exist window service service fabric,encounter issue exist window service sf cluster service registry operation dependent sf meaningless service shutdown node option smooth transition db registry idea case service store datum registry case error occur db,0,120,0,0.0,1,2018-09-04T08:25:36,0.0
52232029,3570764.0,<java><spring><spring-boot><cloud><microservices>,spring cloud service register discovery server register,nutshell explanation build basic eureka discovery server spring boot create basic eureka service eureka discovery start discovery server start service service register discovery server unregistered detail discovery server code service note example place controller main boot app service pom xml problem service register unregistere debug error create configuration bean work late spring boot initializr spring boot spring cloud,0,676,0,0.0,1,2018-09-08T04:31:27,0.0
52058409,10284829.0,<api><error-handling><refactoring><microservices>,group micro services internal error code,good practice internal error code exception class common module problem guy encounter group error code usability consistency micro service error code,0,186,0,0.0,1,2018-08-28T12:51:31,0.0
52156882,0.0,<microservices>,downside merge microservice single monolith,time employ maintain lot microservice functionality independent client queue router lot stuff totally attend conceptually simple project downside merge microservice single monolith project consumer microservice partition large app waste time sake follow supposedly good practise scenario fit,0,28,1,0.0,1,2018-09-03T22:52:22,0.0
52266528,4682000.0,<java><spring-boot><microservices><spring-cloud><cloudfoundry>,deploy microservice cloud foundry,develop simple prototype complete microservice architecture spring cloud oss library fluently computer deploy thing cloud foundry throught documentation find lot article discuss pcf discovery service eureka server microservice bind url restage achieve thing second question eureka work declare config server user provide service,0,149,1,0.0,1,2018-09-10T22:56:24,0.0
52062284,5798891.0,<authentication><oauth><microservices>,username commonly user identification oauth,set resource server external authentication server oauth server database avoid couple apart verify user authenticate user authenticate resource authentication server share database simple case wonder obvious choice user spre example return username call oauth check token jwt example username include payload prefer username username drawback change unique correct solution token introspection jwt token,0,39,2,0.0,1,2018-08-28T16:14:45,0.0
52252743,7124935.0,<docker><kubernetes><docker-compose><microservices><service-discovery>,dynamic service discovery work docker compose kubernete,create chat app microservice architecture service gateway service responsible user authentication api endpoint route request appropriate service messaging service responsible create retrieve update delete message api endpoint docker compose kubernete gateway service service forwards request send api endpoint write dynamic service discovery middleware idea pre register service api endpoint responsible gateway service rely request resource path decide service request forward docker compose kubernete keep version dynamic service discovery middleware advance,0,87,2,0.0,1,2018-09-10T07:12:14,0.0
52099128,10285933.0,<spring-boot><openshift><microservices>,single application property file multiple microservice spring boot framework,feasible application property microservice build spring boot deploy openshift,0,182,2,0.0,1,2018-08-30T14:09:53,0.0
52097737,6566294.0,<ansible><vagrant><microservices><vagrantfile><consul>,problem create consul cluster ansible,create consul cluster ansible example vagrant file ubuntu machine problem task fail error message ansible unable recognize package manager variable sure source problem upping debian machine problem update task file consul,0,445,2,0.0,1,2018-08-30T12:59:13,0.0
52098392,3393354.0,<rest><kubernetes><microservices>,consume restful service orchestrate kubernete,consume service orchestrate kubernete call statement consume normal restful web service resttemplate java url differ kubernetes create destroy occurrence service,0,40,3,0.0,1,2018-08-30T13:33:31,0.0
52041354,6621807.0,<validation><microservices>,microservice validation microservice,micro service validation perform micro service good scenario handle case,0,52,3,1.0,1,2018-08-27T14:18:08,0.0
52262127,8718377.0,<java><spring-boot><spring-security><microservices><netflix-zuul>,zuul unique entry point application,application service service port api localhost api service localhost api services zuul port access api localhost service api service localhost service api service previous api directly service block order zuul unique entry point,0,59,3,1.0,1,2018-09-10T16:40:40,0.0
39338259,4318414.0,<dropwizard><microservices>,dropwizard microservice architecture,develop micro service dropwizard service service service message queue rabbitmq setup service send object type class define service service service import class service service class define exactly class classnotfoundexception class service service deserialize typecast object class jar independent,0,266,7,0.0,1,2016-09-05T22:15:30,0.0
39343694,826068.0,<docker><docker-compose><microservices><docker-container>,docker compose keep previous docker composition,docker composition contaier keep container recreate instance composition reuse delete previous container conceptually intance application application composition docker compose reuse exist container,0,23,0,0.0,1,2016-09-06T08:04:44,0.0
39139313,2240780.0,<database-design><architecture><microservices>,database saving set variable type,design microservice goal save serve set variable set compose variable height birthdate set predefined list variable height birthdate type list list change write code build deploy time ideally list store database set reference object store outsilde microservice set link keep user identifier question sql database understand suited kind problem impossible ugly solution,0,31,0,0.0,1,2016-08-25T07:36:48,0.0
39135928,5985566.0,<hazelcast><spring-cloud><microservices><netflix-eureka><spring-cloud-netflix>,hazelcast netflix oss stack,currently build platform netflix oss stack microservice hazelcast caching solution help integrate hazelcast netflix oss recommend,0,215,0,0.0,1,2016-08-25T02:47:14,0.0
44203398,3356278.0,<spring-boot><microservices><pivotal-cloud-foundry>,cloud foundry mutual ssl exception,implement mutual ssl api gateway springboot microservice call api gateway microservice fail pcf bad gateway bad gateway register endpoint fail handle request sure resolve relate certificate configuration pcf help,0,266,0,0.0,1,2017-05-26T13:54:17,0.0
44029177,6815373.0,<oauth-2.0><saml><microservices>,basic concept oauth saml microservice,concept topic mid level java developer,0,30,0,0.0,1,2017-05-17T15:32:46,0.0
44097193,6629762.0,<security><containers><microservices><snort><suricata>,snort suricata whilst docker,guess multiple docker file ids ip microservice docker container suricata snort snort multithread snort weak suricata,0,1056,0,0.0,1,2017-05-21T13:02:39,0.0
44096281,1159611.0,<jwt><microservices><kong>,jwt kong create jwt share secret,play kong api gateway sign jwt secret share micros micro decode jwt extract payload datum work user field payload create jwt consumer work fine create second consumer follow error exactly sure kong jwt require unique secret consumer create jwt configure jwt plugin properly share secret sign jwt ps entirely sure share secret good practice well kong version,0,310,0,0.0,1,2017-05-21T11:23:30,0.0
44117865,520209.0,<rest><cassandra><microservices><nosql>,restful api unnormalized nosql entity,currently work project develop set microservice scala cassandra database wonder standard write restful api entity st normal form cite typical example consider entity set fruit traditional rdbms store color fruit create table color integer associate color primary key map color fruit relation map fruit color database design satisfie boyce codd normal form design intuitive rest point enter nosql database color attribute fruit entity set domain set varchar insert apple dataset associate color red green store string record set update entity remove green list add color list break separate endpoint irrespective underlying database design payload utsav,0,79,0,1.0,1,2017-05-22T16:27:51,0.0
44177783,1666918.0,<microservices><akka-http><akka-stream><apache-kafka-streams><reactive-streams>,reactive stream kafka stream fan http actor,akka streaming reactive streaming question rest api receive message drop kafka bus kafka stream consumer aggregate message max time window retrun answer implement system start,0,378,0,0.0,1,2017-05-25T10:07:51,0.0
44067979,4247860.0,<heroku><spring-boot><microservices><heroku-api><configserver>,spring config server service heroku,explore heroku project micro service configuration server care manage configuration service git hub heroku deploy service sure spring boot configuration server work heroku provide configure host app separately configure db setting individual app suggestion thought appreciate,0,137,0,0.0,1,2017-05-19T10:42:30,0.0
44083919,4431921.0,<playframework-2.0><microservices>,microservice configuration play framework,divide application project play realise multiple play application server suppose deploy multiple play application root project microservice plugin defeat microservice architecture module independently,0,393,0,1.0,1,2017-05-20T09:00:17,0.0
44170365,4575082.0,<php><logging><architecture><yii2><microservices>,output progress console web application,write yii app console application component micro service fetch datum server handle save db course loop loop output current progress watch progress testing output start xxx product event log cron handling task case method webapplication command active command course problem log method yii configure log target echoing uncertain handle command check wether set console evaluate warp well solution write method trait design solution pattern service implement interface logger progress object kind di dependency injection write method function time progress function webapplication reason php question advance,0,138,0,0.0,1,2017-05-25T00:16:30,0.0
44157540,5328443.0,<ruby-on-rails><angularjs><architecture><microservices><saas>,integrated angularjs rails separate angular rail api microservice architecture,understand common approach angularjs reactjs vuejs idea integrate angularjs front rail application angularjs application communicate completely separate rail api microservice architecture approach appropriate software service stand point,0,67,1,1.0,1,2017-05-24T11:48:02,0.0
44167052,5786436.0,<java><performance><web><connection><microservices>,maintain connection restful web service,work application monolith feature roadmap fit microservice architecture toy build problem application process request second peak time request raw tcp ip connection keep alive time strict latency requirement majority request respond millisecond request consume microservice concern consume multiple restful web service create destroy connection time service consume well tls handshake latency process request question good practice maintain state connection restful web service multiple thread consume web service request consume web service simply keep physical connection alive,0,107,1,0.0,1,2017-05-24T19:33:05,0.0
44082917,758982.0,<java><rest><jetty><microservices><dropwizard>,dropwizard server shut automatically time,write java rest microservice dropwizard framework service start fine activity happen microservice shut automatically follow log log server automatically shutdown inactivity microservice diff time server shutdown minute configuration kill service inactivity idea,0,225,1,0.0,1,2017-05-20T06:59:34,0.0
44177107,8064203.0,<microservices>,measure microservice fault tolerant,microservice architecture benefit fault tolerant issue service impact service result improve service availability implementation ha auto scaling help availability measure general service availability specific quantitative measurement microservice benefit fault tolerant,0,200,2,0.0,1,2017-05-25T09:34:57,0.0
44021110,1430394.0,<data-structures><microservices>,resource base entity base structure,design architecture system underlie service consider soa database model design general speak business logic build entity picture confusing problem continue result abstract ambiguous google focus crm service customer relation management deem better understand resource base structure general order design service provide concise explanation resource base structure compare entity base,0,98,3,0.0,1,2017-05-17T09:40:09,0.0
43979597,2519577.0,<elasticsearch><indexing><microservices><elastic-stack>,elk log microservice architecture,implement centralized logging microservice elk doubt create separate microservice single microservice log single common microservice sense centralized logging achieve search microservice learn bit overhead elasticsearch hear experience question software recommendation,0,382,3,0.0,1,2017-05-15T12:28:44,0.0
44148076,1493808.0,<email><microservices><cqrs>,mail notification denormalized view cqrs,develop mail notification service send order approval customer order datum denormalized view query side fill mail template send email html string format mail notification service order status change order approval email send implement cqrs es ddd concept microservice architecture procedure correct align concept develop http post api order command send approval mail order status change command side command side generate event order approval mail process event processor process event order datum query side denormalize view event processor generate approval mail datum fill datum template event processor call http post mail notification service mail body html format payload event processor call http order service command side change order status order approval mail send procedure apply user response mail send real time trigger client front side mail send client side refresh retry call api,0,160,3,0.0,1,2017-05-24T02:44:16,0.0
44198061,321946.0,<azure><microservices><azure-service-fabric>,decision path azure service fabric programming model,background port monolithic tier web app microservice architecture web app display listing consumer craiglist backend consist rest api call sql db return json spa app build ui mobile app datum write sql db background services ftp worker role allow write user require figure azure service fabric good fit microservice architecture scenario pro con microservice monolith figure application microservice programming model current architecture question azure service fabric good fit recommendation currently lean bunch owin base net web site split area service host machine tie api gateway service fabric programming model stateless service backing db stateful actor model help stateful service actor update datum maintenance ad hoc admin request traditionally simply login db update datum api return datum persist memory node cluster update expose method service import exist sql datum stateful service stateful service actor model datum visually object explorer ui data gold concern lack control visibility reliable service model basically documentation decision path program model model listing actor sure stateful service store listing locally stateless service fetch db decide good approach case,0,357,4,1.0,1,2017-05-26T09:25:59,0.0
44050579,660186.0,<c#><entity-framework><asp.net-core><microservices>,entityframework core loadbalance,pretty general question bear trip entityframework cache aka changetracker small microservice net core entity core microservice loadbalance roundrobin iis incommon guess call instance instance happen entry db example represent json simplicity load form answer instance modify firstname thomas save instance request entry request answer instance load cache changetracker unchanged people problem change tracker common answer rebuild dbcontext request utterly wrong expensive operation notice inserting datum slow slow time change tracker fill recycle microservice question problem reinitialise dbcontext request find answer allow disable caching single db operation add option db operation feel wrong reinitialise db context request overlook simple solution,0,92,9,0.0,1,2017-05-18T14:27:33,0.0
35820780,1325185.0,<python><dependencies><microservices>,handle dependency python micro service environment,background plenty micro service write python django flask matter intranet auth service notification service email internet communicator integration kind datum resource service user auth jwt hit data service change change trigger call notification service send notification question handle consider kind client service mind python package simply git module handle endpoint provider allow endpoint easy bother aim dozen service hit notification guess store provider repository package service appreciate advice,0,140,0,0.0,1,2016-03-05T22:37:48,0.0
35817536,2587904.0,<networking><docker><microservices><service-discovery>,local development dockerize microservice,start dockerized micro service couple code snippet local test setup service frontend connect backend api containerized work suppose full fledged service discovery solution access backend frontend docker naming service,0,118,2,0.0,1,2016-03-05T17:46:26,0.0
51108208,4343502.0,<python><django><microservices>,django authorization query parameter,write chat app register user send message component django base messaging microservice api send receive message simplicity url service visible internally potential spoof authorization base pass service query param process validate query parameter conventional canonical handle authorization type,0,34,0,0.0,1,2018-06-29T19:24:10,0.0
50971334,4287915.0,<php><laravel><jwt><microservices>,decode jwt create authenticate user laravel microservice merge local user datum,background microservice setup flow client external jwt laravel passport client send request api gateway external jwt api gateway send request auth server laravel passport external jwt auth server verify user active return internal jwt api gateway user profile group api gateway forwards request internal jwt microservice fine point microservice verify internal jwt auth server public key microservice decode internal jwt create user object profile microservice local user table microservice specific user datum merge local datum jwt data microservice authentication create jwtguard decode jwt create user genericuser auth php authserviceprovider php jwtguard php problem work ish authorization policy properly genericuser method easy merge local user object merge local user datum jwt profile leave genericuser function help help feel better proper achieve user genericuser allow authentication authorization feature laravel work properly merge datum easily,0,850,0,0.0,1,2018-06-21T14:42:41,0.0
51035215,797473.0,<java><docker><jar><microservices>,jar docker image jar java application,jar business functionality develop standalone component microservice host docker image create docker image follow tutorial problem call method class jar java application integration test decision convert jar rest base application microservice actual jar base packaging,0,91,0,0.0,1,2018-06-26T05:03:58,0.0
51093230,741156.0,<git><github><gitlab><microservices><project-management>,split monorepo accross multiple team access slice repo,lot good advantage monorepo read large company google facebook tech keep source code single repo question manage limit access team project work monorepo example microservice infrastructure service service api gateway service developer team service develop team team api gateway common repo project limit access team service monorepo gigabyte size team clone care project currently keep repo controll access control team migrate monorepo sure protect source code split project approach,0,133,0,0.0,1,2018-06-29T01:47:33,0.0
51096739,5547183.0,<amazon-web-services><amazon-ec2><microservices><aws-api-gateway><aws-load-balancer>,aws api gateway load balancer private subnet ecs connection microservice,vpc public nat gateway private subnet design microservice aw platform goal ec private subnet load balancer point ec private subnet api gateway point load balancer problem application load balancer instance public subnet load balancer accessible publicly service access api gateway read nlb vpclink ec instance public subnet luck private subnet,0,407,0,0.0,1,2018-06-29T07:44:38,0.0
50964458,8467343.0,<microservices><netflix-zuul><proxy-server>,zuul proxy server throw internal server error request time process,error request time process service zuul return response internal server error zuul rc release,0,228,0,0.0,1,2018-06-21T08:59:00,0.0
50935969,9964004.0,<microservices>,access database instance micro service,project microservice sql database node cluster node microservice instance service cluster suppose select query function microservice retrieve datum database instance instance query work datum divide datum instance service,0,17,1,0.0,1,2018-06-19T19:53:01,0.0
50930291,5313728.0,<microservices><netflix-eureka><feign>,eureka feign microwebservice fail startup,manage build microservice eureka server client server server feign ribbon call service service shutdown startup search problem find help resolve controller class feign proxy class call service bootstrap class application property file log,0,283,2,0.0,1,2018-06-19T13:58:06,0.0
51087521,3222249.0,<java><microservices>,authenticate request microservice,web application app store user credential db app talk microservice app db authenticate request send app app approach send user password send client app app app authenticate db success generate jsessionid send app whwn app communicate app jsession app validate allow approach good well approach,0,42,2,0.0,1,2018-06-28T16:20:42,0.0
50927770,5762424.0,<c#><.net><nuget><microservices>,net microservice cqrs handling dependency,hello advise people work microservice big scale thane todo example explain base thought architecture create system microservice architecture cqrs imagine microservice handle bunch command event microservice listen event general separate event contract microservice well overview simple diagram leave bus stuff handler logic inside hope obvious focus contract idea beginnig code microservice event domain solution event place separate library expose nuget nuget consume microservice implement handler base contract microservice solution microservicecode command handler business logic domaincontract event share service connect current solution domain microservicecode project dependency domaincontract domaincontract nuget realize microservice grow grow dependency start nuget hell dependency issue wrong nuget package share contract rest api json format eliminate nuget versioning discuss avoid hell dependency microservice work approach describe bad,0,298,2,0.0,1,2018-06-19T11:52:54,0.0
51090375,4527149.0,<spring><spring-boot><spring-security><microservices><spring-security-oauth2>,spring boot oauth implementation authorization server,create spring boot project view create microservice eureka server api gateway zuul proxy inter communication microservice security implement oauth api gateway oauth token endpoint spring version access token work spring boot google spring boot undergo change spring security default encryption decryption client client secret user password well change mysql database bcrypte datum prefiexed encryption type bcrypt work match user enter credential request return unauthorized response work smoothly spring boot version spring boot clue wrong throw light stick kindly correct wrong comment question clear update question work code snippet demo source understand small help appreciate edit log detail,0,1581,2,0.0,1,2018-06-28T19:54:25,0.0
56392595,9625776.0,<server><architecture><client><microservices>,client server architecture microservice architecture,implement document software project mobile app frontend microservice save user structure architecture correct client server architecture server implement microservice architecture understand wrong,0,284,0,0.0,1,2019-05-31T09:44:58,0.0
56388360,6037259.0,<microservices><spring-cloud>,internal service call api gateway zuul,eureka service discovery internal service call api gateway ribbon resttemplate feign client option,0,76,0,0.0,1,2019-05-31T03:37:25,0.0
56330447,2835893.0,<spring-boot><ssl><microservices><api-gateway><kong>,setup ssl comunication api gateway microservice,set environment api gateway kong microservices spring boot app lot doubt concern ssl communication ssl setting api gateway microservice currently microservice app ssl certificate container port implement api gateway sure remove microservice set api gateway add expect correct communication microservice api gateway order client consume service ssl,0,128,0,0.0,1,2019-05-27T17:45:50,0.0
56414189,903501.0,<domain-driven-design><microservices><event-sourcing><eventual-consistency>,access aggregate aggregate event source microservice architecture base domain drive design,three aggregate asset asset user income user income source profile entity relate manage user profile user profile status update income change asset change catch change asset income account profile service keep track asset income tackle event source good practice keep local store update profile service asset income aggregate tackle eventual consistency concern approach,0,38,1,0.0,1,2019-06-02T10:27:12,0.0
56503214,11389375.0,<rest><web-services><service><architecture><microservices>,independent micro service paradox,idea microservice microservice functionally idependent microservice specialize work domain microservice intend communicate find idea contradictory hypothetical business scenario service execute workflow step require auto translation business auto translation service restful api post source language target language text return translation perfect example standalone service reusable completely unaware consumer workflow service business leverage service service dependency service reasoning exteme service functionality break dependency move resquestion response rest message service publish translation request message translation response message publish translation complete service consume message service freeze workflow continue message arrive wait waiting true async wait workflow state persist translation message arrive day delay request response,0,38,1,0.0,1,2019-06-08T03:35:59,0.0
56477722,11197572.0,<node.js><microservices>,send huge datum size array object service service nodejs microservice,microservice architecture service request service service fetch datum database datum response service huge amount datum service unable send response print console thing work help service service rowdatapacket stamp player amount param note null money type type rowdatapacket stamp player amount param note null money type type rowdatapacket stamp player amount param note null money type type item send response,0,48,1,0.0,1,2019-06-06T12:35:05,0.0
56384228,234673.0,<microservices><dddd>,microservice service collaboration,context microservice architecture single business operation require collaboration service suppose order management service product catalog service user add order item order order management service persist orderitem object follow attribute order order management service fill productname attribute choice choice productname client app data previous request choice architecture api gateway gateway responsible retrieve productname product catalog service provide order management service choice order management service call directly product catalog service productname givent product choice order management service duplicate exhaustive product database data update time update event receive product catalog service choice ° trust client correct updated productname opinion good choice riana,0,53,2,0.0,1,2019-05-30T19:05:33,0.0
56422725,9673158.0,<java><spring-boot><spring-data-jpa><microservices><entity-relationship>,decision develop web application microservice spring boot common code relationship,develop small web application idea micro service architecture spring boot spring data jpa initial stage entity countryentity stateentity monolithic structure relationship entity countryentity stateentity notice extend baseentity share field baseentity query convert monolithic structure microservice describe create share library separate microservice share code add dependency microservice app baseentity define class constant utility repeat code microservice guide site share library expert advice share library repeat code well architecture relationship entity microservice architecture question feedback application entity relation directly indirectly example original application structure apply relation ship guide advance,0,54,2,1.0,1,2019-06-03T07:19:11,0.0
56487851,10719564.0,<ruby><sinatra><microservices><stateless>,scale ruby context,work create stateless microservice read enable application term scale sound application link provide sure function function pretty inactive state call replica function barely process happen require minimal attention trigger event,0,70,2,0.0,1,2019-06-07T04:12:39,0.0
56390237,9673158.0,<java><spring-boot><spring-data-jpa><microservices>,super base parent class microservice spring boot extend class child class,microservice project country micro state micro city micro entity country state city microservice define note microservice group pom xml entity common field create modify active base entity class field microservice monolithic architecture easily extend class define base class child class microservice architecture entity separate define service super class question constant class microservice monolithic structure constant class service define constant create separate service define constant microservice code redundant utility class monolithic structure explain structure guide define base class util advance,0,100,2,0.0,1,2019-05-31T07:02:33,0.0
56428901,6877472.0,<c#><.net><rabbitmq><microservices>,proper deploy microservice write asp net core web application production,project microservice api api gateway identitiy microservice activity microservice identity service activity service subscribe message rabbitmq proper deploy window server iis nix services dll windows services dotnet cli iis subscribe message keep application handle subscription dotnet service dll production iis nginx,0,233,2,0.0,1,2019-06-03T13:57:59,0.0
56349492,8099293.0,<postgresql><spring-boot><docker><redis><microservices>,docker environment production,docker start play follow setup app production server machine spring boot microservice server machine redis server machine running postgre docker server machine microservice container redi postgre container well server machine correct thing docker server machine container separately good practice,0,82,3,0.0,1,2019-05-28T20:15:23,0.0
56509701,8678400.0,<microservices>,small micro service,condition base system split micro service small micro service,0,109,3,1.0,1,2019-06-08T19:59:02,0.0
56373942,5079764.0,<spring-boot><spring-mvc><microservices><spring-cloud>,connection spring boot micro service monolithic spring app,spring app localhost requirement application connect micro service micro service component localhost localhost spring discovery server localhost connect micro service monolithic spring application discovery server directly connect localhost localhost discover server,0,38,4,0.0,1,2019-05-30T07:49:23,0.0
44432985,6555593.0,<azure><http><port><microservices><azure-service-fabric>,deploy service fabric project azure cluster,create project microservice listen port deploy azure cluster remote microservice work port,0,32,0,0.0,1,2017-06-08T10:19:05,0.0
44216244,1258559.0,<java><deployment><microservices>,good option java web service rest base jre jdk server jre,stumble option deploy java web service rest api build spring boot family install jre jdk server argument start service install server jre java command answer good practice perspective,0,295,0,0.0,1,2017-05-27T11:22:27,0.0
44361901,966698.0,<microservices><spring-jms>,redelivery jms message microserice,redelivery jms microservice example microservice system instance user service listener destination user service listener listener question time message deliver error function message deliver instance service message deliver,0,45,0,0.0,1,2017-06-05T04:55:51,0.0
44404941,2203868.0,<azure><microservices><azure-service-fabric>,service fabric communication listener service remoting,develop micro service azure service fabric case communication micro service read service remote support listener sf application exist stateless web api sf application listener list add serviceremotinglistener expose datum micro service wrong approach reverse proxy base communication bit concerned performance plan perform real time read operation service service,0,571,0,0.0,1,2017-06-07T06:19:34,0.0
44414323,484603.0,<rest><unit-testing><docker><microservices><external-dependencies>,test containerized microservice external dependency,build rest api microservice query local elasticsearch instance translate result accord internal protocol build docker image unit test build es connect private docker network reachable microservice build test fail wonder situation complicate testing framework dependency injection test kind container work practice,0,75,2,0.0,1,2017-06-07T13:38:56,0.0
44343697,5296452.0,<wcf><azure><asp.net-web-api><microservices><azure-service-fabric>,wcf service web api service fabric reliable service,luck find wcfcommunicationlistener well httplistner owincommunicationlistner inside reliable service listener provide soap functionality achieve wcfcommunicationlistener simple web api consumption pretty owincommunicationlistner provide wcfcommunicationlistener rest functionality consume rest api web api,0,154,2,0.0,1,2017-06-03T12:00:25,0.0
44265295,6181208.0,<caching><varnish><microservices><vert.x>,cache layer microservice,microservice duplicate call internal external service cache call service improve latency introduce api gateway major aim cache datum service objective call micro service aggregate response ii avoid multiple call external service micro services iii care cache hit external api call iv high throughput performance low latency vert base tech stack good implement system follow question implement library service data store consider redis hazelcast library varnish squid nginx help handle cache invalidation,0,708,3,0.0,1,2017-05-30T14:40:03,0.0
40837178,4185205.0,<spring-mvc><microservices>,spring microservice jboss,module separate folder war mvc layer main pom encapsulate module form war file customer license module unplug setting recreate war file effort struggle find proper example build hierarchy project structure guide,0,51,0,0.0,1,2016-11-28T04:26:30,0.0
40938756,5121282.0,<microservices><netflix-zuul><hystrix>,hystrix monitor microservice,microservice tutorial udemy technology eureka feign spring cloud config hystrix zuul example understand well hystrix monitor zuul work example notice hystrix main application access microservice monitor microservice zuul notice work proxy call microservice application question monitor microservice hystrix call zuul application hystrix monitor general advance,0,326,0,0.0,1,2016-12-02T18:27:15,0.0
40927853,591860.0,<java><cluster-computing><microservices><vert.x>,vertx instance isolate,isolate client relate browser app vertx service backend server side create separate isolated bus server service communicate frontend service bus internal event message fould classpath isolation isolationgroup feature backend service communicate backend module accessible work security gate outer external communication frontend module gate module subscribe message internal bus process send outer oposite subscribe outer message send internal bus internal processing idea,0,76,0,0.0,1,2016-12-02T08:36:19,0.0
40918134,2194364.0,<java><azure><microservices><azureservicebus>,npe receive message azure service bus queue,npe receve message queue message queue feel issue de serialize messages java lang nullpointerexception sun jersey api client clientresponse getresponsedate clientresponse java microsoft windowsazure services servicebus implementation servicebusrestproxy receivemessage servicebusrestproxy java microsoft windowsazure services servicebus implementation servicebusrestproxy receivequeuemessage servicebusrestproxy java microsoft windowsazure services servicebus implementation servicebusexceptionprocessor receivequeuemessage servicebusexceptionprocessor java receive delete option delete message throw npe operation create queue send message work fine thought code receive message,0,110,0,0.0,1,2016-12-01T18:43:01,0.0
40960601,2217600.0,<microservices><mesos>,share large file microservice mesos,mesos cluster type microservice produce large file gb file analyze file analyze microservice time producer service analysis service file delete option nfs producer service create file nfs analysis service directly shared folder concerned approach consume internal bandwidth cluster local disk prefer case enforce analysis micoroservice mesos slave producer service create specific file sure approach good practice case,0,134,0,1.0,1,2016-12-04T16:06:35,0.0
40930432,7235836.0,<spring-security><spring-integration><cas><microservices>,access secure backend service spring integration cas,seek solution migrate current holistic system microservice architecture spring integration spring security integrate secure service accord understanding secure backend service single sign sso jasig cas work fine spring security authenticate user centrally spring integration release spring security release create maven project module web service web application deploy three war file local tomcat version add jimi bob cas property file ensure pass authentication cas access url authenticate front application access forbid backend service pom file deployment description file web xml module display follow spring application context configuration file web module dispatcher servlet xml context configuration file service module dispatcher servlet xml follow additional code require fond spring integration wrong configuration share idea opinion suggestion advance,0,233,0,1.0,1,2016-12-02T10:49:30,0.0
40807126,5270073.0,<windows><azure><powershell><automation><microservices>,powershell script microservice,powershell script microservice,0,628,6,0.0,1,2016-11-25T14:25:28,0.0
39068073,6329755.0,<spring-boot><reverse-proxy><spring-security-oauth2><microservices><service-discovery>,spring boot redirect hostname local ip address discovery embed tomcat zuul proxy,develop application base micro service architecture microservie oauth hello web discovery server eureka reverse proxy zuul oauth authentication server sing hello web reverse proxy path url provide discovery server serviceid zuul simple application reverse proxy locate localhost oauth route uaa hello web route hello web meet problem development user hit localhost hello web forwards request hello web microservice request user unauthenticated hello web service redirect localhost uaa log user problem request user unathenticated hello web redirect localhost ip uaa discavery server change servername check forward host hello web debug localhost servername change hello web disable hello web gateway ip eureka user hit localhost hello web hello web ip reverse proxy discovery server request user unauthenticated hello web redirect uaa oauth server redirect uaa login user fill password redirect uaa user http user reverse proxy hello web localhost oauth localhost request hello web redirect directly localhost reverse proxy work fine happen spend couple day find solution question result note ect host discovery server eureka instance currently register eureka cookie spring io guides tutorials spring boot oauth test oauth client poor english,0,1890,0,0.0,1,2016-08-21T19:27:49,0.0
38970723,969328.0,<docker><microservices><mesos><marathon>,programmatically ip port dependent docker container create marathon,learn micro service architecture write small web app app follow component host docker container api gateway write nodejs place call marathon service docker container create service discovery mechanism mesos dns marathon lb guess change idea program advance help ps bridge network mode multiple instance service locate mesos slave natte random number,0,125,0,0.0,1,2016-08-16T09:04:40,0.0
38974070,3863943.0,<apache-zookeeper><microservices><apache-curator>,difference service registry discovery,difference service registry discovery zookeeper term microsesrvice,0,179,0,0.0,1,2016-08-16T11:45:10,0.0
39014049,2621486.0,<java><netty><microservices>,netty add httprequest server handle,microservice architecture project interservice communication message queue write gateway handle http request queue point service subscribe queue endpoint services base netty io request queue deserialise fullhttprequest send netty server handle accord business logic external httpclient example send localhost possibility send fullhttprequ instance netty server listening localhost netty api solution common approach,0,218,0,1.0,1,2016-08-18T09:03:54,0.0
44471051,193665.0,<authentication><authorization><token><jwt><microservices>,microservice environment producer verify jwt token,figure manage authorization microservice environment hypothetical scenario service provide authentication gem authorization oauth gem log service return token user suppose api server user provide jwt token api server order access private resource share jwt secret key sign jwt token api server decode token verify validity api server forward jwt token authorization service verify pro share jwt secret key api server round trip authorization service con share jwt secret key api server break api server access jwt secret key stuck third solution consider,0,272,0,1.0,1,2017-06-10T08:06:58,0.0
44564299,3418694.0,<microservices><linkerd>,linkerd display count request success failure rate,linkerd proxy request microservice linkerd file base service discovery request register admin dashboard port problem dashboard success rate failure rate request receive keep track request linkerd linkerd remember number request successrate failure rate screenshot problem,0,35,0,0.0,1,2017-06-15T09:48:26,0.0
44602525,4173251.0,<ipc><microservices><netflix>,service discoverability communication,create microservice architecture protocol thing service communicate automatic message translation example kind store service expose catalog distinct description format code adapter job time problem idea,0,37,0,0.0,1,2017-06-17T08:42:51,0.0
44571838,1720938.0,<java><activemq><publish-subscribe><microservices>,message base communication microservice,build number microservice send receive message message broker activemq explore option message type object type publish msg xml json format receive parse publish msg xml json format schema convert object create domain object add microservice dependency datum exchange option lean option mention reason field add microservice require field nee change version microservice deploy break exist communication microservice remain decoupled raise issue parse extract datum error prone design share experience solution well implement communication microservice messaging queue,0,293,0,0.0,1,2017-06-15T15:48:43,0.0
44601394,1726359.0,<rest><api><security><microservices>,desige activity base authorization system additional conditional check handle,desige activity base authorization system additional conditional check handle example follow authority allow user hit endpoint authority restriction base activity parameter fact authority effectively encode authority system follow authority authority mix filtering view authority tedious inflexible example follow authority allow user hit endpoint approval case hard encode hardcode authority note authority include jwt token transferable well good design system,0,40,0,0.0,1,2017-06-17T06:08:16,0.0
44535853,5348307.0,<api><security><microservices><api-gateway>,security consideration api gateway cluster,client communicate single point entry api gateway http restful api api gateway api key tracking analytic oauth api platform authentication user micro service provide user authentication authorization generate jwt sign encrypt jws jwe micro services determine permission base claim inside jwt micro service communicate internally pub jwt message info micro service scale multiple instance cluster load balancer question cluster api gateway load balancer front consider respect manage authentication sharing api key api gateway cluster extra note plan terminate ssl gateway bcrypt password db feedback great,0,96,0,2.0,1,2017-06-14T05:06:37,0.0
44456131,1376691.0,<c#><.net><asp.net-web-api><microservices>,work cache control webrequest webresponse,imagine number service microservice architecture service request response service service set header net work requested object cache object sort property class interface header neccessary parse string find implement support header manually,0,357,0,0.0,1,2017-06-09T11:02:40,0.0
44651737,2214751.0,<security><spring-security><jwt><microservices><spring-cloud>,replicate user role authorization server downstream microservice,implement application authorization server generate jwt token token include role user grant authorize user access resource gateway security add question regard user role security internal microservice user create grant set role grant point role add store authorization server replicate microservice framework spring security secure endpoint add role url hardcode user role security configuration downstream microservice find authorization server architecture api gateway public network communicate service discovery internal find microservice find service discovery zuul route situation secure communication internal network understand spring security authorization pass jwt token user role http client gateway unsafe http private network,0,359,0,1.0,1,2017-06-20T11:24:10,0.0
44626450,599920.0,<architecture><single-page-application><microservices>,good practice call api service single application,single application call variety web service api understand generally agree approach api service call spa currently approach party api direct call single application server side proxy order work cor enable api call call proxy wrapper responsible redirect appropriate endpoint decide approach kind datum manipulation call party api proxy direct call spa valid approach feedback st approach robust security point view st approach http cookie access token call party api api expose vulnerable advance,0,221,0,0.0,1,2017-06-19T09:10:14,0.0
44484346,2567005.0,<java><linux><bash><microservices>,bash command wait tcp port open,micro service open command bash script problem start second server jar start server jar detect check service listen network port archive sleep bash command option,0,1895,7,0.0,1,2017-06-11T13:24:50,0.0
41335071,5421659.0,<rest><logging><spring-boot><microservices>,central logging service microservice springboot service central logging service,develop restfull webservice springboot microservice architecture envirnment log service central logging service idea append log service consume log service request response advance,0,266,0,0.0,1,2016-12-26T18:39:58,0.0
41293238,305665.0,<.net><websocket><microservices><high-availability>,high availability websocket server,good set websockets server high availability net core microservice infrastructure current plan instance websockets server load balancer session affinity connection open subsequent message return instance instance fail client reconnect instance good set well primary concern high availability scale horizontally message broadcast browser client kind reliable message queue sure instance websocket server message case connection browser client alternative server stateless connection store redis cluster notify instance connection client help chris,0,542,0,0.0,1,2016-12-22T23:39:48,0.0
48361365,2629026.0,<java><angular><caching><search><microservices>,architect predictive search object,build search functionality gui provide search field search object oracle database currently object search grow number time month approx requirement user type text search example abc object db abc appear datatable system predict result base user type search field question architect feature simple load gui javascript object search js ridiculously fast performance issue query database everytime user type text search field convenient unnecessary load database well architect feature share thought,0,28,0,0.0,1,2018-01-20T21:38:41,0.0
48172337,3695868.0,<microservices><vert.x><service-discovery>,remove entry service discovery service,scenario instance verticle instantiate sure instance consume key keyx order check service discovery instance type record safely consume keyx publish record service discovery instance subscribe keyx instance check service discovery instance register keyx machine verticle instance serious problem verticle kill record service discovery case remove record method work method call instance create instance consume keyx case viable solution problem,0,39,0,0.0,1,2018-01-09T16:12:11,0.0
48269479,885363.0,<hibernate><db2><jhipster><microservices>,jhipster microservice application db,application depend stored procedure hibernate native jdbc call db microservice db database change database accept generation microservice gateway jhipster change db configuration manually db answer allow automatic code generation jhipster benefit gateway service registry load balancing configure second db jhipster configuration db datum quick answer subject regard ferda,0,321,0,0.0,1,2018-01-15T19:27:41,0.0
48363883,6233543.0,<amazon-web-services><lambda><microservices>,call service service aw lambda directly api architecture,time aw lambda api architecture implement serverless three microservice microservice host aw lambda aws api gateway router implement jason web token api gateway public url frontend url route api lambda real url url route api lambda real url api route url lambda real url basically currently client frontend call datum api number token api route url case api number call service number return client frontend currently call directly service number lambda real url api route url service number token justified,0,85,0,0.0,1,2018-01-21T05:09:18,0.0
48295080,7464193.0,<user-interface><jsf><glassfish><microservices>,jsf microservice base ui composition remote server,currently work project slice monolitic layer web application microservice web server glassfish frontend base jsf templating microservice host glassfish server rest communication ms ui microservice frontendmicroservice charge userlogin dynamic composition ui depend log user storemanger log storemicroserviceui productmicroserviceui load frontendmicroservice enterprisemanger log enterprisemanager microserviceui productmicroserviceui load frontendmicroservice frontendmicroservice provide frame navigation menu bar jsf appropriate task tag find approach jsf advance,0,631,0,0.0,1,2018-01-17T06:44:21,0.0
48241005,7321464.0,<spring><microservices><netflix-zuul>,security zuul gateway,set gateway server microservice zuul create authorization server issue token validate token gateway server zuulfilter request service validate parse token good implement suggestion solution helpful,0,499,0,0.0,1,2018-01-13T14:52:45,0.0
48261542,8374229.0,<azure><cloud><microservices><azure-service-fabric>,service fabric service instance failure notification,service notify guest executable service instance failure service stateless native service service guest executable service nodejs service instance service fail restart sf notification help appreciate,0,50,1,0.0,1,2018-01-15T10:54:11,0.0
48296421,3276084.0,<azure><docker><microservices><docker-container>,docker microservice architecture communication container,start work docker currently work setup project microservice architecture goal move service api container current architecture desire architecture question api gateway communicate internal service microservice api accept communication api gateway communication ideal authentication gateway microservice jwt token basic auth problem architecture host azure integration test desire architecture example ef sqlite inmemory integration testing easily accessible api work database locate container,0,306,1,3.0,1,2018-01-17T08:16:40,0.0
48374452,8216501.0,<java><spring><microservices>,dao seperate module monolithic considering extendable microservice future,create project database spring boot client gateway code rest endpoint server wrong project currently monolithic change microservice architecture future dao separate module dependency module consider database rdbms nosql hope work question confuse start project advance,0,204,3,0.0,1,2018-01-22T03:54:23,0.0
46476622,1464660.0,<api><microservices><kong><api-gateway>,authenticate api gateway kong public microservice,web app publicly access internet app web server monolithic set api app call include user authentication expose api gather datum user query limited set datum account code allow write custom dashboard datum collect api api call web ap set api gateway manage request load example gateway limit user request ten minute user api key request kong kong carry api query http post web server web server publicly verify request api gather data kong jwt approach sense simply kong server jwt issue web server post web server kong jwt reject logical setup api gateway microservice private network kong communicate verify authenticity request kong handle current setup jwt approach sense,0,530,0,0.0,1,2017-09-28T19:09:16,0.0
46453447,3066788.0,<azure><kubernetes><microservices><kubectl><istio>,instal istio kubernetes automatic sidecar injection istio inializer yaml validation failure,install istio automatic sidecar injection kubernetes environment consist three master node build azure azure container service marketplace product follow documentation locate enable accomplish modify kubernetes master add restart kubernetes master unix command step documentation apply yaml assume documentation intend user clone istio repository step unmentioned follow error occur attempt execute mention flag error generate sure problem appear relate block unsure incorrect block instal version kubernetes suspect versioning mismatch follow question deploy version kubernetes azure acs fairly work kubernetes help greatly appreciate time,0,635,0,1.0,1,2017-09-27T17:01:22,0.0
46434569,1987258.0,<asp.net-core><microservices><health-monitoring>,net core microservice recursive health check,health check dependant health microservice url check full health check microservice check database dependencie microservice hypothically recursive health check net core microservice,0,1174,0,0.0,1,2017-09-26T19:42:53,0.0
46308297,6806646.0,<node.js><google-app-engine><microservices><dispatch>,reason dispatch yaml route microservice locally node js app microservice,eventually deploy node js app microservice google cloud platform develop locally dispatch file route associate modules dispatch yaml file dispatch yaml map exist app file main app app js micro service create autonomous application map example microservice service app js start main app server terminal browser respond expect message main app hello receive type browser respond dispatch yaml work deploy time appreciate help,0,208,0,0.0,1,2017-09-19T19:22:51,0.0
46388219,771061.0,<go><microservices><nats.io>,nat io queuesubscribe behavior timeout,evaluate nat migrate exist msg base software find documentation msg timeout exception overload example subscriber choose aware timeout setting post publisher notify additional time extension elect subscriber aware dbms connection complete bounce message nat server pickup subscriber post message ciao diego,0,582,1,0.0,1,2017-09-24T08:40:56,0.0
46514002,2182398.0,<java><ejb-3.0><microservices><wildfly-swarm>,wildfly swarm lookup ejb remote interface,generate simple wildfly swarm project ejb facade remote interface second lookup send message second client wildfly swarm version ejb facade lookup path client add client dependency pom xml dependency client solve problem pass security credential client lookup project,0,627,1,0.0,1,2017-10-01T15:42:14,0.0
46329712,763398.0,<.net><asp.net-core><microservices><azure-service-fabric><service-fabric-stateless>,service fabric package activation error,follow error attempt linux service fabric cluster error change window cluster fail entypoint sh script window bash linux cluster apparent fail inside initialization code find add download log linux box console startup class program cs find specific error debug service fabric environment help appreciate perfview find event relate package activation hint actual issue issue help technique great thing strange comment code main method exact error fail framework dll sort netcore runtime instal machine service fabric,0,873,2,0.0,1,2017-09-20T18:50:56,0.0
46343630,7680381.0,<node.js><microservices><pact><pact-node>,pact js willrespondwith arbitrary order array,consumer service provider service list user provider answer arbitrary ordered list fine pact execution consumer side fine execute provider site example snippet interaction ignore order return item mocha test impact comparison order array help interaction mocha test connect advance,0,115,2,0.0,1,2017-09-21T12:12:52,0.0
47119752,2655756.0,<architecture><rabbitmq><apache-kafka><microservices><scaling>,scale parallel consumer microservice,project microservice rabbitmq kafka technology question answer differ consider three event create product create profile delete product event duplicate datum service consumer message execute correct order database consistent consumer slow process message add consumer parallel point uncertain event execute event lead inconsistent database delete create find subject solution hard implement scale consumer difference handle rabbitmq kafka,0,263,0,0.0,1,2017-11-05T08:46:43,0.0
47013636,7912321.0,<microservices><pact><pact-broker>,pact framework msa sdks,introduce pact company consumer call api provider sdks host port dynamically determined kubernete backend technology understand deal impossible host port pom xml dynamic,0,37,0,0.0,1,2017-10-30T11:01:50,0.0
46997840,0.0,<javascript><node.js><heroku><microservices><pivotal-cloud-foundry>,handle request minute micro service,ve node js application handle follow ve create module analyzing work file ms analysis create file assume serve client create micro service warp functionality basically create stateless cloud deploy cloud cloud foundry heroku handle question handle multiple request ve request minute … understand work async afraid request app crushed … queue scaling,0,52,0,0.0,1,2017-10-29T07:30:51,0.0
47058984,8869151.0,<rabbitmq><microservices><spring-amqp>,microservice spring amqp rabbitmq async call microservice good pattern,three microservice service service call asynchronously build response base response rabbit mq async ipc rabbittemplate convertsendandrecieve direct replyto option consume current processing thread wait block async call complete synchronous convertandsend service listen reply queue process base correlation response reply queue map message base correlation result poor performance create separate queue session option caveat acknowledgement cluster queue creation impact performance problem solve help internet help appreciate,0,348,0,1.0,1,2017-11-01T16:03:52,0.0
47069673,8295908.0,<spring-boot><microservices><netflix-eureka><netflix-zuul><api-gateway>,call external service msa api gateway zuul spring boot application,spring boot micro service application zuul proxy edge service api gateway call external service register eureka server micro service architecture call external service api gateway advance,0,609,0,0.0,1,2017-11-02T07:20:18,0.0
47129599,2759366.0,<microservices><zipkin><appdynamics><apm><opentracing>,appdynamics log request response,appdynamic request response exchange microservice system call trace find detail pass call,0,151,0,0.0,1,2017-11-06T04:07:26,0.0
47020906,4684626.0,<architecture><microservices>,microservice datum model,architectural question microservice datum source table simmilar field connection read datum good practice create microservice model object source create generic model generic service serve datum,0,168,0,1.0,1,2017-10-30T17:20:37,0.0
47023636,8761117.0,<google-app-engine><cron><microservices>,continuously service google cloud engine,figure service receive call microservice architecture basically service service receive call datum service mention receive spawn instance service scale notice number call limited service active min service active,0,47,1,0.0,1,2017-10-30T20:27:28,0.0
47049241,8470712.0,<node.js><websocket><socket.io><ejs><microservices>,socket io simple service monitor,small service pe service host server service pe deploy service second bring datum continuously ejs render data simple tabular format datum url service response time status service datum change ping socket io option scenario feasible simple,0,57,1,0.0,1,2017-11-01T06:16:55,0.0
53991654,3810749.0,<cross-platform><microservices><azure-service-fabric>,mingling service fabric programming model environment,container guest executable reliable service instal operate azure premise service fabric environment,0,25,0,0.0,1,2018-12-31T21:45:46,0.0
54034122,5203951.0,<load-balancing><microservices><health-monitoring>,service mark unhealthy busy,health check simple ping pong test service response unhealthy unhealthy alarm mark service unhealthy busy responsive short time overload health check state point connect busy service work properly count healthy service load balancer connect service return status refuse incoming request mark unhealthy,0,37,0,0.0,1,2019-01-04T06:38:50,0.0
53917566,5631372.0,<python><html><rest><microservices><tornado>,visualize microservice rest api html,general question expect code answer example nice reference subject reading python code microservice rest api tornado ui friendly example file book py api py addhandler py add book type list book type friendly user enter site press add book deliver textboxe author list book current output code,0,46,0,0.0,1,2018-12-24T20:46:53,0.0
53876454,2203275.0,<rest><api><microservices>,api design microservice,design microservice application difficulty rest api design scenario microservice application service customer order follow database service pattern customer service basic endpoint represent customer resource problem design endpoint order service order belong customer solution satisfy problem solution customer service datum customer work feel follow normal api design guideline guideline subject api design microservice architecture exist,0,71,0,0.0,1,2018-12-20T21:45:18,0.0
53873511,10116037.0,<scala><playframework><microservices><service-discovery>,port play microservice guice module,start play application random port port start microservice instance connect service locator eureka port host retrieve port running play service question time answer work,0,87,0,0.0,1,2018-12-20T17:32:30,0.0
53914183,2929562.0,<microservices><spring-cloud><spring-cloud-feign>,org springframework beans factory beancreationnotallowedexception error create bean eurekaautoserviceregistration singleton bean crea,develop spring boot microservice example reference link example start start service error thing notice instruction clear execute code mention clearly book,0,858,0,0.0,1,2018-12-24T13:38:05,0.0
53930700,10820054.0,<spring-boot><microservices>,metric support spring boot application,spring boot spring boot admin wallboard metric metric support spring boot application,0,111,0,0.0,1,2018-12-26T10:23:31,0.0
53949531,10335281.0,<microservices><event-sourcing>,event source event stream clarification,microservice project face problem suppose table reservation service compose microservice restaurant service manage restaurant owner table reservation service manage reservation validation workflow event stream restaurant entity pretty simple streamid restaurantid event tableadde tableremove incremental eventid replaying event aggregate trivial reservation current event stream design restaurantid streamid event reservationaccepted reservationrefuse append stream algorithm responsible validation reservation request previous follow reservation hour book time incoming request reservation booking time account event replay design event replay request summarize reservation tomorrow system replay reservation month ago relate incoming request refer moment lead inefficiency time result huge amount unnecessary event replay solve daily snapshot wrong idea advance kind help,0,135,0,0.0,1,2018-12-27T18:48:11,0.0
53959982,2929562.0,<microservices><spring-cloud><netflix-eureka>,error create bean eurekainstanceconfigbean singleton bean creation allow singleton factory destruction,question extension windows machine version correct error error url suggestion clear complete error trace,0,2709,0,1.0,1,2018-12-28T14:22:17,0.0
53933182,2578883.0,<spring-boot><architecture><apache-kafka><microservices><spring-cloud-netflix>,microservice cross service validation decoupling,imagine vehicle service booking service classic spring boot eureka zuul stack book vehicle validate example vehicle exist well call vehicle service booking service application remain decoupled facade microservice check well pattern validation ensure decouple forget validate datum,0,195,0,0.0,1,2018-12-26T14:07:53,0.0
53920055,9088011.0,<java><database-design><architecture><nosql><microservices>,design micro service scenario,design application micro service architecture java spring boot case user create account portal user view browse online educational course add course shop cart user buy course online payment user view play course purchase query micro service create relate datum map user purchase course rdbms foreign key constraint datum relate scenario micro service architecture database suitable architecture datum store request specific solution,0,60,1,1.0,1,2018-12-25T06:56:01,0.0
53939682,8735547.0,<java><spring-boot><junit><microservices><spring-test>,pro con type spring testing,current project work microservice web app unit test cover code notice approach testing spring inject controller invoke method directly form proper request cookie header call test authentication approach spring testing dis advantage type junit approach junit approach,0,94,1,0.0,1,2018-12-27T04:17:56,0.0
53939646,1433218.0,<spring><mongodb><microservices>,good practice audit log user activity micro service,microservice architecture log user activity mongo database table good store retrieve audit log,0,752,1,0.0,1,2018-12-27T04:10:13,0.0
53850869,7290845.0,<spring><kubernetes><microservices>,scale api kubernetes base application,build api kubernete cloud base orchestrator reference spring tomcat microservice automatically scale hpa vpa scale time react load inaccurate depend configuration question request api kubernetes spawn pod client api wait second response time approach behaviour elegantly,0,50,2,0.0,1,2018-12-19T12:04:31,0.0
53985744,3701985.0,<spring-boot><docker><microservices><resttemplate>,httpclienterrorexception inter service communication period service running time,team stick silly case httpclienterrorexception overview work scenario micro service stack follow thing mysql database keycloak user management eureka discovery zuul reverse proxy zipkin sleuth tracer microservice hotel relate hotel entity record hotel crud hotel user account relate microservice room room microservice price price microservice scheduler microservice keep track datum update syncs system third party scheduler spring scheduler cron purpose code preparedataforsync datum hotel check current state change deduct pass third party real problem rest service call list hotel scheduler service docker environment service container communicate docker networking start service include hotel scheduler work fine hour follow exception log service syncing third party service call check log correspond hotel service log display service request receive datum collect write response stream exception receive response exception log hotel service restart scheduler service start work hour issue workaround currently set cron server restart service hour bad workaround rely production root problem google httpclienterrorexception base question sense require edit docker stat output schedular gib gib mb top output inside container,0,98,3,0.0,1,2018-12-31T09:25:56,0.0
53886119,1797038.0,<c#><asp.net-core><architecture><microservices>,set property set private domain object cqrs,bit confused set private follow confusion private property context domain object user input fromform reality objecta pass controller frombody property send constructor automatically defeat purpose guess fully understand concept private set domain object,0,56,4,0.0,1,2018-12-21T14:05:31,0.0
53881096,8024812.0,<azure><active-directory><azure-active-directory><microservices>,link user profile store db azure active directory account,azure active directory openid oauth authorization authentication keep user profile microservice service user preference service store specific field require product store active directory custom field search good azure ad field connect user profile active directory account candidate upn case jwt objectid read friendly unique multi tenant structure unique display ui recommend azure recommend good field case,0,48,6,0.0,1,2018-12-21T07:58:48,0.0
40657733,6793312.0,<java><spring><spring-boot><datasource><microservices>,reload change share data base,spring boot service share data base service data source communicate db problem apply change data source change affect reload second data source question reload change apply change datum source reflect second data source,0,30,5,0.0,1,2016-11-17T14:39:54,0.0
40685900,4734831.0,<microservices><azure-service-fabric>,service fabric address service stand cluster,set three node standalone cluster place application cluster three service application configure instance service reside node three service front service receive request external client communicate service addressible cluster response external client program write communicate front service http request currently external client send request service instance node ip address port problem approach node address external client client longer address service front service node question external client call front service service fabric specific node communicate hope communication method allow request route alternate node original node receive request,0,293,0,0.0,1,2016-11-18T21:03:22,0.0
40525468,6280755.0,<java><documentation><swagger><microservices><swagger-2.0>,java localdate displaying swagger,dto field java localdate type jackson annotation set format work good swagger version object true dipsay string format work solve,0,4671,0,1.0,1,2016-11-10T10:36:57,0.0
40671392,1866300.0,<wcf><azure><microservices><azure-service-fabric>,service fabric client exit,build azure service fabric app service cache object code client console window call service breakpoint add step program exit exception throw print program exit code service healthy state find wrong investigation transaction inside service service fault code service special,0,67,0,0.0,1,2016-11-18T07:15:05,0.0
40518729,883644.0,<c#><rabbitmq><microservices><masstransit>,masstransit producer second consume event,project masstransit topshelf windows service call console app client communicate call requirement follow send consume command publish consume event problem step work fine step consume event happen second event publish error display second consumer receive call timeout wait consumer exit rabbitmq localhost problemsolve queue prefetch code service endpoint csproj testconsole csproj,0,233,12,0.0,1,2016-11-10T01:35:44,0.0
53536133,3445775.0,<microservices>,microservice service write message topic service,statement pro con,0,20,0,0.0,1,2018-11-29T09:51:08,0.0
53579572,4324059.0,<spring-boot><sh><microservices>,spring boot start multiple service shell script sh,write shell script backend server spring boot start multiple microservice order service depend good practice course start simultaneously afaik ensure service start properly service start service springbootapplication assume possibility read create symlink development purpose,0,288,0,0.0,1,2018-12-02T10:59:44,0.0
53531259,9567948.0,<rest><microservices>,set rest api write constitute microservice,write rest api flask flask restplus help interact frontend ui javascript backend python rest api interact rest api provide gitlab cache return datum client cache implementation classify micro service,0,34,0,0.0,1,2018-11-29T03:06:51,0.0
53554622,2385088.0,<spring><spring-boot><spring-security><oauth-2.0><microservices>,grant type selection oauth implementation,build web base application spring boot micro service plan oauth openid connect implement authentication authorization application grant type choose implement oauth application single application angular js front spring boot service backend,0,41,0,0.0,1,2018-11-30T09:24:47,0.0
53513318,7505813.0,<nginx><kubernetes><microservices><kubernetes-ingress><nginx-ingress>,expose service kubernete barematel,kubernetes version barematel master multiple microservice inside kubernetes cluster currently expose service cluster microservice nodeport maintain list correspond microservice barematel feature lodebalancer expose microservice problem multiple master worker inside cluster static ip dns master time access service cluster time address master master gown change microservice address master address static ip dns master well expose microservice nodeport feature loadbalancer baremetal help,0,69,0,0.0,1,2018-11-28T06:22:52,0.0
53535911,10657318.0,<json><rest><spring-boot><microservices><jsonschema>,enforce json schema validation rest endpoint verify integrity json response,work develop rest endpoint spring boot consume resource microservice external service development phase lot change request response frequently time micro service fail change response target microservice avoid failure define json schema call client describe expect response schema mismatch log error message prefix json schema mismatch advise well solution handle generic microservice well duplicated code,0,70,0,0.0,1,2018-11-29T09:39:35,0.0
53523022,7831388.0,<spring-boot><microservices>,jms listener microservice,microservice expose rest endpoint display billing datum microservice message listener max min listen queue process billing good practice message consumer microservice long,0,92,0,1.0,1,2018-11-28T15:35:35,0.0
53477270,6858184.0,<google-app-engine><google-cloud-platform><microservices>,create multiple gae project microservice single web application cross post,cross post create web application microsevice architecture creation multiple gae project introduce type realize microservice multiple service multiple project accord google cloud platform term service create multiple gae project microservice build single web application action term service document introduce approarch puzzle create multiple gae project microservice single web application description term,0,101,0,1.0,1,2018-11-26T08:35:18,0.0
53541566,3396278.0,<kubernetes><microservices><diagram>,tool generate diagram yaml file,tool microservice diagram yaml file create file import visio,0,692,0,0.0,1,2018-11-29T14:44:49,0.0
53544715,8518863.0,<google-app-engine><google-cloud-platform><microservices>,microservice,learning process convert monolithic gae app microservice architecture understand app separate service communicate category request handle service designate file determine service consider online job board website follow functionality user role company post entity job seeker create entity correspond user role authenticate company manage jobseeker manage list guide thinking process separate app microservice,0,72,1,0.0,1,2018-11-29T17:39:52,0.0
53532800,3547536.0,<architecture><cron><jvm><queue><microservices>,well recur task specific interval time queue cron,system collect system garbage collector memory snapshot system statistic micro service application datum interval monitoring reporting purpose solution tradational approach multiple cron job define interval queue delay mechanism perform job understand queue delay message queue concurrent worker resolve problem well queue cron develop scalable maintainable system,0,45,2,0.0,1,2018-11-29T06:06:22,0.0
53429508,10690591.0,<http-status-code-404><microservices><cumulocity>,return error userboostrap microservice,develop microservice cumulocity follow create application response url application application bootstrapuser return error help,0,64,3,0.0,1,2018-11-22T11:02:40,0.0
48799257,7100519.0,<kubernetes><microservices><istio>,configure assign private network ip publicip pod istio,face issue automatic assignment public ip pod deploy sample bookinfo application istio application cloud configure istio kubernetes assign private network ip pod automatically assign publicip local machine understand local machine deployment publicip automatic choice public private network ip pod possibility configuration,0,40,0,0.0,1,2018-02-15T02:42:14,0.0
48804675,2890048.0,<visual-studio><powershell><azure><visual-studio-2017><microservices>,connect servicefabriccluster cluster endpoint reachable check connectivity firewall dns issue,create deploy application party cluster visual studio powershell stick follow error power shell visual studio power shell visual studio nb application result solution,0,315,0,0.0,1,2018-02-15T10:14:45,0.0
48715395,3584729.0,<docker><.net-core><docker-compose><microservices>,docker container unable connect,build microservice solution docker compose locally netcore service project visual studio connect work fine docker connect service externally service unable connect inspect docker container network assume small setting configuration find issue docker compose code idea mess port luck connect internally httpclient path port help appreciate info,0,323,0,0.0,1,2018-02-09T23:05:51,0.0
48840474,2781389.0,<java><sql><spring><spring-batch><microservices>,spring batch execute stor proc conditionally,spring batch application read processing write itemwriter database csv file read process write dao implementation store procedure update follow setup requirement unable update insert database match update insert second level match dao business logic prefer java code store proc keen example achieve return result row update inserted decision update insert second identifier,0,106,0,0.0,1,2018-02-17T10:45:43,0.0
48784283,1645230.0,<oauth><authorization><microservices><access-token><laravel-passport>,oauth authentication laravel passport mobile app,laravel passport authorization mobile app sure place place mobile app pass api authenticate token detail keep server side env variable security purpose user client secret user application,0,370,0,0.0,1,2018-02-14T10:00:01,0.0
48707364,651422.0,<microservices><consul><spring-cloud-consul>,restart server node failure consul,newbie microservice develop microservice spring actuator consul service discovery fail recovery configure cluster explain consul documentation configure consul watch trigger service execute shell script restart service follow configuration file help greatly appreciate regard chrishan,0,438,0,0.0,1,2018-02-09T13:48:54,0.0
48650993,3734640.0,<spring><microservices><spring-cloud-stream><spring-rabbitmq>,spring cloud stream create exchange consumer service startup,microservice microservice create exchange microservice configure exchange application property problem face service start service create type service starting follow error configuration change delete existing create set,0,499,0,0.0,1,2018-02-06T19:59:35,0.0
48835919,7101706.0,<microservices><azure-service-fabric><service-fabric-on-premises>,service fabric reserve protect hardcoded port,landscape application micro services micro service expose application cluster web server micro service business functionality front micro service handle load balance hard code port onprem inside micro service hard code specific port http endpoint manifest problem witness micro service business functionality steal port micro service hard code start service correctly sf port sequentially hard code micro service port micro service random restart grab solution hard code micro service reserve high range hard code port example service fabric port keep service service grab delay issue instance big fan hard code port port range cluster example applicationendpoint range set cluster hard code microservice user work sure unintended consequence create great option greg,0,136,1,1.0,1,2018-02-16T22:46:00,0.0
48784692,8374229.0,<azure><microservices><azure-service-fabric><azure-cloud-services>,azure service fabric pass datum guest executable time,stateless service spin guest executable demand pass datum service creation time guest executable,0,143,1,0.0,1,2018-02-14T10:18:56,0.0
48801894,6029176.0,<c#><.net><dll><microservices>,dll microservice reside system,requirement simple system component interact component build dll interact object component xxx remove component xxx system user install component xxx xxx extensible pluggable component develop build independently user functionality provide xxx dll install xxx dll standalone component xxx dll interact component system yyy object component bind object xxx dll component communication xxx yyy component happen component communicate web service interface lead pointer proceed idea search regard micro service good feasible approach,0,312,2,1.0,1,2018-02-15T07:25:00,0.0
48624302,9094803.0,<git><docker><jenkins><microservices>,jenkins git build change folder,multibranch pipeline project jenkins jenkins job consist build dotnet core docker image push docker repository start container jenkins slave compose file solution file project separate folder number increase docker image container moment project build image compose file problem build change image build app change filter unchanged folder build,0,120,2,0.0,1,2018-02-05T14:02:08,0.0
48810786,4588730.0,<microservices><amazon-sqs>,sqs consumer detect receivemessage event sqs scalable,aws sqs message queue send datum detect infinite loop event trigger scalable accross handle event moment receive message wonder suitable handle message pass microservice well handle thing,0,292,3,0.0,1,2018-02-15T15:30:43,0.0
36569703,2068521.0,<config><microservices><netflix-eureka>,set local path yaml configuration file microservice,property file github location read uri path read local system guide,0,2326,0,0.0,1,2016-04-12T09:51:32,0.0
36599435,5969171.0,<architecture><microservices><azure-service-fabric><disaster-recovery>,servce fabric stateful service recover corruption,scenario service fabric application production stateful service bad happen state system inconsistent problem corrupt state state couple issue hear people view visualise datum service implement sort dump datum function handle happen debugger hard datum service identify datum corrupt customer figure root problem assume deploy version affect service special time code corruption suggestion,0,88,0,0.0,1,2016-04-13T13:09:23,0.0
36734091,2944955.0,<authentication><microservices>,add custom scope uaac,work cf uaa define application specific custom scope user report scope include token token validate report microservice serve token scope question define custom scope add user good achieve kind requirement,0,411,0,0.0,1,2016-04-20T04:51:02,0.0
36694873,4075772.0,<php><session><authentication><silex><microservices>,token stateless auth silex application microservice architecture,silex base framework couple service client apis mobile web generally avoid cookie session header setup flow achieve user login mobile app webpage produce request authservice domain token response well register token store user access web mobile app product domain token read header check store beautiful silex add header request follow login step add response request middleware st auth add token app btw sure understand user press refresh button set header custom header lose case keep token persist header cookie session example code token set response chrome set request well middleware suggestion achieve stateless auth header multiple service plain silex php keep token cookie api gateway session,0,752,2,0.0,1,2016-04-18T13:05:31,0.0
36638486,6102669.0,<node.js><api><microservices>,unable node js seneca microservice,node js node microservice seneca framework follow error seneca js yeoman generator create project help project directry follow structure package json,0,279,5,0.0,1,2016-04-15T04:50:05,0.0
36176403,2721773.0,<oauth-2.0><spring-boot><jwt><microservices><api-management>,spring boot microservice oauth jwt security,develop spring boot application payment microservice consume mobile application web application user authenticate access mobile app third party mobile app service authenticate app web application service authenticate user detail db ldap plan integrate ibm api management deployment premise server base requirement design implement solution blog confused proper guidance helpful,0,1488,0,0.0,1,2016-03-23T11:04:25,0.0
36174288,2771818.0,<docker><virtual-machine><containers><docker-compose><microservices>,dockerize application machine,apologize question basic start learn docker concept clear docker fully functional virtual machine transform server set service container start read dockerizing application instance learn read coordinate multiple execute instruction start wonder good approach well lean state better point describe case create environment provide tomcat service deploy servlet postgresql database ideally service database host port good practice create container tomcat database well ship container create container framework orchestrate appropriate task,0,257,1,0.0,1,2016-03-23T09:29:47,0.0
36116835,1845545.0,<asynchronous><microservices>,recommend pattern consume asynchronous microservice client,case microservice expensive time service consume client read pattern good practice consume example websocket server send result client constant polling lease kind poll client acquire lease minute renew minute response response client wait result ready cleanup easy client abandon request love hear good practice event drive microservice architecture,0,183,2,0.0,1,2016-03-20T17:12:48,0.0
42380585,4416258.0,<microservices>,good load configuration microservice docker container,build springboot application containerize inject configuration service code hard code application property file multple profile dockerfile accept variable dspre profile active environment cmd start app container exp applciation property spring profiles dev spring profiles prod load property file host machine app inject container start exp docker env file environment dev property myapp latest good industry inject property microservice app advantage disadvantage keep configuration close app prefer inject dependency app start understanding prefer configuration closer container minimal dependency small change warrant build deploy second option advantage app code image require change inject update configuration container restart,0,41,0,0.0,1,2017-02-22T00:33:00,0.0
42395345,748323.0,<.net><azure><microservices><azure-service-fabric><service-fabric-stateful>,service fabric reliable collection datum loss service upgrade,reliable collection empty micro service upgrade invoke event ondatalossasync restore state external backup large scale system base stateful service haspersistedstate set true datum replicate replicas case vm failure datum valid recover ondatalossasync upgrade collection empty upgrade option remove keep auto ugrade application result collection empty decide replicate datum blob storage recover service update perfect solution datum recovery minute service unavailable inconsistent time solution allow save datum upgrade,0,573,0,2.0,1,2017-02-22T15:13:29,0.0
42392301,4257705.0,<spring-security><jhipster><microservices>,cross origin jhipster microservice,create microservice jhipster security mechanism uaa problem cross origin issue prevent log communicate uaa server message chrome browser gateway port uaa port resolve cross origin issue microservice architecture help,0,381,0,0.0,1,2017-02-22T13:04:11,0.0
42449160,7579796.0,<java><architecture><communication><jhipster><microservices>,architecture communication microservice,jhipster project microservice architecture example gateway microservice store second skill centralise store database skill second data repository evolve speed hand central point infrastructure order update esb software jhipster great easily crud service tricky point store define skill simple service skill store skill central point datum imagine entity architecture skill store link entity json generate jhipster skill service entity skill store service entity store entity link skill crud store crud skill point story,0,407,0,0.0,1,2017-02-24T22:12:42,0.0
42519116,5386429.0,<docker><microservices><azure-service-fabric><azure-pipelines><azure-pipelines-release-pipeline>,vst build release continuously integrate deploy docker container azure service fabric,question azure documentation sample linux container insight tutorial hope light effectively case microservice base application microservice microservice docker container visual studio team service build capability build container image push docker hub vst release capability individually deploy microservice container service fabric cluster microservice independently develop update entire application service fabric redeploy changed microservice container respective node custom solution add task build release vst docker build shell script task call script update application manifest service manifest kick update service fabric cluster,0,515,1,0.0,1,2017-02-28T21:32:02,0.0
42571279,7643454.0,<spring><spring-boot><spring-cloud><microservices><spring-cloud-netflix>,spring boot micro service handle impact change microservice,question build microservice spring boot spring cloud netflix feature service discovery eureka circuit breaker hystrix intelligent route zuul client side load balancing ribbon plan docker container deploy manage tool docker compose docker swarm kubernete configuration microservice assume service service service independent micro service develop developer assume developer sync developer commit change service break functionality service call service purpose service aware change service efficiently handle situation advance,0,107,1,0.0,1,2017-03-03T05:23:46,0.0
42462663,1183671.0,<dependencies><microservices><relationships>,microservice depend,moment deal micro service question regard relation service hard time find good answer good practice great hint advice handle question direct specific project clear follow example let‘s assume build kind youtube channel observer log kind channel‘s meta datum video hourly view count currently subscribe import specific time interval major feature app offer form microservice add remove channel watch manager service import import service service provide api communicate manager service connect database channel watch basic contact channel observe channel currently subscribe import service database time series orient video hourly view count add channel channel url contact add import service modify user import service totally useless manager service manager service user channel bad case channel url import service total depend heavily general architecture problem import service depend datum manager service database great degree modifie good idea share manager service database service accessible provide api matter database share service model class channel fine share architecture good idea assume service basic channel,0,570,3,0.0,1,2017-02-25T23:02:54,0.0
47957575,1180020.0,<git><go><microservices><directory-structure>,microservice project monolit git repository,write microservice project keep monolit git repository project problem microservice locate gopath symlink project git support symlink option keep monolit repository project microservice edit good practice keep microservice git golang project,0,262,2,0.0,1,2017-12-24T02:16:37,0.0
48097374,9018943.0,<microservices><spring-cloud><netflix-eureka><netflix-zuul><spring-cloud-netflix>,netflix zull path config,eureka zull follow config zull user service micro service endpoint request work fine store path microservice request zull duplicate,0,35,0,0.0,1,2018-01-04T14:29:07,0.0
47922096,3863943.0,<java><microservices><hystrix><circuit-breaker>,circuit breaker pattern,fallback method actual method return return type return string fallback method return object actual method,0,304,0,0.0,1,2017-12-21T09:44:55,0.0
47975940,8585202.0,<node.js><npm><microservices><dependency-management>,nodejs micro services share dependency,build microservice application nodejs build app month start big private module share code service face anther problem duplicate code require module public module service call file build anther private module purpose include module dependencie control update work good problem ide phpstorm scream dependency service package json autocomplete reason package json dependency package anther technique achieve,0,112,7,0.0,1,2017-12-26T08:36:28,0.0
48145352,8735568.0,<amazon-web-services><docker><microservices>,spring boot microservice deployment docker,develop spring boot microservice deploy docker develop sample microservice learn docker container deployment find documentation instal docker building image application container packaging doubt deployment procedure deploy spring boot microservice docker create separate image docker file spring boot microservice postgresql database include connection docker image file manage separately,0,400,1,0.0,1,2018-01-08T06:35:43,0.0
48124856,1957373.0,<laravel><microservices>,internal app api gateway microservice,micro service architecture app laravel luman api gateway forwards request internal app auth service forwards response client side service user role port sure client access api gateway port internal service person client network environment firewall correctly,0,409,1,0.0,1,2018-01-06T06:22:33,0.0
48008198,4716474.0,<google-app-engine><cron><microservices><app-engine-flexible>,gae microservice dedicated cron job microservice,background write multiple service gae microservice application micronservice service default java gae standard environment cron job whearea microservice service python gae flexible environment cronjobs deploy service cron job replace late service cron job task queue share resource gae microservice cron job share impossible microservice dedicate cronjobs base service scope uploaded server cronjobs exist timely response highly appreciate,0,155,0,0.0,1,2017-12-28T13:14:49,0.0
47939726,1076232.0,<microservices>,micro service reference foreign key,micro services account micro service registration verification wallets micro service create wallet deposit withdrawal application create account create wallet verify user consider user identity mange account micro service wallet service store reference account entity external user account micro service store reference wallet entity external wallet concerned account micro service hub store reference practice consider,0,233,0,0.0,1,2017-12-22T10:15:47,0.0
48141031,5446671.0,<mysql><docker><spring-boot><docker-compose><microservices>,spring boot app scale mysql,create spring boot app database mysql dockerise deploy docker compse yml spring application yml file problem replicas form service scale refer database accord micro service architecture separate database replica,0,252,1,0.0,1,2018-01-07T20:02:45,0.0
37617556,889309.0,<azure><endpoint><microservices><azure-service-fabric><stateless>,optimized http service invocation azure service fabric,application host azure service fabric application stateless reliable micro service app depend app depend addition service depend owin host rest api service request call figure optimized httpclient call resolution side publish uri fabric optimize call implement listener http endpoint client service remoting endpoint interface call address resolution work case short code sample immense help raghu,0,344,0,0.0,1,2016-06-03T14:53:21,0.0
37521011,837342.0,<logging><spring-boot><wso2><microservices><msf4j>,wso microservice msf handle logging,assume msf micro services service interconnect good mechanism log main concern log separate micro service add log component micro service case create separate log file case good find debug log field relation user core relation field best open source log tool visualize log filter multiple log file core relation,0,425,1,0.0,1,2016-05-30T08:28:54,0.0
37684678,1378525.0,<node.js><git><jenkins><docker><microservices>,integration test microservices nodejs jenkins docker,typically configure jenkin build microservice multiple nodejs services rabbit mongo test service follow service rabbitmq mongo nodejs service nodejs service test unit integration dockerfile configure jenkin enable clone thesis service time container rabbit mongo container test service generate tap coverage report report tap coverage jenkin plugin work commit image push docker registry lie stack google easy imply ton bash wrong input,0,749,0,0.0,1,2016-06-07T16:31:18,0.0
56916068,4946302.0,<cloud><microservices><chunking>,standard method chunk multiple server,context client send file server chunk single server setup option store chunk server chunk arrive add exist datum multiple server micro service request send server server work chunk fail retrieve chunk good practice handle pattern route request regard file server store chunk file shared service problem start defeat advantage multiple server problem require lot file transfer canonical standard handle,0,24,0,0.0,1,2019-07-06T16:59:39,0.0
57054450,6259603.0,<java><spring-boot><docker><microservices><google-kubernetes-engine>,deploy docker image google cloud kubernates,microservice apigateway common gateway requestwith zuul proxy configservice config server property file registryservice service registry eureka server homepageservice service register eureka config service productservice service register eureka config service local order registryservice configservice service apigateway homepageservice productservice work fine create docker image provide config docker container push gcr create account google cloud free yr image repo fine deploy image gke individually deploy linking deploy service share code snipet registryservice property apigateway propertie configservice propertie homepageservice property docker image sample,0,36,0,0.0,1,2019-07-16T09:46:25,0.0
57042045,9550807.0,<database><database-design><architecture><microservices>,user setting service database design,task build service microservice user setting service purpose service store setting user system setting form key pair feature requirement service service design scalable read service design easily plugable extensible future introduce type user set system easily doable minimal additional effort currently stage database design modelling service question good practice principle example industry type service relational sql relational nosql database fit case read wonder nosql fit case time store key pair setting alternative design consider assume nosql fit solve problem nosql database choose experience nosql database market pick,0,57,0,0.0,1,2019-07-15T14:36:55,0.0
57042875,7691891.0,<rest><microservices><zeromq><messaging>,zeromq socket change communication mechanism microservice rest,transform cleanly communication base http api message communication zmq library,0,65,0,1.0,1,2019-07-15T15:27:39,0.0
56969108,750378.0,<testing><integration-testing><microservices><acceptance-testing><12factor>,testing tool approach support factor app,follow java microservice development construct testing infrastructure conform factor app test push system test factor app good test harness tool approach detail effective microservice follow factor app find bug test harness effective factor microservice mine instance develop microservice introduce bug catch unit test catch occur local logic plumbing piece java code javascript code helm chart docker file environment variable strengthen coarse grain test integration component acceptance test lead multiple question relate factor app coarse grain test directly production environment mock integration component test break test system test follow factor app find lot tool material test java microservices advice factor app mention advice testing approach support factor app appreciate,0,76,0,2.0,1,2019-07-10T10:50:22,0.0
57076929,10011121.0,<kubernetes><microservices><kubernetes-ingress><static-ip-address><kubernetes-service>,kubernetes expose multiple container service ingress static ip,deploy nodejs application separate container kubernetes define service ingress static ip ssl certificate deploy micro service kubernetes engine gcp add second micro service container pod work good define three yaml file deployment yaml service yaml ingress yaml deployment yaml service yaml ingress yaml configuration service reachable add multiple port service yaml receive error goal expose domain custom host backend reachable specific path api reachable endpoint help,0,114,0,0.0,1,2019-07-17T13:22:57,0.0
56934252,6522259.0,<microservices><grafana><prometheus><resilience4j><prometheus-java>,integration resilience prometheus,integrate resilience prometheus micro service integrate micro service resilience prometheus problem prometheus resilience query http default populate prometheus dashboard resilience query matrix populate kindly help advance add dependency resilience prometheus integration resilience matrix prometheus dashboard,0,205,0,0.0,1,2019-07-08T11:48:01,0.0
56947435,592192.0,<domain-driven-design><microservices>,split aggregate bound contexts,example describe case model bound contexts attribute step belong base aggregate mapping sense return user user reference owning bound context aggregate attribute relevant aggregate sum aggregate share aggregate mapping,0,28,1,0.0,1,2019-07-09T07:30:59,0.0
56956497,11201898.0,<architecture><microservices>,share datum multiple microservice,follow scenario create application application service application create specific check distribute accessible user service product service idea send message service service bus extend datum process datum application service application service user service product service applicaton service second idea store relevant datum redundant service application service copy user product datum idea don feel well approach,0,40,1,0.0,1,2019-07-09T15:58:12,0.0
57016667,1670437.0,<kubernetes><microservices>,start pod base event,start kubernet pod base event kafka event event work complete base bring pod bring pod case minimum replicas pod keep require day,0,40,1,0.0,1,2019-07-13T06:16:53,0.0
57095364,11317073.0,<java><spring><jwt><microservices><feign>,microservice security config microservice,user microservice deal relate user include security create user login reset password jwt token security config security secure microservice basic crud user microservice create feign interface crud microservice controller successfull call user microservice jwt token crud microservice security config user microservice essentially secure crud microservice endpoint user microservice unable find solution search internet,0,62,1,0.0,1,2019-07-18T13:13:18,0.0
57077796,11772394.0,<c><microservices><executable><cloudfoundry><binaryfiles>,deploy native binary standalone microservice pcf dev,case deploy compiled native executable microservice pcf compiled executable call mycbinary inputfile outputfile terminate operation microservice lrp task pcf palance rely existence microservice standalone microservice long achieve case pcf possibility microservice terminate binary work test feasibility push compile code pcf dev cf push understanding standalone app pcf cf push helloserviceagain helloworld process route push crash follow message wait app start start unsuccessful cf exe logs helloservice log file entry process crash type web push command expect parameter start problem message log file cf push helloservicegcc gcc hellogcc hello process route follow additional question message process crash type web error command call multiple time second push succeed suppose create compiled executable expect root directory output file create access local file system question newbie pcf business,0,115,1,0.0,1,2019-07-17T14:04:23,0.0
57038673,9786294.0,<spring><spring-boot><docker><microservices>,communication microservice deploy docker container,microservice deploy aw inside container scenario microservice communicate microservice work public url microservice public url performance slow help microservice communicate localhost inside docker container,0,56,2,0.0,1,2019-07-15T11:22:20,0.0
57020255,9585273.0,<spring-boot><spring-security><jwt><microservices>,secure communication microservice jwt,build microservice spring boot auth service create jwt microservice rest api theoretically user access microservice token create microservice pass token microservice verify token integrity microservice communicate microservice good example great,0,54,3,0.0,1,2019-07-13T14:56:22,0.0
57115138,648478.0,<c#><asp.net-core><microservices>,net core microservice deploy window freeze day work fine,microservice develop listen port call return json develop person server window work well day moment return json call access server rdp microservice console frozen log press key microservice work day problem appear sooner minute restart microservice problem netstat problem lot open socket program start program cs action return consult sysadmin find normal understand microservice program person country copy paste server behave,0,77,3,0.0,1,2019-07-19T15:02:20,0.0
56943156,743191.0,<java><microservices><micronaut>,disable consul configuration local,create simple micronaut app local consul config feature code connect property consul key store configuration bootstrap yml fine consul local computer involve network activity startup avoid consul local dev test prod environment code app annotation load db schema local default consul disabled app local load base consul configuration code change environment option set vm option dmicronaut config client enable false load bootstrap yml connect consul,0,82,3,0.0,1,2019-07-08T22:17:11,0.0
57075199,3478780.0,<docker><microservices><scalable>,scalability instance work,application support actual load deploy instance application load balancer distribute load instance understand point synchronize instance suppose instance post petition load balancer redirect instance post petition update map instance petition return map load balancer redirect instance return void map instance understand type scalability,0,44,5,0.0,1,2019-07-17T11:53:40,0.0
57012476,937532.0,<docker><asp.net-core><microservices><razor-pages><aws-fargate>,net core razor login authentication container load balancer,build app net core razor host aws fargate docker instance sure handle login authentication attempt traditional login method claim hope work work single task container load balancer fall apart fargate cluster scale task http response code bad request expect problem cookie base find example correct implement razor authentication microservice docker load balanced situation configure cookie jwt token magic net option turn work authentication work scenario special middleware edit ideal scenario store credential database validate info create kind cookie token work razor load balance fargate docker containerize scenario edit bad request error add find sure horrible idea clue behavior appear log request container log dump login current authentication,0,57,10,0.0,1,2019-07-12T18:39:30,0.0
45698451,2239843.0,<angular><rest><api><single-page-application><microservices>,store account customer datum spa restful api gateway,develop spa angular microservice orient architecture meaning api gateway expose api spa api gateway microservice customer service api gateway responsible authentication proxy underlie microservice moment authentication handle oauth encrypt cookie consider api gateway expose endpoint customer order spa spa customer case handle situation store customer account specific datum spa browser call restful api gateway api gateway expose endpoint well datum authenticate user call relate microservice meaning expose endpoint customer order customer specific localstorage feel good store account customer specific datum browser discussion input,0,54,0,0.0,1,2017-08-15T17:42:31,0.0
45626670,7035592.0,<python><mongodb><python-3.x><pymongo><microservices>,generate number mongodb,implement microservice flask application service mysql service mongodb pymongo service link integer field mysql mongodb generate sequence number alphanumeric character change schema mysql,0,1084,0,0.0,1,2017-08-11T03:47:52,0.0
45782033,568844.0,<protocol-buffers><microservices><grpc>,common protobuf datum type microservice architecture,implement kind microservice architecture software maintain multiple team grpc protobuf serialization mechanism point point communication goal decouple business logic application logic hand allow uis span multiple business contexts hand microservice handle datum identical datum handle microservice context advisable extract common proto data type handle separately import dependency microservice reuse multiple service well focus decouple microservice share common data type share architecture,0,342,0,0.0,1,2017-08-20T12:17:52,0.0
45666983,7637321.0,<design-patterns><microservices><enterprise-architecture>,microservice pattern appropriate transfer large datum file,large jason file mb processing multiple microservice good enterprise architectural design pattern entire datum file microservice order process,0,421,0,0.0,1,2017-08-14T03:19:17,0.0
45629284,3609849.0,<node.js><microservices><service-discovery>,manage nodejs microservice service discovery,develop microservice nodejs deploy application server service random port set config file programmatically service manage service discovery eureka consul manage service discovery,0,692,0,0.0,1,2017-08-11T07:24:12,0.0
45695032,260511.0,<java><architecture><analytics><microservices><aggregation>,aggregate raw datum analytic microservice architecture,aggregate analytic backoffice analytic spec cross system microservice create raw datum question aggregate raw datum analytic purpose create service analytic service aggregate raw datum service push datum prepare aggregation backoffice final result service aggregate analytic backoffice send request cache aggregate result microservice,0,198,0,1.0,1,2017-08-15T14:30:39,0.0
45735971,1147536.0,<cloudfoundry><microservices><scaling>,scale cloud foundry app memory split instance,application deploy cloud foundry scale achieve command scaling horizontally adjust number instance vertically adjust disk space limit memory limit suppose scale application instance gb memory instance gb memory memory divide instance result gb memory instance,0,252,0,0.0,1,2017-08-17T13:07:02,0.0
45626777,297115.0,<rabbitmq><jms><activemq><message-queue><microservices>,inter process service communication message queue,develop application base micro service architecture communicate service asynchronously plan message queue rabbitmq activemq jms approach message queue achieve inter process communication,0,560,1,1.0,1,2017-08-11T04:03:21,0.0
45794390,7731375.0,<angularjs><testing><docker><phantomjs><microservices>,test angular app docker environment open browser,currently unit test case angular app docker environment ng test open browser prod happen ng test browser phantomjs work error warn karma capture browser open info karma karma server start info launcher launch browser phantomjs unlimited concurrency info launcher start browser phantomjs building modules module active rxj observable promiseobs warn karma capture browser open localhost warn launcher phantomjs capture ms killing warn launcher phantomjs kill ms send sigkill warn launcher phantomjs kill sigkill ms continue,0,561,1,0.0,1,2017-08-21T10:05:58,0.0
45729153,5542014.0,<logstash><logback><microservices><spring-cloud-sleuth>,spring sleuth logback integration log display service,microservice add spring sleuth receive log expect info microservicename true io exec cibc icap mycontroller eligible vote requirement pass log application logstash server create logback xml add dependency logstash logback encoder add appender logback xml net logstash logback appender logstashtcpsocketappender logback xml log pass application logstash problem log microservice expect log add logback xml info bootstrap cf bc cf bc true nio exec cibc icap assessmentcontroller link logback xml,0,2192,1,1.0,1,2017-08-17T07:35:57,0.0
45644454,8452960.0,<spring><spring-mvc><controller><microservices><axios>,consume microservice spring,learn java spring consume microservice create form html send user password axio code error set url postman error,0,41,2,0.0,1,2017-08-11T22:10:47,0.0
45762128,6823013.0,<c#><microservices>,microservice architectural clarification,microservice architecture application companyservice orderservice transactionsevice user log load order company order companyid load transaction order transaction orderid security thought sure user load save transaction order belong company transactionservice company companyid check save check orderid belong company pattern,0,86,3,0.0,1,2017-08-18T17:36:48,0.0
42006876,5967828.0,<java><rest><components><microservices>,communication java process microservice,realise microservice architecture three process windowns machine communicate paradigma microservice push context system frontend webapp execute tool script lie backend machine server component rest interface webapp frontend communicate toolboxexecutor rest controller communicate toolsyncer trigger toolboxexectutor refresh git repository tool three component big load logic service rest controller sake microservice three independent java application track,0,45,0,0.0,1,2017-02-02T16:02:48,0.0
42025000,3501052.0,<tdd><microservices><identityserver4><atdd>,identityserver acceptance test,start project create authentication api identityserver follow tdd microservice website authenticate user figure acceptance test project help highly appreciate note read,0,91,0,0.0,1,2017-02-03T13:03:22,0.0
42115903,3765648.0,<design-patterns><microservices><restful-architecture>,single microservice public internal simultaneously,three microservice place author ability select crud entity author book ability select crud entity book mobile app host build mobile client respond full data model request mobile app enrich datum example api mobilehost getallbooksofgivenauthor respond author book call author getauthordata authorid merge datum book getbooksbyauthorids authorid result structure question mobile client read datum mobile app host add author mobile app host contact author service directly crud proxie case,0,101,0,0.0,1,2017-02-08T14:32:20,0.0
42060090,44512.0,<spring-boot><mule><microservices>,mule api manager manage spring boot base service,create spring boot base service deploy exist mule api platform realize challenge face service discovery policy management specific manage policy spring boot service mule api manager agent mule service,0,913,0,1.0,1,2017-02-06T03:52:07,0.0
42079952,1893668.0,<java><redis><microservices>,microservice handeling event redis pubsub,create microservice listen redis pubsub channel persist event db test case spin instance microservice listen channel thing face event receive instance update db time prevent action event instance elect perform update,0,252,0,0.0,1,2017-02-07T01:00:07,0.0
42061684,4709792.0,<microservices>,microservice redundancy issue architecture,microservice deploy application server problem microservice specific function lot library repeat microservice share large monolithic service app ear file large microservice memory error start happen well,0,298,4,0.0,1,2017-02-06T06:36:51,0.0
38647186,1383163.0,<database><hibernate><microservices>,microservice base architecture database access,push develop set microservice personal project essentially elastic search poll datum store place datum read datum data store expose rest api user purpose example booking ms sale ms thing occur handle data storage ms data store introduce persistence ms handle datum micro service odd ms share database handle transaction case service handle persistence bloat micro service point lot boilerplate code large footprint library example hibernate require library project terrible ms load set library suppose overriding question accepted methodology manage database connectivity micro service architecture,0,797,0,0.0,1,2016-07-28T21:40:04,0.0
38858550,3645827.0,<domain-driven-design><microservices><consistency>,microservice bound contexts,sake question microservice identity management account microservice tightly couple database accounting invoice invoice issue agent agent account exist user identity microservice understand well datum identity management user copy accounting agent copy datum bound context invoice proper correct keep datum consistent share contexts time user create identity microservice event usercreate publish account service interested event listen process add correspond agent update user,0,405,0,0.0,1,2016-08-09T19:04:09,0.0
38737317,4334448.0,<java><amqp><microservices><hystrix><spring-cloud-stream>,spring cloud stream conflict hystrix,restcontroller hystrix spring cloud stream channel implementation hystrixcommand getdeclaredmethod productuicontroller find fallback method enablebinding hide class method reflection clue workaround,0,162,0,0.0,1,2016-08-03T07:39:20,0.0
38863716,1465402.0,<microservices><lagom>,update lagom rest api,example lagom develop micro service architecture system chirp cargotracker update exist entity instance follow entity rest uri sugguestion content viewcount author update api suggestion viewcount http api suggestion http api suggestion http post disadvantage approch define seperately data class field update directly suggestion entity introduce mutable change aginst principle lagom deep copy state update change field introduce mutable change well option,0,230,0,1.0,1,2016-08-10T03:24:42,0.0
38739188,2068521.0,<docker><docker-compose><dockerfile><microservices>,docker compose start,file config server docker file registration server dockerfile start docker compose check docker type status,0,141,1,0.0,1,2016-08-03T09:09:06,0.0
38764797,6647870.0,<wso2is><spring-cloud><microservices><oauth2><netflix-zuul>,accesstoken spring cloud zuul api gateway,zuul api gateway spring cloud extract access token zuul implementation provide suggestion implement,0,598,4,0.0,1,2016-08-04T10:26:02,0.0
55026430,11140333.0,<microservices><netflix-zuul>,zuul forward error internal server error,achieve zuul forwarding error zuul userregistration microservice call microservice api usersearchdelete userregistration microservice call service eureka server service springboot st localhost eveythe work fine dockarise service container zuul forrwarding error refer application yml file github repos service register eureka help bug wrong github issue reference error,0,271,0,0.0,1,2019-03-06T15:17:24,0.0
55044321,5084982.0,<microservices>,duplication dynamic datum microservice architecture,dynamic datum share microservice instance service project document project document project member project member access project document store project member document update time member add delete project perform access check well query project member time user query project document,0,16,0,0.0,1,2019-03-07T12:55:20,0.0
55034981,11162924.0,<architecture><microservices><software-design>,functional categarization microservice versus entity base categorization,start work project involve usual website authentication service time split website micro service confused split micro service entity micro service customer relate functionality entity functionality service micro service authentication user microservice service user website share thought,0,31,0,0.0,1,2019-03-07T02:10:08,0.0
55087251,9014245.0,<mongodb><docker><database-design><architecture><microservices>,micro service database mongodb docker set container,create app micro service architecture mongodb nodejs docker read micro service database guess microservice live separate container guess micro service container respect database live micro service container micro service container mongo image nodejs image micro service container app container database implement time container volume remove wonder set database container properly apply micro service architecture advance feedback,0,31,0,0.0,1,2019-03-10T11:36:34,0.0
55048462,3160275.0,<api><authentication><architecture><microservices>,authentication microservice decouple,simple project couple microservice user microservice control user relate staff user creation update user authentication project stick bit implement simple jwt authentication refresh token question authentication logic user microservice keep separate create auth microservice choose second option separate auth microservice handle creation user create firstly auth service call user service create user service create auth service,0,58,0,0.0,1,2019-03-07T16:22:43,0.0
54946122,3038643.0,<kubernetes><architecture><apache-kafka><microservices>,architecture group pod configuration interact kafka,advice structure kubernete base application data producer read datum file kafka topic couple partition base logical separation datum consumer read datum kafka partition producer write multiple partition consumer read partition file process producer complete consumer live forever listen datum partition create individual pod producer consumer wonder best organize deployment deploy pod en masse file producer ingest partition consumer assign currently feed argument supply list file kubernete create create crash producer process file set partition kubernetes create pod partition lot documentation case pod service identical interchangeable lot talk service pod configuration role advance,0,66,0,0.0,1,2019-03-01T13:55:35,0.0
55058304,2229772.0,<docker-compose><microservices><jhipster><browser-sync>,jhipster microservices frontend development hot reload,create jhipster microservice application frontend development launch microservice stack docker compose directory work expect registry microservice gateway uaa instance status exception throw login work expect launch gateway project directory launch development server webpack browsersync hot reload work expect point browser problem question log user user work account retrieve throw exception irrelevant state account null point browser log user login backend work docker microservice suspect conceptually network port idea point find solution setup practice develop frontend jhipster microservice configuration,0,107,0,0.0,1,2019-03-08T07:05:21,0.0
54927202,10202349.0,<typescript><angular6><microservices><angular-routing>,redirect application external url application load angular,case app component check user authenticate redirect user rest api call login current code api redirection call constructure app component happen html app component load second redirection place redirect user rest api url html dom element load screen,0,158,0,0.0,1,2019-02-28T13:47:03,0.0
54917442,11128291.0,<events><domain-driven-design><microservices><event-sourcing>,event sourcing cqrs event drive architecture commerce checkout funnel,checkout follow service order service create order collect ship payment place order manage life cycle order inventory service provide availability product shipping service provide delivery option cost customer profile service provide customer credit service authorization payment reservation service reservation flow order creation order create user provide shipping address shipping option calculate payment collect order place confirmation user retailer checkout sync order service orchestrating event source cqrs event store order service create order event persist event store publish domain event service subscribe event store update delivery option ship cost payment complete order cqrs inform user status step review understand complex checkout application domain event checkout add ship address reservation delivery option selection add payment complete order quick sync operation order service orchestrate checkout request eventual consistency case failure handle evertual consistency,0,217,0,0.0,1,2019-02-28T02:23:06,0.0
54932740,1839104.0,<microservices>,notification microservice api queue,microservice architecture create centralised notification microservice send email sms user option create notification kafka queue microservice send notification notification microservice listen queue send message notification service restart lose message message store queue second option add notification message api notification microservice easy microservice call api oppose integrate queue api internally send message notification kafka queue send message issue api error lose message recommendation good handle,0,297,1,1.0,1,2019-02-28T19:15:36,0.0
54950154,11011037.0,<microservices>,convert rdbms monolithic database microservice architecture base database,plan convert tightly couple rdbms monothetic database microservice architecture database oracle database server exist oracle database schema serve application functionality split rdbms basis business functionality create schema basis business functionality splitting exist database object basis business functionality newly create schemas face issue table materialize view overlap schema object overlap schema create common schema table materialize view newly create common schema provide grant common object require schema schema require report create reporting schema schema table database provide grant table reporting schema schema question exercise follow microservice architecture realistic draw design exist application database micro service base database,0,88,1,0.0,1,2019-03-01T18:13:19,0.0
54930397,1348593.0,<api><web-services><service><architecture><microservices>,double api,moment customer db domain … majestic monolith deploy instance rail app big customer deploy instance rail app future thing fetch compute heavy datum instance guess instance request secret access token issue trigger call domain call webhook double api concept,0,29,2,0.0,1,2019-02-28T16:39:47,0.0
54954373,1727204.0,<schema><microservices><decoupling><event-driven-design>,data model schema decouple datum processing pipeline sue event drive architecture,wonder microservice streaming pipeline base event drive architecture decouple data model perspective implement datum processing pipeline event drive architecture data model critical microservice decouple business perspective decouple data model share service ingestion pipeline collect datum multiple source data model normalizer microservice require normalize datum model common data model downstream consumer challenge data model change reason easily manage change level change break consumer application easily introduce cascade modification microservice solution technology decouple microservice scenario,0,58,2,1.0,1,2019-03-02T01:22:56,0.0
54910653,8398143.0,<spring><microservices><consul><spring-cloud-consul>,consul authentication microservice architecture,help understand consul authenticate micro services micro service architecture replace micro service authentication oauth consul,0,62,2,0.0,1,2019-02-27T16:54:35,0.0
55036187,615636.0,<spring-boot><spring-data-jpa><spring-data><microservices><dependency-management>,spring data jpa project dependency spring boot project,microservice project spring boot access entity dao dependency create spring data jpa project idea multiple microservice dependency jar assemble spring boot data jpa project lot dependency include starter dependency spring boot microservice project build jar spring data jpa entity repository find clear example achieve sure thinking advance,0,46,3,0.0,1,2019-03-07T04:37:06,0.0
54918357,2522221.0,<c#><microservices><nservicebus>,nservice bus sql transport,understand sql server nservicebus net core microservicea send command microserviceb common project solution share mycommand structure db schema nservicebus example endpoint send receiver microserviceb mycommand publisher microserviceb subscribe receive microserviceb sure data store publish event command setting environment sql transport local sqs prod,0,92,3,0.0,1,2019-02-28T04:21:26,0.0
55060659,464610.0,<events><design-patterns><architecture><domain-driven-design><microservices>,share event code microservice architecture,work microservice architecture microservice fire event rabbitmq event identify event code moment code event trigger hard code const string declare inside microservice fire event problem microservice subscribe event duplicate event code string error prone event code rename microservice subscribe event code change bad alternative declare event code microservice fire event consumer microservice directly access code declare microservice fire event case event declare create source code dependency microservice bad create source file microservice event code application source file share microservice case event declare create global dependency microservice single responsability principle bad tackle problem,0,106,3,1.0,1,2019-03-08T09:53:32,0.0
54962823,11140333.0,<spring-boot><docker><containers><microservices>,configure eureka server microservice eureka client zuul inside separate docker container,newbie spring boot docker write microservice user registration service create user mysql database interact search delete service rest template eureka client github user search delete service search delete mysql database eureka client github eureka server service discovery github zuul server api gateway eureka client github spring boot st develop service spotify dependency build docker image service st localhost window work fine three service mention register eureka server work choose dockerize service create docker image service problem eureka server user registration service sperate container service register eureka fact service register eureka eureka client user registration service find eureka server find eureka server container ip eureka client connect server eureka server client command link container eureka server client work eureka server client command pass host eureka image client find eureka server host link container work help understand wrong eureka client register eureka server container objective service eureka server application service container service register eureka server call api postman soap ui,0,507,8,0.0,1,2019-03-02T20:45:59,0.0
57666275,80544.0,<json><api><http><https><microservices>,good practice result boolean,work api provide json response item typically bool case option consider return string return null option truthy implement api result false positive clear human reader second result falsey provide clarity human reader result,0,9,0,0.0,1,2019-08-27T00:19:32,0.0
57546341,11772394.0,<spring-boot><microservices><pivotal-cloud-foundry>,spring boot file conversion microservice cloud foundry user provide service,spring boot rest microservice expect input file convert file format ffmpeg call command moment java processbuilder reference container location input output file push microservice pcf ffmpeg binary input file package file understand cloud storage nfs location secondary matter idea microservice pcf user provide service bind app supply location input convert file conversion function correspond endpoint conversion function example respect microservice database url credential access external database light mind follow question simply convert conversion microservice pcf user provide service command sure supply parameter endpoint bound app call endpoint service provide location input output file appreciate code snippet possbile,0,33,0,0.0,1,2019-08-18T16:17:52,0.0
57599098,1301315.0,<docker><kubernetes><microservices>,restrict kubernetes pod process,kubernetes cluster docker image app set app service load balancing path routing nginx ingress app specific restrict process request time process half hour well kubernetes cluster great kubernete solution track process pod allocate request process auto scale delete pod scale application request,0,34,0,0.0,1,2019-08-21T20:58:38,0.0
57548657,9591240.0,<java><design-patterns><microservices><software-design>,separate dataservice invoke service,build restful service interact microservice routine task fetch datum restful service filter match exist datum return response question good design pattern separate step datum filter class second simply instance call service return list country filter condition inclusion eu creation case option better separate class method filter class public method private well follow pattern solution maintainable extensible,0,35,0,1.0,1,2019-08-18T21:55:04,0.0
57620606,1602853.0,<amazon-web-services><docker><architecture><microservices>,microservice cost,move micro service face debate deployment single docker container issue aw single docker container ec instance consider micro service deploy multiple docker container ecs fargate cost effective scenario resolve,0,53,0,0.0,1,2019-08-23T05:59:49,0.0
57556336,11946223.0,<java><spring-boot><microservices><jhipster><consul>,configuring https consul gateway microservice result zuulexception forwarding error,situation implement jhipster microservice application microservice gateway microservice app consul service discovery work perfectly long http consider production unencrypted connection viable option modify configuration file tls http gateway microservice application tls yml gateway microservice tls configuration identical content keystore key pair problem consul spring boot application start error register correctly consul access gateway application web browser lead follow error gateway application gui stacktrace port microservice application result apis microservice reachable functionality crud,0,59,0,0.0,1,2019-08-19T12:02:15,0.0
57563842,5084737.0,<django><microservices><multi-tenant>,multi tenant application fit microservice base architecture,saas base multi tenant monolith application build django divide microservice base architecture sure divide application correct partition aspect care case monolith application easy understand tenant model decide schema microservice service multi tenant service multi tenant,0,68,0,0.0,1,2019-08-19T20:54:41,0.0
57702473,5110704.0,<python-3.x><microservices><cumulocity>,debug start cumulocity microservice write python,enable log microservice developpe python hello microservice glitch microservice start upload zip file wait hour docker locally issue call rest point microservice return assume reason microservice upload start properly enable log find wrong,0,63,1,0.0,1,2019-08-29T03:09:09,0.0
57552738,589490.0,<kubernetes><microservices><istio><distributed-tracing>,istio sidecar distribute tracing jaegar,evaluate istio sidecar proxy feature distribute trace currently pass tracing header accept application code header header configure pass request pod ingress level change code order achieve tracing service,0,58,3,0.0,1,2019-08-19T08:10:13,0.0
47236551,701829.0,<microservices><lagom>,remote persistent view lagom,classical microservice architecture relevant domain event publish messaging system allow system react imagine three microservice customer order recommendation recommendation microservice customer order provide functionality list customer order analyze machine learn algorithm state customer join order recommandation microservice recommandation microservice listen domain event publish customer order build state lead logic duplication logic inside customer order relevant domain message customer order state specific customer order work fine service build materialized view big load customer order customer order publish heavy weight event domain event allow microservice build materialized view process domain event allow duplicate logic keep pattern drawback figure implement lagom,0,90,0,0.0,1,2017-11-11T09:51:04,0.0
47314410,3890902.0,<docker><amazon-elastic-beanstalk><microservices><amazon-ecs>,multiple ecs service single ec instance elastic beanstalk,create microservice docker web service push create image ecs deploy elastic beanstalk place docker single task definition create service application level auto scale create task duplicate auto scale apply auto scale docker task docker affect cpu memory load auto scaling create copy docker task achieve ecs elastic beanstalk create service single task single docker container resolve problem,0,384,0,0.0,1,2017-11-15T18:06:50,0.0
47312403,5701606.0,<java><spring-boot><jar><log4j2><microservices>,inject external dependency spring microservice,spring boot microservice product application order log log mdc generate transaction pass service http header interceptor filter work fine problem add interceptor filter application track transaction create jar inject microservice application achieve minimal code change application,0,198,0,0.0,1,2017-11-15T16:20:44,0.0
47269095,8387423.0,<spring><microservices><netflix-feign><spring-cloud-feign><feign>,work spring feignclient fallback behavior,problem solve spring feignclient endpoint send sms behavior send query parameter require service send sms check endpoint – case send endpoint request path payload solve problem today interface feignclient annotation url feignbuilder create request runtime change url success feign control service fallback client side,0,476,0,0.0,1,2017-11-13T16:29:27,0.0
47335582,7994751.0,<java><spring><oauth-2.0><microservices><netflix-feign>,feign exception update spring boot finchley edgware spring cloud,microservice proof concept application spring boot spring cloud problem app fine spring boot spring cloud brixton release break upgrade error ocurr register account follow error stack trace feign error culprit include change code whatsoever understand error,0,1777,0,0.0,1,2017-11-16T17:17:07,0.0
47275278,7827582.0,<microservices><lagom>,divide microservice lagom,lagom default create module microservice api implementation divide microservice module,0,243,0,0.0,1,2017-11-13T23:33:39,0.0
47276560,1508189.0,<microservices><apollo><apollo-client><apollo-server><graphql-subscriptions>,authorization authentication pattern graphql subscription microservice,create apollo server graphql subscription good receive publication front great send publication authorize user sort logic test example thing involve blindly receive message redis server set client test user log individual microservice talk auth user service decide allow action base problem redis broadcast wrong user apollo server listen message redi validate thing sort permission object field broadcast graphql validate auth service auth microservice point direction amazing,0,459,2,0.0,1,2017-11-14T02:07:31,0.0
47348422,1891398.0,<spring><rest><spring-boot><microservices>,throw exception multiple service,microservice architecture depend service service represent seperate spring boot project exception occur low level architecture throw service high user endpoint service service api return httpentity response entity include specific object find lot solution responseentityexceptionhandler example single service architecture multiple depending service good practice throw exception multiple service spring boot,0,462,4,0.0,1,2017-11-17T10:24:01,0.0
55606035,3674328.0,<lucene><spring-data-jpa><microservices><hibernate-search>,filesystem lock create indexer,hibernate search annotate domain project base multiple microservice search service start read data db create code mention microservice update domain insert update issue face start create lock file release lock microservice update insertion update throw exception approach hibernate search microservice architecture,0,43,0,0.0,1,2019-04-10T06:28:44,0.0
55678282,217648.0,<logging><microservices><azure-aks><azure-monitoring>,audit log post delete operation microservice azure,application microservice azure ak log activity user post delete method add code operation kind audit history azure service intresserte security technical log,0,55,0,0.0,1,2019-04-14T17:49:57,0.0
55577259,5931255.0,<spring><gis><microservices><openlayers><geoserver>,request java base app geoserver kind,design gis system inside cloud environment system intercommunicate openlayer cesium js custom app geoserver geoserver fit requirement future custom app spring boot base facade geoserver switch geoserver break system authenticate user system split business requirement read resttemplate call application geoserver sure handle kind request frontend hint approach good direction approach tool call advance,0,66,0,0.0,1,2019-04-08T15:51:10,0.0
55545962,7929009.0,<java><oracle><microservices><tuxedo>,custom adaptor tuxedo call java,typical requirement … oracle tuxedo server lot service add microservice layer talk tuxedo server adaptor accept call form tuxedo server call tuxedo service rest propose design diagram … problem tuxedo server version accept call rest tuxedo server find call microservice rest study tuxedo server call service legacy tpc ip write help implement design highly appreciate … solution point write adaptor java accept tuxedo call tuxedo server call tuxedo serve call tuxedo server service resolve sample code bea doc accept service call tuxedo legacy find write java doc sample tuxedo server call rest microservice replace propose adapter direct call tuxedo server micro service write java deploy exist tuxedo server good approach achieve,0,216,0,0.0,1,2019-04-06T04:38:52,0.0
55590828,7188123.0,<angular><amazon-web-services><aws-lambda><microservices><aws-serverless>,reference datum microservice architecture,migrate monolithic application microservice architecture aim serverless path develop independent service aw lambda ui write angular reference datum external source suggestion good path follow fetch data example display employee detail employee service display employee base call external source company approach pro con approach consider approach service microservice service external source call service layer aws lambda return complete desirable result ui display approach return employee ui angular ui call external source display datum desire format display company description,0,94,1,0.0,1,2019-04-09T10:36:25,0.0
55607990,6295272.0,<spring><microservices><spring-cloud><netflix-zuul><spring-cloud-netflix>,spring cloud zuul composite api call,start build microservice api gateway spring cloud zuul help routing call gateway api multiple request service service order detail service delivery service gateway endpoint order orderid call order detail service delivery service combine return full order detail delivery routing zuul filter hand create controller kind request resttemplate call,0,96,1,0.0,1,2019-04-10T08:26:35,0.0
55593959,8443777.0,<javascript><node.js><database><microservices><node-modules>,connect mssql server synchronously node js,example mssql client package tedious driver async callback promise develop microservice limited understanding asynchronous function bit fuzzy async await report generation class call sure pretty bad accomplish open input good accomplish goal accomplish synchronously,0,109,1,0.0,1,2019-04-09T13:21:39,0.0
55628093,1429618.0,<javascript><node.js><sockets><microservices><nestjs>,socket client nestjs microservice,start work nestj stock test app trigger nest app method socket client stick idea,0,394,1,0.0,1,2019-04-11T08:35:04,0.0
55598305,4510763.0,<java><linux><spring-boot><centos><microservices>,spring boot application minimal requirement,spring boot build microservice architecture spring boot application application resource application single machine gb simply application command three application time find consume memory impossible application spring boot java application machine gb time,0,235,1,0.0,1,2019-04-09T17:34:59,0.0
55595592,7268341.0,<error-handling><graphql><microservices><apollo-server>,pass handle graphql error apollo server api api,build micro service web app example graphql apollo server express passport jwt token auth micro service user blog project profile gateway api stitch fragment relationship work well perform full crud board hell implement authentication big surprise oddly implement auth problem problem error handle pass graphql error remote api gateway stitch gateway pick error actual detail swallow gateway api user api error gateway api error gateway src js import express expre gateway src remoteschema js stitching happen stitching stitch user api src resolver user error js gateway user errorhandler js formaterror js unwraperrors js apologise advance code snippet happy answer question advance,0,285,2,0.0,1,2019-04-09T14:48:24,0.0
55684210,8019689.0,<rest><api><testing><microservices><rest-assured>,restassured test error content type response,test rest endpoint restassure response html document altough set accept header application json java lang illegalstateexception parse object support content type response content type text html charset utf main debug org apache http wire http status xe bad request edit postman working request,0,279,3,0.0,1,2019-04-15T07:20:11,0.0
55577061,8084213.0,<asp.net-web-api><asp.net-core><asp.net-identity><microservices><asp.net-authorization>,authentication authorization central microservice asp net,plan change asp net web api include authentication authorization service microservice architecture question create central microservice handle authentication authorization authorize user send request token service elaborate question three microservice asp net framework handle authentication authorization authenticate user send token order service receive request token header asp net core accounting service receive request token header asp net core authorize user call service ideal approach,0,1000,3,0.0,1,2019-04-08T15:38:00,0.0
55617756,411540.0,<validation><web><design-patterns><client><microservices>,validation logic microservice client,java application invoke third party microservice perform business operation case third party service accept user personally identifiable pii return match consumer entry input service return error error code error message pattern third party service control error question application perform validation input parameter invoke third party service rely service validation benefit st approach full control validation clean error handle attach specific error message validation logic input datum valid avoid call service benefit approach caller nee worry validation logic completely rely service provide error message code caller print error log indicate error,0,39,4,0.0,1,2019-04-10T16:54:24,0.0
48949396,8838143.0,<microservices>,saas implementation micro service,build web base saas solution asp net core help micro service architecture token base authentication service host docker client user product detail multiple database shared schema micro service database schema service hit roadblock locate log user database credential connection string database connection pass dynamically respective micro service fetch datum respective client database,0,286,0,0.0,1,2018-02-23T13:53:03,0.0
48912603,1387080.0,<apache-kafka><microservices><cqrs>,kafka increase resilience service,work project start create independent deployable service service create resilient uptime dev create concept regard technology sure service kafka example simple application serverless function add collection item thin layer create kafka message process real application approach sound odd kafka communicate system good split application increase resilience bounded context guess modern technology application resilient create application add lot complexity understand approach cqrs approach create application receive write completely separate read case kafka event system delete message understand good thing requirement usage kafka highly resilient application,0,542,0,0.0,1,2018-02-21T18:03:27,0.0
48966893,7337938.0,<microservices>,registration process microservice architecture,chris richardson mention party registration party registrar superficial knowledge state service instance handle request microservice send registrar start registrar service location,0,54,0,0.0,1,2018-02-24T19:46:08,0.0
48980066,1928337.0,<amazon-web-services><aws-lambda><microservices>,store session token aws lambda function,aws lambda function talk external rest api external api session token request generate session token client secret session token request external rest api currently store session token mongodb persist datum lambda restart retrieve time good best recommend,0,612,0,0.0,1,2018-02-26T00:51:40,0.0
48850386,9376319.0,<docker><spring-boot><docker-compose><containers><microservices>,containarize spring booot microservice,project microservice inside container succesfully jar file inside docker container docker image container work microservice friend spring boot microservice docker environment plan microservice inside container manage docker compose config time high availibility docker compose scale docker swarm question service inside container create jar war file service inside container expose port work inside service testjar file simple hello find online dockerfile,0,123,0,0.0,1,2018-02-18T09:55:54,0.0
49021899,4266570.0,<spring><spring-boot><design-patterns><microservices>,handle facade feature package structure,structure project facade controller call facade call class package package create controller package separately feature,0,37,1,0.0,1,2018-02-28T04:17:41,0.0
48949794,9401863.0,<scala><microservices><cqrs><lagom>,lagom framework implement es cqrs scala,fairly lagom build web project download sample project website chirper auction stick es cqrs week share knowledge work sample project demonstrate help understand lagom microservice structure understand es cqrs implement command event processor state vague question developer work share light start book reference sample project highly documentation official clarity advance,0,170,2,0.0,1,2018-02-23T14:13:16,0.0
48956086,8585609.0,<design-patterns><asp.net-core><.net-core><microservices><ef-core-2.0>,pattern segregate model dbcontext asp net core microservice,service deploy individually depend service sql database ef core dbcontext separate project myservice datum model dbcontext dependent change data project service redeploy pattern approach situation project dependant,0,330,3,0.0,1,2018-02-23T20:55:05,0.0
43151368,560043.0,<microservices><trace><zipkin>,modify zipkin service library pass generic feature flag,implement zipkin stack zipkin sense extend zipkin system handle generic flag well observation implementation zipkin capture tag header http propagate request stack mutate propagate sample debug conclusion extend zipkin option propagate flag key pair sense enable testing blue green deploy technique compare timing ensure timing improve note service development team,0,105,0,0.0,1,2017-04-01T00:14:58,0.0
43125393,3311276.0,<asynchronous><message-queue><microservices><service-broker><asynchronous-method-call>,message queue work service broker architecture,vague knowledge service broker find understand message queue work coordinate set order asynchronously question wide scope wrong general explanation understanding message queue play service broker great,0,157,0,0.0,1,2017-03-30T18:11:31,0.0
43232660,5011654.0,<microservices><software-design><n-tier-architecture>,separate microservice database access,manage large enterprise application implement microservice architecture standalone microservice create base business entity operation example user operation service product operation service finance operation service note service implement tier architecture wcf separate tier independently deployable separate server business datum access centralized database access microservice couple common entity user access service redundant database call multiple service effort require database access place column rename require deployment app reduce optimize code plan create separate microservice move database operation service call database operation service database operation add update select hide challenge aware thought consider improvement concept,0,253,0,0.0,1,2017-04-05T13:28:40,0.0
43228611,919480.0,<transactions><commit><microservices><serverless-architecture>,micro service load balancing commit,keen understand follow aspect micro service commit roll business goal achieve invoke multiple micro service ordinate commit roll micro service require embed commit roll protocol implementation provide external factor load balance micro service micro service front load balancer help scale scale scope implementation service relation aws lambda bluemix openwhisk azure function micro service compare serverless architecture,0,49,1,0.0,1,2017-04-05T10:31:13,0.0
43056426,105678.0,<json><haskell><service><types><microservices>,microservice strict type enforce api,write separate service output service feed second share library type checker sure interface match product service produce score service produce half interface score exactly match output product client convenient transformation share library type json serialization code enforce build system depend version shared lib long keep forward compatible update score field add output product score reinvent concept interface field field match difficult client connect advantage interface completely de couple,0,76,1,0.0,1,2017-03-27T21:01:45,0.0
43088918,7296911.0,<java><spring><microservices><netflix-eureka><spring-cloud-netflix>,java microservice projectstuckture spring neflix stack,currently create small example project micro service architecture java learn basic concept follow tutorial mention configure application yml application property file file find clean project structure example microservice java question common project structure micro service java mention framework application yml full example file basic pattern pm good well tutorial opinion base pm answer,0,90,1,0.0,1,2017-03-29T08:59:41,0.0
43177818,6514731.0,<architecture><soa><microservices>,microservice soa ready architecture,good web architecture service front service service service provide api traditional mvc service structure module module small application config module database engine dependencie communication model repository avoid type sql join keep simple perform multi query result api gateway entry point request move soa microservice easily future approach advance,0,159,1,0.0,1,2017-04-03T06:26:39,0.0
43055993,4624968.0,<domain-driven-design><microservices><bounded-contexts>,size microservice bond context ddd,hear allot size microservice bound context ddd idea goath,0,191,1,0.0,1,2017-03-27T20:35:21,0.0
43144337,2308151.0,<spring-boot><ibm-cloud><microservices><apiconnect>,define api base path api connect,problem micro service spring boot publish api connect assign base path separate path api path api solution assign context path api application yml file work base path entire server microservice aware external context reason base path exclusively separation api connect idea,0,535,5,0.0,1,2017-03-31T15:22:29,0.0
40108015,2861312.0,<cloud><microservices>,microservice high availability concern cloud,read microservice sense doubt cloud component availability sla assume single component job application sla approx create multiple component job application sla reduce component time microservice service communicate service complete task participant service time application availability compare monolithic service,0,274,3,0.0,1,2016-10-18T12:15:58,0.0
40082248,685091.0,<spring-boot><rabbitmq><message><microservices>,handle message dependency evening environment messagemq,develop micro service platform spring technology face problem consume message rabbit mq scenario message queue student enrollment microservice student enrollment creation request message queue message queue order guarantee enrollment message student time relation database fail good handle kind scenario message ordre message mq microservice platform,0,37,3,0.0,1,2016-10-17T09:00:38,0.0
40170212,6249883.0,<spring-boot><spring-cloud><microservices><netflix-zuul>,add content length response header spring cloud build micro service,spring cloud build multiple microservice api gateway implement spring cloud netfix zuul server route request micro service gateway config application yml corsfilter java gatewaysystemapplication java browser response header response header request content length content length directly invoke backend service,0,1355,0,0.0,1,2016-10-21T06:56:58,0.0
40231507,1429846.0,<docker><sandbox><microservices><lagom>,configure docker vm lightbend conductr sandbox init throw filenotfounderror,lighbend conductr currently stick set sandbox follow instruction face follow error step configure docker vm sandbox init ubuntu virtual box uname output instal docker python instruction sure issue guide help solve issue appreciate,0,119,0,0.0,1,2016-10-25T04:43:13,0.0
40238733,719278.0,<spring><apache-zookeeper><microservices><consul>,consul monitor party service,organisation service time keep company function software application assist hr finance purchase estate service payroll main focus integration service function single unit list isolated application ldap oracle database soap webservice tomcat base webapps critical service currently service monitoring discovery tool manage service question house webapps webservice consul java api fairly easy register consul server implement health check mechanism find difficult register monitor service ldap database party soap service share example point direction,0,214,0,1.0,1,2016-10-25T11:28:13,0.0
59055778,987517.0,<mysql><spring-boot><relational-database><microservices>,microservice implementation mysql relational database structure,exist project build mysql java strut implement crm project current project project mysql database table table connection foreign key relation project plan implement spring boot microservice exist database face issue structure microservice application proceed microservice option manage entity keep entity dao seperate microservice entity microservice communicate microservice case advantage change database structure field change change entity microservice microservice manage entity project single area manage entity microservice microservice package case advantage microservice connection microservice independently problem change doctor table entity change update miccroservice project structure project database mysql table tightly couple,0,17,0,0.0,1,2019-11-26T16:51:22,0.0
59113478,1693776.0,<kubernetes><microservices><google-kubernetes-engine>,ensure minimum number pod node node selector,schedule deployment replicas node pool sure pod node size node pool ensure pod spread node pool node face issue disconnect cluster application,0,19,0,0.0,1,2019-11-30T05:31:06,0.0
59110151,6456586.0,<sql><postgresql><database-design><microservices>,database model relationship schema,help choose database design multiple database schemas picture schema foo schema bar schema table uploaded picture root table uuid type schemas main table type uuid well record table cardinality picture foreign key schema design join table schema join table picture foo schema bar schema create join table picture schema uuid type entity foo bar matter uuid unique consider schema microservice advice,0,30,0,0.0,1,2019-11-29T19:34:38,0.0
59016312,5174013.0,<node.js><axios><microservices><koa>,help send datum axio post request fetch datum microservice,send datum axio post method microservice port number microservice fetch datum send service service microservice install work good method communicate send datum microservice time keep error datum undefine object,0,35,0,0.0,1,2019-11-24T09:31:55,0.0
58948497,3820753.0,<java><spring-boot><jwt><microservices>,jwt separate auth micro service sit backend business logic,micro services architecture build application springboot add jwt auth apis link wonder separate authentication authorization code business micro service bms time rest api call bms turn call auth microservice validation good practice lot network traffic call client businessapp authms business app client reason separate configuration code good couple business app unsure network cost api call example code jwt app sense service server,0,48,0,0.0,1,2019-11-20T07:01:47,0.0
58959160,6847394.0,<c#><azure><microservices><azure-service-fabric><unc>,service fabric access unc drive store file,service net core service fabric host search internet find resource help construct solution fail good reliable source idea mind treat unc drive drive streamreader streamwriter mount file local drive streamreader streamwrier base understand second completely access unc drive store retrieve file,0,21,1,0.0,1,2019-11-20T16:32:13,0.0
58977491,6416154.0,<java><rest><spring-boot><microservices>,parse response rest template exchange,create pojo class mention json structure rest service resttemplate exchange parse java class file approve java code response structure,0,25,1,0.0,1,2019-11-21T14:40:00,0.0
59032827,6600086.0,<transactions><microservices>,transaction manage micro service architecture,multiple microservice start service perform operation trigger endpoint perform operation call endpoint wrong work roll day ago hear saga pattern achieve saga implementation market approach handle scenario,0,26,1,0.0,1,2019-11-25T13:21:36,0.0
58937496,1977706.0,<ansible><microservices>,ansible shared component,multiple service communicate rabbitmq service repository ansible script deployment good place rabbitmq ansible script extract repository ansible script remove service repository extract repository rabbitmq ansible script good idea,0,27,1,0.0,1,2019-11-19T15:27:15,0.0
58986828,1268630.0,<java><rest><spring-boot><microservices>,sure rest http request second java spring boot,build spring boot micrcoservice frequently call webservice sla service level agreement service provider client second call webservice second sure request response longer second java spring boot,0,55,1,0.0,1,2019-11-22T02:58:32,0.0
58983649,3067375.0,<javascript><rest><microservices><backend><moleculer>,request body moleculer,accord api documentation receive json formdata post request body parser declare gateway service receive formdata action api service js action service insertuser action suppose receive req body ctx params empty user service js,0,27,2,1.0,1,2019-11-21T20:58:34,0.0
58990740,10978818.0,<postgresql><spring-boot><microservices>,share microservice postger db microservice,create micro service service handle registration login module second service post comment module third service rate review module admin module problem micro service database service dependent service db service dependent db service dependent service postgre db service option jdbc connection factory connect service service db good practice coz service change column change service module option create hot standby replica service service problem hot standby replica read perform update delete,0,30,2,0.0,1,2019-11-22T09:01:56,0.0
59069791,12085985.0,<java><spring-boot><microservices><netflix-eureka><netflix-zuul>,api gateway netflix zuul eureka server port spring boot application,application well question server port application configuration attach configuration desire output,0,30,2,1.0,1,2019-11-27T12:01:29,0.0
58947488,12023227.0,<spring-boot><microservices><resttemplate>,spring boot rest api call,save datum application etom application support rest call,0,31,2,0.0,1,2019-11-20T05:44:42,0.0
59082414,2233118.0,<django><go><django-rest-framework><microservices>,good pass variable remote golang app django view,create django web application assist barebone server deployment bare bone server pxe boot custom livecd send curl command register drf rest api django receive request start app remotely find bare bone server base entry rest api start configure server good identify introduce bare bone server server thought parser parameter identify server pull bare bone server info rest api add boolean field rest api app entry true flip false start set bare bone server good well,0,47,2,0.0,1,2019-11-28T05:43:46,0.0
59091729,3584773.0,<kubernetes><microservices><kubernetes-helm>,helm update selectif template file specific service deployment yaml file,microservice architecture helm chart microservice deploy kubernetes microservice chart pod execute three pod update fine question helm upgrade pod time touch exemple upgrade nginx varnish keep php change,0,42,3,0.0,1,2019-11-28T15:08:27,0.0
59026903,12053194.0,<java><authentication><kubernetes><jwt><microservices>,jwt authentication micro service kubernetes cluster,java microservice talk kubeneter cluster microservice bundle auth library intercept validate renew jwt token rest request controller scenario frontend access token time authentication successful frontend hit microservice access token successful microservice internally hit microservice resttemplate microservice log user detail issue pass access token access token controller service logic filter token validate token rest controller add follow argument rest method controller approach pass token till declare argument api token tokenstore pass authentication object oauth check code library tokenstore provider defaulttokenservices java class call code jwttokenstore provider return null check provider call inmemorytokenstore class extract token store flow memory implementation token grab controller argument enable inmemorytokenstore recommend well kubernetes intercommunication authentication tia,0,34,6,0.0,1,2019-11-25T07:19:58,0.0
49818943,9640403.0,<java><microservices><cumulocity>,cumulocity microservice deployment access deny,goal background info develop java microservice cumulocity send microservice follow microservice split datum measurement second measurement measurement post cumulocity problem stick work deploy microservice zip file cumulocity admin user upload zip file website create application upload zip post request application work suspect access deny error cumulocity upload application code side download cumulocity bitbucket development branch code default branch change cumulocity version version exist helloworldmain java unedite cumulocity json manifest file role difference application property file cumulocity side create microservice application return subscribe application upload zip file cumulocity error upload type application work fine locally work cumulocity platform locally docker command error image local docker accord request return question difficulty set microservice cumulocity totally oversee,0,314,0,0.0,1,2018-04-13T14:08:15,0.0
49793326,5268774.0,<web-applications><kubernetes><microservices><kubernetes-ingress>,deploy microservice web application kubernetes,create web application angular microservice backend serve rest api deploy kubernetes application serve drink coffea tea simplification assume app fully stateless microservice kubernetes coffea service rest api api coffea endpoint tea service rest api api tea endpoint nginx static content angular app html css js image gateway proxy api coffea api tea endpoint question reflect kubernetes deploy replicas expose coffea tea service nodeport finally expose nginx loadbalancer approach ingress nginx proxy serve static content ingress controller advance,0,317,0,1.0,1,2018-04-12T09:47:00,0.0
49771449,4370901.0,<microservices><clientip>,client actual address java,application multiple microservice system consider scenario client request microservice microservice invoke api microservice scenario client ip address microservice provision client ip address request header srumith,0,84,1,0.0,1,2018-04-11T09:30:31,0.0
49953536,0.0,<go><microservices><amazon-sqs>,initiate connection aws sqs golang,build microservice application golang service talk service sqs difficulty initiate sqs connection server initiate sqs connection service build service kit file service main endpoint transport basically code connection initiate connection start message service,0,702,1,0.0,1,2018-04-21T07:44:51,0.0
49854378,1520291.0,<spring><caching><microservices><spring-cloud><spring-cache>,spring cache evict entry remotely,microservice read write database cache result rest endpoint entity control entity lifecycle second microservice picture modify entity return question mechanism remote cache entry eviction case course manually expose reset endpoint microservice call second hope build mechanism spring cloud,0,201,1,0.0,1,2018-04-16T09:52:22,0.0
49887495,1488207.0,<java><microservices><vert.x>,application variable vertx,set custom object application scope variable vertx access micro service request find vertx documentation java ee servlet code feature,0,292,2,0.0,1,2018-04-17T21:06:53,0.0
49848942,9556049.0,<spring-security><wso2><microservices>,access oauth secure service wso api manager,project microservice secure spring oauth publish service wso api manager disable oauth feature wso service secure spring oauth access service publish wso token spring oauth response status code response status code unauthorized issue,0,45,2,0.0,1,2018-04-16T02:41:05,0.0
49890971,1026650.0,<amazon-web-services><amazon-elastic-beanstalk><microservices><continuous-deployment>,good practice deploy multiple microservice time,struggle good deploy multiple microservice time change affect service interested general approach provide specific example company aw elastic beanstalk deploy microservice container web site decoupled web application consist spa write angular deploy host bucket call spa webapi service write net core dockerize deploy elastic beanstalk application call webapi integration service write node js dockerize deploy elastic beanstalk application call intservice spa webapi talk rest api webapi intservice loosely couple talk aws sqs queue change service deploy process fairly straightforward example change webapi spin elastic beanstalk application environment deploy swap urls basic blue green deployment struggle approach change affect multiple service example feature require change webapi intservice live repo ci cd pipeline independent service deploy app break people handle type deploy clone webapi intservice environment deploy swap url sure time minimize window time service active alternatively api gateway time deploy create api gateway stage blue green deployment swap happen api gateway confusing wrap head imagine fairly common problem microservice,0,420,2,0.0,1,2018-04-18T04:00:43,0.0
49809651,175057.0,<rabbitmq><microservices><amqp>,amqp rabbitmq pass datum work flow situation consumer,work rabbitmq find microservice architecture start feel tangle couple find publish message consumer event queue feel wrong sure alternative benefit efficiency pass datum consumer directly queue task note example service fairly work flow dependent independently question datum pass process process consumer publisher situation micro service fairly dependent individually work best work flow scenario solution involve publish message event consumer proper datum microservice process,0,189,2,0.0,1,2018-04-13T05:05:33,0.0
49849813,9131586.0,<node.js><spring><microservices>,node js microservice,consume node js base microservice spring base web application restful api good choice application message microservice base nodejs,0,77,3,0.0,1,2018-04-16T04:49:43,0.0
49823345,805970.0,<docker><asp.net-core><microservices>,good host microservice net core web api docker,micro service dockerized well build host console application build asp net web application fast microservice simple web api,0,711,3,0.0,1,2018-04-13T18:41:49,0.0
37403682,3795379.0,<node.js><architecture><microservices>,real project microservice architecture,open source project microservice architecture real app address cross cut concern educational sample introduce node js net stack,0,587,5,0.0,1,2016-05-24T03:01:00,0.0
37247409,294181.0,<ruby-on-rails><rails-migrations><microservices>,microservice database migration exist foreign key,rail application database migration add transactional reference datum refer primary key independent service add http call migration key service wonder clean achieve,0,127,0,0.0,1,2016-05-16T05:45:09,0.0
37395986,4694344.0,<architecture><apache-kafka><mq><microservices><event-driven>,ibm mq apache kafka message broker engine event drive architecture microservice architecture,context company weblogic appserver oracle service bus soa service orchestration choreography move forward event drive microservice architecture key point eliminate complex service orchestration office question recommend message engine event drive microservice architecture performance high top concern big concern guarantee delivery fail system resilience resilience achieve mq kafka consider dumb pipe smart endpoint principle apache kafka appealing resilience thought opinion advance,0,660,0,0.0,1,2016-05-23T16:23:21,0.0
37457765,6339234.0,<java><spring><spring-boot><microservices>,access microservice spring boot,implement project microservice arch sample app spring boot add three service registration server yml call rmi concept spring boot rest call costly project manually write code call adder,0,755,10,0.0,1,2016-05-26T10:09:12,0.0
51191291,7337938.0,<microservices><istio>,difference service mesh project istio conduit,year service mesh service mesh handle service service communication implementation create year confused real difference istio conduit feature obvious competitor base choose client project,0,260,0,0.0,1,2018-07-05T12:26:01,0.0
51150957,9799209.0,<architecture><microservices>,apply microservice architecture financial product consulting website practical,work website display financial product document performance chart complex monolithic application lot code functionality practical divide application microservice architecture user login website business transaction simply search consult product website,0,37,0,0.0,1,2018-07-03T09:23:55,0.0
51138147,10022013.0,<microservices><jhipster><gateway>,jhipster gateway microservice,gateway microservice local docker create project gateway microservice local docker,0,158,0,0.0,1,2018-07-02T14:10:58,0.0
51314434,6792447.0,<docker><asp.net-core><microservices><docker-container>,asp net core microservice,create microservice docker asp net core create microservice web api call microservice endpoint web api httpclient web api controller code docker compose yml file microservice call microservice dockerfile problem error system net http curlexception connect server command prompt access endpoint command datum happen,0,191,0,0.0,1,2018-07-12T21:04:28,0.0
51284332,5458827.0,<spring-boot><microservices><spring-cloud-sleuth><mdc>,spring sleuth mdc work microservice framework,spring good solution work spring boot microservice wonder microservice build framework language node js microservice system build spring boot springboot app support sleuth mdc functionality chain traceid lose work keep pass traceid parameter http call service example microservice reinvent wheel order handle mdc issue correct,0,212,0,0.0,1,2018-07-11T11:27:54,0.0
51175627,1573556.0,<python><serialization><flask><microservices><nameko>,unserializable,currently stick serialization problem data nameko flask error occur serialise unserialize work example datum mongodb database nameko program flask program finally error output print data correctly display terminal flask error json data jsonify find site display cas help advice hint gladly appreciate,0,349,1,0.0,1,2018-07-04T14:07:01,0.0
51259956,4050313.0,<java><java-8><microservices><spring-cloud><spring-cloud-feign>,feign client decodeexception error extract response,open feign hateos microservice architecture fetch content feign clienti follow error feign client provide feign client configuration mistake configure achieve,0,965,1,0.0,1,2018-07-10T07:58:31,0.0
51330229,8191998.0,<microservices><asp.net-core-1.0><message-bus>,implementation message bus microservice,micro service create net core follow cqrs pattern swagger list api requirement implement message bus decide aw message bus orchestrate ui operation span multiple backend service start understand message bus queue publish event message bus help understand pointer tutorial video explanation helpful,0,775,2,0.0,1,2018-07-13T17:33:23,0.0
51272560,4413905.0,<java><spring><docker><microservices><freeze>,dockerize spring boot microservice freeze reason,microservice base project microservice spring boot rc app discovery config gateway microservice base spring cloud finchley system deploy test machine docker compose realize microservice freeze receive subsequent request frontend app short period time unresponsive request receive read timeout gateway occur call microservice directly bypass gateway spring boot admin instance realize microservice offline online minute despite interesting occur log memory issue observe remark problem occur start system docker compose time restart single microservice reproduce container microservice freeze docker terminal hang check container status terminal container appear exit strange thing occur docker attach container terminal hang exit problematic microservice start work properly accept incoming request success help strange problem idea resolve advance clue edit docker compose yml dockerfile car service command start test machine ubuntu server lts,0,354,4,0.0,1,2018-07-10T19:14:13,0.0
58075758,2470765.0,<authorization><microservices>,authorization microservice list row user access,split monolith solution microservice microservice authorization responsible determine user access entity system allow define access project user accord criterion user manager project user directly assign project user assign project presence team rule determine user project authorization microservice responsible determine user access project sake project search display accessible project return list accessible project user problem list huge project problem afford build query microservice query accept rdbms length worried performance large list clause slow benchmark curious approach accomplish standalone authorization microservice approach virtual table user list projectid join query,0,15,0,0.0,1,2019-09-24T08:07:02,0.0
58011545,6323547.0,<microservices><opentracing><jaeger>,jaeger integration effort microservice nodejs,analyse hight level effort jaeger integration nodejs microservices require code change deployment code change require code change service api gateway service code change appreciate rough idea task effort,0,22,0,0.0,1,2019-09-19T12:58:00,0.0
58114365,5738999.0,<architecture><microservices><soa>,model communication microservice case delegated persistence logic,regard follow situation application micro service app sit top big datastore expose datum rest typical spring boot app manage permission transformation mapping enacapsulate low level datum api complex second app responsibility implement core business logic domain app persistence layer local data store heavily dependent app app centralize access big datum store understanding state app standalone application service specialize task difference unwanted consequence relationship app persistence layer app local persistence logic module implement dao repository interface rest implementation call app hood data layer module opinion typical integration case mix local persistence logic datastore delegate datum api provide app regular service remote module app sit data layer hope description understandable currently preferrence imply real unwanted consequence matter personal taste comment,0,24,0,0.0,1,2019-09-26T10:04:51,0.0
58055893,2544825.0,<microservices><istio>,istio alternative authentication policy istio flow development,url project jut context long story short build open source framework building escrow advantage late psd support cryptocurrency payment implement sort side chain order proof contract sign basically thing istio authentication policy jwt order avoid write microservice create course gateway main issue idea develop ide intellij idea order avoid rebuild start container single time rebuild istio istio development write dummy service fake authorization istio check user permission access resource possibilitie lean workflow istio eventually alternative istio,0,26,0,0.0,1,2019-09-23T04:59:30,0.0
57939827,4386185.0,<rest><graphql><microservices><light-4j>,build application light support rest graphql,build rest service endpoint support graphql endpoint instance light,0,29,0,0.0,1,2019-09-14T22:46:23,0.0
58012546,294069.0,<java><spring><microservices><spring-cloud-feign>,feign check body empty,feign micro service code response remote client body npe set body default check whit respose code wait body payload code,0,30,0,0.0,1,2019-09-19T13:48:04,0.0
58137052,11963028.0,<c#><microservices><cumulocity>,create measurement cumulocity rest,cumulocity write microservice cumulocity platform clone cumulocity sdk client rest example create device inventoryapi add attribute creation hardware requiredavailability position add measurement device lose add measurement attribute code temperature type measurement device throw error create measurement wrong json nest add layer attribute work test file set method create measurement object pass set method fragment class test file empty object completely minor thing correct method create measurement device,0,37,0,0.0,1,2019-09-27T15:00:24,0.0
57948294,1765862.0,<java><.net><domain-driven-design><microservices>,aggregate root class hold publicly expose method,understand concept aggregateroot class understand correctly aggregate root class charge manipulation business rule case recognize customer class responsible assign holiday record customer well info address document question follow filename convention aggregate root customeraggregate customer class visible aggregate root entry point class good practice structure aggregate root domain service class public entry point customer customer property class,0,41,0,0.0,1,2019-09-15T21:26:34,0.0
57935276,1227941.0,<java-ee><netbeans><microservices><payara><microprofile>,start microprofile io demo netbeans,microservice read lot material app generate demo follow configuration microprofile version mp microprofile server payara micro specification import demo netbeans instal payara full question step demo help close microservice eclipse microprofile,0,44,0,0.0,1,2019-09-14T11:58:17,0.0
57947675,10927670.0,<node.js><api><express><authentication><microservices>,authenticate microservice base api endpoint express node js,simple microservice base backend server express mongodb node js todo application mongodb database separate collection table user todo microservice user add user delete user login return jwt token client store mongodb future verification private route logout api endpoint remove jwt token database second todo microservice consist three route add edit delete todo private route accessible user authentication follow abstract microservice code user microservice auth middleware code decode token user collection revalidate token delete current log user endpoe fine auth middleware user schema model user delete endpoint microservice problem todo microservice add todo endpoint auth middleware todo microservice endpoint delete user endpoint user microservice question auth endpoint microservice user microservice require stuff good rewrite auth middleware code todo microservice redundant code secondly redundant code user schema model todo microservice create auth api endpoint user microservice validate token database return user object call microservice user authentication,0,44,0,0.0,1,2019-09-15T19:47:54,0.0
57947365,2762832.0,<google-app-engine><ssl><google-cloud-platform><microservices>,gcp extensible service proxy encounter error forward request,follow setup tutorial follow app yaml deploy microservice esp api yaml describe microservice api surface problem request endpoint gateway error inspection esp log find esp intercept request correctly forward request correct format well evidence ssl error error,0,50,0,0.0,1,2019-09-15T19:04:15,0.0
58129953,352826.0,<deployment><microservices><azure-service-fabric>,forward compatible service fabric microservice,accord microservice backward compatible client talk server server forward compatible client call newly introduce endpoint documentation follow multiple phase upgrade achieve high availability introduce endpoint microservice achieve default rolling upgrade process route call client server,0,50,0,0.0,1,2019-09-27T07:38:22,0.0
58095930,3446201.0,<asp.net-core><dependency-injection><microservices><autofac><extension-methods>,property injection extension class autofac,inject class idatetimeservice extension class property injection restease connect microservice interface finally add injection code startup file problem service localdate property null,0,56,0,0.0,1,2019-09-25T10:06:04,0.0
57964959,8518863.0,<python><google-app-engine><google-cloud-platform><microservices>,dispatch yaml work practice,understand role redirect request suitable microservice dispatch yaml project service handler configure default service project default service default yaml project default service main py tweet service project tweet service tweet yaml project tweet service main py question request response error follow step notice path call microservice handle inside handle call return response misunderstood,0,59,0,0.0,1,2019-09-16T22:06:11,0.0
57974650,2332632.0,<architecture><containers><microservices><reactive-streams><rsocket>,operation resumability service,guarantee availability service serve request die heal service endpoint ensure request serve service base tcp socket serve custom protocol involve complex long running operation operation die container leave support service achieve,0,68,0,0.0,1,2019-09-17T12:53:07,0.0
58117988,1779091.0,<microservices>,microservice architecture database share instance service,understand microservice architecture service private database service scale db service instance db share service instance,0,34,1,0.0,1,2019-09-26T13:31:41,0.0
58005934,341062.0,<css><styles><microservices>,keep visual style template microservice,develop microservice parallel aware good practice microservice architecture require code sharing reuse service case maintain consistent styling service web uis advantageous efficient manage replicate style avoid manual edit service time layout style update,0,37,1,0.0,1,2019-09-19T07:32:55,0.0
57959920,12075006.0,<java><migration><microservices>,server side monolith microservice,work working student company job create guide convert software monolith microservice monolith consist individual module server side suppose create guide basis single module server side client richclient web app thing write java websphere application server ejbs servlet question currently familiar software architecture aware step clear resolve dependency consider module module correct follow assume,0,39,1,0.0,1,2019-09-16T15:19:19,0.0
58104158,12120835.0,<java><microservices>,automatically restart tomcat linux,create spring boot microservice host inside tomcat linux machine inside container container inside ibm cloud private platform microservice continuously suppose reason microservice tomcat crash restart tomcat server microservice automatically manual intervention,0,50,3,0.0,1,2019-09-25T18:01:19,0.0
41155377,3312025.0,<design-patterns><cloud><monitoring><microservices><instrumentation>,account open session stateless service,convert app classic service microservice count total number open session classic version write local window perf counter session open session close service die unexpectedly instance reset counter start remote monitoring service collect counter instance total average service write counter diagnostic library push remote monitoring service understand reset counter service die unexpectedly idea start collect heartbeat service reset counter service die design elegant pattern reliable accounting open session stateless service standard terminology scenario microservice management system,0,24,0,0.0,1,2016-12-15T02:20:29,0.0
41115982,101662.0,<iis><architecture><microservices>,iis handle apppool worker process,currently investigate feasibility architecture apppool worker process micro service iis option understand overhead worker process currently estimation worker mb server resourcing issue provision server gb ram add worker active time gain headroom apppool idle question iis handle apppool worker process reason sufficient resource find documentation search,0,61,0,1.0,1,2016-12-13T07:51:04,0.0
41174987,236126.0,<microservices><restful-architecture><hypermedia>,hypermedia drive restful service microservice,create ticket processing system distinct bound contexts domain cancel ticket change ticket understand microservice ticket cancel service completely ticket change service rest api design perspective read lot hypermedia client discover resource include relevant operation link rest response true change service return response sense include link cancel service client perform cancel achieve cancel change microservice aware bound contexts wrong lose hypermedia link capability harder microservice general kay,0,85,0,0.0,1,2016-12-15T23:26:26,0.0
41027573,7242067.0,<java><jar><find><ansible><microservices>,ansible playbook find java process kill,work deploy microservice ansible playbook microservice command deploy write ansible playbook find kill dependent java jar process deploy idea create script init java deamon service java process output scenario happen deploy enrollment account dal core st kill enrollment account listener pid enrollment account dal core pid playbook microservice hard code,0,2194,0,0.0,1,2016-12-07T21:20:12,0.0
41041058,645924.0,<microservices><event-driven><event-driven-design>,event drive architecture tool,application develop interested create microservice allow event create example order place microservice react event example payment system listen order event process payment open source project reliable,0,360,1,0.0,1,2016-12-08T13:47:36,0.0
41123857,645924.0,<amazon-web-services><events><microservices><grpc>,publish event microservice,book blog detail event base communication microservice easy maintain service call eachother directly implement aws consider topic ideal patter implement guarantee latency durability guarantee delivery idempotency,0,233,3,0.0,1,2016-12-13T14:44:03,0.0
51779798,7082599.0,<database><architecture><microservices>,query data spread microservice,microservice architecture face problem platform basically user manage accounting client microservice charge security manage user access client microservice manage invoice client function user log list invoice client user access security microservice list client user access database invoice query filter client problem horrible query select invoice clientid cli cli cli client keep copy user client relation invoice database microservice share database convince microservice face problem lead huge repetition datum big monolithic database well advance,0,40,0,0.0,1,2018-08-10T05:51:19,0.0
51808718,427995.0,<java><spring-boot><architecture><microservices>,architectural pattern web application backend server poll api,build web application java spring boot backend angular front tech stack matter question key requirement backend poll restful api retrieve data store analytic data future simple report moment construct microservice approach application monolithic simple scheduler spring boot side poll api example code appropriate architectural pattern microservice better suit handle type application simple api gateway pattern describe,0,64,0,0.0,1,2018-08-12T12:12:57,0.0
51603557,2463234.0,<spring><jwt><microservices><netflix-zuul><okta>,spring microservice jwt authentication,build spring distribute application work jwt github repo service description product service simple downstream service protect route jwt resoure server jar include downstream service rsourceserver extract jwt token set security contex eureka service discovery service zuul server edge server product service jwt resoure server work fine set zuul eureka hit zuul server follow error okta authentication sure error zuul pass token place help appreciate,0,332,0,0.0,1,2018-07-30T23:30:50,0.0
51794404,2005443.0,<java><spring-boot><microservices>,monolithic microservice share db,move slowly move app monolithic microservice step move microservice ready state monolithic system sa push large amount datum cassandra table tb service sb consume tb table microservice principle basically large amount datum push service sb push rest api large time consume,0,96,0,0.0,1,2018-08-10T21:47:26,0.0
51734131,1417996.0,<database><elasticsearch><nosql><microservices><search-engine>,elasticsearch search engine relational structure micro service envirement,work application relational database entity construct microservice architecture service separate mysql database implement search engine publication elasticsearch middleware funnel search entity relate publication object service database good publication object option mind create full publication type multi nested object type problem duplication entity service hard update example case update instruction create publication type field object normalize datum insert find datum problem normalize datum insert finding costly hard maintain update insert multiple separated type relational database multiple query find final object example find publication user find user user find publication problem query valid result parent child relation case child publication multiple relation multiple parent wrong direction share feedback technology,0,120,0,1.0,1,2018-08-07T19:30:13,0.0
51755653,5410511.0,<testing><cucumber><microservices><spring-cloud-contract><integration-testing>,consumer drive contract testing cucumber,rest endpoint spring boot project consume spring boot micro service consumer drive contract test cucumber step definition write integration test,0,141,0,0.0,1,2018-08-08T21:06:54,0.0
51767389,7131294.0,<spring><spring-boot><microservices><netflix-eureka><netflix-ribbon>,spring eureka ribbon method execute,encounter weird issue spring boot application work microservice app eureka ribbon service discovery app stat generator provide api csv upload link database datum retrieve comparison persistency flow buggy simple check unprocessed file upload directory path unprocessed file array element array convert csv pojo rich call api postman browser call converter microservice converter microservice walk upload direct list unprocessed file list microservice process converter call datum retriever microservice return three list object build pojos base csvs problem appear method execute execute csv uploader microservice entry endpoint proxy good work fine log appear csv converter microservice magic happen bug entry endpoint call point base log execute code time call loop wrongly call proxy method find hope silly weird service minute call endpoint call log csv uploader log csv converter log good configuration issue keep vanilla microservice configuration main class application propertie file application property server server proxy eureka git spring side figure crazy idea love hear lot help edit test find weird log server call api directly microservice correctly execute,0,150,0,0.0,1,2018-08-09T12:43:12,0.0
51610138,1433218.0,<spring-boot><microservices><spring-cloud-config>,spring config client configuration update actuator refresh endpoint,spring database configuration config client git repository config server change database configuration push git call endpoint load configuration expose refresh endpoint application yml file result config server call git repository mange save configuration tmp repos config client update database configuration help resolve,0,243,0,0.0,1,2018-07-31T09:33:47,0.0
51740873,5798312.0,<.net><rest><asp.net-web-api2><integration-testing><microservices>,integration test net rest api microservice,proper perform integration test microservice communicate rest api post datum microservice mock send point receive validate data correct net,0,34,1,0.0,1,2018-08-08T07:27:49,0.0
51676756,10177269.0,<java><spring><spring-boot><spring-data-jpa><microservices>,org springframework beans factory unsatisfieddependencyexception error create bean springboot application,microservice start build simple post implementation error bean creation unsatisfied dependency exception find code attach help appreciate advance dbserviceapplication java package example dbservice quotesrepository java package example dbservice repository dbserviceresource repository example dbservice resource pom xml dependencies error stack trace,0,295,1,0.0,1,2018-08-03T16:29:43,0.0
51602388,872487.0,<architecture><microservices><api-gateway>,api gateway design,api gateway good pattern adopt micro service architecture internal communication service query unable understand api gateway design api gateway service example uber trip cab driver user price micro service api gateway design dynamic endpoint uber case display user cab pricing expose api api gateway asynchronously call pricing cabs api merge return response batter,0,297,1,0.0,1,2018-07-30T21:14:44,0.0
51615385,8939893.0,<spring-boot><single-sign-on><csrf><microservices><pre-authentication>,spring boot micro service pre authenticated filter csrf protection,sso preauthenticate filter micro services micro service build spring boot stateless nature apply csrf protection micro service spring security solution implement csrf scenario,0,59,1,0.0,1,2018-07-31T14:09:37,0.0
51697673,6906610.0,<node.js><database><rest><kubernetes><microservices>,microservice design kubernetes api gateway communication service discovery db issue,microservice kubernete tutorial article read online talk general staff specific question build microservice app kubernetes api gateway api gateway microservice build app automatically scale build function kubernetes reason lot article load balancing api gateway confuse kubernetes load balancing handle api gateway aw people aws api gateway communication service read rest rpc message queue people rest sync operation build service communicate rest api function service discovery problem kubernete kubernete automatically figure database good practice deploy database deploy microservice node article service talk db separate table db dbs,0,365,1,2.0,1,2018-08-05T19:42:13,0.0
51651248,10127426.0,<spring-boot><microservices><netflix-eureka>,springboot eureka server discover oauth secure microservice,eureka server config microservice customer order eureka discovery enable access order microservice customer microservice eureka discover order microservice service security implement,0,138,1,0.0,1,2018-08-02T10:25:14,0.0
51670858,4283172.0,<php><rest><api><microservices><beanstalkd>,well multiple file background job single file,month ago implementation api process file php command script call php queue queue beanstalkd api accept file group file request process file second depend size question well file request separate job file job function processing slow accept multiple file guess file request processing process worker file separate background job process worker file worker sure correct conclusion correct well lot request process file add separate worker,0,50,2,0.0,1,2018-08-03T10:41:30,0.0
51810147,964947.0,<java><spring><spring-boot><intellij-idea><microservices>,spring boot microservice intellij idea,create multi artifact spring boot microservice application intellij idea st allow multiple artifact create inside workspace intellij idea add artifact option window window technically render artifact visible create spring boot microservice application port intellij idea,0,857,2,1.0,1,2018-08-12T15:17:54,0.0
51682257,771997.0,<reactjs><visual-studio><swagger><asp.net-core-2.0><microservices>,swagger manage microservice architecture iis express,exist application single react application exist call multiple api api write net core instruct typically host iis express debug locally trouble understand react application hit backend api project api project multiple iis express instance static port instance hit react project launch react application controller localhost easily hit controller react application handle resolve port api separate visual studio instance host random port localhost hit api react application error react app port iis express instance second api coworker swagger key manage unsure,0,116,2,0.0,1,2018-08-04T03:50:52,0.0
51679363,1691423.0,<java><maven><docker><pom.xml><microservices>,multi module maven project docker,multi module maven project single module runnable microservice application dockerfile production module containerized application parent project child module parent pom xml docker compose yml follow dockerfile module level security error copy parent pom xml file place directory build build maven base module parent pom,0,2922,3,0.0,1,2018-08-03T19:57:38,0.0
51781316,3902906.0,<java><microservices><jhipster><jhipster-registry>,unable login gateway jhipster microservice architechture,generate microservice application jhipster uaa server port gateway microservice connect jhipster registry log gateway auth login gateway endpoint authresource java file generate microservice log unable log guide wrong late version jhipster jhipster registry version war download github great help advance,0,272,4,0.0,1,2018-08-10T07:33:01,0.0
53186591,5234496.0,<docker><spring-boot><maven-2><maven-3><microservices>,exclude dependent jar pom xml call place,situation project reference project project jar version spring boot version add dependency execution fail jar conflict advise exclude jar pertain selective exclusion exclude jar,0,15,0,0.0,1,2018-11-07T09:25:12,0.0
53401237,735259.0,<microservices>,dependency issue microservice,microservice system couple microservice database servicea serviceb servicec entity relate locationservice service entity field locationid refer locationdb locationservice locationservice locationdb servicea serviceadb serviceb servicebdb crud operation entitya entityb validate locationapi servicea serviceb validate locationid pass request client create entityb serviceb locationid validate write api composer crud create update operation occur entityb entitya send locationid parameter locationapi validate send api complicated microservice break easily change coupling effective solution problem design problem boundrie wrong,0,25,0,0.0,1,2018-11-20T20:45:49,0.0
53330922,4470284.0,<microservices>,pivotal cloud foundry work service registry container container communication block,microservice deploy pcf organization security constraint container container communication block microservice loadbalancer single instance service registry provide pcf internal microservice communication mandate service registry scenario feign interface call microservice regular resttemplate call microservice advantage service registry scenario,0,30,0,0.0,1,2018-11-16T03:17:05,0.0
53282104,9129818.0,<angularjs><node.js><mongodb><express><microservices>,migrate monolithic stack application micro service,develop monolithic stack application manage employee inventory office employee service inventory service,0,42,0,0.0,1,2018-11-13T13:28:56,0.0
53204242,7519426.0,<docker><docker-compose><containers><microservices><service-discovery>,docker service discovery dns service registry,application multitude service container sift article reach state dilemma employ service registry service discovery docker kind provide build service discovery system,0,48,0,0.0,1,2018-11-08T08:50:20,0.0
53398424,5590027.0,<asp.net-web-api><asp.net-core><asp.net-web-api2><microservices><asp.net-core-webapi>,add net core api net api webfarm machinekey encryption,microservice architecture net web api machinekey web config require communicate deploy house company server start net core web api net core web api datum protection api machinekey share key file question create net core web api add exist net microservice architecture communicate machinekey,0,51,0,0.0,1,2018-11-20T17:30:05,0.0
53221236,3625215.0,<spring><rabbitmq><microservices><multi-tier>,decouple layer multi layer architecture micro service,scenario currently multi tier architecture pattern application build requirement decouple southbound separate app micro service issue expose service southbound rest api srvclayer add latency issue figure security well message queue rabbitmq call synchronous sure rabbitmq help approach suitable suggestion build usecase,0,56,0,0.0,1,2018-11-09T07:09:03,0.0
53286268,1342455.0,<java><microservices><pivotal-cloud-foundry><pcf>,restart application pcf space,ton service host pivotal cloud foundry pcf good restart micro service space script challenge start service order introduce delay service start manually tedious time consuming automate thx,0,317,0,0.0,1,2018-11-13T17:10:53,0.0
53360035,6247907.0,<docker><microservices><cumulocity>,unable deploy microservice cumulocity,create microservice step link start microservice docker image subscribe api post url tenant tenant tenant application error error react microservice subscription api deploy microservice work internal server error,0,70,0,0.0,1,2018-11-18T10:50:15,0.0
53390257,10114335.0,<spring-boot><microservices><graylog2>,intercept request centralized logging spring microservice,integrate graylog rabbitmq centralized collection log service include http request response custom log rest api good practice spring interceptor controller advice intercept incoming request response send datum graylog,0,73,0,0.0,1,2018-11-20T09:49:32,0.0
53237306,9320665.0,<caching><scale><microservices><google-cloud-pubsub>,update central cache system datum change microservice scale architecture,build microservice system datum three source eventually user matter purpose system question simple attach diagram datum follow source office site define system user configuration main site user interact site action external source datum partner additional datum supplementary user service site office service serve office site user service serve main site import service import additional datum supplementary external source user cache service sync system datum combine pre prepared cache response reason main site serve user work low latency main idea microservice db microservice scale datum change three user send cache service eventually reflect main site cache redis hold datum combine pre prepared response main site service datum change publish pubsub topic cache service update redi db system serve user question user cache service scale happen example update datum message wait pubsub process message prevent case cache service instance update message datum redi cache service instance override message case cache service instance read current cache user datum change update cache datum prevent case instance example read current cache datum third instance update datum override datum pre prepare response base source periodically change approach problem,0,75,0,0.0,1,2018-11-10T08:32:55,0.0
53186157,1059446.0,<maven><microservices><common-code>,maven microservice common module,problem encounter pretty standard common code base micro service despite fact approach discourage hear moment common code separate module build jar deploy local nexus standard maven compile dependency ci build module change common code micro service outright stage process push common module change wait module build receive version push micro service code version awkward fact annoying common module kind source dependency maven proper implement,0,86,0,0.0,1,2018-11-07T08:55:57,0.0
53201267,5143356.0,<caching><microservices><hazelcast>,microservice simultaneous cache update,develop microservice ms deploy docker container monitor kubernete implement caching solution hazelcast distribute cache requirement preload cache startup microservice store fetch specific attribute cache hour refresh cache implement spring eventlistener startup database call attribute cacheput store cache spring scheduler cron expression refresh cache morning good realize clustered environment instance microservice action step simultaneously create stampede database cache scenario good design average follow,0,87,0,0.0,1,2018-11-08T03:46:26,0.0
53265179,4939505.0,<java><linux><microservices><ram><amazon-elastic-beanstalk>,configuration xmx flag,java microservice environment decide configuration configuration refer set xmx flag consider type instance choose leave ram system program medium gb aws eb configure xmx flag java microservice gb load committed memory reach bit gb gb lot free memory problem aws eb report ram leave memory cloudwatch agent nginx linux thing reach kill linux kernel high usage ram question idea good practice choose xmx flag base total ram machine decide experiment,0,110,0,0.0,1,2018-11-12T15:22:11,0.0
53382865,1697575.0,<java><microservices><light-4j>,light light codegen fail generate project,generate project sample petstore openapi json supply generate endpoint model install light codegen codegen project folder follow error output supply client keystore config json openapi json,0,158,0,0.0,1,2018-11-19T21:25:43,0.0
53208783,4467014.0,<node.js><continuous-integration><microservices><codeship><monorepo>,codeship independent ci microservice monorepo,currently nodejs monolith app test codeship test green code deploy heroku pretty easy break monolith app microservice prefer monorepo solution example repo setup independent ci deployment pipeline service codeship idea setup ideal ci,0,246,0,0.0,1,2018-11-08T13:31:07,0.0
53268780,2948490.0,<docker><code-coverage><microservices><jacoco><clover>,add code coverage system integration test docker,add code coverage java spring project current integration system test micro service docker test test add code coverage architecture generate report test service docker lot advance,0,88,2,0.0,1,2018-11-12T19:23:27,0.0
53310576,10431100.0,<microservices><iot>,transform iot application monolothic microservice,system compose sensor temperature humidity camera attach arduino cloud mobile phone develop monolithic iot application task execute three location arduino cloud mobile sensor common task data detection datum transfer execute arduino data saving data analysis datum notification cloud datum visualization mobile problem microservice independent database transform application microservice architecture idea represent task microservice consider task component represent microservice link output previous task input independent thing datum collection microservice place arduino datum send cloud store database distant db datum collection idea thing sensor diff microservice temperature datum collection camera data collection,0,102,2,0.0,1,2018-11-15T00:01:19,0.0
53359329,8745586.0,<spring><rest><spring-boot><microservices>,call rest api project,project user department call rest api rest api call face problem user class department vice versa usercontroller class departmentcontroller class call getuser method getdept class,0,1614,4,1.0,1,2018-11-18T09:09:03,0.0
53367822,10593443.0,<java><spring><spring-boot><microservices><netflix-eureka>,exception send multipart file request eureka rest service point,develop file repository store pdf file eureka spring boot producer consumer architecture client rest point postmappe uploadfile upload file exception help write point handle client request error stack trace,0,140,8,1.0,1,2018-11-19T03:14:31,0.0
58225501,4386185.0,<microservices><batch-processing><light-4j>,standalone light client application exit main class,build batch job call enterprise scheduler access light microservice perform daily task batch job standalone application light client module invoke microservice strange thing happen job main class exit automatically job thread prevent main class exit switch light http client apache httpclient main class exit gracefully wrong,0,12,0,0.0,1,2019-10-03T19:13:53,0.0
58258791,5695190.0,<microservices><netflix-eureka><netflix-zuul>,zuul gateway forward call eureka register instance,spend day simple issue finally post issue face locally set microservice flow local hand itch learn purpose brainer eureka zuul gateway simple microservice reach underlie service url route working serviceid work guy help git hub link raise issue eureka screenshot zuul gateway log info nio exec tomcat localhost initializing spring dispatcherservlet dispatcherservlet info nio exec web servlet dispatcherservlet initialize servlet dispatcherservlet info nio exec web servlet dispatcherservlet complete initialization ms info nio exec netflix config chaineddynamicproperty flip property checkout service ribbon activeconnectionslimit property niws loadbalancer availabilityfilteringrule activeconnectionslimit info nio exec concurrent shutdownenabledtimer shutdown hook instal nfloadbalancer pingtimer checkout service info nio exec netflix loadbalancer baseloadbalancer client checkout service instantiate loadbalancer dynamicserverlistloadbalancer nfloadbalancer checkout service current list servers load balancer stats zone stat server stat serverlist null info nio exec dynamicserverlistloadbalancer serverlistupdater pollingserverlistupdater info nio exec netflix config chaineddynamicproperty flip property checkout service ribbon activeconnectionslimit property niws loadbalancer availabilityfilteringrule activeconnectionslimit info nio exec dynamicserverlistloadbalancer dynamicserverlistloadbalancer client checkout service initialize dynamicserverlistloadbalancer nfloadbalancer checkout service current list servers load balancer stats zone stats defaultzone zone defaultzone instance count active connection count circuit breaker trip count active connection server server stat server zone defaultzone total request successive connection failure total blackout second connection dec est connection dec est active connection total failure count msecs average resp time percentile resp time percentile resp time min resp time max resp time stddev resp time serverlist org springframework cloud netflix ribbon eureka domainextractingserverlist info erlistupdater netflix config chaineddynamicproperty flip property checkout service ribbon activeconnectionslimit property niws loadbalancer availabilityfilteringrule activeconnectionslimit,0,23,0,0.0,1,2019-10-06T15:35:53,0.0
58194710,3513234.0,<architecture><microservices>,decouple datum microservice,scenario help solve dependency service service service database dependency requirement datum service belong record data create time record create service change data structure require require result tight coupling approach solve datum coupling,0,36,0,0.0,1,2019-10-02T03:04:49,0.0
58176633,10952777.0,<java><spring-boot><exception><jar><microservices>,error handler multiple project spring boot,currently work service divide project spring boot error handler jar project project error handler work fine exception response problem project project error handler fail job default handler resolve error class jar restcontrolleradvice controlleradvice annotation basepackage succesful result class result help figure happen,0,38,0,0.0,1,2019-10-01T00:14:52,0.0
58261471,3690467.0,<testing><tcp><microservices><nestjs>,nestjs test tcp microservice,example testing nestj tcp service rest api testing supert tcp socket,0,39,0,0.0,1,2019-10-06T21:44:05,0.0
58304779,805703.0,<spring><authentication><microservices>,spring gateway authentication route,simple spring gateway project microservice service authentication secure microservice request service authenticate authentication service responsible authentication generate jwt token work fine gateway access gateway create token gateway confirm token valid scenario user attempt access secure microservice call auth service verify user correct jwt token require permission confirm return http status code specific message user authenticate confirm allow call proceed request route read apply filter spring gateway route example clear achieve wondering reccomende approach point direction term route code spring gateway note implement filter authentication filter clear example call authentication service filter unclear example filter terminate request allow request proceed,0,42,0,0.0,1,2019-10-09T13:02:05,0.0
58326250,5520363.0,<design-patterns><architecture><microservices><alfresco>,alfresco microservice access database,alfresco ecm base micro service architecture micro service connect shared database micro service maintain database explain micro service architecture alfresco content service high level,0,43,0,0.0,1,2019-10-10T15:19:58,0.0
58173143,5560606.0,<microservices>,composite aggregate service microservice,prepare move monolith microservice model move prepare design break service increasingly find pattern occur web call composite aggregation service fully clear question pattern case call ui talk datum service call service create service service orchestration call manage downstream call service refer composite aggregation service confusion time coordination create service sit level atomic services coordination bff backend frontend pattern case multiple composite service bff sure bff big orchestration service ui call spof anti pattern question micro orchestrator service example coordination service direct call service dependent datum second implement layer atomic service request orchestration api gateway edge service multiple micro orchestrator composite service service top layer api gateway anti pattern spof recommend clear provide concrete example situation describe pretty common ui log enter username password verify credential correct pass user service accomplish authentication service check validate user credential user service datum simple call coordinate credential valid return datum user service api call return error authentication service composite service coordinate call service service interact directly authservice call user service credential valid composite service composite service api gateway type service provide clear answer question composition service composition api gateway multiple composite service interaction require,0,47,0,0.0,1,2019-09-30T18:12:30,0.0
58263232,4519234.0,<docker><kubernetes><scheduled-tasks><microservices>,avoid multiple schedule task parallel,build microservice application kubernete container orchestrator app issue service schedule task daily service deploy multiple service instance set replica number create multiple task time expect instance service task multiple technique handle case technologie stack kubernetes asp net core build micro service bedrock implementation ci cd fabrikate traefik load balancer help,0,47,0,0.0,1,2019-10-07T03:38:19,0.0
58180090,1105448.0,<amazon-web-services><microservices><load-balancing><grpc><envoyproxy>,create service mesh container aw,grpc microservice communication service deploy aw ec instance figure elb balance load http traffic alternative stumble service mesh aws supports app mesh envoy proxy service discovery load balance micro service correct solution achieve load balanced communication container wonder deploy proxy sidecar pattern achieve service mesh apart service mesh load balanced grpc communication service,0,50,0,0.0,1,2019-10-01T07:37:51,0.0
58307209,4629572.0,<node.js><api><express><microservices><express-gateway>,understanding user creation express gateway microservice monolithic api,process learning experiment express gateway simple service small monolithic api sit gateway express gateway start example read documentation grasp user system client customer create confusion lie area start tutorial create user express gateway monolithic restful api viewpoint system db schema user client app call api endpoint user creation process record return client successful creation user authorize jwt oauth express gateway create user pass userservice save db link newly create express gateway,0,52,0,0.0,1,2019-10-09T15:10:20,0.0
58314080,9571426.0,<kubernetes><microservices><istio><jaeger><distributed-tracing>,istio metric apache skywalking,datum metric guide installed backend step guide deploy app deploy app example trace work good metric provide metric configure metric mixer logs istio policy fail connect backend problem namespace error backend datum ui update telemetry,0,128,0,0.0,1,2019-10-10T01:05:37,0.0
58303928,11818726.0,<c#><asp.net-core><jwt><asp.net-identity><microservices>,protect microservice api project asp net identity jwt token,build microservice asp net core question protect microservice asp net identity example identiy project protect microservice project identity server,0,133,0,0.0,1,2019-10-09T12:15:36,0.0
58211265,11719228.0,<java><microservices><multipart><spring-cloud-feign>,upload multiple multipart file feign client microservice architecture,upload multiple multipart file feign client client side module access work fine single multipart file follow error multiple file servlet service servlet dispatcherservlet context path throw exception request processing fail nested exception feign codec encodeexception write request suitable httpmessageconverter find request type lorg springframework web multipart multipartfile content type multipart form datum root feign codec encodeexception write request suitable httpmessageconverter find request type lorg springframework web multipart multipartfile content type multipart form datum,0,140,0,0.0,1,2019-10-03T01:34:13,0.0
58318547,8541221.0,<spring-boot><microservices><spring-rest>,spring rest apicall work fine locally fail production,rest endpoint consume program work fine locally fail production exception locally work fine code,0,28,1,0.0,1,2019-10-10T08:27:39,0.0
58236535,6667539.0,<java><spring-boot><architecture><microservices><dto>,store external client dto microservice,doubt architecture app work build follow module store controller add call external client question implement external dto inside appreciate help,0,48,1,0.0,1,2019-10-04T12:34:47,0.0
58313054,70489.0,<microservices><local>,local development experience work microservice,recommend local development debugging approach microservice architecture monolithic web api debugging involve attach debugger single process process spa call api service spa locally call api locally full visibility call wholly local approach apply microservice architecture independent service glue api gateway development debug cycle locally,0,36,2,0.0,1,2019-10-09T22:23:39,0.0
58298381,8208331.0,<spring-boot><microservices><pom.xml><h2><application.properties>,database datum sample find ifexist true auto create error spring boot,create spring boot application connect database throw error database find help solution implement resolve issue add database dependency pom xml file error pom xml file application property file pom xml application property attach error image refer,0,553,2,1.0,1,2019-10-09T06:39:59,0.0
58170235,7767143.0,<java><docker><db2><microservices>,add jar license file docker image classpath,springboot application connect db database retrieve datum provide rest endpoint facilitate license add classpath application allow communicate db database work build image image locally error state license assume license include docker container classpath fair bit pointer help appreciate license hold lib folder project root jar file docker file,0,57,2,0.0,1,2019-09-30T14:43:23,0.0
58206026,1335677.0,<java><spring><architecture><microservices>,microservice resource management,assume group microsericervice service db client company client database case database service exist good practice managemnt resource service stateless company client config resource description example db file storage call serivce activate resource context service work context example open browser site clientcompany service example authenticationservice check config find host clientcompany host activate context chain service storage db resource context resource config good practice interested possibility create system java spring share link source tool implement task implementation,0,100,4,0.0,1,2019-10-02T16:57:14,0.0
58223281,2205904.0,<api><.net-core><jmeter><microservices><performance-testing>,performance test update endpoint jmeter automatically update row payload,update entity endpoint net core microservice api test performance endpoint store csv file load process reuse csv update require update keep track row version attribute test user order match user order update entity step read csv current row version call update endpoint row version read row version response body store row version jmeter reuse test call update endpoint row version problem store inside csv jmeter read write file java collection inside script read write file dictionary rowversion,0,44,6,0.0,1,2019-10-03T16:25:22,0.0
49683432,5457533.0,<java><apache-kafka><microservices><vert.x>,apache kafka vertx server side well client,good communicate microservice vertx web client library provide vertx simple read apache kafka well read official documentation kafka create producer consumer microservice send method miscroservice kafka excuse ignorance subject,0,276,0,0.0,1,2018-04-06T00:21:19,0.0
49576208,4916979.0,<domain-driven-design><microservices><cqrs>,cross treatment microservice,learn microservice understand structure imagine ecommerce application service catalog product service price service promotion shoppingcart question service charge apply promotion shoppingcart treatment datas shoppingcart service promotion service save result shopping cart price help,0,38,0,1.0,1,2018-03-30T14:24:43,0.0
49548508,4812900.0,<java><mongodb><rabbitmq><microservices>,reliable fault tolerant scalable solution track update mongo collection,problem description couponcartrule condition define coupon code apply order shopping cart rule coupon specific condition overriden reuse couponcartrule create coupon coupon couponcartrule grow max record order succesffuly place order couponcode discount apply order collection manage om team big receive order add cancel event order create cancel requirement check maxusage maxbudget breach checkout plan listen order add cancel event update usage order add order cancel event step update currentusage uniquecoupon usage operator mongo update currentusage budget stat couponcartrule suggestion code idempotent downtime failure step listener send message dlq count update desire option track record stat uniquecoupon level aggregate scr level aggregation operation eventually consistent subsequent coupon code invoke real time efficient,0,39,0,0.0,1,2018-03-29T05:15:53,0.0
49650746,4112702.0,<c#><rest><microservices><restful-architecture>,rest api share file,share file microservice personal trouble feature share file pdf file option deserialize file send binary http response message option sharing link link guide user folder locate microservice location option handle problem possibility prefer,0,43,0,0.0,1,2018-04-04T12:13:32,0.0
49640387,4267356.0,<synchronization><message-queue><microservices>,setup datum sync micro service message queue,currently build system saas micro service large service constraint multiple client multiple account core system require datum system client system core system database manage sync micro service set time call system api process datum apply core database mark specific change state message queue service process core problem multiple client multiple sync job multiple sync service sync service app manage job sync operate service operate mixed client system aim scale easily option basic cron job set sync service single client unable scale easy service item mq sync service pick service scale aws system cloud watch push mq multiple sync service work queue problem good option recommendation technology dependent answer fine service build node js mysql database,0,314,0,0.0,1,2018-04-03T23:12:36,0.0
49709956,2292326.0,<meteor><hosting><microservices>,multiple meteor microservice galaxy container,develop microservice meteor wonder host multiple instance galaxy container,0,85,1,0.0,1,2018-04-07T17:19:01,0.0
49600833,2694452.0,<node.js><mongodb><design-patterns><architecture><microservices>,backend api node mongo slow front client result live suggestion,write series small app micro service practicality learning app work independently build separate frontend client search bar find datum service implement live autocomplete search result user type search multiple database current approach split app app backend api frontend client common auth service app utilize authorization approach work fine speed performance sure personal requirement mine implement search bar autocomplete search result api request service result feel slow case wonder plan node express mongodb backend node express vue front personal experience performance aspect work multiple api approach slow well approach allow separation application,0,37,2,0.0,1,2018-04-01T17:37:41,0.0
49579074,4479594.0,<caching><microservices>,cache implementation microservice good practise,design relate question multiple micro service implement cache possibility service access cache set fetching datum cache good assume customer service update cache customer datum cart cache data set cart object customer datum kind scenario good implement,0,75,4,0.0,1,2018-03-30T17:54:05,0.0
49736921,1745202.0,<spring-boot><microservices><netflix-feign><spring-cloud-feign><feign>,feign client upload multipart file,call upload file service resttemplate call service convert resttemplate call feign client accomplish multipart file upload feign find good example,0,1674,4,0.0,1,2018-04-09T15:50:56,0.0
47622392,856498.0,<node.js><http><process><microservices>,unique configuration vhost micro,zeit service setup restful api multiple frontend domain client config spread app differentiate client handler setup example config handler config load launch http micro process request domain method info client prob header order maintain request overwrite simultaneous request client microservice check client determine launch process client launch messy sure handle thing pass client code call practical situation avoid option pass client launch process host well mistake assumption process client approach well wonder exist solution manage provide solution issue,0,23,0,0.0,1,2017-12-03T19:32:00,0.0
47641231,168179.0,<json><response><microservices>,insert templated number apimocker response,accord api mocker github template response placeholder example configuration entry templatesample json call return note quote problem endpoint expect pure number string configure apimocker wrap quote,0,25,0,0.0,1,2017-12-04T20:12:28,0.0
47529688,8631413.0,<java><rest><hadoop><e-commerce><microservices>,hadoop integration commerce portal,build commerce portal scratch java rest service plan mysql oracle future elasticsearch build portal microservice question care analytic hadoop hdfs integration,0,41,0,0.0,1,2017-11-28T10:50:10,0.0
47479663,4916475.0,<reactjs><rest><google-cloud-platform><google-cloud-endpoints><microservices>,handle long request frontend,application allow user enter url article analyze api gateway reach correct service engage process analysis second depend article word count reactjs client send request api wait second receive response well handle enqueue job api pe client reactjs frontend,0,66,0,0.0,1,2017-11-24T20:31:45,0.0
47465212,2514645.0,<microservices>,microservice communication,imagine follow microservice call team player separated database postgre association team player store relation inside player team attribute option kafka team insert database send event player listen event update team table inside player microservice player microservice team player entity order relationship drawback datum replication integrity avoid event sourcing cqrs call microservice team order list team view association post player microservice drawback call http team service correct approach communicate microservice order archive dependency releationship microservice datum replicate step reasonable,0,77,0,0.0,1,2017-11-24T01:33:52,0.0
47572543,5855232.0,<spring><spring-boot><microservices><netflix-eureka>,spring boot eureka server bean creation error,spring eureka server follow error code mac machine perfectly work window machine find solution reinstall sts tool suite eclipse error persist myapplication java application yml pom xml window machine work throw issue mention,0,1625,0,0.0,1,2017-11-30T11:36:24,0.0
47555732,8345238.0,<java><exception-handling><microservices><spring-cloud-feign>,correctly handle inter service exception spring base microservice architecture,application develop microservice architecture microservice spring boot application communicate feignclient interface microservice restapi call microservice normal condition reply object json response serve client throw exception chinese box exception client word myexception status embed exception status reply client inner json,0,1372,0,2.0,1,2017-11-29T14:58:24,0.0
47571761,9033318.0,<testing><microservices>,microservice testing process component individual micro service testing,explore individual microservice testing good guide post test individual microservice process test service execute process provide lib understand follow thing exactly process testing work microservice architecture pointer inproctester lib,0,222,0,0.0,1,2017-11-30T10:57:12,0.0
47486390,5294769.0,<nginx><docker-compose><uri><microservices>,nginx docker compose route issue,docker compose file comprise microservice leverage uri route order handle cor compose file nginx routing issue access resource configuration nginx find api endpoint start resolve issue route configuration request pretty nginx sure note api expose container build,0,232,0,0.0,1,2017-11-25T13:16:55,0.0
47650139,9055249.0,<python><mongodb><nosql><mongodb-query><microservices>,prevent multiple service access document mongodb till processing,multiple instance service service access collection unprocessed document mongodb role service fetch unprocessed document collection rest call uuid response store response collection multiple service access document lead duplicate step deal situation findandmodify progress field call function query progress field update service access success rest call delete record failure call findandmodify update service access time call find function document document store collection service document document insert service call find function performance bottleneck approach well approach enhance performance,0,43,1,0.0,1,2017-12-05T09:29:09,0.0
47613318,5479655.0,<spring><rest><apache-kafka><message-queue><microservices>,communicate rest message queue,rest microservice communicate microservice hybrid communicate rest message queue example api gateway communicate app mobilephone rest communication backend message queue case homepage vehicle database api gateway request api gateway request publish message queue microservice message publish result api gateway consume result send response implement spring boot apache kafka implement asynchronous communication german,0,625,1,0.0,1,2017-12-02T22:33:40,0.0
47515021,2361365.0,<angular><d3.js><package><jhipster><microservices>,add librarie jhipster gateway,add js jhipster gateway project develop command yarn add add library node modules folder package json content package json dependencie include project angular help,0,198,1,0.0,1,2017-11-27T15:58:20,0.0
47607210,8776664.0,<java><shared-libraries><microservices>,class common project,build microservice application class common module separate project sth duplicate project class authentication change mistake class library bad idea,0,24,2,0.0,1,2017-12-02T11:05:33,0.0
47461815,5848207.0,<microservices>,design microservice network hop,couple microservice independent module code database oracle service multiple table post request service contact service meta table service critical path heavy traffic service single post call bottle neck option cache datum host service service fetch cache fast strong consistency business requirement risk stale datum cache move completely service network hop problem approach service transactional boundary datum creation affect datum service stay well design kind high consistency system scale regard,0,301,2,0.0,1,2017-11-23T18:48:51,0.0
47549976,894095.0,<c#><rest><microservices>,validate data microservice,service separate rest api user api user cook api cook gateway api route request service entity relate follow post api user create user user cook point choose post api cook userid associate validate userid valid exist userid valid associate cook question validation perform happen approach cook service receive valid userid,0,216,8,1.0,1,2017-11-29T10:02:59,0.0
58862987,6714426.0,<rest><http><microservices>,idempotent key client perspective,suppose api call downstream service api call post suppose charge timeout happen reverse proxy charge happen case respond consumer consumer call idempotent key request succeed downstream service return cached copy response idempotent key call api keep payment charge question client retry idempotentid initiate request altogether augment previous question ui decision idempotent request retry logic reuse basically understand idempotent key client perspective,0,13,0,0.0,1,2019-11-14T17:52:24,0.0
58770277,90717.0,<microservices><message-queue><serverless-architecture>,fire message event message send,work architecte micro service solution code angular front question message chain figure message broker azure service bus rabbitmq concept find handle case fire message specific set message fire example actual solution notify pay bill send message fire microservice process independently financeservice debit ledger fire emailservice email customer pay bill discountservice check discount pay time send three message fire message email customer discount bill three tiggere order matter schedule message send message poll message fire minute hour day sql table mark complete lock table fill send message good solution find anti pattern micro service message queue design,0,16,0,0.0,1,2019-11-08T16:19:32,0.0
58912213,2861702.0,<cloud><microservices><api-gateway>,service service communication api gateway service mesh,afaik api gateway user service communication service mesh service service communication find good explanation bibliography explain api gateway apigee suitable inter process communication,0,17,0,0.0,1,2019-11-18T10:14:12,0.0
58886969,2473110.0,<spring-boot><jdbc><openshift><microservices><spring-jdbc>,update auto renew db password jdbc connection spring boot,strange case spring boot microservice service live inside openshift cluster problem face database password renewal policy app jdbc connection access oracle database db password retrieve container startup homegrown vault issue password keep change day application jdbc connection pool talk database service expect receive high volume traffic increased number session middle session password renew ensure work password query jdbc connection pool couple thing separate service retrieve password momentarily consumer service require password simply successful password database service kind ugly implementation multi container pod auxillary pod listen database change lame idea well core problem load jdbc connection pool auth establish connection communicate database middle session update password idea,0,20,0,0.0,1,2019-11-16T02:18:22,0.0
58923991,7149835.0,<spring-boot><npm><microservices><jhipster><jhipster-registry>,jhipster gateway microservice npm start faille unexpected json input parse org nwsfcbaeb,test basic microservice architecture jhipster gateway microservice jhipster shoot error,0,20,0,0.0,1,2019-11-18T22:42:38,0.0
58787346,12350075.0,<architecture><microservices><e-commerce><software-design><system-design>,multiple order management system single oms,case sell type unrelated service product platform create order management system item create separate oms system product service type expose functionality app create common oms company wide oms concept item item group type process advantage system decouple con type service grow number omse increase advantage second system create single oms company expansion workflow plugin system level preferred keep omse separate micro service big oms single point failure proceed payment big accommodate payment workflow strict prepay postpaid hybrid,0,22,0,0.0,1,2019-11-10T09:35:14,0.0
58817683,1933780.0,<microservices><software-design><distributed-system>,syncronous request work asycrounous microservice enviorment,microservice communicate asynchronously message broker kafka service ui face service accept synchronous request transaction depend service message message broker queue message process request wait till response service design type microservice communication require type communication synchronous asynchronous,0,23,0,0.0,1,2019-11-12T11:24:00,0.0
58841582,3462189.0,<oauth><oauth-2.0><microservices><man-in-the-middle>,basic authorization fine machine machine communication compare oauth,introduction developer team server base application locate company architecture call company server resource authorization server oauth terminology second customer architecture call customer server client resource owner customer server load datum company server company server authenticate team decide apply oauth standard authorization resource server single monolith application benefit course time implement simple constant key store header wonder benefit solution basic authentication base encode request customer server single user token fact constant key store header terminology term simplicity argument microservice machine machine communication customer server token provide authorization server multiple resource server argument oauth pattern allow multiple resource server additionally reimplemente authorization token jwt resource server check token authorization case monolithic company server responsible resource authorization benefit argument man middle protection argument oauth protection man middle attack intercept token authorization server invalidate token directly storage case sign jwt short expiry time prevent compromise token connection server ssl secure steal token storage web base mobile base application key locate server side summary security benefit oauth compare constant key request situation,0,26,0,0.0,1,2019-11-13T16:34:18,0.0
58810466,6641872.0,<python><azure><docker><microservices>,deploy python script daily azure,python script pull datum azure data lake cluster perform simple compute store sql server db azure shebang second sqlalchemy panda azure datum library script daily service fabric cluster good option containerize docker http trigger api trigger day good azure microservice design help,0,28,0,0.0,1,2019-11-12T00:39:52,0.0
58900290,5857732.0,<html><microservices><micro-frontend>,micro frontend composite ui difference,pretty microservice subject start read composite ui question difference composite ui micro frontend basically describe thing cheer,0,28,0,1.0,1,2019-11-17T12:11:08,0.0
58913752,6456586.0,<spring><authentication><architecture><authorization><microservices>,organize user authentication microservice architecture,microservice custom authentication authorization service uaa sense user controller login token verification create user second case user administration add favorite contact user fill profile additional user address second case second micro service purpose recommend good practice micro service user management profile contact credential login token provide micro service manage user credential token provide uaa second user additional info micro service complete separate user management second authentication token providing consume rest api user service user datum verify user credential option fine listen opinion,0,31,0,0.0,1,2019-11-18T11:39:26,0.0
58845725,1798137.0,<architecture><microservices><devops><data-processing><event-driven>,event drive architecture choose modular data processing pipeline,work build architecture modular datum processing platform gist platform support input document type process pipeline datum science module example pipeline diagram call block module follow requirement platform facilitate multiple project multiple pipeline module create programming language python module handle single document model entity time easy add module platform define pipeline build module easy datum scientist debug locally test pipeline developer proxy module premise pipeline interrupt straight forward catch failure resume pipeline restart point redo work module work traceable log currently version platform number issue celery clear manager strategy chain queue task upfront addition strategy task fail inspect log manually currently graylog speak log celery include meta datum default logger manually override celery internal facilitate feel celery frustrating work happy path scenario build frontend gui gojs easy manage pipeline great autodiscovery module assist user build flow module register consider event drive microservice architecture manager service supervise pipeline send event module containerise microservice work module send event manager turn signal module pipeline definition store database mongodb kafka case define service topic code upfront ideally add remove stream module topic module modify code dynamically define event bus classic pub architecture fit front microservice datum processing module thought tackle lot,0,33,0,0.0,1,2019-11-13T21:15:44,0.0
58862313,3882966.0,<mysql><spring-boot><docker><containers><microservices>,connect remote mysql db springboot docker service,springboot application require remote mysql db jar file work containerize springboot application sqlnontransientconnectionexception docker setup windows os machine application property file online material explain connect docker mysql docker springboot application proceed,0,37,0,1.0,1,2019-11-14T17:11:08,0.0
58914183,10834647.0,<architecture><microservices><nservicebus><azureservicebus>,nservicebus azureservicebus,azureservicebus nservicebus explore nservicebus micro service architecture understand nservicebus work transport learn sqlserver msmq azureservicebus create pocs transport understand azureservicebus work enterprise service bus benefit nservicebus word azureservicebus transport nservicebus good reason azureservicebus,0,42,0,0.0,1,2019-11-18T12:04:37,0.0
58889429,12106875.0,<spring-boot><docker><gradle><amazon-ec2><microservices>,docker image spring boot application,learn create docker image spring boot application gradle requirement shop start refer follow step mention dockerfile build gradle ruin error,0,51,0,0.0,1,2019-11-16T09:44:59,0.0
58790562,556169.0,<rabbitmq><microservices><nestjs>,define queue create microservice,hybrid nestjs app http rabbitmq create microservice queue follow nestjs rabbitmq guide github example main app module module import app controller understand define queue define rabbitmq queue create microservice create microservice queue,0,55,0,0.0,1,2019-11-10T16:17:50,0.0
58903569,9289227.0,<java><maven><microservices><hystrix>,java lang noclassdeffounderror org springframework boot banner mode hystrix,create simple hystrix application add maven dependency throw error maven dependency resolve issue create simple hystrix application,0,24,1,0.0,1,2019-11-17T18:08:36,0.0
58908601,1197768.0,<java><spring><microservices><quartz-scheduler>,high computation task async feedback,spring web application api lot computation api lot time step lot time lot computation lot io db return response thread problem approach application crash code execute approach encounter problem thing remember instance application,0,31,1,0.0,1,2019-11-18T05:43:47,0.0
58879516,10981595.0,<spring><spring-boot><spring-security><microservices><spring-cloud>,architecture microservice spring boot,work spring cloud microservice implement security jwt token security application entity user role userrole request zool service call authentication service authentication service create return jwt token microservice rest application question app jwt token question app question entity authorid field clear set authorid long type create user role userrole entity simple copy auth project question app set author column option question user webpage call service question app fetch question auth service fetch user author good practise,0,39,1,0.0,1,2019-11-15T14:53:37,0.0
58880865,7277293.0,<redis><rabbitmq><microservices><scalability><hazelcast>,rabbitmq redi hazlecast scalable microservice architecture,question concern scalability microservice architecture question share memory database instance service slow read write process solution design scalable system rabbitmq help,0,59,1,1.0,1,2019-11-15T16:13:09,0.0
58742306,3162702.0,<database><microservices><connection-pooling><kubernetes-pod>,database connection pool work multiple instance micro service,microservice hickaricp postgresql work fine max connection plan load test concurrent request instance micro service question connection pool connection share instance max connection keep hickaricp change database side sustain load,0,22,2,0.0,1,2019-11-07T05:12:30,0.0
58862682,12374232.0,<asp.net><.net><.net-core><microservices><.net-framework-version>,microservice net framework net core,net developer learn implement microservice net framework article refer internet search talk implement microservice net core wonder find article develop microservice net framework net core feature time microservice question question develop microservice net framework constrain limitation alternative choose net framework develop microservice orient architecture example sample code helpful,0,44,2,0.0,1,2019-11-14T17:33:16,0.0
58814430,1335677.0,<kubernetes><architecture><microservices>,microservice allocation kubernete namespace multi tenant application,choose schema allocation microservice multi tenant application kubernate case case productive scheme easy administer difficult implement second case incapsulate productive scheme,0,51,2,0.0,1,2019-11-12T08:08:37,0.0
58740621,3760216.0,<go><microservices><opentracing><distributed-tracing>,pass opentrace datum json,api gateway start tracer span validate email pass validation pass detail json object start follow struct empty start distribute trace select json native easy upgrade protocol change mistake,0,52,2,0.0,1,2019-11-07T01:16:28,0.0
58793543,6767856.0,<architecture><microservices><cqrs>,read model relational datum cqrs,familiar cqrs microservice architecture understand cqrs consist separate read model domain model service database read model optimize query side monolithic architecture understand deal relational datum live service example user microservice post microservice read model suppose query post user publish manage datum microservice,0,52,3,0.0,1,2019-11-10T22:33:10,0.0
58838804,8010507.0,<c#><.net-core><microservices><message-queue><hangfire>,microservice processing receive message sequentially,microservice system instance business base orderid unique orderid message message long time processing process message second message message force system process sequentially idea scenario idea scenario share memory technique cache server hangfire backgroundjob continuewith search good practice,0,62,4,0.0,1,2019-11-13T14:00:23,0.0
46850814,3133133.0,<node.js><microservices><pm2>,pm error emfile open file,pm manage node js based micro services platform dashboard micro services status service cpu memory pm api write follow piece code function call second display datum dashboard notice service start cpu pm daemon service offline respond issue command pm manually kill process start service error extract log file help code call second good approach optimize call pm disconnect function advise regard habib,0,737,0,0.0,1,2017-10-20T14:03:31,0.0
46947124,3273299.0,<architecture><cluster-computing><instance><microservices>,design job scheduler kind job,junior developer question design architecture job scheduler design architecture scheduler manage multiple task multiple category movie shopping food category three task implement scheduler execute task category task category independent task categorya parallel categoryb depend schedule type design mind turn category separate service individual instance modular system consume instance task category category task task task category task task task category task task task idea group category task task module inside task collection specific task belong category task task relate category task relate category task relate category task task relate category task relate category task relate category task task relate category task relate category task relate category well design love insight,0,266,1,0.0,1,2017-10-26T06:20:26,0.0
46829594,1358676.0,<java><rest><session><microservices>,session alternative microservice,web client invoke multiple service user authenticate store email send email request session hear good practice rest datum send request stateless alternative db session management break stateless principle rest contradict opinion email store session storage browser,0,789,1,0.0,1,2017-10-19T12:13:28,0.0
46828175,7458937.0,<java><spring-boot><microservices><netflix-eureka><spring-boot-configuration>,manage property file inside common micro service spring boot,currently work spring boot micro service project consider micro service project application yml file separately micro service add microservice manage service property file view config service structure eureka yml inside config service file eureka service bootstrap property config service application propertie config application file follow step start config service start eureka service eureka server error problem eureka server config file inside config service help resolve micro service folder,0,376,1,0.0,1,2017-10-19T10:48:25,0.0
46924175,908874.0,<php><node.js><apache><payment-gateway><microservices>,node js application php library,web application write node js implement payment gateway support nodejs support php asp work host node php application server write microservice rabbitmq communication bridge nodejs php,0,141,2,0.0,1,2017-10-25T04:47:15,0.0
46764158,1170756.0,<java><java-ee><design-patterns><microservices><enterprise-architecture>,design application multiple request source ws soap rest mq batch,design application request multiple source web service soap rest online system message queue batch job application interface application result understand microservice application build java framework help accept input multiple source mention,0,65,3,1.0,1,2017-10-16T06:29:57,0.0
46786169,8117489.0,<scala><akka><microservices><akka-http>,check request body parameter type validation akka http micro service,object request postman check request parameter valid invalid request body field wrong datum type handleall methodrejection change query param false parameter time,0,622,6,1.0,1,2017-10-17T08:52:38,0.0
50841501,2289426.0,<apache-kafka><microservices><netflix-zuul><netflix-eureka><netflix>,apache kafka spring cloud netflix stack,currently spring cloud netflix stack development microservice base application service provide netflix stack apache kafka inter communication microservice kafka topic microservice subscribe real problem start load balance proxy gateway eureka work goole find satisfying answer expert help appreciate question help advance,0,809,0,0.0,1,2018-06-13T15:55:01,0.0
50772902,3310115.0,<microservices>,break microservice,work application create assessment student microservice confused assessment question micro service split assessment list question feel domain micro service help decide,0,55,0,0.0,1,2018-06-09T09:41:14,0.0
50800231,3355776.0,<graphql><microservices>,graphql provide context resolver resolve stitched request,couple microservice graphql layer stitch expose service cost avoid direct communication service pass service exist service basically resolve service proceed request expose send argument kind context service sum exposed service stitching service service service property service communicate directly expose service resolve service inject service,0,56,0,0.0,1,2018-06-11T14:34:55,0.0
50891973,8715170.0,<spring-boot><service><microservices><netflix-eureka><service-discovery>,shutdown service spring boot,write simple microservice understand netflix eureka work wonder general possibility programmatically shut service java deregistration eureka service registry result find solution spring boot actuator endpoint post request result reach case shutdown service spring boot base,0,84,0,0.0,1,2018-06-16T21:39:57,0.0
50816609,529296.0,<java><microservices><undertow><wildfly-swarm>,add custom undertow httphandler thorntail fka wildfly swarm,start thorntail thorntail io wildfly swarm create microservice website state proof concept thorntail ship undertow undertow io add register custom undertow httphandler httphandler chain call handlerequ current httphandler advance btw add thorntail tag stackoverflow rep allow,0,347,0,0.0,1,2018-06-12T11:56:37,0.0
50718353,6249921.0,<node.js><microservices><trace>,request response body http request microservice application,application consist microservice request response request receive send microservice minimal change code application node js trace framework provide timing,0,725,0,0.0,1,2018-06-06T10:40:29,0.0
50902528,186820.0,<database><cloud><microservices>,microservice database organize microservice,time read microservice service subdivide system system specialize domain datum assume service tradition db store datum datum store distribute domain datum belong domain service basket service handling user shopping cart payment service handle payment order place basket great example product store monolithic application single database store business datum datum reference,0,43,1,1.0,1,2018-06-18T04:02:29,0.0
50876475,1688479.0,<microservices><jhipster><gateway><service-discovery>,jhipster microservice gateway temporarily throw http error service instance terminate,standard jhipster setup consist gateway microservice application jhipster registry service discovery change kind code config generate jhipster generator work expect shut microservice application instance sigint cli kubernetes pod termination temporarily receive http internal server error request microservice endpoint gateway find stacktrace http error gateway gateway load balancer microservice instance terminate consul jhipster registry eureka find behaviour step reproduce start registry gateway microservice instance gradlew wait verify call terminate microservice instance relaod couple time second http error occur second error disappear remain microservice receive traffic box jhipster setup pretty confused find article address issue internet experience problem idea wrong solve problem pretty long find solution feel stuck log config trace happy post,0,319,1,0.0,1,2018-06-15T13:19:25,0.0
50688223,3205479.0,<microservices>,update add separate service separate service,start migrate exist project microservice architecture lot video lecture conclusion service task task great service design entity basically crud operation add update delete operation request high compare operation typically update add delete admin guy break crud entity service entitycudservice create update delete entitylookupservice service point collection mongo sql change collection table fail hear maintain semantic versioning sound hear microservice share model datum source optimal solution handle ton ten update add entity help greatly appreciate,0,71,1,0.0,1,2018-06-04T20:22:49,0.0
50903364,5188207.0,<domain-driven-design><microservices><orchestration><choregraphe>,orchestration choreography micro service architecture,micro service architecture read concept orchestration choreography guideline suggestion choose choreography orchestration,0,1951,1,0.0,1,2018-06-18T05:57:41,0.0
50707566,9706058.0,<docker><kubernetes><microservices>,kubernetes minikube environment variable,simple spring microservice project minikube project lucky word client port lucky word server port lucky word client communicate lucky word server inject static nodeport lucky word server environment variable kuberenetes deployment script lucky word client deployment lucky word server service lucky word server deployment lucky word client service lucky word client,0,497,1,0.0,1,2018-06-05T19:25:54,0.0
50828793,3016392.0,<spring-boot><postman><microservices>,connection time error microservice,build microservice microservice consume rest api service follow error disable window firewall mcafee antivirus firewall error call rest api directly postman tool microservice error controller class service class,0,569,2,0.0,1,2018-06-13T03:45:25,0.0
50790960,7147234.0,<c#><rest><.net-core><microservices><separation-of-concerns>,seperation concern separate patch post delete microservice model dto externally,typical netcore webapi microservice architecture environment entity framework connect sql database model dto separate restfulness action respond individual patch post delete method data model microservice approach create microservice expose exact restful functionality api specific datum model dtos create api expose restful patch post delete separate static model dto entitybuilder configuration microservice concern pass datum rest microservice job dynamic fashion super experienced object orient programming method crud microservice child microservice talk api gateway method work pass set model dto entity framework entitybuild parameter crud microservices program cs main method path advance advise helpful example,0,108,3,0.0,1,2018-06-11T05:26:36,0.0
50810342,9674208.0,<java><spring><microservices>,spring java microservice war size large,time release production server copy war microservice war file size approx mb simply change small thing code maven dependency combine war file size big reduce size war simply deploy code dependency,0,207,3,0.0,1,2018-06-12T06:16:18,0.0
52700439,8097402.0,<java><docker><microservices>,docker microservice err connection refuse,test microservice docker docker access build image address dockerfile image map port dosn help docker quickstart terminal testing message image docker ps,0,40,0,0.0,1,2018-10-08T10:36:43,0.0
52503315,1874087.0,<docker><containers><microservices><dcos><pod>,pod definition deploy dc os,dc os struggle deploy pod simple example provide deployment remain stuck deploying stage plenty resource issue container exist virtual network queue pdi api include definition file start single container deployment deploy add additional container definition unsuccessful deploy container time jenkin image publish exist docker registry jfrog include example marathon json successful deployment appreciate feedback help service stick deployed stage unable drill log command ui container image pdi queue artifactory server repos pdi pdi queue container pod definition error stick deployment stage marathon json error successful deployment,0,78,0,0.0,1,2018-09-25T16:57:36,0.0
52566203,10036337.0,<domain-driven-design><microservices><cqrs><onion-architecture>,implement infrastructure service cqrs architecture,intend implement infrastructure service project cqrs architecture key point cache infrastructure service datum project finally data command query implement infrastructure service project,0,134,0,0.0,1,2018-09-29T07:30:34,0.0
52659319,6367311.0,<php><angularjs><angular><microservices>,hide variable inside state method,code module module require hide view,0,45,1,0.0,1,2018-10-05T06:12:58,0.0
52701137,10410020.0,<database><.net-core><microservices>,retrieve datum database micro service,currently micro service architecture landing application user list campaign campaign micro service associate parameter coupon coupon micro service destination country content management micro service create user user management micro service coupon destination country user listing retrieve detail lag performance,0,50,1,0.0,1,2018-10-08T11:19:40,0.0
52517258,2535298.0,<ruby-on-rails><microservices><multi-tenant><saas>,saas application architecture microservice monolithic,build app ecommerce seller visualise datum graphical manner sale advertising campaign metric break app component three app user create personalise dashboard metric graph user apply advance filter data visualise datum filter datum graph set background job fetch datum third party api platform job schedule weekly basis daily basis hourly basis depend job type data volume high build saas platform data api automation task crawler manually download user selenium partially build ruby rail suggestion architectural decision start development question microservice architecture monolithic build background job system rail activejob queuing library third party background job handler background job include massive api call architecture multi tenant multiple seller choose microservice architecture communication medium micro app share db micro app process operation start job http call service well communication medium time,0,563,1,0.0,1,2018-09-26T11:59:46,0.0
52643920,10420971.0,<java><docker><neo4j><microservices>,microservice eureka interface,application java angular front spring boot neo database application microservice eureka server find http localhost problem start microservice appear instance currently register eureka eureka interface launch micro service console error interested penultimate forum explanation talk login neo problem connection database moment understand despite forum launch micro service log google account neo disconnect success error micro service launch eureka interface code sure friend work project code work advice help wrong path,0,51,2,0.0,1,2018-10-04T09:59:36,0.0
52636200,10453544.0,<java><spring><oauth-2.0><cron><microservices>,authenticate cron job spring boot oauth server,microservice authorization resource server second microservice resource server cron job cron job request microservice token order request microservice token cron job,0,57,2,0.0,1,2018-10-03T21:52:20,0.0
45992134,8381767.0,<jpa><spring-boot><spring-security><microservices><hibernate-envers>,enverse customize user customized revision listner,jpa hibernate enver micro service save username better save user system update record micro service user update save user customize code requirement,0,35,0,0.0,1,2017-09-01T01:22:35,0.0
45964545,8537751.0,<tomcat><microservices>,approach route request relevant service microservice architecture,suppose service user authorisation product order inventory history expose rest base api communicate internally service expose api develop microeservice architectural pattern individual service reliant communicate rest queue start consider deploy single node service deploy single node approach ideal service discovery registry mechanism netflix tool chain eureka zookeper direct request relevant service authentication authorization api product direct product service api order direct order service scenario service distribute multiple node consider service single node plan live phase discovery registry api gateway circuit breaker approach microservice develop service separate web app deploy individual war tomcat spring base app tomcat handle redirection basis url productservice api product redirect tomcat productservice webapp option viable option live service develop separate webapp reliant schema deploy single tomcat instance consume ui layer phase base code individual separate service discovery registry approach challenge foresee option service separate war discovery registry routing main entry request productservice api product productservice webapp authentication service app route appropriate service handle routing separate war mechanism single instance follow option request land authentication service app url redirection route logic write send authenticate request required app service rest base routing camel base simply db base parse string call rest api require service authentication app api gateway mention missing queue request land authentication service app url redirection write individual queue dedicate service service subscribe specific queue,0,240,0,0.0,1,2017-08-30T15:36:12,0.0
45917894,7434324.0,<node.js><angular><jhipster><microservices><gateway>,blank jhipster angular gateway,face kind issue jhipster gateway application angular machine common step check application svn application load source code file application svn image npm install yarn install mvnw yarn start parallel cmd window application work fine port provide yarn unable port exception error system fine work fine confuse solve log,0,213,1,0.0,1,2017-08-28T11:27:36,0.0
45964527,837953.0,<rest><wcf><domain-driven-design><microservices>,microservice passing entity guid unique code,microservice customer service order service customer service store customer dob order service mange order customer place order number cost good pass customer unique reference order service solution customer guid uniquely customer service pass order service solution generate business human friendly unique code customer service pass order service solution,0,264,3,0.0,1,2017-08-30T15:35:26,0.0
46021905,2700478.0,<rest><microservices><server-sent-events>,microservice server send event browser limitation,micro service orient architecture micro service offer sse endpoint stream event client http connection open keep alive client service approach unpractical client web browser web browser limitation number http connection open simultaneously server domain wrong pity sse great technology stream event good approach stream event micro service orient architecture client browser,0,266,3,0.0,1,2017-09-03T09:15:10,0.0
45996858,734702.0,<docker><docker-compose><microservices>,microservice docker,setup project build microservice orchestrate docker simplified schema project component dependency rabbitmq manage docker compose yml file manage project docker compose file problem individual component problem microservice depend rabbitmq compose file manage dependency component individual component unit test instance problem dependency add dependency dockerfile component docker compose file component good practice setup system lot update note forget mention microservice repo,0,196,5,0.0,1,2017-09-01T09:14:22,0.0
39589556,601311.0,<java><microservices><netflix-eureka>,debug eureka client side http request,register monolithic application eureka server migration step microservice client server version registration request fail bad request error java code create eureka client eureka client property logs output server return error code bad request print full registration request log file,0,782,0,0.0,1,2016-09-20T08:47:07,0.0
39658735,685091.0,<spring><rest><security><uri><microservices>,good security practise pass resource uri,currently work develop rest api bank rest api principle uri uniquely identify pass resource request url customer customer delete customer problem bank pass uri prohibit security reason uri read industry level good practise overcome security issue violate rest resource principle,0,279,2,0.0,1,2016-09-23T10:38:38,0.0
39686804,814814.0,<rest><web><architecture><microservices><consul>,design multiservice architecture public service consul io,design question microservice setup service discovery consul io applicable service discovery tool service web node build net framework build solution front node series service backend service provide product search front website consul io provide redundency service front angularjs product rest endpoint query question well setup web node host product service relay internal product service consul io lookup health check frontend client connect directly product service second case wonder client connect backend service discovery work wonder well design choice option bring overhead http call forward thought,0,81,0,0.0,1,2016-09-25T12:28:38,0.0
39741506,1743843.0,<java><microservices><vert.x>,setclusterhost vertx,learn vertx download sample github consider follow code snippet imagine localhost cluster,0,232,0,0.0,1,2016-09-28T08:04:26,0.0
37750638,3102968.0,<cluster-computing><microservices><failover>,cluster microservice component,set microservice collaborate eco system occasional problem microservice accidentally thankfully monitoring build realize corrective action redundancy build microservice master slave approach slave stand master slave pick consider framework service registry register microservice allow control suggestion achieve kind master slave architecture microservice enable failover redundancy,0,256,0,0.0,1,2016-06-10T14:21:41,0.0
37806275,4039842.0,<web-services><architecture><microservices>,good practice build microservice api term communication technology,good practice chose specific communication protocol build microservice instance build mysql microservice native mysql connection prefer wrap api rest secondly choose single protocol rest json rpc interaction microservice,0,258,0,0.0,1,2016-06-14T08:02:28,0.0
37938389,4469944.0,<java><cloud><keystore><microservices><pki>,keystore management cloud environment,java keystore store content signing key certificate application keystore update web portal certificate add delete application deploy elastic cloud multiple instance stuck keystore synchronize multiple instance instance sign key public certificate store key certificate database,0,799,2,0.0,1,2016-06-21T07:44:39,0.0
37906461,4801091.0,<spring-boot><microservices><netflix-zuul>,zuul webapp architecture,question global architecture multiple webapplication zuul classic webapp talk webserver host webapp zuul directly talk zuul server redirect appropriate service,0,296,0,0.0,1,2016-06-19T10:56:00,0.0
37939567,2799226.0,<spring-cloud><microservices><netflix-zuul>,microservice architectural choice api gateway web portal application,currently work microservice architecture microservice integrate web portal entry point api gateway edge server wonder well create separate microservice dedicate api gateway web portal microservice api gateway well choice advance,0,296,0,0.0,1,2016-06-21T08:44:37,0.0
37839701,1847148.0,<spring><spring-cloud><microservices>,pass binary datum microservice spring cloud,pass binary datum microservice spring cloud feignclient ribbonclient read feignclient deal issue okhttp thx advance,0,408,0,0.0,1,2016-06-15T15:29:12,0.0
37715757,1635855.0,<osgi><polymorphic-associations><microservices><modularity>,trade microservice modularity architectural design,prove proper choice design software system benefit include reusability distributability readability mooc site osgi modularity implementation feature database service standalone web application direct access database feature prohibit feature example requirement course project module user participate question course project standalone global common entry list question aggregate course project user context independent aka course project question design architecture completely isolation top bottom feature good face inconvenience modular web application feature standalone feature course project currently embe module web component standalone course webapp project webapp standalone qa webapp idea good reuse controller avoid duplicate code web layer rational database problem question belong course project context independent course project database polymorphic association inevitable currently extra column post type table question tackle course project private public question list global entry include question belong public course project private feature database direct access database feature prohibit idea elegant efficient deal wrong modular design osgi uncomfortable good practice design microservice modular architecture object orient language java,0,164,3,0.0,1,2016-06-09T02:09:10,0.0
37849739,1241110.0,<jwt><spring-cloud><microservices><spring-cloud-netflix><cloudfoundry-uaa>,ldap group scope work cloud foundry uaa authorization code grant type,micro service environment work setup config server eureka server zuul server service handle security cloud foundry uaa server instal follow doc setup uaa server option create uaa server log jwt token zuul proxye correctly uaa server authentication process uaa jwt token zuul zuul add proxie service log user group scope openid scope client configuration thing work implement workaround user username token access privilege request service uaa yml,0,426,0,0.0,1,2016-06-16T04:07:56,0.0
37750547,2182398.0,<mysql><jar><liquibase><dropwizard><microservices>,dropwizard liquibase db migrate xml file inside jar,dropwizard jar linux server configuration file inside jar maven dev problem liquibase dropwizard configuration file dropwizard config jar app strate execute liquibase migration configs pom xml download liquibase extract set liquibase env case liquibase find mysql driver basically start project configs file inside jar suggestion,0,458,0,0.0,1,2016-06-10T14:16:50,0.0
38492639,3345282.0,<java><web-services><microservices>,audit microservice,list microservice call multiple service controller track change object state service design standard audit microservice vijay,0,1508,2,0.0,1,2016-07-20T23:52:50,0.0
43660545,3152238.0,<sql-server><microservices><self-hosting>,microservice database security,microservice route break monolith single database hit multiple application application grant specific table access microservice architecture plan specific domain service service database host windows service stand microservice hit sql server persistence plan integrate security service authenticate database point problem start authenticate service ensure database service plan service account application microservice management account frequent policy base password change number service reach manually manageable scale worried account management account service start pain currently industry large tool purpose,0,303,0,0.0,1,2017-04-27T14:22:39,0.0
43552529,6267171.0,<java><rest><spring-boot><properties><microservices>,configuration server build spring boot,build configuration server microservice store load file find spring cloud config interesting git target case filesystem advice,0,66,0,0.0,1,2017-04-21T21:51:07,0.0
43607751,5666231.0,<apache-spark><playframework-2.0><microservices><apache-flink><lagom>,create spark flink stream datum processing microservice rest api,create stream analytic application spark flink kafka analytic functionality implement microservice analytic project spark flink job perfectly simple scala application submit job spark flink cluster start job rest post startjob request invoke web service integrate spark flink datum processing functionality web service orient application till find issue check direction stream processing microservice application direction implement analytic rest service,0,352,0,2.0,1,2017-04-25T10:11:30,0.0
43721197,1154248.0,<spring-boot><microservices>,microservice independent embed tomcat common tomcat,good production environment individual embed tomcat app tomcat app,0,196,0,0.0,1,2017-05-01T14:57:38,0.0
43700824,1301268.0,<load-balancing><ribbon><microservices>,microservice ribbon load balancer work,create service consume multiple instance microservice service client microservice pom bootstrap property file application main class clinte service controller class ribbon configuration microservice consume client pom bootstrap property file microservice consume main class microservice consume controller class microservice consume copy paste microservice second consume change port reason iam error unable access service consume access service localhost work chage service rsettemplate call follow error java lang illegalstateexception request uri valid hostname,0,722,0,0.0,1,2017-04-29T21:51:26,0.0
43659872,2770460.0,<java><microservices><lagom>,fetch list lagom framework,lagom framework absolutely idea simple crud lagom application work figure retrieve list error help appreciate advance,0,218,0,0.0,1,2017-04-27T13:51:55,0.0
43567411,6089396.0,<maven><microservices><pact><pact-java>,pact java maven,answer doubt pact mock service pact jvm server pls describe implement pact java maven help understand pact mock service pact jvm server,0,1279,0,1.0,1,2017-04-23T04:32:40,0.0
43515765,606580.0,<git><version-control><microservices>,ture monolithic application microservice base architecture keep git history,plan split monolithic application micro service base architecture keep git history monolit split three micro service approach copy git repository three time remove domain specific micro service keep git history alive shure good keep version control history,0,70,1,0.0,1,2017-04-20T09:39:12,0.0
43682155,3026283.0,<rest><microservices><hateoas>,share entity microservice,microservice data consume rest api follow hateoas pattern common request response hateoas user return link good microservice manage user picture microservice relationship user pic user identifier user link user pic microservice approach,0,603,5,2.0,1,2017-04-28T14:04:31,0.0
50074667,1483347.0,<docker><microservices><core>,docker linux error,learner docker simple question application work linux system write application window install docker window linux docker linux option window fail understand unrelated error confirm approach correct instal docker linux case plan move aw docker case,0,19,0,0.0,1,2018-04-28T08:50:47,0.0
50076257,1130975.0,<architecture><cloud><microservices>,keep data layer separate deployment,architectural style data strip service separate deployment resemble bound context compose ui business service bs internal datum provider dp bs stateless allow store datum rest api expose dp talk service dp namespace database corporate cloud instance keyspace cassandra dp talk external service bound context gateway lot problem benefit provide biased opinion,0,35,0,0.0,1,2018-04-28T11:52:40,0.0
50065026,9023230.0,<docker><kubernetes><microservices><amazon-ecs>,amazon elastic container service kubernete deploy dockerize application,plan start project bit confuse choose amazon ecs kubernetes beginner micro services architecture appreciate path deploy docker container fast easy handle platform,0,49,0,1.0,1,2018-04-27T14:53:12,0.0
50070895,4877010.0,<asynchronous><architecture><microservices>,response user initiate action microservice asynchronous communication,sure word well common example user blog service click save button publish awesome blog post common user story notify action result notification publish error occur synchronous hard send request server wait response base response notification imagine server microservice orient architecture leverage asynchronous communication message queue example api gateway microservice request front publish message queue consumer microservice send result consume message front good result user action case set websocket session response example code initiate user action code feedback user action completely separate happen user workflow sensible idea fundamental idea,0,63,0,0.0,1,2018-04-27T22:09:25,0.0
50025857,2540256.0,<java><domain-driven-design><microservices><event-sourcing><optimistic-locking>,optimistic lock mechanism event source undo flow,lot question event source apology nail setup assume invoiceid aggregate version number increment change invoice case event store event apply invoice info employee apply current scenario invoice generate review pay notice issue comment decide post payment refund event undo early history api call refund invoice invoiceid employeeid flow thing option retrieve event invoice save event event stream late version save loop event find require instance event apply undo action event version number late call database check late version event store validate save event stream ensure event large version stream assume high version action issue retrieve save event application time start expensive hell lot work undo action option call database call event base invoice employeeid call late version event apply invoice undo change base datum event create undo event version great late call database late version ensure undo version exactly great late version issue sure thing add event stream multiple time query event database invoice invoice employee version style wrong assumption aggregate wrong,0,92,0,0.0,1,2018-04-25T15:16:41,0.0
50161783,4140698.0,<spring-boot><docker-compose><microservices><spring-cloud-netflix>,config file configserver eurekaserver docker container,spring boot microservie microservice include service configservice discoveryservice configservice enable configserver keep file config microservice discoveryservice eurekaserver config file configservice service local docker good service container docker configservice normal discoveryservice error connect configservice configservice eplconfigserviceapplication java bootstrap yml dockerfile discoveryservice epldiscoveryserviceapplication java bootstrap yml dockerfile docker compose yml link source code help resolve issue,0,605,0,0.0,1,2018-05-03T18:33:41,0.0
50066231,8046263.0,<docker><continuous-integration><microservices><continuous-deployment><continuous-delivery>,good strategy dockerize java angular js application,java angularjs project dockerize ci cd process project jar war file container volume automate process ci cd tool suggestion appreciate,0,104,0,0.0,1,2018-04-27T16:00:36,0.0
50184065,9743645.0,<java><microservices><spring-webflux><project-reactor>,spring webflux webclient combine reactive restful web service,work microservice application reactive support spring webflux list question belong category list option question separate question option service reactive support service combine webclient spring webflux course support reactive questionserviceimpl optionserviceimpl combine question option reactive idea update solution add class compositequestion list option question code,0,489,0,0.0,1,2018-05-04T22:57:03,0.0
50051429,3512305.0,<spring-boot><asynchronous><apache-kafka><microservices>,asynchronous request response pattern,fairly microservice asynchronous architecture wonder typical request response work environment example web app send post request example dostuff expect response request complete microservice api handling dostuff logic dostuff request send dostuffinitiated event message message broker result dostuffinitiated event microservice react message set flag db produce dostuffcomplete message broker stuck microservice wait dostuffcomplete consume send response web app original request example client face web app request example getstuff microservice api handle getstuff send stuffrequeste event kafka order datum return stuff object datum require external datum source microservice charge handle datum source consume stuffrequeste event datum data source send stuffrequestcomplete event stuff datum payload microservice consume return stuff object client app stuck background asynchronously suspend send response consume stuffrequestcomplete send request datum advance,0,501,0,0.0,1,2018-04-26T20:35:54,0.0
50006860,1518234.0,<spring><microservices>,access application property microservice,file application property handle microservice global application property file microservice access,0,329,1,0.0,1,2018-04-24T16:38:53,0.0
50089242,6681172.0,<java><spring-boot><microservices><spring-cloud><pivotal-cloud-foundry>,maven dependencie incompatibility spring cloud spring boot,code start application lot spring exception seek dependency issue spring initializer generate application springboot help appropriate configuration work pivotal cloud foundy service registry discovery happen circuit breaker well consolelog follow,0,751,1,1.0,1,2018-04-29T17:10:16,0.0
50067214,5410001.0,<json><azure><swagger><microservices><azure-service-fabric>,access domain model microservice web api controller,net core microservice project architecture application project service project webapi project microservices project interface layer datum code config inside microservice add domain model inside microservice project access microservice controller webapi project interface service proxy class question microservice return employee object add return type controller controller dependency interface project microservice project access domain model create domain model webapi project dynamic variable type return type swagger return model object format dynamic variable well,0,72,2,0.0,1,2018-04-27T17:06:44,0.0
50035311,1431250.0,<microservices><azureservicebus><saga>,difference saga service bus,upgrade skill azure service bus rabbit mq mass transit bear convolute understanding mind saga state machine automatonymous synonym azure integrate state machine service bus,0,597,2,0.0,1,2018-04-26T05:17:14,0.0
50039099,6148651.0,<rest><jsf><java-ee><architecture><microservices>,separate module jsf application,big jsf monolithic application change architecture application currently goal change module application move logic module application implement stack technology rest service js framework frontend application work link early render service session application user throw additional step authentification plan move module help thought implement example,0,61,4,0.0,1,2018-04-26T09:10:09,0.0
53730684,10020419.0,<javascript><reactjs><debugging><webpack><microservices>,debug react microservice application webpack tailor,microservice application create react tailor tailor backend simulate node js moment debug bundle js actual javascript file follow instruction phpstorm devtool source map webpack config js configure javascript debug job add remote url work set breakpoint microservice render tailor breakpoint service hit source mapping configure microservice webpack config js webpack folder code firstly load microservice figure microservice standalone debug service trigger event service debug wohle application suitable idea debug application,0,36,0,0.0,1,2018-12-11T18:59:09,0.0
53794602,9093459.0,<java><docker><kubernetes><microservices>,enable rest communication pod java image,setup pod container java application pod provide ui java app mysql db access java app retrieve provide rest call kind classic containerized microservice architecture requirement enable application request provide application pod set call push cluster honest idea work application rest interface request datum sure connect service pod db setup application unknown kind good practice deal issue,0,50,0,0.0,1,2018-12-15T15:28:43,0.0
53653166,9072348.0,<rest><api><microservices>,roll transaction api call execute,encounter problem work microservice main application work relational database microservice work mongo db provide rest api crud method model crud method implement application call front application record create relational db field save model save externally mongo db transaction commit wrong transaction roll api call execute case creation delete newly create record mongo db case edit idea idea overwrite model mongo db record relational database case datum incosistent field save idea,0,64,0,0.0,1,2018-12-06T14:05:24,0.0
53694071,1494476.0,<database><architecture><microservices>,microservice architecture global datum sharing,interessting question microservice architecture case multiple service central regard permission architecture microservice manage permission user system multiple company allow manage route system company request theoretical user remove user company user action company allow service user allow access share data service approach user remove user company service message worker inform service change zuul api gateway theoretical api gateway check request company request user allow access company api gateway database call nice gateway gateway global datastorage replicate microservice example etcd microservice check user allow access company case user allow access company microservice check user allow action company user company matching sure user access company happy aproache message queue single service inform change zuul verify practical gateway,0,101,0,0.0,1,2018-12-09T15:59:00,0.0
53843118,770473.0,<docker><curl><docker-compose><microservices><nginx-reverse-proxy>,docker compose microservice inter container api communication nginx proxy,build docker compose file mimic production environment microservice custom bridge network nginx proxy route port request correct service container docker compose file nginx conf file port mapping allow proxy container route traffic dns entry match container consequently container dns entry access container service host browser exec container pe container dns hostname curl container container append proxy port mapping inter service api call operate docker environment production environment service environment respond port code write service ignore port specification simply call service dns hostname append port mapping api call code basis order service talk docker environment tool configuration setting allow microservice container call docker proxy port map,0,160,0,0.0,1,2018-12-19T00:44:20,0.0
53770710,1308540.0,<php><rest><docker><microservices>,enable ssl fsl fresh squeeze limonade php framework docker,pull yesinteractive fsl fresh squeeze limonade image develop quick api microservice dockerhub port enable default listener create answer enable ssl image framework project time docker,0,24,1,0.0,1,2018-12-13T22:02:03,0.0
53708789,2186425.0,<java><events><microservices><broadcast><mq>,microservice broadcast message,broadcast message client microservice architecture project rabbitmq achieve manually bind exchange instance queue achieve box brodcasting message client channel ps java client nice,0,109,1,0.0,1,2018-12-10T15:30:37,0.0
53771097,1797038.0,<c#><.net><architecture><.net-core><microservices>,proper create domain model viewmodel microservice,create microservice sure follow good practice pattern design object plan separate object return query dapper client class code state change code question commit change db entity calendarevent db viewmodel call basic property entity field mapping bunch property calendarevent aggregate entity field question proper fill calendarevent object viewmodel property pass constructor create entity read db well dateformat elegant configuration file class calendarentity class viewmodel spot issue approach appreciate,0,66,2,0.0,1,2018-12-13T22:40:46,0.0
53700810,1433218.0,<java><logstash><microservices><kibana><elastic-stack>,define grok filter,define grok filter pattern sample log message display kibana define pattern wgssamintha attempt solution,0,58,4,1.0,1,2018-12-10T06:55:19,0.0
53655696,5109678.0,<spring-boot><apache-kafka><microservices><spring-cloud-stream>,kafka message redelivere manual acknowledgment send error process message consumer,spring cloud stream version create integrate consumer microservice set consumer property receive acknowledgment header message manually acknowledge message consume concern fail message consumption send acknowledgment broker expect message deliver consumer currently verify delivery restart server work server consumer property set,0,347,4,0.0,1,2018-12-06T16:26:04,0.0
53676420,10241176.0,<python><django><flask><microservices><connexion>,resty resolver issue python,follow tutorial keep error resolve error pip instal dependency api itme super app yaml error produce,0,693,5,0.0,1,2018-12-07T20:28:34,0.0
53804351,3278744.0,<domain-driven-design><microservices>,generic model define microservice,scenario monitor machine call endpoint receive datum event happen machine kafka mechanism microservice listen topic process datum service purpose alert generate alert base datum topic asset machine event datum topic client problem define common model case library serialize datum machine send kafka service consume deserialize datum consume service mention alerting asset feel wrong define model microservice environment introduce couple domain directly relate represent bound context case alert bound context generate alert base data business capability domain asset bound context machine event datum client domain common model library break requirement basic requirement bound context autonomous change common model affect service microservice independently deployable change model mandate service deploy separately change service solution feel apt scenario separate model common model service representation incoming datum topic datum service request service create association service understand correct approach micro service,0,45,9,0.0,1,2018-12-16T16:46:53,0.0
56730517,2533578.0,<validation><microservices><cqrs>,validate aggregate,understand validation aggregate entity command side cqrs pattern eventsource basically good practice handle validation uniqueness code correctness validation eternal aggregate initial thought constructor pass service wrong create entity assign validation aggregate logic assume responsibility aggregate guidance,0,32,0,0.0,1,2019-06-24T05:50:31,0.0
56901524,318414.0,<microservices>,microservice start microservice,currently monolith application thread customer time customer register start thread time send order change detail message route correct thread time unregister thread shut routing thread thread message management limited knowledge microservice prime candidate convert microservice architecture set independent process customer thread start create service equivalent customer thread spin time customer kind idea distribute cloud care fit read microservice work misunderstood good approach distribute system approach consider contact process starter service round robin service instance physical server container start local read share container multiple microservice,0,35,0,0.0,1,2019-07-05T10:43:51,0.0
56742436,9064356.0,<spring><postgresql><maven><docker><microservices>,connect dockerize spring boot app dockerize postgre,write simple microservice spring boot dockerize start read docker encounter issue build docker image maven plugin requirement docker container root user privilage build maven script build docker container database dockerize microservice database issue test service jar work fine connect dockerize postgre docker image build sudo mvn docker build test service jar connect postgre find localhost data source issue place localhost appreciate easily create docker image meet requirement,0,41,0,0.0,1,2019-06-24T18:58:44,0.0
56851950,921054.0,<.net><asp.net-core><microservices><message-queue>,strategy framework add service system integration base asynchronous message,add service set service upstream dependency send message service align state system assume upstream microservice tech stack integrate level prohibitively expensive file database snapshot state stream internal event datum source isolation encapsulation principle option microservice expose endpoint access current state downstream service initialization phase multiple instance service deploy perform initialization avoid concurrency issue flow start mode create message queue subscription exist process incoming message accumulate processing datum http endpoint transform persist entry change persist flag upstream dependency start normal mode process event queue flow beg framework support find asp net core offer overcomplicate thing demanding approach exist,0,50,0,0.0,1,2019-07-02T11:57:10,0.0
56889890,6813164.0,<microservices><nestjs><class-validator>,dto work microservice work api directly,develop api microservice nestjs controller function call post api dto validation work fine call microservice validation work pass service reject error dto call api action parameter error action require call microservice work api microservice place functionality client call,0,83,0,0.0,1,2019-07-04T14:18:41,0.0
56747050,8177428.0,<kubernetes><proxy><microservices><envoyproxy><ambassador>,ambassador licensed service prefer envoy proxy ambassador,api gateway project bit confused work company envoy proxy gateway learn ambassador ambassador well envoy proxy build envoy proxy consul integrate service mesh ambassador build cloud native application talk senior ambassador licensed service envoy proxy free problem ambassador license opinion deploy ambassador easy compare deploy envoy proxy boil main key difference ambassador envoy proxy prefer deploy microservice kubernetes,0,87,0,0.0,1,2019-06-25T04:54:10,0.0
56890798,749675.0,<domain-driven-design><microservices><cqrs>,domain integration event payload ddd cqrs architecture,question integration event microservice cqrs architecture payload event reference aggregate reference send viable solution bring rest type call origin implement endpoint service coupled user create event raise correct,0,165,0,0.0,1,2019-07-04T15:16:41,0.0
56762044,1235929.0,<spring><spring-boot><apache-camel><microservices>,apache camel replace complement create micro service spring boot,work spring micro service apache camel tool build micro service unclear apache camel replacement create micro sevice spring boot add functionality short cut develop service spring boot fairly simple create microservice spring boot hard imagine apache camel add essence question,0,54,1,0.0,1,2019-06-25T21:10:08,0.0
56758698,7973864.0,<go><microservices><consul><service-discovery>,store endpoint service registry server,learn microservice consul service discovery wonder deploy consul server store endpoint server good hard code env variable service,0,40,2,0.0,1,2019-06-25T16:51:05,0.0
56734946,10975612.0,<kubernetes><cryptography><microservices>,ecdh implement microservice,problem encrypt decrypt datum key service ecdh method encrypt decrypt datum client server exchangekey service gen key send client pubkey client compute share secret key common key problem key containner encrypt decrypt datum client good practice container key encrypt decrypt client container compute share secret key exchange key service,0,30,3,0.0,1,2019-06-24T10:46:37,0.0
56731051,1010813.0,<java><design-patterns><architecture><microservices><resiliency>,store forward design pattern multiple instance microservice,design service receive request execute exactly receive unique presence flow receive bunch request http transformation check store request database send vendor service http question effective achieve store forward pattern service receive request store acke time forward destination service retry time problem instance myservice send request vendor service monitor bunch request forward avoid orchestration service avoid single instance service effectively watch database forward request forward minimise external dependencies aware sort queue help issue avoid,0,38,3,0.0,1,2019-06-24T06:40:34,0.0
56836928,2809176.0,<rabbitmq><microservices><message-queue>,message specification tool message broker rabbitmq,inspire swagger ui rest api specification provide start work message broker rabbitmq tool start development microservice orient system message queue specification tool allow specification generate doc code code model advance update describe post queue exchange buinde usere permission describe rabbitmq configuration file good solution,0,56,6,0.0,1,2019-07-01T13:54:00,0.0
56750732,1606340.0,<java><spring-boot><microservices><h2><multiple-instances>,database multiple instance spring boot service,create spring boot app embed memory database application properly database console reachable browser application service reachable database application accessible port second instance spring boot application pass spring boot application start port failure db presume instance port second instance application port start db port case fail help log,0,615,7,0.0,1,2019-06-25T09:22:35,0.0
57864983,862971.0,<microservices><documentation><contract>,micro service provide aggregated documentation,simple case illustrate question imagine bank mobile app feature implement list beneficiary payment micro service handle payment paymentservice deal beneficiary beneficiaryservice document contract raml openapi good idea mobile app call micro service independently expose internal structure system provide abstraction mitigation build facade api expose route paymentservice beneficiaryservice ease integration call myawesomemobileapp assume myawesomemobileapp achieve write code esb dedicated spring app api gateway configuration thing provide aggregated documentation customer people code mobile app frontend aggregated documentation documentation set route paymentservice beneficiaryservice sort third contract subset micro service,0,28,0,0.0,1,2019-09-10T06:15:59,0.0
57740113,9304454.0,<java><spring-boot><build><microservices><dependency-management>,microservice project throw class find mvn package class commn service,create project common service project class project work fine create build project common service throw classnotfoundexception class common service,0,29,0,0.0,1,2019-08-31T17:11:46,0.0
57773191,1765862.0,<.net><microservices>,microservice folder structure,microservice identity api application interfaces iuserservice cs service userservice cs datum domain commandhandler createusercommandhandler cs commands createusercommand cs interfaces iuserrepository cs event follow approach inject iuserservice interface createusercommandhandler circular restructure folder organization,0,38,0,0.0,1,2019-09-03T13:53:27,0.0
57864651,9667372.0,<java><spring-boot><microservices><netflix-zuul>,jwt token zuul header spring boot microservice module,send jwt token zuul header microservice module time request zuul module null header module token zuul server auth server reach module,0,43,0,0.0,1,2019-09-10T05:43:40,0.0
57896098,1832311.0,<microservices><grpc>,microservice continually communicate grpc sense keep connection open persistent,explore grpc inter service communication grpc good stream communication sure intend connection close side die,0,45,0,0.0,1,2019-09-11T20:05:57,0.0
57834573,5991334.0,<authentication><architecture><authorization><microservices>,proper inter service authorization,question properly inter service authorization break application logic example token base auth system set involve forward auth token api gateway microservice call chain microservice perform authorization logic base authenticate user identity problem sure authorization rule clash service example service endpoint placeorder turn invokes service transferfund service getproductdetail user identity authorize placeorder functionality service trust environment user access service endpoint invoke complete initial request service deal temporary privilege escalation service allow invocation scenario defeat purpose suddenly subsequent call chain technical user perform service invoke indirectly chain wonder well solution avoid downside maintain trust service,0,54,0,0.0,1,2019-09-07T14:24:06,0.0
57885282,11976442.0,<c#><entity-framework><microservices>,add entity framework project service project,project entity framework nuget package project register service start model mongo version approach find ef mongo example service project start web project,0,57,0,0.0,1,2019-09-11T08:39:18,0.0
57863533,1874080.0,<asp.net-core><microservices>,asp net core middleware logic base request url,net core application work api gateway authentication service time authentication controller crate middleware distinguish request url redirect controller smth auth redirect service work configure method,0,71,0,0.0,1,2019-09-10T03:10:21,0.0
57810132,10581132.0,<microservices><azureservicebus><worker><.net-core-3.0>,worker trouble choose good technology,create micro service parallel process task azure service bus micro service notify azure service bus task complete success follow diagram three option consider host service azure web job azure batch requisite micro service net core valid justification web job host service option guarantee robustness scalability,0,74,0,2.0,1,2019-09-05T17:08:48,0.0
57912322,5846608.0,<api><microservices><integration><appdynamics>,application flow map datum appdynamic api,load application flow map datum web ui dashboard appdynamic api goal upload datum neo study microservice architecture graph algorithm appdynamic application model api provide datum level build client curl request curl user myusername mypassword variation accord documentation curl request point expect json output tier ourapp interaction,0,75,0,0.0,1,2019-09-12T18:05:53,0.0
57843555,7153099.0,<microservices><netflix-zuul><feign>,call microservice feign client zuul gateway filter,validation service call request validation fail return result gateway itselh call feign client zuul gateway filter exception call create proxy service call enable fegin client method zuul filter filter type pre validation service proxy code controller code validation service,0,162,0,0.0,1,2019-09-08T16:04:45,0.0
57922676,4899348.0,<python><python-requests><microservices>,expose endpoint python program,expose endpoint simple python program input manipulate return output easy approach example simple python function web service microservice containerize send receive response communicate endpoint,0,47,1,0.0,1,2019-09-13T11:19:22,0.0
57817078,4184719.0,<spring-boot><jpa><jwt><microservices><audit-logging>,implement jpa audit spring boot microservice single project,authenticate user credential send jwt token response header intercept request validate token forwards request controller microservice process figure implement case table datum targeted microservice change suggesstion list microservice project ✖ send jpa audit purpose recommendation,0,43,2,0.0,1,2019-09-06T06:53:33,0.0
57903446,1802899.0,<spring-boot><cloud><microservices><proguard><memory-footprint>,delete bloat spring boot app reduce memory footprint startup time,simple spring boot app jar lot dependency functionality app stuff load time class instantiate initialize consume memory resource crucial micro service architecture cloud native app memory footprint price startup time spring boot autoconfigure release jar mb couchbase freemaker cassandra probability project spring core release jar mb class kotlindetector seriously core lib full oop anti pattern ugly language care app pay useless stuff proguard rid unused class method spring boot hibernate reflection api aop debug proguard finish error complain lack class idea jlink graalvm native image native build find bunch article understanding impossible spring boot app time spring boot nice tool build apps question rid unused stuff final spring boot jar war,0,83,2,0.0,1,2019-09-12T09:14:20,0.0
57917788,1728787.0,<asp.net-web-api><design-patterns><architecture><microservices><esb>,extra layer communication client service client api esb service,architecte system esb centerline channel service communication html js client interact bus directly decide introduce api rest api layer client post request api api message esb respective service subscribe message process ui rest esb service service interested message wonder ui rest service keep esb inter service communication ui service path consider ui service communication,0,42,4,1.0,1,2019-09-13T05:33:47,0.0
57747854,353557.0,<design-patterns><architecture><microservices>,web application component slow component deal,suppose micro service base architecture micro service heavily load decide scale component understanding load testing find load service bear base service scale factor factor suppose service payment service depend party payment gateway slow control deal free containerize application user docker kubernete,0,48,4,0.0,1,2019-09-01T16:51:53,0.0
57871886,12046940.0,<microservices><cloudfoundry><amazon-sqs>,request response messaging cloudfoundry app aw sqs,aw sqs communication microservice sn microservice multiple instance currently implement request response pattern message queue understand normal request queue pass unique response queue service instance consume service process message send response response queue response return correct instance request service problem cloudfoundry work service request datum service queue service start instance instance create queue request instance send response queue request response route correct queue guarantee response correct instance work cloudfoundry allow create queue call sqs connect sqs instance send receive message create queue command create response queue manually start instance fail response queue work create queue dynamically cloudfoundry currently stick sqs switch kafka rabbitmq pass response match service instance create queue cloud foundry,0,37,8,0.0,1,2019-09-10T13:28:20,0.0
55819881,6796851.0,<node.js><microservices><seneca>,response match pattern seneca,wonder good response service match request pattern seneca receiver send ack publisher specific response service send email user sure email send good practice situation seneca,0,13,0,0.0,1,2019-04-23T21:48:21,0.0
55719501,2169951.0,<mongodb><microservices>,db query microservice api,currently direct db connection query mongodb script retrieve require data advisable good practice datum retrieval db microservice,0,32,0,0.0,1,2019-04-17T03:37:24,0.0
55812585,6947687.0,<c#><microservices><masstransit>,add custom property fault entity,wonder configure additional property fault message exception type define follow generic consumer handle fault occur idea code property fault entity fault entity hold type exception throw correlate message code property pass fault consumer inside header,0,35,0,0.0,1,2019-04-23T13:39:02,0.0
55754784,10875236.0,<microservices><grpc><nestjs>,connect nestjs grpc microservice machine,create grpc microservice nestj connect server localhost ngrok create tunnel service error address address add total resolve port service second service client option second service,0,318,0,0.0,1,2019-04-18T23:12:16,0.0
55838130,11407387.0,<microservices><spring-cloud><spring-cloud-feign>,preserve hostname hateoas resource openfeign,add uri resource locate microservice openfeign resourceassembler preserve hostname original request rest request hateoas resource microservice resource getid method return link hostname docker container hash original hostname request controller assembler feign client bulletin resource expect result curl actual result curl notice site href dc docker container,0,74,0,0.0,1,2019-04-24T20:32:33,0.0
55755770,4431568.0,<microservices>,design rest api microservice book flight ticket,identify component interaction rest api interaction microservice deal flight book user select flight seat provide detail microservice api service hold booking temporarily min till user complete payment system broad picture require microservice flightsystem microservice return detail flight seat payment microservice flight booking microservice bookflightticket api hold reservation temporarily asynchronous microservice suggestion flow,0,114,0,0.0,1,2019-04-19T02:14:56,0.0
55816418,3759227.0,<java><spring><spring-boot><microservices><api-gateway>,api gateway zuul merge micro service response,micro service user micro service order micro service user micro service return user detail order micro service return order detail user test userid order orderid productname mobilephone spring cloud zuul api gateway route request micro service ui call endpoint merge response micro service test order orderid productname mobilephone client call endpoint achieve api gateway level,0,166,0,0.0,1,2019-04-23T17:21:45,0.0
55783039,312444.0,<microservices><publish-subscribe><distributed-transactions>,distribute system guarantee publish message,maintain consistency disparate system aka bound contexts failure happen publish message service bus queue figure option udi dahan approach reliable messaging maintain publish message store entity generate event process database transaction logging publish message bus event sourcing approach option pro con approach,0,27,1,0.0,1,2019-04-21T13:12:12,0.0
55725176,2846618.0,<java><multithreading><file><microservices>,synchronize file process cluster,cluster instance microservice access file share data share mount local folder server microservice file process entire cluster file process parellel node file entire cluster idea solve node read file filename queue node read queue synchronize database node process file db synchronize node idea solve good manner,0,41,1,0.0,1,2019-04-17T10:12:34,0.0
55748807,5618611.0,<node.js><microservices>,communicate microservice,follow code microservice call call microservice follow code follow error access call microservice postman url,0,50,3,0.0,1,2019-04-18T15:02:44,0.0
55778487,11389375.0,<design-patterns><service><architecture><domain-driven-design><microservices>,legal microservice design,setup system concept list item customer concept understand multiple service multiple service perform distinct type work operate list item operate version list item long eventually late version design service source truth current state list item list manipulate service list change publish list subscriber event store copy storage work local copy list additional state specific domain rationale list work dependent reason impact system acceptable mitigate wrong,0,71,3,0.0,1,2019-04-20T23:02:25,0.0
55779666,2746466.0,<sql-server><spring-boot><microservices><liquibase>,add createdatabaseifnotexist sql server application property spring boot application,spring boot microservice sql server database demo microservice app create database start application execution addition multiple parameter add follow application property file create spring datasourse url fail throw fallowe error execution db changelog master xml follow db changelog xml,0,272,4,0.0,1,2019-04-21T03:38:27,0.0
55767814,5618611.0,<node.js><axios><microservices>,axio call return response,follow segment code place call microservice axio target function invoke data retrieve database result call function system hang call function usermicrosevice signin return cor,0,45,7,0.0,1,2019-04-19T21:00:37,0.0
49273441,1488055.0,<python-3.x><rest><web-services><urllib><microservices>,urllib library cache http header python,develop http webservice rest distribute microservice architecture performance issue cache client webservice urllib library http cache header webservice cache note request cache read http header,0,13,0,0.0,1,2018-03-14T09:02:54,0.0
49226141,167511.0,<microservices><event-sourcing>,microservice architecture event collaboration pattern,martin fowler description event collaboration pattern appear imply requisite external datum datum service service function replicate maintain service imply resort issue explicit query example communication service responsible send email client dependent order live order service send order confirmation email event collaboration communication service internal representation order build consume relevant order creation modification event example query retrieve order detail generate confirmation email instance explicit query message datum replication adopt event collaboration pattern,0,283,0,0.0,1,2018-03-11T23:17:23,0.0
49198200,4849861.0,<node.js><architecture><microservices>,serve permit document microservice environment,assume scenario undefined number micro service write node js top database front application consume service token base authentication expand actor pattern permission request require return document document serve user permission specific document permission app base os base microservice endpoint fetches document info db path document file server path resolve service consumer application serve actual document thing mind figure safe fast performance wise enable system ability download upload document approach build permission system document physical path doc trust exist consumer server file server actual document file server expose internet edit jps suggestion decide document storage expose internet affraid case front compromise attacker document unsure avoid kind trust explicit hope well achieve advance,0,37,0,0.0,1,2018-03-09T16:32:58,0.0
49264474,8050062.0,<azure><microservices><service-fabric-stateless><azure-service-fabric>,window develop build publish net core service ubuntu base service fabric cluster,build net core service ubuntu base service fabric window machine doc visual studio workflow develop building publishing service find doc,0,46,0,0.0,1,2018-03-13T19:33:21,0.0
49158331,8353186.0,<maven><spring-boot><pom.xml><microservices><auto-update>,update library version multiple microservice pom xml file,common library repo release change library late version microservice library pom xml file update manually appreciate suggestion,0,256,1,0.0,1,2018-03-07T17:51:33,0.0
49226015,3818841.0,<architecture><microservices><distributed-computing><service-composition>,isolate service choreography service composition,encourage design service service exist isolate day ago read con pro choreography orchestration micro service architecture topic system consist service order payment shipment orchestrator orchestrator call service fact duty call service choreography idea payment service ordering service exist subscribe event sure order system payment model confuse start method order service return order follow payment datum shipping datum return payment shipping datum,0,73,1,2.0,1,2018-03-11T22:58:24,0.0
49198914,2711378.0,<spring-boot><real-time><microservices>,spring boot application realtime communication,core application provider application provider application add dynamically register core originally assume provider public ip register ip core core call service connect vpn ip accessible approach hard manage overhead check status provider alternative websocket provider subscribe topic figure publish single provider register uuid subscribe publish uuid provider subscribe apache mq kafka implement tcp communication spring integration help sure idea sure structure good performance clean code option edit cool discovery server sense provider list device sense publish separately ip device associate metadata url,0,416,1,0.0,1,2018-03-09T17:17:10,0.0
49175047,438853.0,<c#><system.reactive><microservices><mediatr>,aggregate result multiple http request,design application write aspnetcore require multiple http request microservice aggregate result return controller mediatr pipeline limited unfit scenario imagine realm map reduce struggle find framework developer ensure aggregation terminate request fail create proof concept worker thread provide framework mediatr developer easily adopt unit test suppose proof concept write rx extension observable zip curious hope find example observable zip demonstrate netflix blog post,0,260,2,0.0,1,2018-03-08T14:05:47,0.0
49187093,4393488.0,<laravel><jwt><microservices>,datum jwt user table laravel,implement microservice arhitecture jwt communication service login service secure well parse jwt user datum service user table expirie user loot help send direction,0,277,2,0.0,1,2018-03-09T05:23:15,0.0
49165457,9460148.0,<containers><microservices><serverless>,deploy serverless faas locally cloud provider,local deploy serverless architecture good idea optimize system performance event drive reduce server operational cost cloud provider aw,0,25,2,0.0,1,2018-03-08T04:30:35,0.0
49242181,6546460.0,<c#><asp.net-core><rabbitmq><microservices>,dependency injection asp net core issue,update change startup error subscribetoevent resolve scope service servicehost cs servicehost cs start learn microservice rabbitmq struggle code sample unable error understand code well understanding microservice code startup cs help debug well understanding,0,542,2,1.0,1,2018-03-12T18:29:35,0.0
49082160,5007657.0,<docker><microservices><netflix-eureka>,docker link work,docker container local machine spring boot application eureka discovery client discovery service validation register myservice eureka client spring boot application local create image link,0,82,2,0.0,1,2018-03-03T08:19:36,0.0
48385783,1623885.0,<architecture><microservices>,understand microservice infrastructure share business unit,generally good deploy separate microservice infrastructure include big component container scheduler team product feeling depend organization structure culture article organization hierarchical area branch charge specialty database os admin development qa manager director area naturally priority exist large knowledge gap pressure rapid delivery feel market pressure regulatory obligation software developer idea loose coupling team separate instance container management platform team multifunctional capable deliver production advantage approach responsible homogeinity environment fast iteration risk spread infrastructure team giant mega instance removal external team equation consider internal change upgrade platform,0,36,0,0.0,1,2018-01-22T16:08:01,0.0
48397327,2300013.0,<security><microservices><apigee>,apigee internal microservice,split big monolithic enterprise application bunch microservice cloudfoundry feed spark edge communicate service expose externally stage add additional security layer stage oauth question apigee edge internal microservice leverage apigee api well concern performance service call apigee proxy,0,116,0,0.0,1,2018-01-23T08:38:27,0.0
48487563,419156.0,<maven><spring-boot><microservices><project-structure>,upgrade maintain dependency programmatically spring boot project microservice architecture,spring boot microservice architecture project folder represent service assume mult module maven project service subdirectory parent folder maven dependency maintainability keep service update late dependency example upgrade late spring bom upgrade third party library apache common service,0,38,1,0.0,1,2018-01-28T14:44:49,0.0
48437842,3661533.0,<testing><microservices><rest-assured><mountebank>,advantage mountebank rest assure,start read mountebank framework project microservice base learning day mountebank base test micro service concept service virtualization test rest api rest assure seminar framework answer question rest assure restassure mock major difference similarity mountebank rest assure sure valid compare mountebank restassure,0,651,1,0.0,1,2018-01-25T07:40:02,0.0
48441868,4058098.0,<microservices>,link microservice allow unavailable,microservice architecture model call microservice http request read service service operate question generally achieve example microservice handle car record manipulation access service handle vehicle datum car microservice complete operation service respond,0,87,2,1.0,1,2018-01-25T11:32:30,0.0
48406730,1286433.0,<microservices><envoyproxy>,deploy envoy eds sds,micro service deployment question deploy service discovery service envoy proxy find sds server host order discover service build service mesh load balancer dns single point failure sds locally machine micro service access well deployment sds cluster dynamically add envoy config single point failure,0,701,2,0.0,1,2018-01-23T16:38:03,0.0
48440783,1477769.0,<spring><microservices><netflix-eureka><netflix-zuul>,service application,service fooservice docker container second service barservice second docker container service register eureka docker container application service call fooservice call barservice development environment spring boot service implement spring restcontroller spring application myservice bootstrap property file requestmappe spring application restcontroller work course register service unique identifier call common url path,0,118,3,0.0,1,2018-01-25T10:35:36,0.0
48493849,768066.0,<apache-kafka><microservices><distributed-system>,api message consumer microservice,team tear architect microservice message bus currently api gateway microservice communicate http implement message bus kafka team tear consumer api live service separate service separate scale concern service communicate database domain concern duplicate code service thought,0,139,4,1.0,1,2018-01-29T03:11:48,0.0
58588941,5604249.0,<configuration><microservices><consul><consul-kv>,key format storage location consul key microservice,plan consul store key configuration microservice initially store configuration key json file move consul good practice store key microservice config micorservice aware key access key format differentiate global setting consul setting share microservice private setting individual microservice,0,13,0,0.0,1,2019-10-28T10:05:34,0.0
58581825,4960276.0,<entity-framework><microservices>,howto database create single big model entity framwork separate service microservice,big monolithic project ef manipulate database start create service micro service big model step read datum good reference big model help wellcome,0,14,0,0.0,1,2019-10-27T17:43:55,0.0
58666984,378341.0,<amazon-web-services><amazon-ec2><aws-lambda><microservices><aws-iot>,micro services aws iot,plan aw iot device field connect micro service cloud idea device publish topic micro service subscribe microservice publish topic device subscribe example device microservices ms ms subscribe device topic subscribe device topic ms subscribe service ms topic ms subscribe service ms topic send ms publish service ms topic send ms publish service ms topic ms send ms publish device topic attach image visualize concern micro service multiple instance time instance ms subscribe service ms topic device publish message topic sure instance process message multiple instance understand handle lambda message pass lambda lambda call rest api microservice lambda limitation scale achieve device message hour well,0,21,0,1.0,1,2019-11-01T23:31:55,0.0
58555798,61311.0,<microservices>,microservice cross db referencial integrity,database manage code list valid currency list country code hereinafter codesdb multiple microservice monolithic app database foreign key constraint row table codesdb microservice receive request modify datum option ensure code pass request valid currently lean codesdb microservice post event service bus code add modify microservice interested type code country currency issue api request codedb microservice grab state reflect change local db referential integrity microservice db correct approach recommend approach,0,25,0,0.0,1,2019-10-25T09:28:57,0.0
58614636,11838970.0,<localhost><microservices>,locally develop multiple microservice,imagine react front fe interact python base multiple microservice fe call endpoint interact deploy remotely work perfectly fine work thing locally easy running terminal session second terminal session note aware local docker approach wonder simple docker,0,25,0,0.0,1,2019-10-29T20:06:21,0.0
58668540,3506300.0,<protocol-buffers><microservices><grpc><grpc-java>,accept domain object request payload grpc anti pattern,simple service message definition define service implement crud operation top define enity service accept brand request payload parameter create update operation approach correct good achieve wanna jdbc persitence decorate entity protoc allow protobuf definition file achieve well,0,44,0,0.0,1,2019-11-02T05:37:12,0.0
58684080,12317159.0,<microservices><spring-cloud><netflix-zuul><api-gateway>,api gateway combine response form microservice,accord article statement wonder base zuul example api gateway achive imagine microservice retrive product second return description product monolithic architecture request datum microservice architecture api gateway combine response microservice return response funcionality implement guideline article,0,47,0,0.0,1,2019-11-03T19:57:27,0.0
58559242,7298643.0,<java><rest><cors><microservices><micronaut>,cor mirconaut microservice,work small school project involve access microservice build micronaut java react frontend initially deploy microservice google cloud access remotely postman access react front follow error code error cor bit find add file add post request workaround find online question regard access microservice postman react frontend safe workaround security issue issue exclusive react web enable cor access microservice application help appreciate,0,60,0,0.0,1,2019-10-25T13:14:20,0.0
58623616,4247599.0,<orm><microservices><api-design>,query orm microservice api,query orm microservice api orm microservice microservice api call api db db internal object relation mapper instance orm define correspondence class belong microservice structure relational db manage access imagine microservice functionality respect orm db structure db datum functionality produce datum query copy mirror orm microservice smart code duplication change orm change manual intervention option query orm api recreate microservice,0,89,0,0.0,1,2019-10-30T10:44:52,0.0
58711786,11501605.0,<spring-boot><docker><microservices><devops>,containerize spring boot application instal docker deploy cento,spring boot application local machine containerize instal docker local machine deploy cent os machine docker instal offline mode containerize build image file docker daemon local build fail,0,36,1,0.0,1,2019-11-05T12:53:06,0.0
58683345,1216884.0,<javascript><node.js><microservices>,nodejs app microservice multiple web app,application authentication service write service separately authentication service web application reason separating rewrite service multiple time lerna js idea implement construct sensible solution,0,21,2,0.0,1,2019-11-03T18:29:25,0.0
58544227,1337998.0,<domain-driven-design><microservices>,microservice database ddd suggestion,suggestion design perspective microservice database fundamental principle microservice peculiar issue iot project data send huge volume datum time create update status device user track status device ui design follow design service devicesubscribeservice subscription model kafka device send event kafka keep read datum kafka insert database device service insert update design service deviceapiservice restful service fetch datum database device service query database design approach correct microservice principle service db break well good approach ddd perspective domain model service insert query db maintain database service replicate datum keep sync keep thing simple avoid complex process trust work perfectly fine convinced design perspective break principle,0,33,2,0.0,1,2019-10-24T15:08:35,0.0
58655233,12199862.0,<java><spring><spring-boot><spring-security><microservices>,spring security handle module spring boot,spring spring security project microservice architecture project module controller class jpa module controller class config security jwt outh role dependency spring security build module spring security work handle request controller filter generator token build module call api controller spring security work allow request generator token question config security module handle controller module config spring security module project module,0,49,2,0.0,1,2019-11-01T06:51:14,0.0
58546416,10175422.0,<c#><.net><sql-server><database><microservices>,share single database connection micro service,micro service write net core share single database sql server unify database connection micro service,0,61,2,0.0,1,2019-10-24T17:27:21,0.0
58594257,8807976.0,<java><spring-boot><microservices><feign>,feign client throw unauthorized exception url authentication,follow create microservice eureka server auth service zuul service gallery service image service gallery service invoke auth service api feign client url require authentication client throw feignexception unauthorized jwt token authentication controller gallery service security config zuulserver auth service error log help appreciated tia,0,154,2,0.0,1,2019-10-28T15:58:59,0.0
58558967,4061563.0,<docker><microservices>,docker image application,create docker image deployment microservice test ti deploy local machine docker container ogt create start application hit rest service localhost myapi test error wrong checking list image entry empty port detail reason,0,29,3,0.0,1,2019-10-25T12:57:01,0.0
58678456,2043248.0,<architecture><domain-driven-design><microservices>,define conway law,wonder conway law refer physical structure organization relational structure organization second fowler article,0,44,3,0.0,1,2019-11-03T08:15:32,0.0
56072942,7795991.0,<rest><api><docker><microservices><api-gateway>,api gateway facilitate rest api communicate micro service,develop website base microservice architecture containerize docker communicate microservice rest api read article diagram api gateway connection microservice confused main purpose api gateway,0,29,0,0.0,1,2019-05-10T07:42:49,0.0
56105178,7588239.0,<microservices><vert.x>,cluster microservice server vert,suppose microservice service service deploy service aws server service digital ocean server vert cluster achieve communication process vert event bus achieve service machine solution hazlecast cluster service separately separate machine configure service service connect common clustering service service hazlecast service command well achieve,0,30,0,0.0,1,2019-05-13T02:41:24,0.0
56089886,2482443.0,<spring><spring-boot><microservices><spring-cloud-stream><spring-rabbitmq>,configure multiple queue topic exchange route key direct message specific queue spring cloud stream,configure multiple queue topic exchange route key direct message specific queue spring cloud stream requirement example queue exchange define consumer route key consumer amqp pass exchange queue route key create binding set route key send message producer messagebuilder channel send messagebuilder withpayload message build course queue header direct type message multiple queue connect single exchange work stream,0,305,0,0.0,1,2019-05-11T11:26:28,0.0
55989764,9528628.0,<spring-boot><oauth-2.0><microservices><netflix-eureka><netflix-zuul>,implement microservice authentication server oauth jwt zuul eureka service,spring boot microservice architecture application project oauth jwt zuul eureka service doubt implement service independent service develop service single application implement single application well approach clarify,0,82,0,0.0,1,2019-05-05T07:28:11,0.0
56075217,323044.0,<microservices><spring-cloud-stream><spring-kafka><event-driven-design>,rest api command event drive choreography,design system event drive architecture style expose rest api send command query decide kafka message broker choreography design follow obscure implement event join bill service start create user receive user creation event account create api gateway return result client account billing service finish processing protocol client side websocket prefer expose api party async client call poll check request complete appear complex manage implement interaction spring boot spring cloud stream,0,102,0,0.0,1,2019-05-10T09:59:39,0.0
56097485,11487746.0,<spring><spring-boot><microservices><jhipster>,build jhipster project installation,jhipster generate microservice project uaa installation build project change java version maven version jhipster versions nodejs lts npm os reason,0,114,0,0.0,1,2019-05-12T08:34:48,0.0
55922397,2774480.0,<node.js><docker><httprequest><microservices><next.js>,docker compose microservice frontend backend communicate http request,microservice frontend js backend node js fetch datum rest api frontend problem service communicate directly eachother thing work fetch datum beginnning getinitialprop method fetch api server side frontend find backend service http request client backend browser form input find backend docker compose yml browser client side method send datum backend browser url http dcbackend find docker environment backend response network tab request docker configuration cor client http request backend initial fetch backend datum work,0,117,0,1.0,1,2019-04-30T13:49:31,0.0
55996450,4885347.0,<.net><algorithm><microservices>,sort product price price calculate time request,follow three service product service store product availability service determine availability product store product service schedule optimisation algorithm price service store rule price product well discount price compose bff service coordinate request order provide customer product match criterion price number product time request return product customer search product bff service call turn call three service order list problem sort require product requirement price price store service determine algorithm dynamically determined price personalise price question sort base price idea good solution input solve problem book,0,56,1,1.0,1,2019-05-05T21:08:00,0.0
55932894,10856425.0,<microservices><event-driven>,strategy payload event drive architecture,detail payload event drive architecture online resource detail help find full payload provide metadata api link token access actual payload send full datum,0,67,1,0.0,1,2019-05-01T07:24:17,0.0
56059082,10601430.0,<c#><asp.net><entity-framework><microservices><event-bus>,null parameter dbcontexttransaction integrationevent,eventbus notify microservice customer save event integration keep microservice sync event integration example microsoft event bus application arrive method enter method method error occur return error database context class,0,109,1,0.0,1,2019-05-09T12:06:39,0.0
55950615,4386675.0,<symfony><twig><microservices><slim><dompdf>,dompdf service find controller error message class dompdf find,work symphony slim service call controller twig view instal dompdf composer add list service bootstrap folder call dompdf code controller service php,0,47,2,0.0,1,2019-05-02T10:38:31,0.0
55985038,1258130.0,<api><web><file-upload><upload><microservices>,store file api microservice filesystem,work app consist frontend app api gateway microservice handle business logic db work implement file store feature upload small large file assume store file microservice filesystem save path metadata microservice db microservice implement http api endpoint upload file api gateway realize work transfer file api microservice aswell serve store api file system save path microservice db approach weird api gateway store serve file file system transfer file api microservice upload consider file large microservice implement specific api hope question interpret opinion base approach best consider frontend api microservice pattern architecture standard address scenario approach gotchas,0,228,2,0.0,1,2019-05-04T17:19:57,0.0
55932124,5192729.0,<authentication><oauth-2.0><microservices><hyperledger-fabric><blockchain>,decentralized authentication microservice,decentralize authentication microservice blockchain technology facilitate decentralized authentication pay transaction fee user transaction elaborate oauth centralized authentication server behave single point failure system definitely validate jwt token inside microservice maintain signature microservice hit authentication server initial request authentication server avoid decentralized mechanism place cost implication blockchain proivde facility transaction cost call gas cost implication hyperledger fabric authenticate user scenario microservice write net authenticate user centralized authentication server database table keep user detail credential user access microservice request initially authentication server user validate issue token validate hyperledger fabric centralized authentication server user detail database technology cater mention purpose implementation knowledge doubt clear advance,0,68,5,0.0,1,2019-05-01T05:46:38,0.0
55935236,4219397.0,<microservices><spring-cloud><netflix-eureka><spring-cloud-netflix><service-discovery>,register discovery service multiple ip,netflix oss current project live week good week service register discovery gateway route traffic require service portal work fine backup nic card instal server restart service service register nat ip address hostname earlier search google find configuration apply successful expect result configuration application yml file discovery server log discovery service register nat ip earlier message log nat ip backup ip kolsrv server host ip register service host ip dalston sr version spring cloud error reference provide ifconfig detail server pom xml bootstrap yml mainapplication,0,226,8,0.0,1,2019-05-01T11:04:43,0.0
45413309,8123203.0,<spring><microservices>,websoket spring cloud micro service,create micro service project integrate websocket,0,26,0,0.0,1,2017-07-31T10:24:37,0.0
45396642,3877872.0,<architecture><microservices><high-availability>,avalability microservice architecture,learn migrate legacy monolithic base architecture micro service architect technique ensure availability system implement architecture,0,62,0,0.0,1,2017-07-30T05:22:14,0.0
45550556,1677909.0,<azure><microservices><azure-service-fabric><service-fabric-stateful><service-fabric-stateless>,logic service resolution service fabric stateful service,service fabric stateful service store state user system partitioning strategy normalized international string format phone number address service instance hash phone number resolve partition service fabric myapp user international phone number xxxxxxx allow geo locate service base country canada market area code question sort theoretical practical nature logic service resolution simple approach require dependency service partitioned feel leaky abstraction assign user divorce concept phone number original approach byte include service partition local user drop idea size large add time problematic key reliable dictionary fit memory kill ton memory carry baggage interpret idea provide client library consume service drawback binary dependency consume service change strategy future jump bunch hoop handle failure correctly resolve entity alternative stateless proxy front stateful service handle resolution service appealing design perspective involve manage build service resolution opposed additional consideration route tread service separate service fabric application advisable keep application open entertain idea partition user bad idea phone advisable number reason,0,73,0,0.0,1,2017-08-07T15:26:13,0.0
45528718,3877872.0,<architecture><microservices><high-availability><circuit-breaker>,circuit breaker high avalability microservice architecture,learn circuit breaker ensure high availability service explain avalability system lot arctile clear implement basically high avalability system,0,84,0,0.0,1,2017-08-06T05:06:06,0.0
45530657,921054.0,<.net><nuget><versioning><microservices>,correct share common versione infrustructural code microservice,extract infrastructure relate code extension method small helper class separate nuget package package business logic pertain service hierarchy dependency package trouble versione service reference package av directly av indirectly referenced package servicen reference package av directly av indirectly referenced package nuget support side side version version project problem versioning relevant monolithic application well seemingly integration issue idea extract common code duplicate service change version package force service work version good recommendation concern code reuse service well versioning,0,118,0,2.0,1,2017-08-06T09:40:12,0.0
45467995,4962437.0,<java><microservices><jhipster><jdl>,jhipster jdl import microservice,model jdl entity define add option distribute entity microservice yo jhipster import jdl model jdl command gateway folder liquibase changelog include entity import app folder liquibase changelog entity ignore distribution define test model monolithic app microservice option work well model test,0,645,0,0.0,1,2017-08-02T18:03:25,0.0
45449806,8371788.0,<angularjs><architecture><microservices>,frontend piece microservice,bunch microservice precise database code repo deployment pipeline recommend stuff microservice architecture clue build front piece develop front programmer backend microservice group microservice relate admin role instance create single frontend role role frontend app final user app ui monolithic speak service admin client distributor respondent role oauth server admin distributor users service admin products service admin survey service client jobposition service distributor answer service respondent email template service admin credit transaction service admin batch service ui batch status result admin,0,91,1,0.0,1,2017-08-02T00:55:56,0.0
45524591,7929017.0,<microservices><netflix-eureka><netflix-feign><spring-cloud-feign><feign>,fallback method call rest call fail feign client,implement fallback feign client success simple code find main class feign interface fallback class error rest client fallback method fallback method message pass client eureka eureka server stater feign pom,0,1016,1,1.0,1,2017-08-05T17:21:50,0.0
45374744,1235354.0,<architecture><microservices><health-monitoring>,benefit health check address port path,search good practice microservice architecture port application health check address good practice microservice pro con method,0,88,2,0.0,1,2017-07-28T13:26:09,0.0
45371705,1197804.0,<architecture><microservices>,resolve foreign key microservice architecture,start split big monolith microservice challenge resolve foreign key well perspective plan build follow microservice service dedicated database order service independent pricequote service responsible manage price base variant city cardata service three concern club microservice model variant location service state city area club single microservice help follow concern design microservice resolve variant city fks retrieve price quote inside microservice microservice,0,1015,2,0.0,1,2017-07-28T10:58:30,0.0
45426194,1715584.0,<rest><message-queue><microservices><messages>,message format specification distributed rest service,grow number rest service talk json communication direct broker process distribute find better suited,0,34,3,0.0,1,2017-07-31T22:23:26,0.0
52929046,6439111.0,<spring-boot><tomcat><servlets><interface><microservices>,spring app share component common interface app,project tomcat server project structure follow project share common interface spring app toolkit main project dependency project share spring boot service project project share dao toolkit spring boot share toolkit service initial boot fail dao toolkit project work mistake,0,17,0,0.0,1,2018-10-22T12:11:25,0.0
52881129,6872018.0,<spring><microservices><netflix-zuul>,java lang classnotfoundexception org springframework core io support springfactoriesloader,code link change build code error understand exactly issue jar corrupt issue pom xml error,0,533,0,1.0,1,2018-10-18T19:22:05,0.0
52883414,993554.0,<api><queue><microservices><latency><low-latency>,api slow depedencie faster,attend job interview question create api microservice slow respond second second good build api reliable term latency system work fast lead question choose cache datum avoid cache example cache user personal info update profile finally reading operation service long time impact user experience case imagine writing operation answer question,0,26,0,0.0,1,2018-10-18T22:22:20,0.0
52803886,2918190.0,<microservices><naming>,team work large application compose microservice,scenario development team team responsible multiple microservice microservice ownership fluid team trade microservice team drop add microservice team identification tool organization team feature work multiple feature feature change team number letter feel correct imply order sequence team developer team team identify,0,32,0,0.0,1,2018-10-14T14:51:50,0.0
52817585,8231165.0,<routing><microservices><hystrix><api-gateway>,hystrix service,base example find online hystrix circuit breaker suppose wrapper library top outbound service call essence adjust code inject dependency exist project prove highly expensive risky alternative option hystrix dedicated service reside app perform outbound service call app receive inbound call exist app remain practilly intact hystrix layer responsible uri translation route circuit break logic downside maintenance application ecosystem endpoint introduce app live implement solution feasible sense utilize hystrix api gateway disclaimer search question find,0,43,0,0.0,1,2018-10-15T13:11:48,0.0
52928022,3311039.0,<microservices><jhipster><netflix-zuul>,jhipster add route external microservice application yml,jhipster build zuul gateway capable route rest request microservice microservice develop language deploy server microservice protect oidc keycloak server realm configure zuul route application yml propertie file gateway app access service external rest client customer zuul filter request keycloak oidc token provider modify gateway application yml add follow zuul route sample external service type configuration work well zuul gateway develop project jhipster test call soap ui client auth bearer token header provide keycloak server jhipster realm client web app receive response error code path api mypackage add configure application yml gateway app advance help registry service spring cloud eureka jhipster registry,0,306,0,0.0,1,2018-10-22T11:15:03,0.0
52891880,5103912.0,<spring-boot><domain-driven-design><microservices>,access domain repository layer domain service layer,domain domain domain domain controller service repository layer spring boot project wrong service call repository data break form ddd microservice architecture,0,58,0,0.0,1,2018-10-19T11:57:06,0.0
52912698,2539431.0,<microservices><grafana><health-monitoring><statsd><telegraf>,monitor microservice grafana,multpile microservice health point form json json state service microservice call monitor service grafana grafana telegraf thx advance sam,0,99,0,0.0,1,2018-10-21T06:31:18,0.0
52881406,6872018.0,<spring><microservices><netflix-feign>,netflix client clientexception load balancer server client account service,error call url reference link error load balancer server client pointer issue error full screen,0,2915,0,1.0,1,2018-10-18T19:44:49,0.0
52742002,10484521.0,<database><microservices><jhipster><generate>,jhipster database possibility generate entitys,create jhipster project database persistenz layer third party framework possibility create jhipster microservice database generate pojos controller crud functionality service solution workaround generate microservice database class recommend,0,105,0,0.0,1,2018-10-10T14:00:01,0.0
52787506,5410011.0,<microservices>,microservice db design issue,start separate project microservice microservice deal api authorization check apikey provide api request valid separate db api authorization follow table follow schema apikey apikey varchar pk tenantid int fk tenant tenantid int pk varchar apikey table link tenant table microservice microservice deal store error tenant require reference tenant table tenant table separate db create tenant service db tenant data integrity issue microservice require reference tenant sure,0,114,0,0.0,1,2018-10-12T22:00:59,0.0
52878511,1307137.0,<authentication><jwt><microservices><jhipster>,multiple authentication provider multiple entry point,develop jhipster microservice application jhipster uaa jwt login access microservice work fine requirement set user custom authentication provider gain access flow follow jhipster allow,0,121,0,0.0,1,2018-10-18T16:23:28,0.0
52874054,8384029.0,<java><spring-boot><microservices><spring-cloud><spring-cloud-stream>,org springframework messaging messagingexception nest exception java lang illegalargumentexception,face problem argument define sendget method receive stream xml file ftp server listen stream spring cloud stream bind class springintegrationtransformer processor class piece code sendget method responsible receive stream ftp server convert dto class policylistdto transform byte processdata method execute class note build successful deploy microservice spring cloud xml file ftp server error assume error sendget argument modify byte type message code success thankful help advance resolve issue,0,641,0,0.0,1,2018-10-18T12:29:33,0.0
52842825,3658166.0,<node.js><authentication><passport.js><microservices>,authenticate request microservice,bunch microservice responsible authenticate user service user allow login facebook google passportjs regular username password login passport easy authenticate request api deal session multiple api multiple microservice passport lot overhead copy passport configuration file service change change option jwt share secret service sure,0,154,0,0.0,1,2018-10-16T19:32:51,0.0
52730106,5914043.0,<api><microservices><kong>,pass parameter create service kong api,create service kong url receive pathvariable example example kong throw follow exception curl create service exception create help,0,503,0,0.0,1,2018-10-09T22:20:18,0.0
52948717,5830091.0,<cron><microservices>,explain advantage cronjob inside code code,reptitive task nodejs exist package actual platform host propose inside cronjob question interessant platform package,0,24,1,0.0,1,2018-10-23T12:07:31,0.0
52930226,102040.0,<rest><spring-boot><architecture><microservices>,microservice point accessible internet,microservice base architecture service rest point service talk rest notice lot developer directly start call service javascript code web application recommend access microservice internet hide facade layer course point authenticate web application user find point abhi,0,35,1,1.0,1,2018-10-22T13:09:48,0.0
52743697,9915439.0,<microservices><devops><devops-services>,track api change microservice version deployment,work devop fairly large company process transition microservice area people involve govern request bad practice expertise convince request generate report deploy list api event kafka messaging service microservice path recommend dev follow style guide scrape source code ci cd pipeline generate report compare previous report identify api backwards unsustainable unable find solution satisfy request recommend deploy dev trace tool identify api change event subscription insist report deploy hope advice good practice accomplish,0,45,1,1.0,1,2018-10-10T15:25:36,0.0
52870391,1532045.0,<protocol-buffers><microservices><grpc><service-discovery>,recommend mechanism distribute grpc client,create server distribute client language generate client easily command example generate code copy client application manually burden consumer create generate libs integrate add functionality service instance context convenient mechanism package generate library appropriate canonical package manager call service generate source library return appropriate proto implement,0,317,1,0.0,1,2018-10-18T08:54:16,0.0
52931789,2039838.0,<spring-boot><microservices><spring-cloud><spring-cloud-netflix><feign>,spring cloud netflix zookeeper feignclient build micro service,feignclient discover service register zookeeper case service register zookeeper rsservice sparkexecutor feignclient sparkexecutor discover service default feign client check rsservice service help,0,120,1,0.0,1,2018-10-22T14:30:41,0.0
52749077,534989.0,<azure><azure-devops><microservices><azure-service-fabric><azure-pipelines>,publish secure service fabric cluster vst,deploy secure service fabric cluster instal network server secure certificate vst unable connect powershell dev machine publish visual studio publish vst work fairly sure configuration issue create cluster connection vst sure error follow hope edit note deploy server vst directly iis deployment agent exist download configure appropriate proxy setting,0,124,1,0.0,1,2018-10-10T21:31:58,0.0
52782010,5375880.0,<rest><microservices><communication><transfer>,transfer datum microservice,care extraction microservice monolith write java help spring boot plan divide monolith small microservice enable communication monolith microservice entity microservice database perform action expose rest endpoint duplicate entity acceptable rest controller base monolith retrieve entity microservice place layer repository solution increase coupling avoid approach grateful response well article opinion help advance,0,167,1,0.0,1,2018-10-12T14:47:35,0.0
52854098,4118910.0,<c#><entity-framework><microservices><.net-framework-version><.net-standard-2.0>,include method entity framework net framework incompatible net standard,originally class write net framework convert net standard include method behave receive follow error libarie,0,84,4,0.0,1,2018-10-17T11:44:44,0.0
52856830,4211520.0,<javascript><docker><continuous-integration><integration-testing><microservices>,arhitecture integration test microservice node js,create microservice app microservice unit test start build frontend complex integration integration server docker create docker compose fie spin service testing integration test create service testing inside call approach docker command create service unit test correctly setup docker wise work automate push bitbucket connect repository bitbucket pipeline well docker hub test unit integration,0,119,4,0.0,1,2018-10-17T14:04:28,0.0
52920115,829543.0,<node.js><express><microservices><express-gateway>,fallback service endpoint busy accord status code,possibile fallback api service fail status code consider situation gateway microservice host timeout answer xx status code,0,108,7,0.0,1,2018-10-21T21:34:43,0.0
47888172,8205822.0,<spring-boot><apache-kafka><microservices><messaging><templating>,search architecture approach convert kafka message format,kafka broker notification message source route target app slack mail approach convert kafka message output format json mail send app microservice springboot target message kafka convert common template language velocity freemarker target format forwards converted result target app agree approach well caveat gos performance experience honest assessment,0,29,0,0.0,1,2017-12-19T13:33:43,0.0
47833668,5077196.0,<rabbitmq><microservices><masstransit>,rabbitmq send request response null,rabbitmq masstransit messaging service follow scenario service specific info second service send request second service info database respond object find info case info database second service respond null object issue rabbitmq consider request fail keep send request configure bus consider null reponse normal response,0,32,0,0.0,1,2017-12-15T13:46:56,0.0
47716674,1942614.0,<node.js><microservices>,node js serve microservice service,access node js server service microservice infrastructure locally access node server service deploy infrastructure aws access work configure work case,0,39,0,0.0,1,2017-12-08T14:48:00,0.0
47748434,8735568.0,<amazon-web-services><spring-boot><microservices><packaging>,spring boot microservice cloud deployment packaging format,develop microservice spring mvc spring boot spring cloud practice java microservice jar packaging maven build tool jar file building project ultimate aim deploy microservice aws cloud confusion approach cloud deployment build microservice war format jar format utilize deployment service cloud local jar format follow jar format cloud deployment well option service clarification packaging format microservice cloud beginner cloud platform,0,41,0,0.0,1,2017-12-11T07:49:25,0.0
47916614,1661418.0,<azure><architecture><microservices><azure-service-fabric>,azure service fabric monolithic,bounce read microservice azure service fabric nutshell concept understanding allow microservice deploy container service fabric magic microservice container scale workload disregard service example imagine microservice play query handler – compute resource idle database microservice resource idle query handler pass ridiculously expensive query database microservice require compute vm scale monolithic approach understand query handler microservice resource scale compute resource database microservice scale azure service fabric approach query handler microservice remain compute resource database microservice scale correct great corollary ignore don treatise term,0,71,0,0.0,1,2017-12-21T01:22:38,0.0
47915099,7606002.0,<machine-learning><microservices><voting-system>,combine vote microservice,sense reasonable implement follow happen single instance time series datum micro service consume datum kafka example perform kind classification assign binary discrete reasonably combine result voting save single result microservice match datum case time series identifier vote expect assume result appear timeframe bit asynchronous,0,72,0,1.0,1,2017-12-20T22:11:47,0.0
47804267,8442286.0,<microservices><consul><health-monitoring>,custom ui monitor microservice register consul,consul service discovery soa clarify enhance monitoring web ui consul inbuild support monitor microservice health cpu usage latency disk space tia,0,91,0,1.0,1,2017-12-14T00:40:39,0.0
47765389,7726319.0,<scala><akka><microservices><akka-http>,http load testing,create simple microservice handle request time connection reset error client side correct case mistake server code listener requesthandler actor return max number client code error error bad allignment,0,225,0,0.0,1,2017-12-12T04:30:47,0.0
47908754,8735568.0,<spring-boot><jwt><microservices>,set subject jwt token generation spring boot microservice,generate jwt token microservice token front application service accessing set subject add username add user username code generate token add subject username code add subject username userid add subject,0,1277,0,0.0,1,2017-12-20T14:54:53,0.0
47727201,5705247.0,<java-ee><apache-camel><jms><microservices><messaging>,apache camel jms cluster distribute queue,camel distributed message queue basically system three service synchronous boundary soap client calls service result set service multiple instance service guarantee high availability asynchronous messaging message queue result request service call result set result set service chain synchronically big challenge route response message correct instance thread synchronous service block result figure jms provide jmscorrelationid jmsreplyto headers camel handle header transparently big challenge course multiple instance message queue guarantee high availability message queue system kind support camel provide box distributed queue configure jms cluster weblogic advantage camel kind special configuration note example queue cluster queue secret result result message meditate queue server instance correlation message preserve,0,257,1,0.0,1,2017-12-09T09:33:47,0.0
47835162,8117489.0,<scala><microservices><akka-http>,scala code coverage fully,scala code coverage report akka http microservice report code coverage report plugin addsbtplugin org scoverage sbt scoverage code unit test case,0,152,2,0.0,1,2017-12-15T15:18:02,0.0
47889115,5055717.0,<java><spring><rest><spring-boot><microservices>,spring boot api response application json convert response text xml,work case springboot microservice accept json payload handler api trigger downstream application application accept payload resttemplate httpentity represent request response entity face error annotation error instantiate jaxbcontext class suggestion acheive functionality,0,717,2,0.0,1,2017-12-19T14:28:23,0.0
47736658,8048092.0,<ruby><api><http><ip><microservices>,restrict access api application ruby,grape api application build ruby microservice build python java restrict microservice access api grape application implement ip whiteliste time ip microservice change code grape application change stable well solution help,0,51,4,0.0,1,2017-12-10T07:04:02,0.0
54054783,10226771.0,<spring><microservices><spring-cloud>,link micro services spring cloud,hello micro service communicate exemple authentification service company service set check list company authentificate authentification service repo service advance help,0,18,0,0.0,1,2019-01-05T18:09:18,0.0
54091951,9922480.0,<javascript><node.js><asynchronous><async-await><microservices>,work node function sequence function node project,node project service structure big start js node file work service start js second work service start js third work service start js,0,19,0,0.0,1,2019-01-08T12:36:20,0.0
54261606,4471221.0,<oauth-2.0><microservices><single-page-application>,oauth strategy authenticate spa party,case system microservice oauth microservice provide access token party consume datum manage microservice system system frontend spa web application spa consume datum party difference spa query privileged datum sysmte front question oauth strategy spa approach handle authentication request spa leave oauth server party hood web application build angular send request apigateway microservice sysmte apigateway route request target microservice party oauth request send apigateway route oauth microservice microservice build node write typescript update user authenticate spa screen allow system access sysmte profile spa system client,0,34,0,0.0,1,2019-01-18T21:24:24,0.0
54185520,5265527.0,<python><rest><apache-kafka><microservices><tornado>,rest controller separate thread inside python microservice,develop python microservice handle rest api request process message kafka broker tornado rest controller follow main microservice class basemicroservice abstract class implement share functionality microservice clearly work manage microservice rest controller concurrently,0,44,0,0.0,1,2019-01-14T16:31:55,0.0
54111670,6342603.0,<django><jwt><microservices>,authorization microservice monolith application,django application task queue service read queue process file save process file database manage django application microservice access directly database responsibility process file post change django http request problem authorization time http type machine accept django application jwt authorization token good approach type problem send token queue token process execute,0,48,0,0.0,1,2019-01-09T13:50:09,0.0
54198340,1820391.0,<docker><docker-compose><microservices><nsq>,nsqd docker compose,nsqd live microservice docker environment nsqd docker container container produce service instance nsqd manage find example example java spring service nsqd instance container wonder option docker container single nsqd nsqd producer nsqd producer,0,68,0,0.0,1,2019-01-15T11:55:02,0.0
54259738,10927049.0,<spring-boot><microservices>,invoke service url feign client error postman,service userdetail service post service userdetail controller filter detail user areacode post service call controller method feign client filter post detail base areacode userdetail bothe userdetail post service common base filter post detail repository post dao post controller method call postman feign proxy call userdetail controller method hit url postman error userdetail entity class userdetail service post entity post service service register eureka solve issue pls help,0,95,0,0.0,1,2019-01-18T18:39:05,0.0
54223456,10804384.0,<docker><microservices><amazon-ecs><aws-application-load-balancer>,route traffic microservice aw ecs ec instance application load balancer,microservice team develop application microservice spread aws ecs ec instance docker container listen high port host port forward request port docker requirement domain core route core docker container domain customer route customer docker container test application load balance domain core rule forward corresponding target group target group register corresponding high port host port docker container work expect guess domain core call route correspond docker container doc root core microservice directory core doc root micorservice solution,0,151,0,0.0,1,2019-01-16T18:47:49,0.0
54116301,3315747.0,<reactjs><spring-boot><axios><microservices>,basic authentication react axio call springboot microservice,axio call secured springboot microservice return unauthorized response postman return output expect springboot microservice react app possibility internet vain help solution react call pass auth parameter basic authentication axio,0,427,0,0.0,1,2019-01-09T18:33:44,0.0
54160283,5161279.0,<rest><microservices><jhipster>,jhipster gateway rest request microservice,order learn awesome jhipster framework implement simple jhipster microservice architecture order gateway rest request microservice microservice request database firstly generate microservice application backend port microservice gateway frontend port clone jhipster registry secondly import jdl microservice gateway implement apploade component populate database backend configure server api url webpack common js backend url change api backend gateway service backend web rest resource java http failure response find set target proxy conf json code github launch mvnw command registry backend frontend gateway backend backend database correctly populate backend datum gateway gateway communicate owm database port rest request backend datum question configure gateway order request backend pretty confused tuto configure thing work java file generate import jdl gateway backend handle import jdl generate front file generate gateway entity base generate backend entity lot,0,517,1,0.0,1,2019-01-12T14:01:48,0.0
35315679,3191309.0,<ios><mobile><client-server><microservices><conceptual>,ios client retry server microservice failure,build project consist ios app communicate microservice http reason authenticate user save datum retrieve datum client fail app crash report follow release question server fail return error http code xx xx ios app react accept failure notify user time database fail server return error message json ios app react answer depend technology,0,52,0,0.0,1,2016-02-10T12:44:59,0.0
35329128,5437796.0,<amazon-web-services><microservices>,transfer monolithic application micro service approach,currently monolithic web application build scala scalatra rest api backend angularjs front application deploy aw build component build independent microservice component datum repository type db build scala well akka rest api current application build db module domain module web service api module front client module good approach smooth journey set micro service architecture api gateway service,0,93,0,0.0,1,2016-02-11T01:16:09,0.0
35267071,4886861.0,<docker><microservices>,microservice manage mantl,microservice infrastructure management project cisco opensource push understand basic working idea,0,405,0,1.0,1,2016-02-08T10:14:12,0.0
57195841,3614715.0,<microservices>,relation microservice resource relation,implement microservice commerce project microservice product microservice transaction microservice separate project db server db design question transaction api relation product product project db fetch transaction loop call product detail set product key product object good workaround return api return product relation product transaction list frontend,0,30,0,0.0,1,2019-07-25T06:44:59,0.0
57134576,1188867.0,<spring-boot><logging><microservices><elastic-stack><elk>,unable send spring boot microservice log elk stack,follow command setup elk stack local machine add logback dependency change default logback xml microservice configure send request microservice open kibana data log send elastic search resolve issue,0,49,0,0.0,1,2019-07-21T15:28:45,0.0
57303686,9815085.0,<node.js><angular><express><sails.js><microservices>,call microservice build express js angular app call sail js backend,application angular front sail js backend reason move backend function seperate express project micro service call function kindly,0,67,0,0.0,1,2019-08-01T07:18:32,0.0
57268652,3579212.0,<authentication><flask><authorization><microservices><kong>,implement external auth kong,implement jwt authentication separate microservice kong plugin easily register service kong user register login assume authenticate user send request token attach header kong forwards request authentication service valid request forward request service,0,195,0,0.0,1,2019-07-30T09:37:43,0.0
57277373,1060041.0,<spring-boot><microservices>,blank spring boot ui microservice tomcat instance,background create multiple spring boot microservice ui communicate microservice login module module module package war deploy tomcat eclipse accomplish login module login main landing user enter credential successful login main main button click button user appropriate module button module module module module thought module microservice microservice module issue occur login module work fine main click button module microservice explicitly hit browser tab expect issue access module click module blank exception throw debug controller module call view restcontroller login microservice call module controller module microservice expect result module click button module main,0,33,1,1.0,1,2019-07-30T17:50:03,0.0
57211100,4012589.0,<rest><microservices><software-design>,client account transaction design microservice approach,design solution double check accord microservice architecture client account transaction normal bank account client basic datum address account saving current transaction money transfer account design microservice manage client datum manage client basic datum address microservice manage account datum manage account basic client account data microservice manage money datum account balance transfer accord microservice architecture understanding,0,67,1,0.0,1,2019-07-25T22:55:17,0.0
57228850,3486720.0,<amazon-web-services><microservices>,implement user interface microservice application base aw,numerous article insist implement microservice team build ui fragment compose single iframe div question implement aws deployment time runtime deployment time html fragment collect ci cd process serve web server static api gw dynamic json content time html fragment div deliver client browser demand client click cache client browser api gw technology lambdas deliver html fragment api gw ci cd approach appear fuzzy btw,0,21,2,0.0,1,2019-07-27T03:14:19,0.0
57181251,8259507.0,<java><apache-kafka><microservices><reactive-programming><project-reactor>,consumer slow producer producer service reactor kafka,service service receive request client http interface request publish event reactor kafka producer service consume event reactor kafka consumer case pressure system service communicate service slow react accept request client till decide continue achievable reactor project,0,54,2,1.0,1,2019-07-24T10:54:30,0.0
57289257,4818810.0,<architecture><microservices><api-design><mulesoft>,experience api approach formulate experience api,platform architecture build api lead connectivity design mulesoft architecture help identify classify microservice tricky confused experience api explore question context app platform reusable multiple experience api identify candidate experience api mulesoft define experience layer experience api separate bloated lot thing transformation add app specific logic experience api regard general approach helpful practical example,0,70,2,1.0,1,2019-07-31T11:02:06,0.0
57195175,11834146.0,<database><rest><spring-boot><microservices><spring-cloud>,handle microservice database relation,work sample microservice project teacher service student service study service sport service database service pattern teacher student student study datum sport datum teacher change student handle relationship teacher student study sport datum good handle situation microservice store student teacher service study service sport service store student teacher student study sport datum student teacher teacher service pass study service sport service pass student rest method long update store teacher student database duplicate datum consistancy database sharded database,0,152,6,0.0,1,2019-07-25T05:54:30,0.0
57214463,9667814.0,<reactjs><asp.net-web-api><react-redux><microservices><npm-link>,share datum multiple react application,follow micro service architecture develop react application multiple project react link main react application npm link work web api develop asp net core concept api react app project link main application react benefit api font code place example commerce website main application react product module order module payment module micro service project connect npm link main react application question share datum micro service share user datum login info application generally context api pass datum component component react application archive web api asp net core,0,200,6,0.0,1,2019-07-26T06:43:04,0.0
57284817,11169740.0,<java><spring-boot><microservices>,relationship entity class microservice,create simple microservice application springboot project service userservice noteservice service schema userservice schema noteservice schema user create note relationship create relationship service understand column table idea pojo class user java note java,0,71,9,0.0,1,2019-07-31T06:50:22,0.0
57140276,8491836.0,<c#><.net><entity-framework><synchronization><microservices>,sync server instance database,net framework monolithic server connect database upload server aws initialize instance problem write database entity framework problem code instance server lock student avoid thread update entity time instance connect database microservice architecture read bit transaction sure solve problem example code explain problem code change field transfer sql query ef code ugly,0,62,11,0.0,1,2019-07-22T06:31:49,0.0
58512692,4266607.0,<continuous-integration><task><microservices><bamboo><data-exchange>,exchange datum bamboo task microservice,send file atlasssian bamboo task microservice host online microservice process file send metric bamboo task invoke exactly send file bamboo task url create microservice accept post payload send datum microservice bamboo task bamboo task wait till receive datum microservice general direction achieve,0,14,0,0.0,1,2019-10-22T21:43:22,0.0
58503083,987517.0,<aws-lambda><microservices>,entity class creation aws lamda,plan create project aws lamda microservice concept microservice connection package microservice structure good structure store database entity file store entity file micro service package entity repeat microservice example doctor java entity microservice change doctor table change microservice class well solution,0,15,0,0.0,1,2019-10-22T11:17:54,0.0
58525742,4972059.0,<jwt><graphql><microservices>,jwt decode graphql gateway level microservice level,microservice architecture graphql graphql gateway schema stitch combine graphql schemas plan implement authentication authorization follow authentication token validate third party aw cognito decode gateway level huge benefit eliminate lot logic multiple microservice easy migrate case change provider auth authorization service service manage authorization business logic pitfall bad idea,0,15,0,0.0,1,2019-10-23T14:58:06,0.0
58455612,4266607.0,<python><bitbucket><microservices><bamboo><data-exchange>,send file bamboo task python microservice,microservice write python flask host send file example txt microservice bamboo task microservice file extract bamboo connect bitbucket question achieve bamboo change require micreservice newbie technology help appreciate,0,18,0,0.0,1,2019-10-18T17:29:05,0.0
58345129,2300013.0,<event-handling><rabbitmq><microservices><spring-cloud-stream>,handle application failure read event source spring cloud stream rabbit mq,spring cloud stream rabbitmq project processor read source process message publish sink understanding correct application pick event stream fail app sudden death ack message save message read queue event lose option sure lose event case,0,19,0,0.0,1,2019-10-11T16:20:37,0.0
58454034,689416.0,<database-design><schema><microservices><database-schema>,microservice catalog inventory tracking table,currently explore microservice architecture base read good separate catalog microservice database inventory problem catalog database postgresql mongodb compare inventory postgresql create report inventory movement product code good model send productid inventory code change good track inventory movement schema mind,0,23,0,0.0,1,2019-10-18T15:35:02,0.0
58462197,10332410.0,<django><python-3.x><asynchronous><server><microservices>,django communicate python application,django server application django inter communicate python process develop fetch response action synchronous asynchronous idea asynchronous package hendrix crossbar io celery understand inter communication plan architecture head follow situation seek plan develop django mail sender python package smtp user request view django execute python module develop send email user smpt server google gmail synchronous asynchronous django application communicate server maintain server execute code fetch file ftp server appropriate situation point term microservice term workaround,0,23,0,0.0,1,2019-10-19T09:20:29,0.0
58373742,11311581.0,<asynchronous><microservices><backend>,microservice async architecture implement service work interrelate,question microservice architecture service work interrelate wih example senario commerce buyproduct endpoint request endpoint browser request buyproduct execute buyproduct three service call payment service call payment service fail return false continue stock service call stock service fail return false continue account service call account service fail return false continue return browser success fail example assume success fail state pass service call service example situation return payment service call stock service call request question message broker async architecture message broker rabbitmq implement senario solution valid solution good practice google find solution satisfy sure solution true rest sync architecture browser wait result gurantee process finish fail happen senario,0,29,0,0.0,1,2019-10-14T09:23:48,0.0
58469772,8504091.0,<spring-boot><tomcat><database-connection><microservices><connection-pooling>,limit database connection create spring boot application microservice,work school project application microservice architecture maven spring boot jpa hardware aws rds max db connection problem aws ec instance free tier microservice employee salary leave micro service db connection reach figure limit number db connection service create encounter term connection pool set tomcat connection pool configuration work configuration application max active connection code query,0,29,0,0.0,1,2019-10-20T03:19:37,0.0
58402658,5205011.0,<python><flask><proxy><docker-compose><microservices>,connection microservice write language,small web app microservice homeapp write flask serve login webapp serve user profile order product mysql database dockerise docker compose simultaneously figure redirect user homeapp webapp inside flask simply service create docker compose proxy nginx envoy homeapp docker compose web webapp service write golang work place proxy service,0,41,0,0.0,1,2019-10-15T21:07:43,0.0
58345971,12202533.0,<apache-kafka><microservices><spring-kafka><kafka-producer-api><idempotent>,apache kafka producer idempotence beetween producers message,microservice architecture project microservice scheduler trigger logic send message kafka problem microservice instance send message kafka achieve idempotency producer equal message send kafka producer commit log,0,82,0,0.0,1,2019-10-11T17:27:17,0.0
58372765,5035236.0,<rest><spring-boot><microservices>,spring expose embed jar rest api,monolithic spring boot application expose rest api micro service approach extract business code create microservice rest api call country test purpose rest api server separately create seperate jar call list module create separate project,0,26,1,0.0,1,2019-10-14T08:25:59,0.0
58360903,3386579.0,<rest><spring-boot><microservices>,microservice ensure referential integrity,create personal expense manager app order create microservice adopt pattern expense database column category amount payment detail category database column problem face expense category service database ensure expense exist category imagine expense creation time request category service order validate category existence clearly big flaw approach work well single relationship performance wise mess call service ensure integrity idea deal problem advice solve well,0,45,1,0.0,1,2019-10-13T05:43:02,0.0
58444647,12236611.0,<java><apache-kafka><microservices>,optimize kafka producer java,prerequisite kafka publish message,0,26,2,0.0,1,2019-10-18T05:47:42,0.0
58409875,4404269.0,<asp.net-core><microservices>,usage datum entity exchange client microservices asp core,create dto datum microservice webapi client mvc cumbersome duplicate structure datum entity dto entity multiple field embed relationship duplicate field relation datum entity dto special assembly dto exchange client mvc microservice data entity live assembly,0,27,2,0.0,1,2019-10-16T09:17:31,0.0
58455640,1673458.0,<architecture><microservices>,understand microservice architecture work,doubt regard microservice concept microservice microservice provide load balance ribbon client discovery day cluster kind functionality load balancing fault tolerance kubernte deploy microservice cluster deploy eureka server eureka client ribbon deploy cluster functionality microservice feature deploy cluster,0,54,2,0.0,1,2019-10-18T17:31:15,0.0
58394385,4744341.0,<docker><docker-compose><dockerfile><microservices>,multiple docker container identical dockerfile,project work microservice build dockerfile dockerfile exactly identical container build docker compose suggestion identical dockerfile sure point hand repeat code suppose copy dockerfile service build container accord recipe imagine adjust image future setup reverse find case describe internet good practice situation advantage single dockerfile,0,32,3,0.0,1,2019-10-15T12:10:36,0.0
58384221,11540544.0,<scala><docker><akka><containers><microservices>,downside containerize akka app,downsides gotcha thing aware containerize akka app thing avoid library help good process containerize akka app good practice link article appreciate,0,69,4,0.0,1,2019-10-14T21:21:44,0.0
58491328,6714426.0,<rest><http><microservices>,http status code downstream validation fail,api charge order accept orderid amount input charge call downstream return call call verify endpoint sure previous charge successful happen charge decline reason user expired card error code scenario send xx request correct api perspective bad request user correct case correct api accept orderid total amount charge send xx sense unexpected condition server send server overload maintenance currently send app code map payment verification fail,0,27,9,0.0,1,2019-10-21T17:24:06,0.0
54276439,7290845.0,<java><spring><tomcat><kubernetes><microservices>,kubernetes java spring microservice generate unique identifier container service replica,work microservice java spring mvc kubernetes pod microservice application logic scale replicate base incoming load word copy application require specific identifier mechanism describe specific pod replica container application generate random number descriptor runtime store identifier container wonder well consider work spring tomcat kubernetes expect tech stack,0,80,0,0.0,1,2019-01-20T12:28:53,0.0
54449493,2205704.0,<iis><microservices><url-rewrite-module><arr>,microservice communication http internal traffic pretty urls,microservice website host box iis default web site microservice api jwt token microservice api object jwt token website requirement microservice microservice communication http website microservice communication https client website public api rate limit traffic website microservice rate limit iis rate limit arr url rewrite typical pattern type behavior microservice host box,0,220,0,0.0,1,2019-01-30T21:03:10,0.0
54292736,4142461.0,<asp.net-core><entity-framework-core><domain-driven-design><microservices>,approach ef ddd microservice architecture properly,read lot topic ef core ddd work example microservice stick solution ef core ddd example database microservice identity schedule service keep bound context identity service work user role table opposite schedule service work user appointment design domain model property appointment service user entity example namedetails address contactinfo identity service email password question db context microservice handle migration case,0,228,0,0.0,1,2019-01-21T15:08:00,0.0
54441554,741242.0,<microservices><jhipster><api-gateway>,user management gateway good idea,work microservice platform build jhipster stack jwt security mechanism remove user management specific user api specific concept license handle separate license api architecture imply lot call component start perform issue consider merge service solve performance issue service query user license wonder good practice microservice query gateway,0,41,1,0.0,1,2019-01-30T13:18:54,0.0
54292509,5284105.0,<design-patterns><architecture><microservices><couchbase>,unsing bucket microserice anti pattern microservice architecture,big debate team fact couchbase bucket micro service compatible microservice architecture developer implement distribute monotlith database major argument bucket gain performance question architecture point view wrong bucket microservice microservice concern order fulfillment finance order track billing,0,52,1,0.0,1,2019-01-21T14:53:39,0.0
54311498,4927642.0,<amazon-web-services><spring-boot><docker><microservices>,log spring boot docker,solution write log microservice spring boot separate log file service deploy docker container write log docker context docker restart log disappear write log docker engine,0,822,1,0.0,1,2019-01-22T15:27:15,0.0
54291062,5575068.0,<rest><web-services><microservices><loose-coupling>,cyclic api call microservice,assume service product service coupon service coupon tag product coupon change product api call product service coupon service calculate coupon discount send product service product service maintain cache calculate discount coupon service product product category sku type discount varie base api call product service cyclic call couple solution maintain product cache coupon service overhead maintain cache product field update solution product service api call coupon service send field tight coupling approach correct solve problem,0,70,1,0.0,1,2019-01-21T13:27:12,0.0
54412673,5153261.0,<microservices><software-design><system-design>,sync front validation,project micro service front communicate multiple rest api call side front validation good sync front validation example create validation file json yaml front read understand perfectly manage validation file control validation change validation notify front efficient leave note thought,0,104,1,0.0,1,2019-01-29T01:35:13,0.0
54353397,369759.0,<deployment><architecture><microservices>,microservice adapter country country architectural deployment decision,system connect system adapter microservice system monolith exist country change question perspective microservice architecture deployment adapter country adapter uk adappter au adapter handle country time single system adapter service advantage code base place adaptive code logic country easy introduce change disadvantage deploy system bug affect country time safe separate system disadvantage generic change introduce system copy paste country service repetitive smart work developer point view advantage safe change deploy preferable point view microservice architecture,0,74,2,0.0,1,2019-01-24T18:40:31,0.0
54299572,809808.0,<java><spring><maven><architecture><microservices>,hexagonal architecture spring module,implement hexagonal architecture spring boot application multiple module main idea depend abstraction concretion create three module test core test adapter test application basically describe main idea dependency test adapter depend test core test application depend test core implement third dependency test application depend test adapter example add direct dependency avoid architect design coupling implement incorrectly understand port adapter architecture issue clear find code fooservice java fooserviceimpl java application java write dependency test application pom xml test adapter constantly receive error annotation help well solution implement step configcore java configadapter java configapplication java correspond dependency mention pom xml case work fine mention correct approach help understanding possibility remove dependency test adapter test application,0,400,3,1.0,1,2019-01-22T00:17:50,0.0
54359112,674188.0,<rest><apache-kafka><microservices><google-cloud-pubsub><event-driven>,event drive microservice architecture,event drive microservice microservice system work large process bunch file depend datum service call good idea service call service job send message pub queue process send relevant topic service subscribe topic minute service pull message subscribe magic service expose rest case force execution wait good approach design implement spring micro service spring boot app plan gcp pub hear apache kafka kafka help pub pub integrate,0,315,4,0.0,1,2019-01-25T04:53:30,0.0
54304078,9466142.0,<java><docker><docker-compose><microservices>,deploy multiple microservice depend package docker container,deploy microservice java docker container microservice depend package build application base package require application mvn clean install docker build build docker approach problem docker plugin pom file mvn clean install docker build docker image,0,67,4,0.0,1,2019-01-22T08:27:05,0.0
54455521,6197705.0,<spring-boot><microservices><spring-cloud><netflix-eureka><spring-cloud-netflix>,error find load main class spring solarlog netflixeurekanamingserver netflixeurekanamingserverapplication,error eureka server find code pom xml file error,0,117,7,0.0,1,2019-01-31T07:38:21,0.0
45301606,3154653.0,<c#><rest><microservices><consul>,consul service detection microservice domain architecture,microservice ms doamin architecture ms service rest api consul service detection figure follow documentation find consul ms architecture ms rest endpoint documentation feel registrate plain service host register service endpoint mydomain api register mydomain host service feel figure register rest api urls consul consul net setup register microservice register rest api endpoint microservice ms service consul rest endpoint ms service service endpoint call system feel wrong feel fundamental thing usin kv store rest api endpoint key register service key ms kind kan store current key happy help explain good practice consul combination ms rest endpoint,0,276,0,0.0,1,2017-07-25T11:13:55,0.0
45145109,1676006.0,<spring-boot><gradle><microservices>,configure gradle start spre boot microservice stay alive build completion,develop application server rely emulator configure spring boot microservice extract emulator root project separate repository project well work nice inter project maintenance emulator main project root oppose check repository directory gradle integration test execfork fire process problem process die build complete emulator check version block gradle task command window ctrl outlive gradle task ability handy well point solution alternative gradle preferably complicated fairly simply blast instruction dev team,0,333,0,0.0,1,2017-07-17T13:05:03,0.0
45177029,2429966.0,<java><jpa><docker><wildfly><microservices>,wildfly swarm error connect postgre datasource docker container,build simple rest service wildfly swarm docker postgresql database application work well localhost docker problem connect database data source docker infrastructure web postgresql configure datasource app build command build image file execute command image error,0,371,0,0.0,1,2017-07-18T21:03:37,0.0
45278205,1182260.0,<java><spring><spring-boot><microservices><resttemplate>,spring microservice register unknownhostexception,issue call microservice server microservice register correctly call method microservice fail bean autowire service property server property service help appreciate,0,388,0,0.0,1,2017-07-24T10:29:24,0.0
45270940,2429966.0,<docker><docker-compose><microservices><docker-swarm>,expose api url docker swarm cluster,start play docker good question head statement mind correct misunderstand docker swarm provide box service discover micro service talk network service host service allocate service instance ephemeral service host machine swarm lifespan ip adress expose central api gateway service instance,0,722,0,0.0,1,2017-07-23T23:53:49,0.0
45326767,5294769.0,<microservices><event-driven-design>,understand event drive microservice,event drive design microservice architecture help decouple microservice help develop currently problem microservice call microservice directly datum tightly couple outline follow article event drive architecture help design confused request work datum api call datum service post request bus subscribe answer wait response delay response consumer case call api directly resource appreciate,0,262,1,1.0,1,2017-07-26T12:17:00,0.0
45334075,4962437.0,<jhipster><microservices>,jhipster microservices entity,read doubt microservice ios microservice android create entity service database table jdl studio import model import idl command command micro service workspace edit context build full stack application lot concurrency web ios android application rest call correct repeat entity microservice separate api plataform add microservice database layer edit find talk create jhipster application microservice guy gateway entity microservice clear real base microservice architecture microservice entity gateway ui entity blog entity full model jhl entity,0,445,1,0.0,1,2017-07-26T17:45:12,0.0
45176450,7949022.0,<spring-boot><oauth-2.0><frontend><backend><microservices>,handle oauth microservice front,develop service secure custom oauth server front planning support facebook google username password oauth implement spring boot,0,223,1,0.0,1,2017-07-18T20:27:03,0.0
45302887,3026283.0,<architecture><microservices><api-design>,alternative synchronous rest communication betweeen microservice,synchronous communication service anti pattern search good solution case service manage user location manage user score build service ufs return user location order score descend synchronous solution location ufs fetch nearby user location service rest score score service rest finally sort user memory return alternative event queue solution ufs store user location score database memory cache listen change queue update datum score service location service publish client request user feed user feed service perform network request data good solution improve scale large amount user,0,96,2,0.0,1,2017-07-25T12:10:16,0.0
45203055,3198974.0,<architecture><microservices><apache-nifi><distributed-system>,microservice architecture,multiple separate application write java nodejs python application share common property pull datum source base schedule customer basis rest api store csv file late import datum csv file sql database store procs application integrate datum third party service example app fetching data source app fetching datum source replace multiple separate application write multi tenant single application handle pull datum source separate small application configure custom job write java example rest api authentication pre processing datum create csv write job java file fetch datum source job fetch datum source main application execute custom job common functionality job scheduling log support main application intend nifi handle datum import csv sql database good approach plan write application java reason solution multiple code base maintain concurrency pull datum application deploy single instance update job deploy application process deploy job application good architect solution,0,368,2,0.0,1,2017-07-20T00:11:39,0.0
45174699,3857032.0,<jwt><microservices>,jwt django rest framework jwt authentication microsevice,newbie json web token micro service read article share private service verify user implement application practice basically service authentication implement api require authentication service token generate authentication api status code invalid signature return explain wrong,0,333,3,0.0,1,2017-07-18T18:42:36,0.0
51974383,6196841.0,<testing><microservices><pact>,pact pactverfication class,invoke pactverification test consumer code create dummy httpclient verify pact pactverfication class seperate contract actual test pactverification test contract,0,38,0,0.0,1,2018-08-22T20:09:08,0.0
51936401,4752330.0,<database><database-design><architecture><microservices><data-modeling>,restruct data model microservice,restruct data model microservice example monolith application user event crud service user event tightly couple term physical data base model data model separate monolith application microservice crud users service crud event service thinkih separate datum model separate st approach keep data model service database approach restructure data model service database consider case approach good good practice case guess simply pick st approach wrong approach usable int practice suprise consequence guess approach perfecrtly fine well sure help clarify,0,296,0,0.0,1,2018-08-20T18:13:25,0.0
51932126,5084982.0,<microservices><apollo><graphql-js>,type def executable schema,microservice architecture api complete microservice issue resolve proper orchestration interested handle situation code problem microservice core start core core boot api achieve type definition remote graphql schema store etcd create executable schema service reachable schema core executable schema apollo link mistake call follow method fetched schema getquerytype gettypemap return object string definition typedef store store executable schema pose security issue resolver store db introspection disable production microservice send typedef independently,0,307,0,0.0,1,2018-08-20T13:45:21,0.0
51986244,4346275.0,<spring><security><microservices><netflix-eureka><discovery>,spring cloud microservice eureka server security,eureka http https protocol interact registrant client easily trick eureka server pretend client post false erroneous datum service eventually result removal service registry scenario large system user alternative security authentication scheme prevent attack,0,605,0,0.0,1,2018-08-23T12:49:57,0.0
52001694,9824070.0,<python><logging><stdout><microservices><quart>,log access log stdout quart python,microservice write quart python log stdout app logger disable true flask alike import logging log logging getlogger werkzeug log setlevel logging error achieve goal,0,156,0,0.0,1,2018-08-24T09:43:00,0.0
51962515,1107129.0,<azure><microservices><mesos><marathon><dcos>,containerport hostport dcos,web application application definition dcos setup azure cloud marathon lb deploy add service access application browser keep containerport hostport change hostport access app hostport scale app allocate free hostport application wrong pls guide,0,162,0,0.0,1,2018-08-22T08:14:03,0.0
51918410,6872018.0,<spring><spring-boot><microservices>,java lang classnotfoundexception org springframework messaging converter messageconverter microservice,follow microservice tutorial link start follow service config registry gateway service yml file change registry localhost config localhost monitoring service error error error start auth service,0,1465,0,1.0,1,2018-08-19T13:58:41,0.0
51908605,6872018.0,<spring><spring-boot><microservices>,spring microservice java lang classnotfoundexception org springframework expression spel support simpleevaluationcontext,follow tutorial link customization start sequentially simply start gateway service error guide spring boot parent version,0,1225,0,1.0,1,2018-08-18T12:21:13,0.0
51991404,6872018.0,<spring><spring-boot><microservices>,org apache maven plugin mojoexecutionexception git directory find valid dotgitdirectory pom xml,refer code link simply build code error update pointer list derectorie,0,478,0,1.0,1,2018-08-23T17:36:53,0.0
51929079,1197804.0,<microservices>,perform response composition microservice architecture,alternate product commerce website case fetch datum multiple microservice product store product price case price complex subject user location parameter separate microservice review manage rating review product product image description rating number review microservice architecture place compose response multiple microservice approatch mvc rest api approach apigateway api gateway async call microservice response return mvc webapi composition response perform approatch mvc rest api approach apigateway api gateway async call product microservice product microservice call microservice perform composition return help decide,0,149,1,0.0,1,2018-08-20T10:46:35,0.0
51907715,4470334.0,<microservices><jhipster><okta><spring-cloud-feign><feign>,feign client message consumer,set three microservice create jhipster configure okta oauth autentication add integration rabbitmq message service service produce message event consume message update database second service full update data third service call feignclient fail follow stack problem feign execution start web request authentication infos context reach datum service,0,431,1,0.0,1,2018-08-18T10:42:27,0.0
51861930,7320300.0,<microservices><seneca>,seneca communication microservice,seneca microservice communicate keep fail error code orderindex orderplugin emailindex emailplugin help tnx,0,210,1,0.0,1,2018-08-15T15:39:11,0.0
52008034,1928337.0,<neo4j><microservices><graph-databases><amazon-neptune>,share graph database microservice,share neo aws neptune graph database microservice restrict access specific graph database specific microservice performance impact,0,187,2,1.0,1,2018-08-24T15:59:00,0.0
51982133,6899919.0,<redis><aws-lambda><microservices><message-queue><amazon-sqs>,message completion result consumer producer,build application microservice architecture microservice architecture follow message orient pattern aws sqs return completion result consumer service producer service algorithm consider producer create message unique producer subscribe redis channel message producer place message sqs queue consumer remove message sqs queue perform operation consumer publish result operation redis channel message producer recieve completion result resume execution reasonable pass message completion result consumer producer,0,57,4,0.0,1,2018-08-23T09:08:45,0.0
55268592,10553991.0,<java><go><microservices><netflix-eureka><netflix-zuul>,eureka server discovey registration service application develop spring,web application build spring java jee discover register eureka server spring boot application easy add annotation configuration application property application build spring boot matter microservice discover register client eureka server,0,262,0,0.0,1,2019-03-20T19:15:51,0.0
55246221,4517576.0,<architecture><microservices>,microservice boundary export split,microservice architecture follow domain domain excactly database storage sell set item book magazine sell add tax maintain service crud item crud taxis additional jms consume service domain handle sell invoice delivery condition micro service handle crud invoice create invoice list invoice plan micro service export csv special government official sure function micro service sure export crash kill application integrate domain crash hand application deploy bit experience cut service,0,25,0,0.0,1,2019-03-19T16:51:46,0.0
55279498,3206049.0,<spring><rest><spring-boot><refactoring><microservices>,pass request parameter rest service call spring boot service application,architectural refactoring convert monolithic ee ejb application spring service order create service break application joint domain currently three call service rest project ultimate purpose transform application microservice cloud infrastructure clear decide service rest easy transform future approach sense question stem send request userservice header parameter username postman userservice call service call rest call order service work carry common request parameter set common header parameter method rest request incoming request outgoing request userservice customerservice alarmservice config interceptor file log transfer header parameter service interceptor work userservice resttemplate send request call service request postman work print log message userservice commonmodule clienthttprequestinterceptor manage passing common header username kind interceptor mechanism single place,0,1318,0,0.0,1,2019-03-21T11:30:57,0.0
55150931,612258.0,<postgresql><microservices><pgbouncer>,best practise talk mobile app postgre,build mobile app talk postgre cloud imagine app success recommend pattern talk postgre database cloud build app stand test user concurrent partly well distribute system expect query return,0,39,0,0.0,1,2019-03-13T20:45:09,0.0
55121612,11096043.0,<asp.net><asp.net-mvc><asp.net-core><microservices>,break monolith microservice template app,huge monolith application asp net mvc framework service offer group unrelated datum separate controller business logics task break monolith microservice host docker container plan create template application asp net core serve reference project application fork template project add correspond controller business logic customize template add specific feature example application respond request csv format json standard app modify template project include csv response feature project currently pro develop asp net core application easy require configuration customization cors cache route define company template project con fork merge template project troublesome find security issue template manually update project potential merge conflict option asp net core template project easy update maintenance design pattern,0,45,0,0.0,1,2019-03-12T12:34:20,0.0
55096047,4269911.0,<rest><spring-boot><apache-kafka><microservices><kafka-consumer-api>,microservice kafka consumer group,work appliation kafka component application follow microservice request push message kafka topic servicea microservice consume message topic push datum datastore serviceb clear servicea application design confusion serviceb serviceb plan rest api good bundle consumer controller single application consumer plan consumergroup multiple consumer acheive throughput well efficent approach consumer serviceb separate service independent bundle inside serviceb configure consumer listener spring boot microservice advance,0,105,0,1.0,1,2019-03-11T06:05:16,0.0
55172577,4028271.0,<c#><list><asp.net-web-api><microservices>,iterate response list kvinfomodel applicationuris granularkvinfo kvlid kv,iterate variable set response filter filter base contact type suggestion,0,9,2,0.0,1,2019-03-14T21:52:01,0.0
55089460,4393106.0,<microservices>,microservice database design keep request state,implement microservice architecture backend application service receive datum service datum store mysql db cronjob read data db send multiple request service complete job account create billing info create request apply exist record db problem handle failure request fail reason design db handle failure retrie create multiple column handle state account request account create fail account create fail count,0,32,2,0.0,1,2019-03-10T15:50:04,0.0
55111117,1291530.0,<angular><go><nginx><cors><microservices>,method allow cor header access control allow origin tcpdump send,question follow text error message firefox console front post json datum submit form cross origin request block origin policy disallow read remote resource reason cor header access control allow origin golang systemd unit serve localhost nginx listen port pass request angular front build build flag pm angular http server serve port nginx thing port version work ubuntu pm angular cli angular http server firefox network tab developer tool reveal post request header response header actual request suppose hit submit button firefox trigger json params tab network dev tool response nginx pass request port retrieve pass header golang code front read cor server side issue enable server nginx angular http server enable golang code enable cor development serve golang open build binary angular serve production enable angular http server note flag enable front nginx file adapt oddly matter header nginx file produce idea repeat time send moment front load nginx pass request port send click submit button submit form correct behaviour indicate wrong update mar pm point sideshowbarker comment method allow response link cor issue nginx verify nginx open firewall port post golang directly avoid complication origin policy curl post machine exact response http method allow point good guess golang allow post explicitly allow code loss,0,340,4,0.0,1,2019-03-11T22:06:56,0.0
52434965,7510748.0,<microservices><restful-authentication>,maintain session key backup service,session key token maintain resful web service main microservice crash backup service otherwords backup service session detail,0,12,0,0.0,1,2018-09-21T00:21:26,0.0
52414569,3253896.0,<rest><oauth-2.0><microservices>,provide oauth service,service real authorization service oauth frontend service resource service client web browser store cookie user web browser user auth service sign token web browser redirect frontend frontend resource service validate token request auth service current scenario user web browser send request frontend service frontend send request auth service validate invalid frontend send request refresh token frontend access resource service process request frontend send resource service resource service send request auth service validate thought simple schema service restful architecture,0,19,0,0.0,1,2018-09-19T21:42:35,0.0
52366502,7780475.0,<architecture><microservices>,decide partition system microservice,read decompose application service strategy help example online store business capability product catalog management inventory management order management delivery management question consider example customer order product online store web weba webb well approach build microservice order management weba order management webb stuff order management approach pro con,0,32,0,0.0,1,2018-09-17T11:16:03,0.0
52392621,168048.0,<events><command><microservices><correlation><cqrs>,command differ infrastructure message,connect bit cqrs pattern request reply example http transport header request track purpose case monitor microservice incoming request rewrite correlation header transport layer infrastructure question request message deliver business layer example directly command execute mechinic auto magically icommand require totally thing exist infrastructure layer transport correlate transport business command log trace track thing place identifier pattenr correlationid business command,0,35,0,0.0,1,2018-09-18T18:29:51,0.0
52327099,8840052.0,<python><node.js><api><microservices>,relationship microservice database api rest,relationship api application node js mongodb python mysql relation client sale register client cpf sale carry sale customer datum traditional application relationship foreign key talk separate application relationship,0,41,0,0.0,1,2018-09-14T07:35:56,0.0
52445137,6943062.0,<java><spring-boot><microservices><jhipster>,jhipster gateway user entity service log user,jhipster microservice build project call sport stat application jhipster generate follow spring boot backend microservice playerstatservice leagueservice playerstatservice entity sport skill player player list session target sport skill predefine generate gateway client communicate service securely sign register user gateway client user coach monitor player coach add player start monitor track stat coach player log user coach view player stat assume entity relationship player user findbyuseriscurrentuser current user player stat easily monolithic application problem user generate jhipster gateway player playerstatservice create relationship error entity relationship user gateway entity question achieve thing generate class object service repository example restrict user player call playerstatservice restapi player incorporate log user query repository level edit jwt authentication,0,297,0,0.0,1,2018-09-21T13:45:59,0.0
52313034,5558593.0,<amazon-web-services><aws-lambda><microservices><aws-sam-cli>,good skeleton set aws sam project consist multiple lambda function,source code set sam project aim add multiple lambda function share code sam local feature start api locally check official aws source code project aim function,0,52,0,0.0,1,2018-09-13T11:44:53,0.0
52429763,853509.0,<nginx><microservices>,design nginx location microservice,microservice base application service service url product question design nginx location location application location url trade config complexity conflict location issue affection micro service refactor nginx conf size guidance good practice,0,121,0,0.0,1,2018-09-20T16:47:27,0.0
52336291,4776987.0,<spring-boot><tomcat><microservices>,unable deploy war tomcat,error deploy application war server org apache tomcat util bcel classfile classformatexception invalid byte tag constant pool application microservice create spring boot java version tomcat version tomcat,0,913,0,0.0,1,2018-09-14T16:53:24,0.0
52306441,2803774.0,<microservices><jhipster>,jhipster backend frontend,java jhipster question jhipster generate frontend backend code monolithic type perpose frontend administrate user create application user create blog app create backend api frontend administer jhipster user blog create frontend english,0,163,0,0.0,1,2018-09-13T03:59:09,0.0
52290664,2064138.0,<redirect><post><flask><microservices><python-3.7>,python flask forward post external api,build microservice camunda rest api python flask flask restplus python camunda docker container localhost port request microservice forward camunda api redirect work perfectly fine post request test postman official tutorial forward properly post request postman post camunda rest api directly work fine redirect post microservice status code file upload debugging endpoint file receive file transmit redirect work endpoint method modify request post result file upload redirect result file upload redirect post request properly camunda api question camunda api redirect post request foreign endpoint properly create api endpoint,0,968,0,0.0,1,2018-09-12T08:23:24,0.0
52290697,6831381.0,<api><oauth><oauth-2.0><authorization><microservices>,oauth microservice resource server communicate resource server,currently user pass access token scope web portal user request view resource token pass resource server web app resource resource resource server communicate web app subset require scope user authorize scope call fail scenario apply scenario user request authorize scope scope problem user web portal access web app directly scenario web app client web app access token request resource web app problem user context lose standard solution wrong question access token pass microservice authorization framework internal request,0,233,0,1.0,1,2018-09-12T08:25:22,0.0
52464181,10036337.0,<c#><microservices><api-gateway><ocelot>,ocelot api gateway good url template assign microservice,number microservice company api gateway pattern route microservice fact good url format apply microservice example template opinion,0,291,1,0.0,1,2018-09-23T08:02:47,0.0
52390175,7084252.0,<c#><.net-core><microservices>,server update,question search appropriate implementation application check update pay attention reason send message message update good implement rest service start application work long time inform user update message bus help good practice update clarify client application service rest check update service inform client question good send message service client inform application update,0,59,1,0.0,1,2018-09-18T15:40:03,0.0
52342644,4288467.0,<rest><spring-mvc><spring-boot><soap><microservices>,application rest call expose soap service spring boot,create microservice spring boot expose rest service inside consume soap service create soap service spring boot application rest call hit base url clearly soap service expose correctly hit configure request mapping uri fail reach understanding help idea big advance refer screenshot work rest call mapping work,0,48,2,0.0,1,2018-09-15T07:31:22,0.0
52427361,4619671.0,<java><spring><spring-boot><microservices><pojo>,user interface ui microservice springboot,multiple micro service task activity ureka gateway service question ui microservice handle ui activity microservice ui handle respective microservice answer question business ui microservice architectural issue help resolve ui microservice user request html request bind appropriate object employee pojo handle ui validation pojo custom validation controller successful validation feign api call employee microservice save employee object employee microservice microservice restcontroller ui activity call receive appropriate controller bind employee object employee object employee microservice employee object pass service layer convert appropriate jpa save database employee class duplicate ui microservice employee microservice question eliminate duplication employee class ui microservice handle ui microservice pojo microservice duplicate ui service overhead modification task duplication solution bind employee object ui microservie directly jpa pojo service directly expose jpa pojo service layer good approach solution design pattern,0,124,2,0.0,1,2018-09-20T14:22:15,0.0
52297664,9995157.0,<spring><spring-boot><microservices><netflix-eureka>,spring cloud eureka server preservation renew threshold,basically eureka server three eureka client microservice remove follow message eureka server eureka server,0,982,2,0.0,1,2018-09-12T14:32:52,0.0
52455277,10400086.0,<c#><.net-core><jwt><microservices>,dotnetcore service auth,work big project main idea issue create micro service follow create application handle login register jwt open app secure app follow login mock credential app generate jwt redirect de second app portal mock portal mock access api base role main question authentication application require authorization netcore point direction find idea big platform split small service issue,0,42,3,0.0,1,2018-09-22T09:22:26,0.0
52375247,10350266.0,<angular><spring-boot><microservices><netflix-zuul>,angular spring boot micro service connectivity error,connect angular application micro service build spring boot spring cloud ui call microservice layer zuul route respective microservice error connect microservice angular ui browser console fail load url request header field access control allow origin allow access control allow header preflight response explain error refer,0,129,3,0.0,1,2018-09-17T20:28:34,0.0
52383201,1385063.0,<spring-boot><microservices><netflix-zuul><netflix-eureka><netflix-ribbon>,spring boot microservice netflix zuul exception zuulexception forwarding error,create micro service spring boot implment zuul proxy call url zuul proxy service netflix zuul exception zuulexception forwarding error implement errorfilter send custom message errorfilter work response,0,1425,3,0.0,1,2018-09-18T09:21:58,0.0
52492693,10016327.0,<java><spring-boot><networking><microservices><feign>,connection refuse java feign client,simulator microservice consume microservice simulator deploy local host invoke simulator curl invoke java feign client connection refuse feign client check simulator port invoke simulator curl invoke microservice feign client connection refuse error,0,738,3,0.0,1,2018-09-25T07:21:35,0.0
44941218,3047241.0,<node.js><azure><microservices><azure-functions><serverless-framework>,serverless deploy command azure complete response receive terminal,microservice instal dependency error command produce code open browser code code receive login login azure account open link display message close window happen terminal terminal stick time help,0,277,0,0.0,1,2017-07-06T06:23:13,0.0
44998425,5988699.0,<rest><api><design-patterns><microservices>,micro service design business user restapi,design case privilege user create business privilege business owner business multiple user address requirement create three service userapi businessapi subscriptionapi userapi responsible user creation deletion updating find likewise business subscription api operation api users api business api subscription scenario create user business subscriptionapi step follow business exist business api client check user exist mobile number user api client check condition pass user api client call user creation step provide user record subscription table subscription business user request post api subscription business request body uservo uservo repeat subscriptionapi – correct share view described service design improvement,0,279,0,0.0,1,2017-07-09T16:11:05,0.0
44902847,678853.0,<architecture><kubernetes><microservices>,recover failure orchestrated deployment,monolithic system orchestration temporary problem access resource connect database typical approach keep retry recovery achieve system microservice architecture typically boot process light remove retry logic application abort process orchestrator restart process reduce application complexity orchestrator deal service dependency exactly recover appropriate start service blind retry service persistent connection client terminate service problem terminate process approach consider experiente share feedback helpful,0,27,0,0.0,1,2017-07-04T10:01:18,0.0
44923182,1663462.0,<docker><kubernetes><microservices><docker-swarm><orchestration>,docker swarm assist manage container specific environment variable,essentially start container specific environment variable account multiple number container account ids start additional container exist container specific container kind dynamic docker compose config docker swarm assist functionality tool kubernete alternatively handle docker cli start container pass relevant environment variable sure container exist environment variable restart container exist,0,84,0,0.0,1,2017-07-05T10:08:47,0.0
44984823,8086746.0,<docker><microservices><consul><health-monitoring>,docker mac container host networking consul health check connection refuse,http health check service expose moment return configuration health check programmatically http api service config essence consul dev mode host machine directly health check pass problem consul docker container health check fail docker container launch consul aware exaclty state host version guess problem consul request container loopback interface intend loopback interface host correct assumption importantly correct problem,0,143,0,0.0,1,2017-07-08T09:51:21,0.0
45052215,1460382.0,<java><linux><tcp><connection-pooling><microservices>,check number tcp connection server,application server request call service expose port runnng port implement http connection pool connection communicate apache httpclient library poolinghttpclientconnectionmanager connection polling httpclient intance create startup share call service expose create httpclient configure httpclient max connection check connection polling work correctly add delay request wait response jmeter generate concurrent request server follow netstat command check number connection establish server random behavior time connection count time number,0,416,0,0.0,1,2017-07-12T08:22:16,0.0
44905869,2006313.0,<kubernetes><microservices><prometheus>,inter pod communication kubernetes,create pod three container prometheus blackbox exporter python access api blackbox exporter port scrape target generate python access api container alert prometheus ssl expiry certificate target move blackbox exporter pod establish service fail establish communication prometheus blackbox exporter pod result unable probe ssl expiry certificate alert prometheu yaml file point problem note configuration fine prometheus pod blackbox prometheu fine individually communicate yaml file prometheus deployment service deploy prometheus config follow,0,938,0,0.0,1,2017-07-04T12:21:50,0.0
45058457,8295908.0,<spring-boot><microservices><spring-boot-maven-plugin>,auto scale microservice local server cloud java,microservice create spring boot maven microservice service gateway service registry scale auto scale service cloud technology local configuration,0,2799,0,0.0,1,2017-07-12T13:03:10,0.0
44901467,3185908.0,<rest><microservices>,rest api field restrict role,design rest api wonder restrict frontend user access resource field user resource obvious email disclose return public audience admin receive field kind strategy problem idea create separate endpoint administration auth mechanism field,0,64,1,0.0,1,2017-07-04T08:57:17,0.0
45088519,8303779.0,<javascript><rest><api><microservices>,connect microservice api,concept microservice api code experience simple program variety language understand microservice rest api lot searching find clear example connect microservice api send receive lead direction problem ton language example example pretend simple javascript program html css simple ui assume seperate javascript program ui calculate number api post number calculator microservice calculate microservice post result ui microservice test javascript file locally laptop localhost url api http request note microservice quote realize extremely simplified example microservice understand question code apologize hour understand appreciate help,0,87,1,0.0,1,2017-07-13T18:33:02,0.0
45056729,4239859.0,<ibm-cloud><kubernetes><microservices><netflix><istio>,core kubernetes microservice component istio replace,plan integrate microservice platform kubernetes architecture reference architecture core component replace istio kubernete microservice architecture understand help request route traffic management policy control migrate project component istio replace kubernete vice versa,0,153,1,0.0,1,2017-07-12T11:42:30,0.0
45085790,656094.0,<java><spring><microservices><spring-cloud><auto-registration>,spring cloud discoveryclient getlocalserviceinstance deprecate registration,requirement current instance running microservice problem requirement process register random generate instance provide service instance discoveryclient code point deprecate state javadoc coudn find initialize conventional specific service registration btw direct implementation starter discoveryservice implementation runtime,0,1269,1,0.0,1,2017-07-13T15:57:59,0.0
45031529,5098805.0,<c#><azure><microservices><azure-service-fabric><azure-iot-hub>,create service instance parameter service fabric,service fabric azure project work simply service function read datum iot hub stand service read datum partition time multiple thread refactor service intance partition problem find create instance service inform instance hub partition read paramether provide code sample feel problem pretty explanatory,0,238,3,0.0,1,2017-07-11T10:09:01,0.0
56303898,9780385.0,<excel><spring><spring-boot><microservices>,send excel file micro micro,establish communication micro receive petition frontend contact micro create excel file send micro start download file print simple string response check communication micros work correctly thing file work code follow controller second controller excel file generator error appear receive file controller download excel localhost,0,29,0,0.0,1,2019-05-25T10:19:49,0.0
56224507,1264321.0,<java><architecture><microservices><cloudfoundry>,eureka discovery service route,cloudfoundry access microservice register discovery service query setup route subdomain call service easy handle case cluster circuit breaker case second approach,0,30,0,0.0,1,2019-05-20T16:02:44,0.0
56277220,10712233.0,<javascript><node.js><events><microservices><nestjs>,call nestjs micro service eventemitter listener function,develop micro service nestjs typescript consume publish message queue scenario follow consumer micro service read message kafka topic queue send message second micro service problem appear second step message send consumer micro service message consumption implement library message consume correctly log communication micro service package work perform listener method message micro service send send listener function appear code redis client kafka consumer initalization listener function consume message second microservice message nestjs decorator publish redi,0,289,0,0.0,1,2019-05-23T14:15:20,0.0
56300466,9860374.0,<java><spring><spring-boot><architecture><microservices>,microservice model register flow authorization server resource server,java spring boot implement microservice ecosystem logical boundary medicine resource server appointment resource server identity federation authorization server user login username password role microservice user personal address contact medium gender microservice imagine situation follow resource expose return personal doctor pass follow resource return token imagine authorization server authenticate receive token token transaction resource server send token parse read claim role user username doctor personal doctor doctor request arrive check token request spring synchronize microservice appointment resource server identity federation authorization server natural key three type user doctor log natural key generate sure good team discuss basically front authorization server doctor json payload personal login authorization server create account generate unique authorization server increment json payload generate publish json queue resource server listen queue json create doctor side store doctor personal bad,0,37,0,0.0,1,2019-05-24T23:24:46,0.0
56157210,4490081.0,<java><spring><spring-boot><docker><microservices>,multiple microservice schedule mode,spring boot base microservice schedule daily weekly pattern deploy microservice separate docker container container orchestration technology kubernete process release memory create issue microservice host microservice container schedule release resource help greatly appreciate,0,40,0,0.0,1,2019-05-15T20:32:33,0.0
56225906,11529545.0,<node.js><mongodb><rabbitmq><microservices><message-queue>,microservice share database communicate messaging service,general guidance system design currently service vendor service connect mongo database specific vendor datum include twitterid twitter service db connectivity listen live twitter feed specific vendor tweet twitt service process tweet send vendor service storage message queue problem twitt service startup vendor listen access database vendor solution startup twitt service send message vendor service request list vendor twitter listen vendor service receive message vendor twitter database send list twitt service message queue twitt service listen vendor feed question solution correct easy twitt service connect mongo database solution scale twitt service vendor service manage vendor send twitt service listen entirely second opinion appreciate,0,40,0,0.0,1,2019-05-20T17:52:06,0.0
56168085,11509658.0,<apache-kafka><openshift><microservices><stateful>,process problematic record poll kafka pod restart,good design solution detect problematic message poll kafka topic microservice crash restart constantly crash restart constantly consumer offset remember successful message processing case error offset commit pod crash restart microservice continue consume problematic example outofmemoryerror keep state solution microservice stateful save delete message low chance catch outofmemory keep retry number message message store message wonder learn good practice,0,44,0,0.0,1,2019-05-16T12:01:49,0.0
56160806,11507545.0,<unit-testing><testing><microservices><lagom>,lagom service test,team start lagom framework create microservice create service test service consume relational database read document service testing database involve understanding servicet utility start fake service service start database server withjdbc setup create test datum lagom provide sample java service test code,0,49,0,0.0,1,2019-05-16T04:22:36,0.0
56179319,8580454.0,<python><flask><celery><microservices><gunicorn>,celery flask app gunicorn,celery flask microservice task py task manage py call flask server manage py start service celery worker app celery perfectly register task task py production handle multiple request microservice add gunicorn serve request figure gunicorn command celery command api service gunicorn production create app celery command,0,324,0,0.0,1,2019-05-17T03:48:34,0.0
56152245,1775413.0,<microservices><istio>,retrie work fault injection istio,add virtualservice fault injection work error introduce retrie error rate reduce system receive error,0,116,0,0.0,1,2019-05-15T14:52:34,0.0
56126710,8690158.0,<node.js><rabbitmq><graphql><microservices><apollo-client>,api gateway microservice communication,build microservice arhitecture help communication good approach api gateway communicate service api gateway server service rest communicate service message system,0,157,0,0.0,1,2019-05-14T09:11:03,0.0
56110148,8547991.0,<python><docker><flask><rabbitmq><microservices>,deploy rabbitmq flask docker,application flask angular front microservice architecture deploy docker problem communicate service read good option es rabbit mqtt find tutorial time finish degree tutorial allow create comunication service flask restless manager create api crud advance,0,738,0,0.0,1,2019-05-13T10:07:55,0.0
56288447,4929853.0,<java><http><groovy><microservices><micronaut>,pass custom header micronaut declarative client,instrument micronaut project order add distribute trace micronaut support compelling reason pass custom http header serialize context pass microservice create filter filter controller method return context lose time filter call method instrument client add header parameter client method call work,0,253,0,0.0,1,2019-05-24T08:12:58,0.0
56299046,2831852.0,<elasticsearch><microservices><jhipster>,jhipster microservice conflict port elasticsearch,elasticsearch work port start jhipster micro service configure work elasticsearch start elasticsearch service elasticsearch fail jhipster service start port check situation command windows cmd elasticsearch port microservice elasticsearch microservice occupy port change service elasticsearch dev mode,0,26,1,0.0,1,2019-05-24T20:16:51,0.0
56199752,651834.0,<angularjs><user-interface><architecture><frontend><microservices>,ui consume microservice api consolidate list grid view allow user sort datum,currently front project angularjs consume endpoint build microservice architecture datum list view allow user sort datum base column select user list column render service column pull service service direct relation mapping base object service return datum consolidate list column allow user choose column choice step allow user sort column datum seamlessly good practice follow microservice paradigm retrieve datum service sort result option list datum service sort datum frontend problem approach dataset user feel slowness time browser hang angularjs project face slowness datum set grow introduce intermediate api service light weight nodejs server help coordinate request internally handle request datum service send result create intermediate api service cache datum orchestrate request respond datum multiple service share practice follow case current microservice trend api service expose separate service frontend bit complex handle service api datum user ui interact suggestion approach hint helpful advance srini,0,35,1,0.0,1,2019-05-18T14:11:45,0.0
56206507,1116341.0,<microservices>,client api gateway communication microservice architecture,read couple article communication microservice choose event base communication microservice pattern wonder client suppose communicate send request api gateway wait response time event base nature communication microsrvice internally processing polling check request complete standard practice client api gateway microservices communication,0,39,1,0.0,1,2019-05-19T09:32:52,0.0
56132575,11346118.0,<architecture><microservices>,architecture download big file,develop system download big file rest streaming event ftp big source site whois database shodan censys tb file size split gb file source system download file source rest api ftp convert csv format manipulate datum convert time format time format split zip big csv file small csv file zip mb develop micro service concept rabbitmq micro service download file write message rabbitmq file location indication second convert file csv write message rabbitmq file third manipulate datum convert column write message csv file fourth split zip design develop system choose design hear suggestion,0,55,3,0.0,1,2019-05-14T14:17:58,0.0
56224181,6107599.0,<c#><asp.net-core><authorization><microservices><roles>,user role db populate authorizeattribute,netcore mvc app role customrole class controller set authorize endpoint populate role database hard code class achieve solution create stuck implement role class method role database idea accomplish,0,69,3,0.0,1,2019-05-20T15:39:51,0.0
56180125,7716619.0,<docker><go><microservices>,microservice find,error module project dockerfile microservice module project create image follow command,0,56,5,0.0,1,2019-05-17T05:27:27,0.0
56161875,3759227.0,<java><docker><docker-compose><microservices>,docker compose exception,spring boot application deploy docker container work fine deploy application docker container docker compose dockerfile step create jar mvn clean package step docker build order step docker work fine execute step deploy application container docker compose execute docker compose exception target order snapshot jar find execute mvn package command docker compose acheive docker compose yml,0,157,5,0.0,1,2019-05-16T06:13:14,0.0
50410038,1839104.0,<spring-security><oauth-2.0><microservices><spring-security-oauth2>,implement oauth implicit grant spring security,build application microservice frontend ui react js create auth microservice spring boot oauth single application read implicit grant password grant auth microservice support question implement ui user username password auth microservice create separate ui application,0,1031,0,0.0,1,2018-05-18T11:10:32,0.0
50417003,1569670.0,<asp.net-web-api><microservices><restful-architecture><event-bus>,web api application subscribe queue good idea,design reporting system microservice architecture service suppose subscriber event bus communicate raise event decide expose service rest api question good idea create service web api restful application subscriber event bus basically ponit entry service api event feeling separate concern idea,0,273,0,1.0,1,2018-05-18T18:05:47,0.0
50227462,4138572.0,<java><kotlin><microservices><simulator><netflix-eureka>,update simulator web service suite,presently work application external dependency micro service microservice administrate eureka instance microservice controller external dependency block work unaware code ad logic microservice currently solution simulator service absence application intercept log request response external service absence service match response request log provide response,0,25,0,0.0,1,2018-05-08T06:45:48,0.0
50380259,9802771.0,<service><kubernetes><microservices>,reccomende practice kubernetes service include microservice,odd question bet depend scenario preference set microservice generically call bod access handle request rely kubernetes dns resolution create service route service route generically call serviceb servicec store service constant define client code request base experience good reason store config file configmap imagine change lifecycle application practice,0,29,0,0.0,1,2018-05-16T21:36:11,0.0
50295779,4301286.0,<java><architecture><microservices><jhipster>,jhipster extend microservice solution,jhipster project customization client microservice registry office accounting customize accord customer good solution manage extendable microservice customization client tnk,0,45,0,0.0,1,2018-05-11T15:39:51,0.0
50397998,6523297.0,<http><session><service><microservices><lagom>,session lagom,manage session lagom share datum multiple service call session basically store userid account creation multiple request store userid session lagom,0,74,0,0.0,1,2018-05-17T18:12:23,0.0
50221166,4733235.0,<c#><entity-framework><rest><microservices>,good microservice pattern object base sql database,legacy application base sql server win middle tier search good solution write microservice base rest base api provide access datum js azure specialty application database uncommon object base approach entity person file group article relation common object table table common attribute store common table category object unique guid api provide method allow load additional datum reverse cool simply safe object server separate datum corresponding table good pattern entity framework database manual linq sql base solution suitable library task,0,109,0,0.0,1,2018-05-07T19:28:33,0.0
50389344,3607513.0,<docker><neo4j><integration-testing><microservices><testcontainers>,unable connect neo testcontainer testcontainer network,nice example create testcontainer network environment differ bit connection containrs setup wenn test configuration error idea correctly pass ip neo container myservice container,0,147,0,0.0,1,2018-05-17T10:35:48,0.0
50439512,798746.0,<kubernetes><microservices><consul><istio>,instance pilot configure query consul,service service register consul add istio stack ideally service call service question single instance pilot support query consul istio configure support environment read istio doc find pilot configure query consul reference link doc blog helpful well advance,0,161,0,0.0,1,2018-05-20T21:24:11,0.0
50320908,1413279.0,<mysql><microservices>,migrate microservice mysql,company migrate microservice kubernete architecture hit couple hurdle pitch typical monolithic database lot query join source table typically consider microservice responsibility customer order question microservice consider good practice find approach join code essentially multiple query approach clearly datum require raise issue extra latency join query single trip database depend require data request db join external service build seperate service handle query feel lot internal api service dependant bad practice single point failure wrong join mysql datum database query benefit single trip mysql break microservice approach remove ability database schema service personally feel option versatile option curious add latency multiple round trip guy deal solution,0,167,0,1.0,1,2018-05-13T21:46:34,0.0
50363538,9556049.0,<wso2><microservices><service-discovery>,wso api manager implement microservice service discovery service registry feature,wso api manager implement microservice service discovery service registry feature,0,180,0,0.0,1,2018-05-16T06:09:17,0.0
50405838,2674303.0,<java><spring-boot><microservices><spring-cloud><spring-oauth2>,error create bean scopedtarget oauth clientcontext scope session active current thread,google problem apllie advice help source application yml invoke rest method follow error happen answer advice add advice apply help execute authenticated request service,0,2491,0,0.0,1,2018-05-18T07:18:25,0.0
50340234,2619748.0,<c#><azure><microservices><azure-functions><restsharp>,send rest request file json restsharp framework standard,currently wrapper build employ function sendemail send json payload file azure function http endpoint restsharp send request boundary provide azure function receive call setup multipartmemorystreamprovider boundary console test app wrapper library azure reciever function sample data comparison restsharp restsharp result postman error revert restsharp bring boundary rest request work great net framework wrapper cros compatible framework net standard fully solve problem idea manually enter boundary restsharp find lot documentation,0,475,0,0.0,1,2018-05-14T23:09:02,0.0
50361821,2419434.0,<docker><kubernetes><microservices><spring-cloud>,kubernetes microservices spring cloud,develop application microservice spring cloud zuul proxy server eureka service discovery couple microservice product service order service deployment purpose leverage feature docker kubernete learn kubernetes realize kubernetes service object work load balancer static ip change pod reschedule case remove eureka server work discovery well client side load balancer spring cloud utilize kubernetes service object purpose zuul identify service redirect request kubernetes object perform function zuul proxy server remove eureka zuul work local kubernetes env,0,245,0,0.0,1,2018-05-16T02:54:15,0.0
50387947,2674303.0,<java><spring-boot><microservices><spring-cloud><spring-security-oauth2>,inter micro service request respond forbid status spring cloud application,investigate microservice architecture choose spring cloud framework application shema discovery server eureka decide skip picture simplify full source code example find githib problem explanation hello service hello service start access context path request happen mesage response authentication disabled service acce auth flow happen eventually application log execute method response oauth configuration hello service application yml question problem previous point execute authorized request service word enable oauth authorization hello service possibility request,0,1360,1,0.0,1,2018-05-17T09:28:45,0.0
50276356,3434403.0,<microservices><saga>,system implement saga,tool system framework middleware provide implementation saga pattern transaction find aware advance,0,183,1,0.0,1,2018-05-10T15:23:30,0.0
50434941,7368584.0,<microservices><service-discovery>,microservice deal service registration,work side project microservice architecture main problem architecture multiple core microservice launch time runnne find nice quick article website bring question microservice register service registry microservice location service registry client sort service discovery method find service type service registry tl dr guess underlying question proper implement service registration,0,210,1,1.0,1,2018-05-20T12:40:14,0.0
50270206,922584.0,<kubernetes><microservices><kubernetes-ingress>,link microservice test dev prod environment ingress,consider three environment environment consist follow microservices webapp service service easily call service js frontend deal domain great call fact domain keep environment consider dev environment webapp service configure ingress follow work great issue receive full path call find foudn feature implement contradictory sense second problem order service follow call good approach good practice edit accord suggestion remove path help remove functionality work path,0,77,3,0.0,1,2018-05-10T09:55:58,0.0
50427036,4442344.0,<rest><ssl><ssl-certificate><microservices><keystore>,certificate discovery service,design microservice architecture sette https protection ssl certificate generate provide certificate periodically regenerate import certificate keystore service order avoid implement set rest api allow service programmatically automatically retrieve certificate import keystore simply programmatically title sort certificate discovery service prefer remote certificate repository java security package allow deal kind thing question architectural point view good approach face problem king serialization deserialization process recommend library framework tool exploit bye bye,0,44,4,0.0,1,2018-05-19T15:54:30,0.0
50350198,691183.0,<git><microservices><spring-cloud><jgit>,git command microservice,implement microservice spring cloud facade git operation invoke ui layer jgit problem require filesystem clone remote repository local filesystem problem microservice stateless problem clone operation time option multiple instance microservice lead repository push time commit node time lead conflict treat git repository database operation filesystem clone invoke command remote add hard search solution git microservice phrase common sense store source repository edit find idea nice,0,102,7,0.0,1,2018-05-15T12:26:47,0.0
39395503,6039232.0,<java><performance-testing><microservices><icap>,performance test service icap,performance test service icap protocol specific tool library handy java suggestion suggestion appreciate,0,272,0,0.0,1,2016-09-08T15:57:56,0.0
39348995,2240780.0,<rest><design-patterns><microservices>,design pattern send blank form receive compelete,design pattern rest microservice receive json data structure return datum blank file example input output,0,32,0,0.0,1,2016-09-06T12:25:04,0.0
39485766,4210830.0,<java><rest><apache-kafka><microservices>,push result asynchronous rest call client rest kafka,deploy scalable set microservice service communicate rest request third party service slow unstable idea event drive apache kafka webclient request loadbalancer forward service request thirdpartyservice service poll thirdpartyservice result write kafka service kafka send result store kafka topic request webclient remember service deploy time lb service instance return response create uuid webclient solution webclient consume kafka topic stupid idea,0,294,0,0.0,1,2016-09-14T08:25:47,0.0
39369856,2620759.0,<ruby-on-rails><ruby><microservices>,tool slice app microservice,refactore code bit feel separate app microservice helpful tool graph reference directory app app ruby rail coverage coupling module ruby dynamic language graph,0,43,0,0.0,1,2016-09-07T12:21:43,0.0
39416301,1042646.0,<spring-boot><cloudfoundry><microservices><pivotal-cloud-foundry>,microservice api gateway layer,read detail api gateway microservice architecture read basically help security transformation throttling orchestration responsibilitie read microservice dumb pipe smart endpoint service choreograph orchestrated assumption orchestration responsibility api gateway,0,1668,1,0.0,1,2016-09-09T16:48:40,0.0
39367722,1513980.0,<java><rest><spring-data><microservices><spring-cloud-sleuth>,spring cloud sleuth oauth template,microservice oauth security mechanism moment call microservice autowire inject oauth resttemplate follow step call tracable spring cloud sleuth add dependency follow spring autowire oauth resttemplate org springframework beans factory annotation autowiredannotationbeanpostprocessor illegalargumentexception throw result follow exception oauth resttemplate combination sleuth max,0,159,1,0.0,1,2016-09-07T10:42:56,0.0
39361356,4012006.0,<asp.net><azure><multi-tenant><microservices>,azure service fabric multi tenancy microservice,develop micro service app azure service fabric multi tenant configure active directive multi domain dev prod sample reference help start topic follow link find sample reference,0,444,2,0.0,1,2016-09-07T04:43:09,0.0
39555686,1743843.0,<java><c#><rest><microservices><vert.x>,net rest api vert,net rest api application read datum active directory build microservice base environment decide write java vert support language net application question deploy net rest api application vert communicate vert base service understand microservice environment provide programming language,0,738,0,1.0,1,2016-09-18T08:38:11,0.0
39414913,526592.0,<cqrs><microservices>,optimise microservice query domain datum,consider simplistic service user service discussiongroup service discussiongroup user member service dbs ui list user profile picture specific discussiongroup user group result paginatable monolithic approach db join userdao discussiongroupmember table db separate good strategy solve perform consider add service query,0,249,0,0.0,1,2016-09-09T15:22:09,0.0
57389983,3579212.0,<microservices><reverse-proxy><service-discovery><api-gateway>,api gateway service regisry service mesh work togather,api gateway entry point manage north south communications service mesh side car proxy manage inter service communication east west service registry database service instance location sound clear thing confuse service mesh api gateway vendor provide access control mechanism mechanism mechanism overlap functionality concept scope goal assume api gateway service mesh service registry deploy api gateway forward request directly service communicate service proxy register service gateway service registry integrate service registy api gateway finally concept purely serve purpose overload functionality integrate meaningful reference architecture follow,0,23,0,0.0,1,2019-08-07T08:23:41,0.0
57421401,781591.0,<version-control><microservices>,micro service version control handle deployment,currently figure handle version control microservice read good strategy separate git repository microservice deployment upload multiple git repository pretty complex scratch head deploy update multiple microservice require change depend roll previous version issue production deployment headache developer micro service deal advice greatly appreciate exist library build scratch simon,0,26,0,0.0,1,2019-08-08T22:29:13,0.0
57329579,8885009.0,<architecture><microservices>,token dependent api reset microservice,micro service authentication authorization micro service access api user provide micro service access token set credential unique request multiple token service token invalid refreshing perform cron job micro service refresh token hour service scale problem scale instance micro service manage token bad collusion current manage sort db redi hold current token single instance micro service responsible update token micro service caple scale responsible retrieve current token token auth service service retrieve current token problem approach thing harder create additional micro service manage token api pretty small problem solve hear problem solve keep simple manage scale handle lot traffic,0,41,0,1.0,1,2019-08-02T15:33:20,0.0
57380197,10738330.0,<caching><microservices>,caching microservice,work micro service architecture commerce application cache reduce service communication wire improve application performance store business entity product price configuration level datum wonder datum cache max size cache keep strategy,0,46,0,0.0,1,2019-08-06T16:15:46,0.0
57347429,3620633.0,<kubernetes><akka><microservices><lagom>,lagom microservice form cluster akka sharding,lagom microservice kubernetes pod form cluster startup keep display follow message number constantly increase documentation behavior lagom microservice help understanding issue,0,50,0,0.0,1,2019-08-04T14:33:03,0.0
57495864,1183979.0,<jwt><token><microservices><jwt-auth><angular2-jwt>,jwt token handle set unlimited expiry time,plan oauth owin jwt bearer token authentication follow requirement solution grant type appreciate small example code payload claim grant type angular ui username password azure ad authenticate user log facility copy paste url session tab browser user work call center case manager session long time token expire work study token expire time set control refresh token achieve user seamless experience continue task token expire refresh token mechanism refresh token authorization code grant type userid password safe choose impliit grant type refresh token sure achieve point guide,0,57,0,0.0,1,2019-08-14T13:36:23,0.0
57495297,8401076.0,<c#><asp.net-core><microservices><ocelot>,ocelot rederict microservice,implement microservice application catalog api microservice localhost base crud implement api gateway ocelot catalo api launsettings json program cs api gateway startup cs reach catalog api hello answer issue,0,76,0,0.0,1,2019-08-14T13:03:10,0.0
57409738,11901145.0,<spring><spring-boot><spring-security><microservices><restful-authentication>,good practice spring security user detail storage microservice,good practice spring security storage user detail role user authentication authorization microservice production environment,0,91,0,0.0,1,2019-08-08T09:47:18,0.0
57328269,8412430.0,<join><microservices><cqrs>,join datum cqrs pattern microservice,apply cqrs pattern project understand join denormalize datum consider data model entity product store relationship attribute stock product quantity store relationship attribute consider create microservice productservice responsible handle cud operation product storeservice responsible handle cud operation store entity productstore manage service point create third microservice responsible join datum productservice storeservice order retrieve product cqrs pattern good solution create materialized view synchronize domain event publish microservice great doubt suppose materialized view follow column product sku product stock store store address update product entity store entity problem sync view datum receive productcreate event event product stock store store address null save event view save incomplete datum update view receive complete datum,0,94,0,0.0,1,2019-08-02T14:16:13,0.0
57399683,6322746.0,<spring-boot><microservices><spring-cloud><netflix-eureka>,client discover service register eureka service registry,team process register dozen microservice eureka service registry microservice talk team impression client application service discovery efficiently query service hard time explain team service registry microservice application boundary discover service functional discover load balance level query service poc setup eureka server zone register microservice zone setup cluster mode eureka server zone replicate registry question service registry route microservice talk client application aware service register registry zone write language team simply consume rest api understand guidance question solve specific problem appreciate insight correct misunderstanding eureka service registry,0,24,1,0.0,1,2019-08-07T17:38:00,0.0
57503268,853837.0,<node.js><express><microservices><architectural-patterns>,sidecar middleware,build microservice express operation log request find sidecar pattern functionality achieve express middleware scenario recommend sidecar middleware,0,46,1,1.0,1,2019-08-14T23:36:40,0.0
57464933,4621020.0,<spring-boot><javafx><spring-security><oauth><microservices>,secure springboot api desktop application client,springboot micro service base backend api zuul gateway proxy javafx desktop application security place secure backend spring security tutorial base web app case spring security accomplish goal module example goal provide api request desktop app technical term assign desktop app client zuul server validate client desktop app accept request case request allow api traffic zuul proxy downstream request micro service zuul gateway accept zuul server allow request log register user type security desktop client discuss user provide successful username password login return jwt store javafx application request backend configure token expire specific time frame minute provide method automatically refresh expire token long user account valid user login check scene sure account valid issue token user base role feature method endpoint accessible user valid role gui feature hide disabled layer security server side protect unwanted access case modify app,0,62,1,0.0,1,2019-08-12T16:29:45,0.0
57429045,10849556.0,<spring><microservices>,microservice communication determine entity exist microservice,monolith application inject service controller class check customer exist invoke method customerservice findcustomerbyid achieve microservice architecture resttemplate unauthorized message internalservererror status provide access token jwt request header manner request rest method work fine method require microservice communication post api customer org springframework web client httpclienterrorexception unauthorized unauthorized guess method customer invoke header lose jwt token solve access microservice gateway api,0,56,2,0.0,1,2019-08-09T11:24:45,0.0
57514244,5410011.0,<c#><api><security><asp.net-core><microservices>,implement auth identity service,read lot authorisation authentication confused sure good appropriate tool bit background create multi tenant application consist service tenant service define tenant exist define scope api allow identity service issue token user define role user tenant user belong application service bundle api perform specific business logic problem experience create identity service api restrict access tenant user belong tenant permission call product api allow call api api restrict access user role user role admin api request provide tenant belong access api whilst user role limit api access idea customize route endpoint atleast create service allow customization require change logic future create ability request access token code authorisation authentication sure request token call demand sure tenantid provide request header sure sort encrypt user store user honestly advice helpful stick day suggestion tool,0,56,2,0.0,1,2019-08-15T18:13:56,0.0
57409255,1675740.0,<java><spring><hibernate><microservices>,event processing multiple instance java service,consider instance service microservice setup java spring hibernate example bit clear assume service create update books service process detail book service create task create update book solve find good handle relate follow scenario event example book update emit multiple time update event pick service processing emit event handle service eventually check exist create remove task subject book case complex operation atomic db transaction multiple instance subscribe topic event process time multiple instance integrity constraint error unique properly handle ideal processing instance block process instance event queue instance,0,90,2,0.0,1,2019-08-08T09:23:13,0.0
57394908,885920.0,<pagination><microservices><asp.net-core-webapi><ef-core-2.0><api-gateway>,aggregation sort filtering pagination microservice database,approach requirement microservice architecture develop asp net core sql server database microservice sql database allow cross microservice communication aggregate datum send microservice api gateway ui browser browser data grid datum display aggregate microservice data grid customer address book number country hotel hotel address hotel cost detail functionality datum grid sort grid datum base column filter grid requirement base column addition pagination grid size record currently knowledge datum aggregation happen api gateway layer top sort filtering pagination functionality apply ef core data orm send datum microservice response question question question,0,118,3,0.0,1,2019-08-07T12:48:59,0.0
57514208,5072496.0,<docker><kubernetes><yaml><microservices><readonly>,kubernete read,kubernete read temporarily disallow change cluster continue allow operation turn,0,56,4,0.0,1,2019-08-15T18:10:28,0.0
57408720,9815085.0,<node.js><express><microservices>,authentication microservice,application develop monolith architecture authentication authorization application front angular nodejs jwt token generate front start implement micro service module implement authentication authorization service read article unable find solution,0,61,4,0.0,1,2019-08-08T08:53:37,0.0
54537406,4199161.0,<nginx><microservices><traffic>,smart edge route proxy mechanism route request base user credential,implement route kubernetes cluster base user credential specific user base user redirect traffic specific node edge router traefix nginx,0,37,0,0.0,1,2019-02-05T15:09:03,0.0
54560009,9151832.0,<java><server><cloud><microservices><faas>,implement faas monolith microservice server architecture java,plan poc implement faas server architecture good practice follow implement architecture achieve,0,40,0,0.0,1,2019-02-06T18:11:36,0.0
54486749,189908.0,<kubernetes><microservices><persistent-volumes>,hostpath pv rwo access mode share multiple pod,share hostpath pv multiple pod multiple deployment rwo access mode provide deployment host pv create project namespace,0,58,0,0.0,1,2019-02-01T20:28:24,0.0
54630207,2159809.0,<docker><microservices><amazon-elastic-beanstalk><netflix-eureka><dockerrun.aws.json>,eureka client call eureka client throw unknownhostexception,component eureka server currency exchange service currency conversion service dockerize microservice container docker engine docker compose yml work fine deploy service aw beanstalk problem occur service register eureka server call currency exchange service retrieve call currency conversion service dependency currency exchange service communication fail currency conversion service retrieve datum call currency exchange service eureka server call currency exchange service unknown host exception help follow dockerrun aws json detail follow exception,0,331,0,0.0,1,2019-02-11T12:03:12,0.0
54550828,305813.0,<configuration><microservices><asp.net-core-webapi>,asp net core share common service registration multiple api,build application base microservice architecture webapi project share common service registration register common service startup cs webapi project add solution service global error handle middleware log configuration route setting appsetting json configuration centralize common stuff global webapi project,0,98,0,0.0,1,2019-02-06T09:59:51,0.0
54600712,674188.0,<microservices><google-cloud-pubsub><spring-cloud-dataflow><event-driven-design>,spring dataflow gcp pub,build event drive microservice architecture suppose cloud agnostic initially gcp spend long time configuration gcp pub directly event queue care cloud implementation spring cloud dataflow nice spre boot microservice orchestrate spring cloud dataflow support pub event queue life easy term configuration setup path choose native broker,0,129,0,0.0,1,2019-02-08T21:48:41,0.0
54590210,9812272.0,<c#><.net><microservices><azure-service-fabric>,request session maintain singleton service,configure service startup file multiple call docclient response singleton share object server ensure maintain session request services addsingleton,0,393,0,0.0,1,2019-02-08T10:17:33,0.0
54542775,6526251.0,<python><django><docker><microservices>,configure multiple django application database,configure django application container leave problem separate process small image break logic small component container access database realize true microservice environment database service consider situation bit logic read datum database produce csv file break separate type image logic special disk mount write file rest application remain stateless leave django application read write datum database spin report database option keep application model define spin container processing spin container image reporting work well pattern isolate behavior specific application option option,0,178,0,0.0,1,2019-02-05T20:46:34,0.0
54471798,25868.0,<node.js><docker><docker-compose><rabbitmq><microservices>,node js microservice survive rabbitmq restart,work example rabbitmq communication node js microservices understand good microservice survive restart rabbitmq server full example github start system change broadcast directory open terminal issue follow command terminate rabbit server node js unhandled exception kill sender receiver microservice connect rabbitmq server restart rabbitmq server original microservice online intend docker compose development kubernete production set microservice restart terminate disconnection rabbitmq prefer microservice stay online work interrupt reconnect rabbitmq automatically achieve automatic reconnection rabbitmq library,0,227,0,0.0,1,2019-02-01T01:50:30,0.0
54631447,2803450.0,<architecture><microservices><soa>,multiple application web server consider microservice soa,prepare interview architectural question study experience previous job application single tomcat instance worry scale application independent schema database app consider microservice web server application happen soa architecture course happend low level architecture software question application single web server instance soa microservice image confused,0,56,1,0.0,1,2019-02-11T13:14:34,0.0
54597787,8700129.0,<java><python><database><microservices><sql-insert>,correct post datum database rest api request server,create entry database microservice request receive frontend microservice microservice communicate rest api call read java request microservice microservice request separate thread impose timeout thing python impose timeout request successful request time thread suppose critical insert database retrie suppose retrie timeout network delay successful insert operation suppose example picture user place cash delivery order order service update database order order service http post request payment service add entry database payment history describe case duplicate entry payment table retry handle issue check duplicate entry expensive operation insert work frontend switch backend issue head time help,0,303,2,1.0,1,2019-02-08T17:48:53,0.0
54603261,8535571.0,<java><maven><installation><microservices>,java maven instal issue intellij,download type microservice initially time occur build failure maven version maven java version java default locale os,0,330,2,0.0,1,2019-02-09T04:44:25,0.0
54560829,9824872.0,<java><spring><microservices><netflix-zuul>,netflix zuul exception zuulexception hystrix read time,problem zuul microservice work throw timeout configure work configure work debug target method second microservice feignclient fetch datum microservice remove feign request work great problem update create enpoint feign stacktrace,0,1124,2,0.0,1,2019-02-06T19:05:06,0.0
54514901,5185442.0,<nginx><hosting><microservices>,migrate apache vhost nginx,test service nginx struggle convert apache config nginx help nginx htaccess sure tag current draft,0,58,3,0.0,1,2019-02-04T11:12:14,0.0
51454135,6050113.0,<spring><maven><spring-boot><microservices><multi-module>,multi module project maven spring,project spring boot maven module parent module add module create program return error module storage api application property file config param class storage api annotation case problem,0,24,0,0.0,1,2018-07-21T08:07:52,0.0
51557001,2299984.0,<microservices><spring-cloud><spring-cloud-stream><spring-cloud-netflix><spring-cloud-dataflow>,spring cloud netflix spring cloud data flow microservice arheticture,develop application handle event system provide rest api split application micro service figure approach draw attention spring cloud netflix spring cloud datum flow toolkit clear integrate example suppose follow functionality system user card order product catalog send notification order third party system process filtering transformation order event processing rule base order send notification send user order third party system user websocket pre filtering point classical micro service architecture framework spring netflix stack point good event drive approach toolkit spring datum flow question build communication platform populate order detail service transform incoming order save additional case database order rule executor service current save rule execute send notification web socket service send order user set filter order saver service store transform order database communication micro service platform api gateway case follow question spring cloud platform allow work micro service performance number event huge slow processing event approach example communication api gateway memory cache functionality intersect service question microservice understanding spring cloud stream framework sense separate service microservice spring cloud stream rest api work database simultaneously process event diagram sense build stack moment question approach correct spring datum stream microservice,0,281,0,0.0,1,2018-07-27T11:27:00,0.0
51491162,8703545.0,<microservices><spring-cloud><consul>,exchange datum instance service consul,combination spring cloud consul wonder exchange datum state instance microservice example authenticationservice authenticationservice user log receive token time verify moment aware state idea database table user session store easy share state send message log,0,47,0,0.0,1,2018-07-24T05:38:10,0.0
51422793,1679903.0,<security><microservices><cloudfoundry><pivotal-cloud-foundry><12factor>,cloud foundry public app,solution app public internal accessible prove configuration pattern solution simple create cf space cf organization app space bind internal cf cloud point main share domain accessible internet accessible app cloud foundry access backing service cf security group app space bind pub cf cloud point accessible internet pass traffic limit access backing service access app cf security group configuration secure easily,0,310,0,1.0,1,2018-07-19T12:32:00,0.0
51552739,2063564.0,<node.js><microservices><strongloop><loopback>,achieve microservice functionality loopback framework,help loopback framework achieve microservice functionality loopback framework share link tutorial knowledge link download demo link work,0,884,0,0.0,1,2018-07-27T07:18:52,0.0
51545971,10140915.0,<nginx><microservices>,nginx microservice authentication,good practice build microservice authentication nginx moment reverse proxy service example create user serivce user current user ordinary user user admin opportunity passport service jwt token user create middleware inside nginx request passport service check current jwt token access route service user,0,650,0,0.0,1,2018-07-26T19:07:46,0.0
51362482,2610292.0,<rest><api><transactions><microservices><distributed-system>,database operation api call single transaction,example scenario simple buy operation user pay wallet credit card case amount exceed amount wallet remain amount bill credit card scenario distinct transaction debit wallet charge credit card assume wallet db operation credit card call third party operation single db transaction fail entire operation rollsback parallel modern app utilize parallel operation operation parallel ensure atomicity entire operation implement kind functionality microservice architecture distribute application advance,0,150,0,0.0,1,2018-07-16T13:02:19,0.0
51558885,10143129.0,<microservices><oozie><airflow><luigi><azkaban>,definition airflow dag case variable dependency,airflow follow case compute daily report website website handle report compute follow set task site level set task level website contanine set task perform third set task aggregate result generate report note airflow task describe fact simple call remote micro service grpc call design mind initially perform process relate task order simple well define dag task treatment perform complex external dependency queue trigger task receive notification external system notification arrive hour airflow handle process point incline model process website embeedde dag include task ideally subdag task relate read feature stable website generate dag set task structure dag depend number number task dag question airflow acceptable framework case case alternative framework luigi oozie clear advantage context approach dag website subdag include task dag sound foresee issue web ui usable number task quick test task timeout wonder link configuration celery correct backend wonder localexecutor fact appropriate case fact computation perform directly airflow worker call remote service,0,220,0,0.0,1,2018-07-27T13:21:39,0.0
51530578,606006.0,<python><django><rest><django-rest-framework><microservices>,create django browsable rest api auth permission,remove app middleware piece drf service microservice architecture service database django pollute database set table model rid context microservice three thing rest framework database abstraction layer browsable api html pure json thing drf set table database service,0,72,2,0.0,1,2018-07-26T03:29:33,0.0
51421205,91403.0,<architecture><microservices><event-driven-design>,trigger action receive event event drive architecture,start implement microservice event drive architecture service publish event listen event straightforward implement listener action depend single event example problem orderservice wait event example thing pool queue event finish order coordinate orderservice event implement application level example event save database check correspond event order proceed finish order event arrive finish order problem approach minimal chance receive event time generate race condition pattern kind scenario ps find answer net tool point third party service interested pattern code solution,0,219,2,1.0,1,2018-07-19T11:13:01,0.0
51463258,5131929.0,<domain-driven-design><microservices><dbcontext><restful-architecture>,call restful service front,imagine angular project front communicate project restful service fetch datum restful service request restful service individually angular call restful service call restful service call restful service add entity dbcontext query,0,77,3,0.0,1,2018-07-22T08:20:05,0.0
51542629,263902.0,<azure><microservices><azure-service-fabric><azure-deployment>,multiple azure application version independent common microservice cluster,multiple azure application share microservice indexing management git submodule deploy application problem attempt deploy second application microservice create application microservice submodule share servicemanifest identical version number currently commit future independent shared deployment issue despite separate application,0,52,5,0.0,1,2018-07-26T15:34:42,0.0
42674145,4473711.0,<microservices><netflix-zuul><netflix-eureka>,zuul rewrite route rest call,encounter strange behaviour zuul proxy microservice project setup consist discovery service eureka api gateway zuul microservice start setup follow route localhost route zuul config access service gateway rest call error request mistakenly route service service route happen second rest call service rewrite routing localhost route return work call service opposite order mistakenly route service download minimal project component easily replicate behaviour insight regard issue,0,331,0,0.0,1,2017-03-08T14:34:47,0.0
42769855,4220846.0,<amazon-web-services><express><docker><microservices><amazon-ecs>,change express js microservice application ecs auto scaling,containerized micro service application workflow pull code git build docker image push update task service image tag successful travis build instance dev stage cluster instance prod cluster instance dev stage cluster solution micro service rabbitmq mysql gateway api scenario webapp container highly scale automatically create multiple container ec instance instance ram memory currently hardcode port webapp express js code change follow dynamically bind port webapp api load balance configure autoscalle happen automatically additionally achieve ansible scale container cluster instance,0,180,0,0.0,1,2017-03-13T17:31:24,0.0
42642688,921335.0,<spring><spring-security><microservices><spring-cloud><netflix-zuul>,spring cloud zuul api gateway,spring cloud kick start project micro service fashion spring cloud stack eureka zuul ribbon hystrix application dumb ui interact service job service rest nature token base authentication jwt spring security follow flow application authentication service authentication service care authenticating user validate access token rest service service authorization mechanism user identify jwt token access request resource jwt spring security filter achieve map zuul fit picture documentation encounter zuulfilter achieve authentication authorization mechanism place zuul authentication piece zuul distribute authorization save configure rest resource role mapping db load read zuul request blog example talk sso stuff enlighten blog post example help appreciate,0,1191,2,0.0,1,2017-03-07T07:35:12,0.0
42630302,1575362.0,<spring><jhipster><microservices><netflix-zuul><api-gateway>,access microservice gateway,experience spring micro services zuul configuration help microservice jhipster registry access microservice application gateway application service current route access service application start spring boot app work fine deploy application tomcat request return zuul config http request,0,728,2,0.0,1,2017-03-06T16:09:44,0.0
42711116,1188137.0,<azure><microservices><azure-service-fabric><service-fabric-stateful>,service fabric deleteserviceasync timing,spawn asf microservice process process delete service follow code time work fine time timeout issue microservice stuck delete state idle secondary replica advance suggestion resolve issue,0,82,3,0.0,1,2017-03-10T05:45:34,0.0
42778151,322988.0,<publish-subscribe><microservices><cqrs><eventual-consistency>,integrate auth,process implement user management microservice ms find user create ui interact api api rpc call user management ms publish createusercommand inmem bus consumer handle command create user db user register auth send command persistent queue subscriber pick register user auth persistent queue case reach auth complete publish usercreatedevent help appreciate,0,67,4,0.0,1,2017-03-14T05:10:33,0.0
42611968,3640901.0,<python><docker><flask><dockerfile><microservices>,multiple flask microservice communicate configure docker,multiple flask microservice obfuscate protect ip microservice api starter microservice communicate good dockerize application microservice docker file docker compose yml root directory microservice communicate,0,865,6,0.0,1,2017-03-05T18:02:18,0.0
46171533,7946595.0,<azure><microservices>,call micro service inside micro service,microsoft micro service architecture reliable call multiple micro service single micro service develop micro service customer order database customer db order db combine datum customer order good option simply call microservice call separate microservice customer order combine datum return response choice usage true call separate micro service application side combine datum option good performance reliable standard approach process option thing performance well side micro service response application side well option,0,526,0,1.0,1,2017-09-12T08:31:12,0.0
46117792,7027494.0,<node.js><docker><microservices>,micro service instance time script docker,keep simple multiple instance micro service docker micro service responsible sync cache time pull datum repository store cache problem instance micro service job fail place suggestion simple btw option tag micro service docker instance extra work,0,28,1,0.0,1,2017-09-08T13:36:21,0.0
46206775,5470416.0,<microservices>,hotel communication microservice,microservice architecture hotel create communication service handle email sms service trigger asynchronous event event call send reservation confirmation email reservation service aware email communication generic event reservation confirm result confirmation email,0,33,1,1.0,1,2017-09-13T21:00:43,0.0
46153057,3528798.0,<iframe><architecture><microservices><api-gateway>,client side call frontend microservice bypass api gateway,system build microservice sit api gateway rest api service benefit point api gateway clear frontend microservice small component ui correspond backend handle internal communication scenario proxye microservice http call harmful example microservice payment provider integration deal payment specific regulation require web browser redirect user bank authorization impossible purely backend deliver frontend microservice service essentially serve html nest inside iframe process payment simplified strip example pay snippet embed basically fire forget thing developer happen inside iframe stay worry collect credit card detail validate redirect user bank enter fa code wait payment approve finally move user proper trail order payment finalize communication microservice talk internal communication sense api consumer api gateway course keep microservice decouple unaware api gateway costful deviate constraint bring small benefit advanced rate limit proxye feature,0,329,0,0.0,1,2017-09-11T10:05:24,0.0
46171136,8381618.0,<database><architecture><microservices>,microservice db create common microservice handle connection,number microservice maintain database mongodb elastic mysql microservice set connection constantly consider wise create microservice handle connection microservice start example api gateway microservice request search call search microservice search start call database setup miscroservice return established connection base microservice call case search microservice well find connection inside api gateway leave logic separately microservice,0,128,4,1.0,1,2017-09-12T08:08:00,0.0
46057423,1233351.0,<integration><microservices><oracle-golden-gate>,oracle golden gate integration microservice,work migration integration large premise oracle monolithic app cloud base microservice long time microservice feed synchronize oracle db alternative oracle golden gate db db real time replication advantage reliable resilient disadvantage work low level cdc db change oppose app level event alternative create high level business event source db enrich datum push kafka disadvantage load source db require durability source deal problem advice appreciate,0,154,0,0.0,1,2017-09-05T14:27:33,0.0
46067821,8567123.0,<csv><upload><microservices><cloudfoundry>,upload csv file microservice deploy cloud foundry,cloud foundry currently work requirement upload csv file jsp ui service deploy cloud foundry persist datum service issue ui local path csv file parse csv path file recognize guess reason service deploy cf recognize local machine path parse csv file local machine parse csv advance,0,446,0,0.0,1,2017-09-06T05:59:23,0.0
46065028,727495.0,<java><spring><spring-boot><microservices><spring-cloud-contract>,unable send post request spring cloud contract,send post request error request contract groovy file request response code response follow exception exception follow junit assertion actual payload send inside request interface problem create request payload deal error clue appreciate,0,199,1,0.0,1,2017-09-06T00:21:23,0.0
46240289,1603131.0,<spring><spring-boot><spring-security><microservices><netflix-zuul>,spring security exclude path call controller endpoint zuul gateway,disable security specific endpoint call controller perform call chrome developer tool redirect react frontend ignore controller endpoint,0,207,0,0.0,1,2017-09-15T13:03:48,0.0
56585409,3892793.0,<django><design-patterns><architecture><django-rest-framework><microservices>,break django website microservice,monolith microservice architecture debate pretty understand limited understanding microservice architecture feature separate app clarification respect django implement microservice question microservice aka app django project altogether app aka microservice inside django project keep isolate loosely couple,0,272,0,0.0,1,2019-06-13T17:02:58,0.0
56681272,1706058.0,<apache-spark><event-handling><spark-streaming><microservices>,spark stream event processing handle solution micro service,spark batch processing bring lot business easy scale horizontally aw emr yarn challenge proprietary solution follow micro service architecture micro service producer event store kafka kafka topic manage validate spark streaming event processing build state object spark streaming app kafka topic apps cluster vcpu gib memory handle stream processing app concurrently sound app hour simply pull event second perform crud operation data store spark stream approach framework,0,25,0,0.0,1,2019-06-20T07:41:42,0.0
56676728,4321946.0,<microservices><terminology><distributed-system>,definition identical request,find good answer idompetancy definition identical request api call requestid correlationid exact body content consider identical request understanding matter api call event message request long application state request correct,0,40,0,0.0,1,2019-06-19T22:34:10,0.0
56642133,8263925.0,<java><spring><spring-boot><asynchronous><microservices>,process async process response complete spring boot micro service,suppose service call single function asynchronous process complete example function class function invoke code process wait process complete send response process complete service return response call function process response provide service call rest process complete terminate error response process complete response process return call function function process response process complete,0,43,0,0.0,1,2019-06-18T05:15:24,0.0
56607007,8073565.0,<java><spring-boot><microservices>,handle fragmented request efficiently java springboot microservice,work springboot microservice client client request body server side server map group group group server split request abc abc abc fragmented request process parallel send response acqtivemq point request fragment multiple request server side process asynchronously currently thread pool manage pain latency time high heavy load number request process usage gradually increase approach case efficiently springboot microservice,0,47,0,1.0,1,2019-06-15T02:58:54,0.0
56550939,2831852.0,<microservices><jhipster>,generate separate frontend gateway jhipster,jhipster gateway uaa work microservice create gateway frontend command create separate front gateway create folder execute command frontend generate command fail authenticate lose address direct access gateway service configure system generate frontend equal generate frontend gateway,0,48,0,0.0,1,2019-06-11T19:58:30,0.0
56637508,3291266.0,<java><spring-boot><docker><docker-compose><microservices>,problem inter service resttemplate communication spring boot docker container,setup inter springboot restful service communication docker container call chain follow pdf generation orchestrator ms template data binder ms html pdf service docker talk docker instance third ms html pdf service setup docker container service talk docker container service start docker compose file cmd note ms template data binder url pdf generation orchestrator application yml follow template data binder base url access pdf generation orchestrator follow follow error docker compose console error nio exec dispatcherservlet servlet service servlet dispatcherservlet context path throw exception request processing fail nested exception org springframework web client resourceaccessexception error post request http localhost template datum bind pdf connection refuse connection refuse nested exception java net connectexception connection refuse connection refuse root understand localhost error stack docker compose file help appreciate docker compose,0,158,0,0.0,1,2019-06-17T19:11:47,0.0
56648199,6813164.0,<node.js><authentication><microservices><hapijs><moleculer>,service service authentication hapi molecular nodejs,microservice develop hapi molecular hapi moleculer npm module add molecular hapi redi transport communicate service call function service service add authentication call function service service call function service authenticate prevent connect service call servie module imicro auth find anyother module well approach custom code service service authentication,0,164,0,0.0,1,2019-06-18T11:33:36,0.0
56647298,1747250.0,<php><database><rest><web-services><microservices>,web project multiple instance single instance,team build web project ticket system expect big client release product three raise ticket web application form email phone call agent accord ticket email store lot long message project scope interface agent folk handle query client people help question consider expect datum storage growth centralize app single huge database easy backup stick data corruption separate app agent client idea split application centralize interface agent client client create separate database copy php project code syncing easy automate multiple client instance host server communicate api example agent open dashboard list outstanding ticket display agent work big client contact instance api request outstanding ticket ensure number query display feel free add third option well,0,227,0,0.0,1,2019-06-18T10:40:49,0.0
56564184,1100135.0,<cloud><microservices><high-availability><availability-zone>,microservice multiregion ha,microservice microservice talk microservice kind loadbalancing multiple instance infrastructure lb kubernete client side lb eureka ribbon pretty simple deploy single region az happen achieve multi zone ha close region achieve low latency user request route close region cloud provider call withe az az completely isolate user switch service az dead az kill traffic service az direct az second case cloud provider offer functionality azs call case latency request locate pattern handle scenario,0,31,1,0.0,1,2019-06-12T14:08:39,0.0
56615697,5540865.0,<microservices>,scale microservice share database,scale service order service instance order database incomplete datum order service service shared database scale database redundancy server,0,35,1,0.0,1,2019-06-16T02:49:14,0.0
56633560,1641352.0,<spring><spring-data-jpa><spring-data><microservices>,spring data jpa pass dynamic column parameter query,table emp columns emp emp desc emp age emp country emp pincode spring datum jpa database operation emprepository findall fire select emp table requirement follow client app pass column select method parameter fetch jpa findall acheive jpa,0,54,1,0.0,1,2019-06-17T14:37:38,0.0
56698989,9090976.0,<java><reactjs><spring-boot><react-native><microservices>,validate request source microservice,spring base microservice provide datum react js base web client application mobile app build react native application host cloud allow rest call client application block request source protect application app pass request protect service app intrude rest service good approach address problem,0,59,1,1.0,1,2019-06-21T07:43:52,0.0
56586137,0.0,<database><.net-core><architecture><microservices><soa>,service orient architecture foreign key database,implement service orient architecture soa service database customer management order shipping refund strategy maintain foreign key relationship table database cross database foreign key allow sql server foreign key substitute business api rule microservice database replicate arena soa database backup maintenance hour deadlock runaway query bring service service orient architecture dictate database multiple,0,78,1,0.0,1,2019-06-13T17:57:10,0.0
56584548,11633624.0,<docker><microservices>,springboot micro service mongo container,spring boot micro service call mongo db set local machine set mongo db container local docker localhost stand spring boot micro service application port successful docker unable app docker step docker container mongo build image spring boot app docker file bring app container link mongo db error,0,95,1,1.0,1,2019-06-13T16:06:35,0.0
56697417,11439547.0,<c#><asp.net-mvc><asp.net-web-api><microservices><cqrs>,error autofac core dependencyresolutionexception,autofac core dependencyresolutionexception hresult message exception throw activate property service api application command addpropertycommandhandler source autofac stacktrace autofac core resolve instancelookup activate ienumerable parameter autofac core resolve resolveoperation execute icomponentregistration registration ienumerable parameter object instance property service api infrastructure autofacmodules mediatormodule displayclass type property service property service application infrastructure autofacmodule mediatormodule cs mediatr servicefactoryextensions getinstance servicefactory factory mediatr internal requesthandlerbase gethandler thandler servicefactory factory inner exception dependencyresolutionexception constructor find autofac core activator reflection defaultconstructorfinder type property service api application command addpropertycommandhandler invoke service parameter resolve parameter property service api application integrationevent ipropertyintegrationeventservice propertyintegrationeventservice constructor void ctor property service domain aggregatesmodel propertyaggregate ipropertyrepository mediatr imediator property service api application integrationevents ipropertyintegrationeventservice microsoft extensions log ilogger property service api application command addpropertycommandhandler addpropertycommandhandler mediatormodule ipropertyintegrationeventservice propertyintegrationeventservice dependency register,0,413,1,0.0,1,2019-06-21T05:36:45,0.0
56533725,135855.0,<logging><microservices>,good practice log microservice architecture,preferred handle logging microservice architecture individual log mechanism microservice log mechanism microservice,0,163,1,0.0,1,2019-06-10T21:24:05,0.0
56671308,11306005.0,<android><microservices><software-design>,good practice create app client side communication service,separate app client side independent service main app user view bit functionality write java encrypt upload cloud start write create communication channel service main app collect datum user datum transfer inner protocol communication second service second service encrypt datum upload cloud service locate client side good practice create desire architect prefer communication protocol appreciate link advice,0,32,2,0.0,1,2019-06-19T15:31:22,0.0
56637835,1286760.0,<node.js><http><server><microservices><grpc>,assign random port number grpc server instance node,start http server node js developer listen randomly port pass wonder thing grpc work find goal random port query server assign port order register service central microservice registry help advance,0,113,2,1.0,1,2019-06-17T19:35:35,0.0
56692786,6398022.0,<amazon-web-services><docker><amazon-ec2><microservices><amazon-ecs>,send post request service amazon ecs,node express website microservice base architecture deploy microservice amazon ecs cluster ec instance microservice sit application load balancer route external traffic correctly service system work expect problem post request service axio url post axio test locally inside service,0,122,7,1.0,1,2019-06-20T19:36:28,0.0
27116051,4047904.0,<rabbitmq><cloudfoundry><microservices>,legacy application communicate cloud foundry rabbitmq,cloud foundry investigate legacy java ee application communicate asynchronously application cloud foundry lot asynchronous work publish event active mq cloud foundry possibility bind rabbit mq question possibility cloud foundry application connect listen exist cf platform rabbit mq idea alternative achieve,1,108,0,0.0,1,2014-11-24T23:20:44,0.0
29128437,3303215.0,<python><uwsgi><microservices>,uwsgi emperor mode register internal routing rule vassal,uwsgi deploy python wsgi microservice architecture emperor handle route request start api vassal user handle request api user vassal payment handle request api payment routing handle emperor internal routing rule problem route rule statically define emperor configuration file vassal dynamically startup add rule emperor internal routing table emperor route rule vassal start,1,298,0,0.0,1,2015-03-18T17:11:36,0.0
30209442,60188.0,<authentication><authorization><microservices>,cross microservice authorization authentication,suppose number stateless http base micro service bunch daemon kind background processing service service daemon mutually authenticate authorize example daemon perform full text indexing order read access order customer read access company service inventory service read write access orderssearch service order update full text application operate behalf user example inventory web app read write access inventory service inventory service verify permission user operate application achieve describe prefer gigantic enterprisey framework standard read legged oauth exactly sure thinkinke establish authorization service answer question hey inventory service permission customer service call major weak distribute shared secret,1,895,4,1.0,1,2015-05-13T08:23:41,0.0
26218391,4113604.0,<testing><components><agile><platform><microservices>,test reusable component service multiple system,currently start project hope develop system reusable component service currently system common element moment develop system isolation feel duplicate code course separate code basis maintain support create generic platform share component enable quick development collection reuse code reusing automate test reduce code base maintain thought common code base specific module example user management secure system access module consist generic web module api context create generic package code deploy component package build system save code module system manage user user management package boom system deploy component multiple time collection appreciate system unique functionality potential add extension generic module system specific choose generic module create rest generic component example generic component system deploy create follow system set system happy generic component system aa extended component include specific functionality system reuse component create specific reuse component throw issue test platform system ensure work time test set reading mircroservice test approach problem system microservice multiple system configuration thought lead generic component utilise collection create automate test base code level test confirm generic functionality retest function component manual sense check deployment system level additional automate test add check specific functionality create ideally sort test platform set change core component user management trigger auto test core level specific system test system share component ensure change affect core functionality create knock specific system quick manual check require keen remove massive manual test overhead check system time share component change work agile current project strong continuous integration process set developer check code visual studio trigger ci build teamcity octopus unit test provide test pass trigger integration build qa automate test mixture test api level web test specflow phantomjs selenium webdriver keep sort framework place keep quick feedback loop sound great theory struggle practice create sound test strategy cover kind system set hope encounter thought good tackle prove work keen well understanding set testing platform rig aid continuous integration system consider system share code thought link blog whitepaper help appreciate,1,102,0,1.0,1,2014-10-06T14:26:05,0.0
27347820,2188014.0,<distributed><microservices>,distribute system send request,component distribute system send message access service example service handle authentication service handle search component handle search send authentication request subdomain commonly replication work scenario registry local ip address handle routing,1,60,0,0.0,1,2014-12-07T21:04:46,0.0
27489124,257535.0,<node.js><rest><stream><microservices>,connect node express app stream json,currently app rest api layer provide number service frontend translation app feed json object http post call perform datum translation mapping object return rest layer situation large number object flow user request object specific format rest layer retrieve database pass json datum object translation service perform format pass rest layer rest layer return object user call tranlate example translate call pass megabyte datum single huge post request obvious answer stream datum translate app stream datum lot solution stream datum app open websocket socket io open raw tcp connection http request response datum node stream utilize emit json object translate question good practice stream datum app http req stream keep long live connection open preserve rest model sample provide great,1,327,1,2.0,1,2014-12-15T16:58:01,0.0
31201083,399104.0,<java><dns><service-discovery><microservices><consul>,point specific dns custom port java,dns interface consul point dns java program change address localhost java system property find port help command query,1,651,1,0.0,1,2015-07-03T07:31:07,0.0
31161436,2318656.0,<java><apache-zookeeper><spring-cloud><service-discovery><microservices>,apache zookeeper spring cloud service discovery load balancing,apache zookeeper concept implement service discovery load balance netflix ribbon client example github help set zookeeper service discovery implementation app service instance curious concept advance,1,1203,2,2.0,1,2015-07-01T12:32:33,0.0
30915043,4011845.0,<python><docker><localhost><rabbitmq><microservices>,set rabbitmq docker python,fairly docker learn rabbitmq rabbitmq form python libary pika ubuntu vm work problem small app docker work problem set fail code variable import file code fail finally dockerfile additional file locate,1,2239,0,1.0,1,2015-06-18T12:13:32,0.0
29479454,2051292.0,<nginx><docker><containers><lxc><microservices>,manage utilize multiple docker container microservice single server,gce google compute engine server nginx apache web server list port serve website time multiple microservice server docker container container serve website appropriate local ip address well bind localhost port bind port public ip address publicly expose microservice problem embed website serve container website port web server embed code execute browser local ip localhost port python html code embed microservice locally inside container website serve user example server public ip website serve inside server multiple microservice local ip container server inside server test html container embed test html web serve nginx apache webserver expose internal local ip port public hear suggestion alternative solution problem,1,450,1,1.0,1,2015-04-06T20:50:25,0.0
27752201,3451235.0,<architecture><domain-driven-design><software-design><microservices>,platform core code design microservice architecture,monolithic architecture core platform code top bunch service business domain build example db abstraction external service abstraction case micro service platform code write module import dependent module micro service violate construct architecture tight coupling module common core platform code issue relate multiple deployment code bugs vendor lock ins,1,109,0,0.0,1,2015-01-03T05:58:52,0.0
28329738,645654.0,<ruby><web-applications><docker><unix-socket><microservices>,design approach host multiple microservice host,work web application decouple multiple containerized microservice service system definitely service future entire machine deploy multiple service host wonder deal interservice communication prefer rest base communication heavy multiple web server machine develop ruby lightweight web server puma consume good amount memory start write custom communication channel unix socket start web server router app communicate currently service host unix socket worth effort top service write customize kind communication hard framework ruby rail language appeal microservice architecture feel reinvent wheel well approach vote current appreciate help,1,587,0,0.0,1,2015-02-04T19:28:01,0.0
26705784,127320.0,<tomcat><load-balancing><embedded-tomcat-7><12factor><microservices>,port bind load balancer scale architecture embed tomcat apache http server,app completely embed tomcat jetty achieve wonder scale handle scenario setup currently service expose embed tomcat apache http server load balancing question dynamically add service scale scenario add service add exist cluster,1,259,0,0.0,1,2014-11-02T23:40:02,0.0
35039565,5213999.0,<swagger><swagger-ui><microservices><swagger-2.0><akka-http>,collate micro service single swagger spec collection,develop microservice akka http scala moment find direct integration swagger akka http start microservice swagger spec challenge consolidated api spec consume application share multiple spec consumer aggregate multiple swagger spec single spec fly great work swagger ui,1,849,0,1.0,1,2016-01-27T14:07:00,0.0
31962345,435478.0,<javascript><api><authentication><token><microservices>,secure api front ajax call,well create api manage website attachment upload store amazon bucket scenario visitor user form submit attachment file select button click ajax request fire micro service api store file processing return direct link identifier question authenticate user example short live token hijack mis usage token javascript visible visitor integrate heavy process backend,1,631,0,0.0,1,2015-08-12T10:17:40,0.0
35549233,5755581.0,<java-ee><cdi><kubernetes><microservices><fabric8>,inject kubernetes service java class,create deploy service rest api service project call resource rest api service order ip service inject eclipse warn message build currently work pure follow dependency guy idea,1,150,0,0.0,1,2016-02-22T08:46:24,0.0
32373324,1313884.0,<oauth><architecture><microservices>,oauth access token validation microservice,currently build application follow microservice architecture authorize user oauth protocol question validate access token basically possibility microservice meaning call involve microservice result token validation introduce api gateway guess token validation pass user scope microservice trust kind authentication api gateway microservice client secret guess tend second approach valid practical experiece approach yould approach forward comment remark regard,1,331,0,0.0,1,2015-09-03T10:38:22,0.0
32481469,285288.0,<rest><spring-boot><spring-cloud><spring-hateoas><microservices>,link object app spring hateoas,investigate spring cloud set microservice offer customer eureka client customer app offer app organize code add link instance autowire course work controller live separate app reasonable create interface controller share inerface app,1,593,1,0.0,1,2015-09-09T13:53:35,0.0
33078422,5423180.0,<web-services><api><rest><gateway><microservices>,service registry api gateway knowledge service,study microservice architecture point understand fact user send request request admit case user handle api gateway api gateway url user call discover user service service registry case zookeeper api gateway pattern concerned service time api gateway redirect request user correct service service registry good request good endpoint imagine microservice endpoint user utilisateur gateway imply api gateway knowledge microservice api endpoint exist better automate manner work,1,781,0,0.0,1,2015-10-12T10:05:00,0.0
33059557,3536548.0,<sinatra><microservices><transitions>,build monolithic app sinatra intention move component microservice architecture,help build app microservice architecture initially stage future build app intention move component microservice concept structure follow future transition easy aware gotcha thing transitioning harder watch thing usefull well bit vague broad depth response link bit help find transition monolithic microservice architecture edit clear state resource opinionate fine opinionated resource well resource currently guidance guidance,1,60,0,0.0,1,2015-10-10T22:22:27,0.0
32945623,1445898.0,<soa><distributed><distributed-computing><microservices>,load balance distribute system,producer consumer consumer request producer datum producer consumer time consumer work multiple producer producer work single consumer consumer coordinate consumer subset producer consumer consumer producer consumer exchange producer ensure equal load consumer question paper algorithm library case invent wheel,1,127,5,0.0,1,2015-10-05T09:49:56,0.0
33780962,304849.0,<microservices><azure-service-fabric>,versione service,microservice ms servicefabric scenario service version ready upgrade three service depend interface service release service keep upgrade test three service example find replace configure method service discovery mechanism rely specific version service,1,341,0,2.0,1,2015-11-18T13:09:31,0.0
33772776,667800.0,<amazon-ec2><architecture><rabbitmq><latency><microservices>,acceptable latency service message bus,develop simple rpc style message bus microservice live virtualize machine test simple proof concept large instance ec rabbitmq server client notice round trip server ms ms connect amqp server ms return simple string high overhead ms rpc request typical acceptable latency style architecture tool,1,99,0,0.0,1,2015-11-18T05:56:17,0.0
36479452,1687972.0,<java><docker-compose><spring-cloud><microservices><spring-cloud-config>,solve dependency docker compose,spring boot microservice connect spring configuration service config service start config server completely connect error service console docker compose file docker compose file service bootstrap yml config service register eureka discovery call keep fail return error restart docker instance connect issue keep config server continuously,1,457,0,0.0,1,2016-04-07T14:37:15,0.0
36318795,1042646.0,<spring><spring-boot><spring-cloud><microservices>,example sidecar application microservice,spring cloud config server example sidecar application microservice,1,2035,1,0.0,1,2016-03-30T20:12:22,0.0
34049118,87796.0,<github><jira><microservices>,tracking issue multiple repository,epic story span multiple repository mechanism track work associate single story github issue close solution seek problem issue span multiple repository deployment day scan repository repo commonly discover commit relate story manual workaround create multiple issue issue repository manually list issue relate epic story jira tool alternative technique automatically combine issue treat,1,638,6,1.0,1,2015-12-02T17:26:04,0.0
34180115,2180005.0,<java><microservices><service-discovery><consul>,register service consul address declaration,consul service register consul agent http endpoint problem service bind ip address st instance consul set address automatically base ip address request example service instance send consul register service instance send consul register accord address field service register query address default agent provide detect service ip address runtime network interface hard distinguish,1,2006,2,0.0,1,2015-12-09T13:33:02,0.0
34043861,2356907.0,<c#><soa><microservices><service-discovery><consul>,keep track service register soa service registry discovery,work soa poc day service discovery registry consider consul register service consul keep track status register service implement thing net platform wcf service host appdomain separate console process keep track service listen port socket connection heartbeat handle appdomain unload console exit event handle scenario notification console application process terminate procss kill closed gracefully remove service registry entry consul central repository listen port heartbeat efficient keep thread busy time help appreciate,1,493,0,0.0,1,2015-12-02T13:23:30,0.0
31141688,2135159.0,<amazon-web-services><docker><amazon-elastic-beanstalk><microservices><amazon-ecs>,deployment method docker base micro services architecture aw,work project microservice architecture service live docker container separate git repository order ensure loose coupling understanding aws support great development launch service single command test locally laptop docker compose option deploy service afraid defy initial purpose micro service architecture deploy version service independently aw good achieve keep infrastructure management minimum,1,384,1,2.0,1,2015-06-30T14:53:50,0.0
31135664,1659746.0,<scala><akka><karma-jasmine><microservices><akka-testkit>,test akka http testkit,work microservice architecture base akka http akka cluster akka documentation library experimental state find documentation progress library test rest microservice option testing javascript great hear opinion option akka http testkit,1,686,0,0.0,1,2015-06-30T10:20:53,0.0
34376576,2086806.0,<nfs><microservices><data-sharing>,good architecture share large file microservice,start design monolithic software microservice orient architecture educational purpose bit context software powerful server perform follow operation receive batch data binary file producer accumulate batch datum producer periodically execute batch operation producer accumulate datum store result binary file create separated microservice batch operation microservice execute dozen machine paralell process big amount producer microservice instance receive binary file producer datum output binary file problem file big producer produce mb accumulate datum deal convince send binary datum microservice http call reasonable store datum central data repository microservice download sort nfs sure good option microservice philosophy copy datum microservice afraid eventually consistency problem good option,1,2364,0,0.0,1,2015-12-19T23:42:44,0.0
38099204,2763256.0,<json><session><token><jwt><microservices>,session management json web token microservice,figure manage session json web token microservice architecture design currently mind client send request firewall request opaque reference token firewall send authorization server authorization server respond token session user firewall pass request token api token propagate microservice require fulfill request question update session token handle elaborate session info token update update authorization server service change token talk authorization server microservice single token store session info well service personalize token explain adjust design,1,1025,0,0.0,1,2016-06-29T12:13:43,0.0
37946486,6228494.0,<linux><docker><docker-compose><microservices><docker-machine>,help docker scaling micro service,instal docker aws linux ami instance build apache image docker file apache image container instance monitor docker micro service scale spin help proceed bit confused micro instance scale cadvisor work alternate monitor scale docker container,1,77,1,0.0,1,2016-06-21T13:56:49,0.0
38172510,2651885.0,<networking><architecture><rx-java><haproxy><microservices>,handle network call microservice architecture,micro service architecture top service expose rest api user backend service work query database user request request backend service rxjava top service request execute parallel haproxy distribute load backend service user request network connection exception route host exception socket connection exception good practice kind case,1,1177,3,0.0,1,2016-07-03T17:25:50,0.0
34637868,1267131.0,<microservices><azure-service-fabric><azure-api-apps><azure-api-management><azure-mobile-services>,mobile app microservice microsoft azure service fabric,plan build enterprise grade mobile application require full offline capability worldwide backend application intend realise microservice azure service fabric backend application leverage web admin ui well mobile app mobile app intend azure app service mobile app service provide capability offline data sync carry function network reachability mobileapp azure mobileapp service azure api app service azure service fabric cluster node host microservice follow question observation require advice reason azure api service middle intend api management understand azure separate api management offer pointer true api management architecture helpful api management replace api app service intend swagger generate code api app service web admin ui layer azure mobile app service layer leverage thought paradigms app service mobile api app service fabric option fact mobile app require heavy duty offline feature datum sync mobile sync datum mobile app service microservice specific datum store api easily data sync datum store individual microservice thought,1,792,0,1.0,1,2016-01-06T16:25:43,0.0
34525969,1925189.0,<windows><docker><windows-server-2012><microservices>,docker container windows server,docker container support windows server window server support find reference version,1,99,0,0.0,1,2015-12-30T08:47:02,0.0
34604106,3510933.0,<sql><node.js><microservices>,break relationship database change microservice,monolithic application sample database list post author info simply inner join query change system microservice blog user independent service database add author column blog database blog database author list post author info example microservice nodejs,1,126,1,1.0,1,2016-01-05T04:22:59,0.0
34660949,1584951.0,<meteor><microservices><modulus.io>,modulus meteor microservice subscription work,move app rackspace modulus app configure microservice meteorhack cluster package meteor method server server call work meteor subscription client server work figure cross domain request issue contentlibrary collection client populate apps work rackspace expect,1,155,0,0.0,1,2016-01-07T16:59:08,0.0
54788563,9318464.0,<rest><docker><docker-compose><frontend><microservices>,host multi service solution segregated front,project build web application restful component develop api parse xsd data java api connect remote database depend provide argument nodejs api datum analytic rstudio plumber component restful java spring component host webpage front webpage host separately well correct communicate component send request localhost xxxx depend port ultimately executable structure note api accessible environment solution docker front separately accessible environment address reach api code work,1,40,0,0.0,1,2019-02-20T14:22:54,0.0
54729183,8195188.0,<asynchronous><java-8><rx-java><microservices><reactive-programming>,multiple rest api call parallel rx observable,call rest api parallel observable face issue describe problem help case customerid invoke rest api pass user concurrently response decide observable well performance access service concurrently option feel provide response time difference response time call find mistake code wrong observable correctly,1,655,1,0.0,1,2019-02-17T01:00:05,0.0
54869303,1493432.0,<microservices><netflix-eureka>,eureka timeout exception,micro service exception time proceed thought,1,407,1,1.0,1,2019-02-25T15:16:00,0.0
54808651,7927429.0,<java><spring><microservices><hystrix>,hystrix execute fallbackmethod time error occur,script spring framework create note user note microservice user microservice independent order create note user check user exist user microservice user microservice store note map username second retry create expect hystrix perform exactly time method hystrixcommand tag execute time second hystrix handle error user microservice remain second time createusernote method call leave code clue happen appreciated advance,1,89,2,0.0,1,2019-02-21T13:50:33,0.0
54801203,10350764.0,<docker><go><microservices><go-micro>,config docker expose port micro service app,excuse learn micro micro service client ip port micro service deploy service port randomly set service locate service service side client side deploy micro service docker config port docker container,1,94,4,0.0,1,2019-02-21T07:11:08,0.0
44687892,2214751.0,<java><security><oauth-2.0><microservices><spring-cloud-netflix>,oauth grant type distribute application third party client,read day protocol help figure good grant system deploy app user request reach microservice internal network microservice include gateway proxy microservice store user database frontend moment deploy gateway develop external app request system bunch user small set role log username password situation example read require user allow client access resource log case client gateway user grant remove situation user credential serve provide token apart example include user grant client application access resource log subsequent request screen log credential access grant store user grant access resource application time log,1,260,0,0.0,1,2017-06-21T23:45:43,0.0
44769245,6288234.0,<angularjs><typescript><webpack><microservices>,access multiple angular application,newbie angular access application host port completely repository angular version angular typescript project thesis apps host repository project master tab button click call host project button label microapp src achieve independence front project change screen module build entire project simply build change module change reflect achievable change exist implementation project kindly help lead,1,54,0,0.0,1,2017-06-26T21:53:39,0.0
44765491,3943702.0,<python><google-app-engine><pip><google-cloud-endpoints><microservices>,deploy share library google app engine flex environment,app engine flex env deploy independent talk rest great idea service independent opportunity code reuse achieve example procedure api service write helper library small helper function place reuse api purpose write place question share library good idea context app engine overhead small function api share helper library sense achieve app engine flex environment standard env include file flex environment party library declare requirement pip support install github repo helper library private repo allow app engine pip install private repo advance,1,156,0,0.0,1,2017-06-26T17:41:32,0.0
44692737,6555593.0,<azure><microservices><azure-service-fabric>,debugging application remotely azure service fabric,real time problem deploy remote cluster,1,719,0,0.0,1,2017-06-22T07:23:03,0.0
44882977,3701985.0,<docker><spring-boot><microservices><spring-cloud-netflix><docker-networking>,correct deploy springboot cloud netflix production multi host network,develop spring boot application netflix cloud stack deploy module microservice separate docker container structure follow eureka zuul business logic microservice mysql angular ui keycloak user management authentication elk log maintenance hystrix zipkin face lot problem spend lot network bandwidth google matter deploy follow correct limitation provide host test configuration action plan full stack mention server eureka zuul elk server keycloak business logic microservice mysql anguar ui configure hystrix zipkin ip port server eureka configuration microservice register eureka zuul ip port eureka angular ui url port zuul deployment service call zuul understand correct service eureka locate rest manage eureka key question mysql elk register eureka correct ip port mysql elk require configuration elk elk requirement log locate common place docker volume mount accomplish multi host environment docker log external volume access elk url test configuration configuration independent manage configure docker compose network mode host host host docker communication configuration architecture correct multi host environment future cloud environment kindly guide correct path excuse english grammar best knowledge understandable point question input side,1,219,0,1.0,1,2017-07-03T10:12:55,0.0
31412249,342534.0,<ajax><microservices>,gateway api frontend service,struggle well approach project work work micro service base saas service functionality rest api dilemma include frontend ui gateway service provide ui business logic proxy request service service allow user access ui content retrieve ajax directly service thought,1,449,0,0.0,1,2015-07-14T16:26:16,0.0
42922250,2383936.0,<docker><tcp><microservices><consul><service-discovery>,docker reuse port consul tcp health check cycle,example moment docker container listen export port service port consul health check pass tcp connection cycle moment docker restart container container close time port container reuse port container port cycle consul health check port consul container solve issue,1,291,0,0.0,1,2017-03-21T08:52:24,0.0
42873668,312444.0,<microservices><amazon-kinesis-firehose>,separation concern microservice architecture,microservice plug ecommerce plataform today microservice break customer service order service delivery service customer join ecommerce place order webhook microservice dump firehose question well maintain function dump datum firehose separate micro service handle specific subject customer order create example micro service call notification service handle example micro service send notification email sms well separate micro service total responsibility notification,1,198,0,0.0,1,2017-03-18T11:18:23,0.0
43018514,2849613.0,<java><spring><amazon-web-services><aws-lambda><microservices>,aws lambda spring load application yml,problem customize api gateway domain restful app deploy aw lambda customize domain work depend basepath choose api finally touch lambda example application path application path example boilerplate achieve handler depend header strip prefix request path prepare follow application yml file problem question load lambda function naive work lambdahandler work spring context idea deal,1,1007,0,1.0,1,2017-03-25T15:55:04,0.0
42918707,1669106.0,<kerberos><microservices>,disadvantage kerberos authentication secure micro service micro service communication,sam newman building microservice book describe method perform secure service service communication https basic authentication client certificate hmac api keys kerberos protocol service service authentication find reference kerberos protocol disadvantage kerberos protocol microservice architecture method,1,658,4,0.0,1,2017-03-21T04:53:18,0.0
33335786,895659.0,<python><json><xml-rpc><microservices><asynchronous-messaging-protocol>,good application communicate micro service architecture,design implement service delivery platform service current design tool technology erlang base concurrent map reduce function simple bash script aggregate text file hear xml rpc protocol buffer message pack soup amqp currently json loading dump large json file bit time memory consuming robust bridge technology http infrastructure wide range programming language support well documentation mention complexity corrosive latency problem connection relate issue json replacement add complexity design,1,310,6,0.0,1,2015-10-25T22:23:36,0.0
33431076,1067281.0,<php><laravel><inheritance><environment-variables><microservices>,environment variable inheritance microservices laravel luman,problem deploy luman microservice laravel app machine laravel app luman app file default environment variable laravel app request luman app datum problem occur luman app receive request inherit laravel environment variable impossible job connect database service environment variable set file variable inherit parent request encounter problem microservice architecture update code laravel app userscontroller php request luman app connect database inherit environment variable parent laravel app,1,474,6,1.0,1,2015-10-30T07:52:01,0.0
46677030,8755281.0,<api><permissions><authorization><microservices>,domain base microservice authorization reusable service,microservice base server architecture build principal central authorization service call microservice info authentication handle interceptor service call sake question follow microservice user call car service car car microservice call authorization service check user allow car car microservice return car user user comment car call comment service turn call authorization service check user access car return appropriate comment car base reading object level permission embed authorization respective api keep object permission domain service sure reusable microservice provide functionality domain comment file activity approach boat car service handle authorization comment service call boat car service handle authorization approach boat car service handle authorization proxy request appropriate claim header internal comment micro service comment handle authorization check claim header common valid approach well pattern number reusable service comment,1,90,0,0.0,1,2017-10-10T22:33:44,0.0
46689798,7458937.0,<docker><spring-boot><microservices><netflix-eureka><netflix-zuul>,access micro service zuul proxy,develop micro service project spring boot ui separate micro service zuul proxy separate micro service access ui zuul micro service add project structure uiservice application property zuulservice application yml docker compose file uiservice structure eureka service project docker docker compose access login screen inside uiservice follow exception solve uiservice main method uiservice pom xml,1,398,0,1.0,1,2017-10-11T13:42:56,0.0
46643268,701829.0,<apache-zookeeper><microservices>,microservice master slave pattern,scenario cluster microservice high availability execute specific operation consume queue poll database good practice relation case zookeeper registry suitable technology,1,422,0,0.0,1,2017-10-09T09:37:43,0.0
46559314,8639175.0,<api><https><microservices><self-signed>,microservice http certificate,microservice lot domain call http http microservice sign certificate buy authority,1,251,0,0.0,1,2017-10-04T07:29:29,0.0
41631842,1104587.0,<rabbitmq><messaging><microservices>,handle user request microservice architecture power message inter communication rabbitmq,start microservice architecture investigate build top messaging bus concern bother handle simple query request user microservice datum microservice serve response getorderlist getusernamebyid rpc pattern rabbitmq recommend avoid bring temporal coupling async communication,1,219,0,1.0,1,2017-01-13T09:59:05,0.0
41516276,6451334.0,<reactjs><microservices>,microservice reactjs module,separate node server require api call module process emit html stre import main reactjs app api call framework seneca node service output figure import node service output main reactjs app component prop allow add pure front functionality high order component,1,507,3,1.0,1,2017-01-06T23:56:33,0.0
40446036,913622.0,<node.js><api><docker><kubernetes><microservices>,api design splitting domain micro service,application base api architecture currently base single domain service consumer api web frontend mobile app business public build micro service write language application example develop api service statistic blog content rss feed search question deal domain good split service subdomain well single unified api domain http layer route reach endpoint sure preferable public api easy multiple domain deal intermediate routing layer proxy,1,679,0,1.0,1,2016-11-06T04:38:37,0.0
40413453,563762.0,<microservices>,aggregated notification microservice,problem currently architecte notification microservice trouble handle aggregated email send email action perform minute send email hour summarise action complete propose type messaging pattern client service service cluster messagebot notification microservice client service send notification messagebot send future messagebot store detail database messagebot periodically check database send messagebot require datum service client service api messagebot send email datum html template debate datum send sure help structure json client service notification service step task document example change base template easily template debate thought template source datum imply object env var example task object problem fail api switching url future userid email prevent issue email pair match multiple message object sceptical client app service knowledge inner working messagebot single objectid extensible easily imagine message object conclusion read design service central entire organisation debate json structure appropriate situation requirement proper setup type service aka correct assumption,1,1112,1,0.0,1,2016-11-04T00:26:00,0.0
40479926,7129741.0,<c#><nhibernate><fluent-nhibernate><microservices>,mapping entity dependency schema microservice architecture,base microservice architecture separate scheme db solution businessentity project db schema customer supplier solution businessentity project db schema product order orderdetail issue create mapping entity create mapping entity question entity follow microservice architecture order entity separately schema entity type mapping entity mapping entity schema architecture wise example appreciate,1,121,1,0.0,1,2016-11-08T05:54:39,0.0
36871886,3252326.0,<rest><microservices>,microservice service service communication principle,good practice minimize exchange datum internal microservice call api service aka achive three service user notification assume email shipping notification service email address user query api user service email full datum set shipping service shipping address user query api user service shipping address full datum set question handle inside user service kind acl service xyz allow jwt authentication exchange key setup phase acl discuss team,1,166,0,0.0,1,2016-04-26T17:32:34,0.0
36954140,1103144.0,<java><wso2><jax-rs><microservices><msf4j>,create jax rs resource wso msf,create sample micro service wso msf access resource service follow service class message resource comment resource follow uri access service follow result rest client help resolve,1,220,4,0.0,1,2016-04-30T11:13:24,0.0
42230797,1729795.0,<spring-cloud><microservices><distributed-transactions><spring-cloud-stream><spring-kafka>,spring cloud stream kafka eventual consistency kafka auto retry unacknowledge message autocommitoffset false,implement eventually consistent distribute architecture turn pain ton blog post story code aspect suffer deal manual retrie message ack instance order service send pay event kafka payment service subscribe process answer payment payment failure payment payment payment fail point sure message deliver kafka sync sending payment process payment service expect answer event payment payment failure force implement retry mechanism order server answer time retry pay event force care duplicated message payment service case process answer order service wonder kafka build mechanism send retrie consumer acknowledge offset message spring cloud stream set property false handle ack offset consumer happen execute message automatically resent kafka consumer retry manually stuff paymen service retry period configure kafka bad case scenario support retry manually real example spring cloud stream app deal eventual consistency kafka,1,1066,0,1.0,1,2017-02-14T16:02:42,0.0
42265210,3545719.0,<spring-boot><microservices><netflix-eureka><service-discovery><netflix-ribbon>,eureka ribbon loadbalancer cache update delay,set micro service base application aggregation layer api gateway call micro service eureka service discovery ribbon provide load balance resttemplate postman call aggregation aggregation call micro service eureka ribbon resttemplate instance micro service type machine port hit rest endpoint repeatedly postman request load balance properly round robin fashion micro service instance service deregistere eureka loadbalancer send request dead service call fail code aggregation fooconfig exclude component scan resttemplate call property microservice code property eureka server property,1,625,0,0.0,1,2017-02-16T04:50:14,0.0
42240919,1417245.0,<azure><architecture><microservices><azure-service-fabric>,design layer azure service fabric,assign layered microservice architecture azure service fabric experience monolithic architecture specific solution datum layer code entity reside dbcontext business layer service manager perform enforce business logic usermanager iusermanager ordermanager iordermanager invoicemanager iinvoicemanager webapi hote inside service fabric webapi inside service fabric receive request call respectic service service fabric webapi layer authentication authorization asp net identity pass call service service fabric service userservice orderservice invoiceservice service invoke webapi layer di business layer iusermanag iordermanager iinvoicemanager perform operation proceed theoretical issue read microservice architecture resource find business logic inside service specific service scale independently violate basic aspect microservice customer requirement business layer project batch job azure web job backend dashboard internal employee asp net mvc keep business layer write business logic web job backend dashboard feel good idea simple change business logic require change code place concern case service service communication acid transaction create order order invoice create case event drive programming order service emit event invoice service subscribe create invoice creation order complication invoice service fail create invoice keep infinitely bad idea emit event order service subscribe roll order lot confusion mention single database question issue approach well approach guide resource implementation detail conceptual detail note requirement client scale specific module userservice signup daily change user profile orderservice scale lot order daily glad learn chance hand design microservice architecture,1,201,0,1.0,1,2017-02-15T04:44:52,0.0
42190315,5436589.0,<spring-boot><apache-camel><spring-integration><microservices>,splitter aggregator pattern microservice,create system follow receive uploaded file http multipart request return success pass uploaded file multiple external service wait result external service calculate final response return response activemq publisher constraint external service service party company api protocol plug unplug party vendor runtime support scale multiple instance vendor enhance performance thought process bring spring integration apache camel splitter aggregator pattern module party vendor independent spring boot application entry point application spring boot application open question good pass file service message queue proxy request multiple microservice support plug unplug time pointer help helpful,1,867,1,0.0,1,2017-02-12T16:44:17,0.0
42178648,1919094.0,<node.js><sockets><network-programming><microservices>,miroservices interservice communication socket,currently design system scenario datum stream client process multiple service parallel data stream client analyze server return client partial analyze datum process socket client send analyze server impact analysis result lot rest microservice async process socket kind messaging queue implement microservice open socket directly service question thing open socket server wrong unreliable,1,470,2,0.0,1,2017-02-11T17:03:11,0.0
41837933,5954938.0,<docker><kubernetes><microservices><kubectl><kube-dns>,access kubernetes web ui dashboard,instal kubernetes kubeadm tool follow install web ui dashboard kubernetes instal node instance taint master node access web ui access,1,2736,0,0.0,1,2017-01-24T20:02:38,0.0
41745636,5848938.0,<javascript><java><angularjs><microservices><angularjs-ng-click>,angular csv file browser call url,java micro service export table database csv file browser follow work well file browser call url copy pasting browser angular call url app console preview response console content file good problem browser download file automatically controller view service wrong,1,547,1,0.0,1,2017-01-19T15:28:06,0.0
39866282,1739895.0,<deployment><environment-variables><cloud><cloudfoundry><microservices>,access user provide environment variable cloud foundry,aware set environment variable follow access program python example additionally access variable cloud foundry environment local development hard code separate scenario python example,1,1827,0,0.0,1,2016-10-05T05:48:34,0.0
39888380,1302488.0,<java><spring><spring-security><spring-boot><microservices>,spring boot microservice dynamic role permission base security,create application spring boot microservice application jsp rest uri type architecture expect suggestion secure uri role permission base access permission uri list role permission mapping mapping uri role admin add role permission mapping dynamically ui image sample table structure build mechanism provide box support type requirement,1,1590,0,0.0,1,2016-10-06T05:47:33,0.0
39981115,105678.0,<git><haskell><rabbitmq><protocol-buffers><microservices>,interface microservice boundary import code,build small service haskell boundary service formal build process developer contract violate simple example api route post user suppose add user user queue worker read queue process user contract exchange exchange queue user message user object serialize json msgpack protobuf user enforce build error service connect wrong queue exchange incorrect schema user easy code repository main goal microservice understand independent separate repos idea create repo contract service depend haskell type api worker include typecheck implementation handle versione include git submodule package manager allow depend version bad update schema user architect thing error service update folk protobuf store file relation service protobuf surface error implementation,1,82,0,0.0,1,2016-10-11T15:34:13,0.0
39956391,4340987.0,<java><spring><gradle><microservices>,gradle submodule library module,write project microservice service opportunity call client module wich call service module library service,1,419,0,0.0,1,2016-10-10T10:39:36,0.0
39936184,3886641.0,<frontend><microservices><ssi><esi>,polyglot frontend microservice,microservice project break monolith application small microservice fairly easy implement backend system polyglot technology achievable frontend bff backend frontend popular pattern implement frontend microservice result frontend monolith understanding bff partial incorrect option ssi server side include esi edge side include help achieve polyglot frontend portlet technology achieve early esi trial stage thoughtwork technology radar direction advice appreciate,1,212,1,0.0,1,2016-10-08T18:58:16,0.0
40034001,184773.0,<c#><asp.net-mvc><microservices>,microservice display regular,microservice notice author discourage monolithic architecture large enterprise environment microservice highly advisable question display normal datum stackoverflow question read load microservice environment request queue microservice fetch return datum request queue request context lose return data queue system display datum request return browser working browser poll web api datum,1,235,1,0.0,1,2016-10-14T02:31:37,0.0
39998701,4324880.0,<javascript><node.js><express><microservices><seneca>,throw typeerror app require middleware function,sample code develop microservice node js error find solution ineffective add lower version node version error,1,401,5,0.0,1,2016-10-12T12:31:23,0.0
39932500,6750653.0,<spring-boot><microservices><spring-boot-maven-plugin>,microservice spring boot release management,advice release management microservice build spring boot project work release plugin maven create tag well release maven project jar war rpm rely maven parent child relationship project jar war release process monolith source code live single git repository wonder people maintain boot project microservice release follow strategy spring boot project microservice maven project git repository release manage independently multi module maven project module microservice submodule microservice release parent pom boot parent pom rely maven release plugin ability release module base release maven module version team find boot programming model hopeful release strategy consistent boot model keep thing simple,1,755,5,1.0,1,2016-10-08T12:43:10,0.0
53075715,1046184.0,<java><microservices><micronaut>,micronaut service respond request,simple micronaut service seek pass parameter code service set port application yml file controller bean filter service attempt access browser follow uri minute follow failure google chrome work advance insight,1,281,0,0.0,1,2018-10-31T03:08:17,0.0
53043023,6872018.0,<java><microservices>,spotify docker client shade javax ws rs processingexception org apache http conn httphostconnectexception microservices,build code docker instal windows machine source code execute error download code git git folder pom xml,1,547,0,0.0,1,2018-10-29T10:02:44,0.0
52961514,1134181.0,<java><spring><microservices><mybatis>,guarantee successful deletion update extra request,service layer microservice post request microservice remove record database request example point microservice dao layer microservice delete update record database persistence framework removal follow sure removal update successful additional request check example request incorrect combination identifier record find exception throw,1,89,0,0.0,1,2018-10-24T05:16:51,0.0
53110008,873139.0,<java><spring><polymorphism><microservices>,deal abstract class entry api contract microservice tackle polymorphism time,dozen tutorial prove help production code animal bird human weapon type cutting shoot complex reason return reality scenario service exchange message service kafka message serialize deserialize jackson model class share service jar plague culmination evil time work content result sea statement condition wait downcaste property example wrapping object clearly add polymorphic behaviour internalcontent hellooo jar wrong wrong add polymorphic behaviour add mitigating layer factory create type polymorphic object family editable add desire behavior sure well smell shoot advocate throw blind statement downcaste code smell torture people genuinely care wonder work real project deliberately add system environment detail understand model code interaction system redesign option achieve book solution share domain model sin service class represent thing serialization deserialization gather flexibility lose contract increase unpredictability technically happen http contract send type message structure wire fit common subtype uncommon single message type throw sand oo consider pivotal good good auhenticationmanager list authenticationprovider select correct base method violate polymorphism feel hype,1,96,2,0.0,1,2018-11-01T22:02:51,0.0
53151527,8177853.0,<postgresql><spring-boot><apache-kafka><microservices><spring-cloud-stream>,rollback micro service http request successful http request fail jdbctemplate,spring boot project build micro service kong api gateway service docker container situation servicea loop time request delete record serviceb jdbctemplate request successful record delete postgresql database serviceb request error rollback record delete database question rollback situation rollback technology spring cloud stream kafka situation rollback,1,203,2,0.0,1,2018-11-05T09:25:46,0.0
53078769,898801.0,<spring><gwt><microservices>,call spring microservice gwt,gwt client call spring boot microservice call rest web service well,1,121,4,0.0,1,2018-10-31T08:00:16,0.0
53105251,1359281.0,<angular><microservices>,connect angular application server,server port currently connect module library angular application single server connect library server follow micro service approach angular application follow article,1,78,5,0.0,1,2018-11-01T16:19:13,0.0
50566406,7124676.0,<node.js><express><microservices>,convert mvc architecture micro service architecture,develop shopping cart application node js express framework main module app user cart product module develop mvc architecture convert micro service architecture,1,283,0,0.0,1,2018-05-28T12:25:09,0.0
50635469,2040540.0,<microservices><netflix-zuul><api-gateway>,api gateway zuul microservice,doubt api gateway edge server wonder api gateway communication microservice,1,375,0,0.0,1,2018-06-01T02:53:33,0.0
50555353,3673633.0,<multithreading><reactive-programming><message-queue><microservices><event-driven-design>,handle event drive microservice messaging queue,assume service microservice environment sit messaging queue broker problem broker solution pe service regular interval check message queue long service store datum local db dump queue broker consider problem thread reactive programming best suited scenario handle code grateful,1,191,0,2.0,1,2018-05-27T18:40:54,0.0
50653819,9884076.0,<spring-security><jwt><microservices><jhipster>,communication microservice jhipster jwt,build small microservice base webapp jhipster jwt authorization architecture simple gateway service repository problem hour communication backend service find token service themself find doc overwhelming full stack happy revert change predefine token second approach service authorize gateway postconstruct save token memory api call work problem find hard functionality program jhipster question approach usual true good practice interested,1,468,0,0.0,1,2018-06-02T05:32:09,0.0
50531553,5165118.0,<spring-boot><microservices><high-availability>,spring boot application high availability,microservice develop spring boot couple functionality implement scheduler trigger time file download webhdf process data process send email user data process summary read message kafka data read send email user plan application high active active active passive set problem face instance application download file read datum kafka process send email avoid ensure instance trigger download process solution kind scenario common scenario project master slave leader election approach correct solution,1,248,0,0.0,1,2018-05-25T14:31:13,0.0
50571546,9860160.0,<java><microservices><lagom><dgraph>,lagom read side processor dgraph,newbie lagom dgraph stuck lagom read side processor dgraph idea follow code cassandra lagom,1,115,2,1.0,1,2018-05-28T18:03:08,0.0
50634072,1611996.0,<java><design-patterns><microservices><observer-pattern>,observer pattern microservice,currently read book call head pattern design design pattern call observer pattern read design pattern feel currently queue system publish subscribe task microservice feeling observer pattern currently correct provide example observer pattern mircoservice excellent,1,613,6,0.0,1,2018-05-31T23:14:13,0.0
55302890,5414461.0,<microservices>,query relate datum micro service,idea microservice independent database store datum instance assume microservice people address ms people ms keep person age addressid address ms keep address street city state zip code simplicity assume relation record person leave address ui list people address filter city communicate ms api bad idea query address ms filter city criterion query people ms question correct approach type situation specific data structure fit microservice paradigm store place,1,53,0,1.0,1,2019-03-22T15:23:56,0.0
55336558,7281806.0,<java><docker><microservices><netflix-eureka>,cloud config request execution error endpoint defaultendpoint serviceurl http localhost eureka server,implement discovery bootstrap micro service config server config git second eureka server docker compose config server register eureka request execution error endpoint defaultendpoint serviceurl connection refuse config server application yml bootstrap yml eureca class eureka bootstrap yml docker compose yml full config start service pay huge attention url discover service docker image service localhost uri urls working config,1,2410,0,2.0,1,2019-03-25T11:15:18,0.0
55394892,1764889.0,<architecture><microservices><software-design>,input validation microservice depend datum service,design photo managing solution microservice service responsible track datum single photo specific user service responsible photo album prevent user add photo album obvious validation album service photo owner photo service solution replicate photo record relevant attribute album service case album service lot photo record album option synchronous call album service photo service break microservice paradigm question good approach implement validation,1,109,0,1.0,1,2019-03-28T10:07:29,0.0
55430303,4062803.0,<rest><testing><microservices><versioning><tagging>,versione tag testframework rest api test multiple microservice,lot microservice test thing rest api microservice automate rest api test include microservice project repos testautomation project test api test test test black box problem infinitely combination microservice version test test environment example execute test today microservice version microservice version execute test tomorrow microservice version microservice version kind versioning tag testautomation project execute test identify combination microservice version valid combination valid work test fail recommendation experience implement integrate versioning tagging mechanism,1,144,0,0.0,1,2019-03-30T10:03:02,0.0
55406635,5111128.0,<machine-learning><microservices><database-migration><cqrs><event-store>,event source helpful machine learning,event source event store message store machine learning plan implement message store reason mention implement message store traditional db crud message store eventually help deep learning machine learn basic understanding event store cqrs unable understand relate machine learning,1,166,0,1.0,1,2019-03-28T20:49:27,0.0
55445469,11125669.0,<security><design-patterns><service><architecture><microservices>,consider bad security practice violation,service key talk service service https api endpoint start job consumer endpoint supply api connection string message queue send job metadata complete fully decouple safe,1,101,1,0.0,1,2019-03-31T21:08:35,0.0
55409357,5745183.0,<rest><design-patterns><microservices><api-design>,guidance micro service communicate effectively,embark project development multiple micro service communicate provide cloud native system application decompose multiple service text clean entity extractor entity resolver output converter diagram forking input service require service service expose internal provide synchronous response client check guide good pattern wrapper class model class project detail final output convertor datum flow datum sort micro service keep system loosely couple orchestrate flow middle layer compose datum orchestrate flow service mesh api gateway,1,66,2,0.0,1,2019-03-29T01:43:07,0.0
49308482,399275.0,<node.js><microservices><grpc>,configure generate method grpc node client,hope client talk microservice build framework issue define method period separate namespace method slash configure pattern process talk,1,1065,0,0.0,1,2018-03-15T20:19:13,0.0
49525246,6903497.0,<node.js><config><microservices>,centralise configuration node js microservice,set nodejs microservice micro service individual configuration environment understand thing feasible create centralise configuration micro service individual prefer centralised config individual config google info regard suggestion achieve,1,340,0,0.0,1,2018-03-28T02:43:29,0.0
49476498,604237.0,<java><jax-rs><microservices><publish-subscribe><endpoint>,microservice endpoint overload separate endpoint,question relate service endpoint optional parameter indicate semantic meaning suppose provide endpoint service messaging subscribe basically allow client subscribe topic subscribe request object list topic sufficient service send notification subscribe client message publish subscribed topic note service agnostic content message separately commnuicate publisher subscriber service pass encoding publish message subscriber decode suppose client subscribe endpoint require subscriber role service provide topic monitoring functionality client functionality list topic notify kind service send meta datum notification topic interest notification convey meta datum topic subscriber disconnect topic subscriber subscribed topic number subscriber topic drop notification send topic hour client service require monitor role note message notification system define message susbcriber receive service define object represent message datum event type subscriber topic handing endpoint create monitoring service messaging monitor request object exist subscribe endpoint additional parameter alternatively exist endpoint overload handle subscribe monitor request difference convey additional parameter example client boolean attribute monitor request object request include optional request attribute false request normal subscibe topic alternatively parameter specifie monitor true client interested meta data event relate topic role authorization check code base monitor request attribute consideration examine order decide alternative preferrrable matter implementation vertx java,1,177,0,0.0,1,2018-03-25T13:39:01,0.0
49421760,1000165.0,<laravel><rabbitmq><microservices>,laravel microservice rabbitmq,wonder good capture fanout call rabbitmq laravel subscriber services service send message userupdate uuid rabbitmq service capture userupdate perform appropriate action good long running service laravel subscriber catch message perform action multiple package github detail place class receive message help appreciate,1,453,0,0.0,1,2018-03-22T06:14:26,0.0
49469599,2688485.0,<authentication><jwt><graphql><microservices><go-micro>,authentication authorisation microservice architecture,multiple service user post comment authentication graphql endpoint connect service communicate grpc closed nettwork authorization jwt token approach graphql service responsible user authentication sure user authorise procedure user authentication service tls authentication authorisation check service approach individual service sure user authorise specific procedure example vote post wold sign reputation post service responsibility check user sign authenticate authorise vote result large overhead procedure call check user authentication authorisation auth service well approach preserve security approach create small overhead approach update approach approach user authentication graphql service auth service authorisation check metadata pass arround tls authentication service,1,588,2,2.0,1,2018-03-24T20:28:44,0.0
49384819,7874815.0,<microservices><service-discovery><api-gateway>,good practice implement aggrregation microservice api gateway service discovery,currently study possibility transform exist monolith application fine grain microservice api gateway coordination case three microservice product microservice rest api service product category microservice rest api service category aggregation microservice rest api service join list category product return model accord attach image client send request api gateway microservice retrieve addition request option http method request body api gateway receive client request service discovery reroute designate microservice question client contact aggregation microservice result request api gateway api gateway reroute aggregation service aggregation service contact category product service order reply client unify model require aggregation microservice contact api gateway reroute request category product microservice lot communication traffic occurring implement scenario,1,344,2,0.0,1,2018-03-20T12:56:06,0.0
43835206,7027494.0,<node.js><express><microservices><gateway>,input authentication validation microservice api gateway architecture,short input validation authentication validation execute api gateway microservice api gateway microservice api gateway answer,1,332,0,0.0,1,2017-05-07T18:35:13,0.0
43926591,3497723.0,<node.js><docker><architecture><openshift><microservices>,microservice docker architecture,build micro service project docker micro service listener datum number source achieve ability start datum source dynamically example drawing source connect docker problem start create docker instance source example source datum source scale automatically source listen solution advantage disadvantage create docker pool large number docker listener service time source send message rabbitmq relevant docker start datum solution bit afraid memory consumption docker image reason complex solution source create docker environment variable solution problem create docker moment achieve service start docker call manager regular nodejs application execute command server inside docker container problem manage create ssh connection main docker create docker sure solution track appreciate suggestion problem,1,436,0,0.0,1,2017-05-11T22:30:02,0.0
43943033,4149331.0,<apache-kafka><microservices><loose-coupling>,microservice kafka couple couple,problem wrap mind normal setup microservice kafka currently set topic kafka multiple consumer read topic separate consumer group lead couple term microservice consumer read exact datum topic additionally retention time message treat kafka kind datum store replicate message topic service consumer opinion couple decouple hear opinion wrong feel support,1,236,0,0.0,1,2017-05-12T17:03:58,0.0
43896718,6181657.0,<graph><microservices>,architecture monitor system state microservice,build service monitor current system state graph structure example usera subscribe userb chat graph relation subscribed chat chat usera exit chat relation delete microservice introduce hardcode decision support subset relation implement main problem consistency datum relation hardcode wonder solution library help problem suggestion appreciate,1,56,2,0.0,1,2017-05-10T15:22:34,0.0
43910795,2572602.0,<http><asynchronous><architecture><microservices><event-driven>,microservice async operation http response,build microservice app client create project follow diagram technical flow process question http response api gateway return client step initial idea problem project create project management service,1,375,9,2.0,1,2017-05-11T08:53:19,0.0
43374386,3096803.0,<web-services><http><asynchronous><microservices>,correct handle multiple level network request,service accept http request customer site service send http request transactional email provider provide initial request service workflow customersite ⟷ emailservice ⟷ transactionemailprovider possibility handle request error transactionalemailprovider report customersite send asynchronous request receive request respond success code request properly form failure happen send request send failure notification post request webhook implementation emailservice send request transactionalemailprovider await response respond customersite request success failure implement version responsiveness dependent responsiveness,1,21,1,0.0,1,2017-04-12T15:58:25,0.0
43328943,1385174.0,<permissions><domain-driven-design><database-schema><acl><microservices>,datum specific user permission model schema design,app manage user datum share user permission read edit superuser rename delete weigh approach model user permission simple approach second involve work extensible refactorable quick solution hard code property complete solution hard code area consider extensibility change model schema microservice possibility spin separate db performance filter algo number join query sql cache idea denormalise user permission sound crazy admin user good ux admin dbas support complaint endless support request web services api simplicity complexity spring datum rest hal complex solution require work future bit concerned performance admin task involve ui allow user manage utopian solution third party java base webapp provide user interface allow admin edit interesting people tackle problem,1,246,3,0.0,1,2017-04-10T16:57:21,0.0
52210810,8097862.0,<spring-boot><https><microservices>,spring boot microservice fetching config server https,switch microservice ecosystem http http boot eureka gateway service http config service connect register https boot third service require configuration service fetch config https spring boot https guide combination configuration paste bootstrap relevant service redundant info thing bootstrap yml gateway service bootstrap yml config service bootstrap yml third service issue advise,1,525,0,0.0,1,2018-09-06T19:16:14,0.0
52148411,2046462.0,<oauth-2.0><jwt><single-sign-on><microservices><saml-2.0>,saml secure microservice,currently oauth de facto security module microservice ecosystem replace oauth saml ssos matter jwt saml assertion equivalent datum ssos simplicity oauth choose reason ssos place oauth microservice authentication authorization,1,287,0,0.0,1,2018-09-03T11:00:01,0.0
52093232,2538530.0,<microservices><spring-cloud><continuous-delivery>,spring cloud multiproject single project,experience spring cloud micro service production micro service big maven multi project source code single repo advantage easy check manage project ide concern ci build server figure service change deploy alternatively micro service deploy time change commit eye explode project source repo micro service gut feel correct approach service deploy goal micro service container kubernetes advise concern raise unwelcome surprise,1,33,0,0.0,1,2018-08-30T09:11:06,0.0
52090842,6676972.0,<javascript><node.js><microservices>,micro service architecture node reduce efficiency increase response time？is solution understanding wrong,node build data processing system involve module plan adopt micro service architecture micro service framework tcp communicate seneca micro service responsible communicate database datum processing calculation time consume find ab test seneca micro service efficient original module case average response time time hard understand seneca micro service generate additional communication overhead overhead confused micro service architecture solve problem mutual reference module large system convenient development reduce effciency feel worth candle understanding micro service wrong wrong micro service reduce efficiency idea temporarily sample code question hear opinion,1,35,0,0.0,1,2018-08-30T06:52:28,0.0
52198591,4775748.0,<ruby><rvm><bundler><microservices><production>,ruby microservice restart respawn production,currently process move rail functionality microservice bore reason suffice happy decision architecture choice moment complicate handful standalone script talk rabbitmq gem dependency bunny mysql fire cli work great problem require advice move daemon automatically respawne failure current platform follow cento rvm somegemset nginx passenger someuser rail capistrano rvm bundler plugin fire forget deploy fall restart originally add ruby microservice init directory respawn job start connect user rail someuser gem rvm issue path problem attempt resolve lose rvm bundler install binstub work command service directory bin bundle exec service rb work init fail start status init conf chdir keep neater joy foreman work fine foreman start upstart export script create fail manner executable rvm ruby wrapper shebang script include read monit pid script produce sure easy allow user include root system user hit script gem find thing advance,1,49,0,0.0,1,2018-09-06T07:22:21,0.0
52187048,2280212.0,<spring-boot><microservices><cqrs><axon>,eventstore axon framework spring boot,realize simple distribute application save event event store reason documentation axon mysql event store experience spring understand work separate service command side query side plan service configure external event store store inside service distribution command event rabbitmq create require queue local running rabbitmq instance default username password question configure axon mysql event store,1,630,0,0.0,1,2018-09-05T14:02:13,0.0
52201791,4883009.0,<rest><architecture><microservices><distributed-computing><distributed>,call bunch rest api distribute environment,application logic python library operation provide library involve call rest api time library execute distribute environment operation call response user action example instance operationa execute concurrently acceptable operation concurrently execution affect resource call operation affect resource execute sequentially interleave call rest api result inconsistent state rest service example happen operationa execute concurrently resource problem resource endpoint state foo endpoint resource state bla acquire distribute lock call rest api support rest api form fence token control rest api exist technology service prevent unacceptable concurrent executing scale service horizontally,1,237,1,0.0,1,2018-09-06T10:15:06,0.0
52076009,8274092.0,<spring-boot><microservices><jhipster>,jhipster application microservice call application,uaa gateway microservice application call application rest api application,1,239,1,1.0,1,2018-08-29T11:09:11,0.0
52242886,3114539.0,<notifications><microservices>,ready solution notification microservice,microservice architecture introduce notification center requirement service send notification service subscribe kind notification ui web subscribe notification websocket prefer course write service ready robust solution upd pub messaging system low level notification center,1,1145,2,0.0,1,2018-09-09T08:53:37,0.0
52092546,1854083.0,<c#><asp.net><microservices><publish-subscribe>,create pub service third party tool,find solution create pub medium microservice talk aware third party redis rabbitmq challenge lie client unable allow install third party tool security reason messagequeue server windows allow application exist server create simple app windows service relationship service deal datum update publish service subsribe problem link dead wcf pub critical solution data notification mssql offer alternative bottle neck application scale internet flood article third party tool,1,429,11,0.0,1,2018-08-30T08:34:30,0.0
39260387,6779932.0,<node.js><microservices>,connect somata client remote registry,microservice platform web app build set multiple client machine somata registry machine client machine connect registry machine connect client remote registry,1,29,0,0.0,1,2016-08-31T23:10:47,0.0
39323491,2688174.0,<unit-testing><testing><tdd><bdd><microservices>,set test version microservice,microservice create test folder version service,1,48,1,0.0,1,2016-09-05T03:22:18,0.0
39172786,3553550.0,<node.js><docker><microservices><seneca>,docker container huge size node js base microservice,play set microservice docker container service base seneca js node js application derive container node container image mb size exactly micro eventual application conglomerate service mb size blow application gb wrong set docker node js base microservice lot cheer martin,1,618,2,1.0,1,2016-08-26T18:36:56,0.0
39126454,2009079.0,<microservices><public-key-exchange>,jwt validation micro service architecture public key publishing,refactore web app system micro service architecture decide authenticate user save authorization datum example payload token infer user access resource consider option micro service signing service api gateway instance token valid micro service hold public key validate token case manage public key gateway service publish public key micro service lot design system implement thing,1,213,0,0.0,1,2016-08-24T14:42:57,0.0
39323769,2009079.0,<authorization><microservices>,microservice user access credential,build web application microservice architecture service handle authorization user privilege access credential role consider pass credential system option sign credential gateway auth proxy service jwt pass service verify public key read user info service request authorization service query user access action difficulty decide well term high cohesion loose coupling course easy service development,1,248,0,0.0,1,2016-09-05T04:01:33,0.0
44105840,3909315.0,<rest><spring-boot><resources><microservices><amazon-ses>,embed image attach file spring boot resource folder,embed image attach file spring boot resource folder create restful web service spring boot jar file war file service send email send email attachment create dynamically web angular reside apache server deploy server freemarker template compose email amazon se send email freemarker template code add image embed attach file provide absolute path provide relative path work folder structure sucess approach image follow folder image folder approach workspace service src main resource image header png workspace service build libs service jar boot inf class image work eclipse command prompt java jar build lib myapp jar approach work place image image folder resource view image follow url fine load image resource folder spring boot jar explode runtime correct load image spring boot jar file,1,1665,0,0.0,1,2017-05-22T06:18:18,0.0
44056521,8033116.0,<spring-boot><microservices>,good approach separate controller micro service,spring boot base microservice currently hit mobile app develop browser base client microservice request response parameter mobile app browser number user mobile app second browser second hit microservice second spring controller singleton instance controller web application good approach respect performance separate controller microservice mobile app user browser user improve microservice performance instance parallel good handle increase number hit channel suggestion highly appreciate,1,457,1,0.0,1,2017-05-18T19:41:40,0.0
44063886,2518694.0,<spring-boot><microservices><orchestration>,achieve orchestration spring boot micro service,good orchestrate micro service spring boot,1,4274,2,0.0,1,2017-05-19T07:21:59,0.0
44186109,2362846.0,<c#><azure><domain-driven-design><microservices>,share domain dll webjob web api,webjob process message queue web api process rest request solution share domain application type bound context reference domain dll bad design choose,1,386,4,0.0,1,2017-05-25T17:09:14,0.0
35684313,1222654.0,<gradle><microservices>,microservice multi project gradle build,multi project gradle build roughly set subproject spark framework embed web server basically microservice setup system work task define manually start service ide open terminal project running create task root level fire easy system development gradle,1,834,1,0.0,1,2016-02-28T15:22:47,0.0
51060417,2013645.0,<microservices><asp.net-core-webapi><polly><resiliency><httpclientfactory>,difference addtransienthttperrorpolicy addpolicyhandler,apply resiliency strategy httpclientfactory asp net core find guide policy configuration addtransienthttperrorpolicy addpolicyhandler explanation difference,1,1611,0,0.0,1,2018-06-27T10:25:35,0.0
51017946,6742686.0,<spring-boot><microservices><jhipster>,task bootrepackage find root project gateway,read book create microservice gateway gateway app follow book terminal jhipster version,1,1370,0,0.0,1,2018-06-25T07:07:00,0.0
51000111,837806.0,<aggregate><microservices><api-design><api-gateway>,api gateway micro service lookup method,build api api gateway micro service micro service product category api call follow account category good account correspond category account micro service call category micro service gateway synchronous call account micro service loop account call category micro service correspond category point aggregate micro service,1,106,0,0.0,1,2018-06-23T10:09:56,0.0
50965591,1223817.0,<node.js><spring><microservices><netflix-eureka>,spring cloud netflix eureka find eureka js instance,microservice spring netflix eureka producer consumer microservice write nodejs eureka js client node microservice spring eureka dashboard list problem read node microservice instance eureka server find employee producer instance find node microservice debug result node microservice strange thing spring debug list service node microservice list wrong code,1,645,0,0.0,1,2018-06-21T09:54:02,0.0
51008734,279028.0,<microservices><distributed-computing>,implement request level cache microservice,reduce time application spend compute thing sound cache case require architectural change situation caller independently submit identical request micro service happen time order magnitude time service request move set identical request compute unique request feasible time request compute caller switch compute result request node cluster receive request request finish compute result caller move receive request request break request simple join individual request compute fairly easy cache result serve subsequent request duplicate request request compute form request level caching alleviate situation sound bit post idempotent doable set letter large subset letter form request change request point better architectural approach issue throw hardware work wasteful edit approach consider request route node request node locally node lru cache request listen exist register execute node request assign node request process tricky deal kind request split small request process node,1,179,0,0.0,1,2018-06-24T09:47:23,0.0
56317408,7021434.0,<javascript><node.js><mongodb><mongoose><microservices>,share mongo model multiple app,build app grow learn grow moment split app seperate piece web front api data worker datum process seperate nodejs app function perform server start package app include share code include dependancie access model app find follow command upgrade late model development mode alot learn good practice good save time help greatly appreciate,1,38,0,1.0,1,2019-05-26T21:14:47,0.0
56383675,4621020.0,<java><spring-boot><microservices><spring-cloud-feign>,feign standalone library springboot application,create client micro service library micro service client easily include pom micro service feign thing easy sure architecture feign example start enablefeignclient annotation springbootappplication class client library start include library enablefeignclient annotation,1,45,0,0.0,1,2019-05-30T18:23:36,0.0
56452262,8167587.0,<rest><api><microservices><event-sourcing><event-driven>,client interaction event sourcing,event sourcing question interaction client event sourcing sound great decouple microservice keep immutable event formulate stored state fit handy event propagate system service react event fine issue lie understand client interaction client interact system event longer submit state mutate exist question client fire specific event interact event base system system base event source understanding longer rest api resource update delete handle resource post endpoint event endpoint work second question user response instance event place order fire event thing understanding validate request check user order order money fire place handle system order place pick pricing service fire reserved money money exceed event base user afford order service listen mark order deny credit async process user fire forget user fail succeed order confirmation order status pending poll change web socket lot nonsense learn architecture mindset monolith rest response help appreciate,1,46,0,1.0,1,2019-06-04T22:47:12,0.0
56330543,2704444.0,<microservices>,shared read database microservice,well shared database microservice good idea datum microservice messaging broker rabbitmq data require build materialized view wouldn easy kind shared read database read share database microservice share writeable readable database,1,49,0,0.0,1,2019-05-27T17:56:14,0.0
56384146,1268570.0,<git><visual-studio><asp.net-core><nuget><microservices>,share file visual studio solution level git repos micro service architecture,micro service architecture service locate git repo service net core service visual studio start share common file place solution level editorconfig distribute common visual studio setting ruleset analyzer ruleset settings dotsetting resharper setting roslynator config roslynator analyzer settings stylecop json stylecop analyzer setting file require setting project level nuget prop file update project file distribute repos solution level ability update easily update rule company level easily distribute change micro service nuget ability consume create solution level package deprecate git module work folder file solution level distribute file copy place solution level,1,55,0,1.0,1,2019-05-30T18:59:35,0.0
56456451,10776203.0,<java><caching><responsive-design><architecture><microservices>,regard improvement efficiency cache heavy system,improve efficiency cache heavy system follow property architecture system component single instance backend multiple frontend instance spread remote datum center backend generate datum write relational database replicate multiple datum center frontend handle client request common web traffic base read datum database serve data store local cache hour expire retrieve cache eviction policy lru base mention issue implementation turn database access redundant underlie datum change hand change reflect cache ttl elapse staleness issue advice solution problem solution change datum store nosql db cassandra classic database,1,64,0,0.0,1,2019-06-05T08:06:17,0.0
56499201,11555820.0,<azure><microservices><azure-ad-b2c><azure-api-management>,azure authenticate user access microservice api management,azure api management authenticate access backend microservice check couple link confuse link talk authorize developer account aad authenticate user create architecture couple microservice azure api management authenticate user request hit api management request authenticate assume provide jwt token api management validate access backend microservice,1,124,0,0.0,1,2019-06-07T17:57:51,0.0
56498777,8391031.0,<microservices><karate><in-memory-database>,load retrieve memory database database karate framework prerequisite step microservice rest api call,problem statement microservice retrieve datum db database production set datum feasible environment ensure retrieval logic accurate java code convert db datum json structure microservice logic control create database limited retrieval requirement memory db discuss testing datum load ddl dml expect json response generate manually unit testing test validation objective test retrial logic irrespective environment retrieve microservice invoke internally test harness url call memory database retrieve actual response test automation framework place karate framework test automation approach load datum memory database ddl dml file test execution invoke microservice request karate compare actual response expect json response capture step delete database cleanup note tedious write test automation logic help convert datum db memory json expect response expect json response capture base expect response expect test automation maintenance update ddl dml expect json change actual retrieval logic refernce memory db testing xyz service response json generate unit testing memory db create testretrivallogicusinginmemoryrequirnment feature demo read file test background url header accept application json configure logprettyresponse true configure ssl true scenario json string load datum memory database expect gherkin statement understand karate path getderivedrule request pricingverid ancestorversionid kidsversionids executionflow cheque pricetype dollarininyield validationlevel aggrement level method post status match read xyz service response json challenge query karate gherkin statement java glue code dsl achieve karate stick restassured framework request help suggestion code snippet handle helpful,1,125,0,0.0,1,2019-06-07T17:21:05,0.0
56463456,3919805.0,<exception><rabbitmq><microservices><message-queue><event-driven>,propagate exception event drive message queue microservice,straightforward http call microservice propagate exception caller front propagate exception event drive message queue rabbitmq microservice caller front,1,45,2,0.0,1,2019-06-05T15:20:46,0.0
56412460,4534.0,<go><microservices><prometheus>,evaluate promhttp handler database change,abuse realise case microservice version database connectivity well monitor microservice sure structure handle metric call evaluate,1,74,5,0.0,1,2019-06-02T05:38:59,0.0
56485652,0.0,<java><spring-boot><docker><docker-compose><microservices>,microservice reach config service docker compose,currently microservice service port microservice fetch config microservice config port microservice suppose provide config reason service unable fetch configuration config microservice config microservice work curl localhost service default machine receive error receive docker compose yaml service dockerfile service bootstrap yaml service yaml service configuration config dockerfile config application yaml share service yaml service configuration idea find issue issue uri mine set correctly,1,125,6,0.0,1,2019-06-06T22:05:09,0.0
44346827,2766264.0,<architecture><microservices><separation-of-concerns>,responsabilitie api gateway specific service,problem divide responsibility service example scenario imagine follow reduce number service communicate rabbitmq api service single http entry point business logic user service handle user logic implement user creation feature enforce business restriction api user service example admin create user isadmin property set true follow option mind tentative solution check api service api service check user authorize send operation user service operation user service advantage user service flexible service create user future restrain perform example create user creator user data validate early disadvantage business logic common duplicate check multiple point business logic user split check user service user service check authorization return error api api pass error client good practice exist face dilemma work,1,40,0,0.0,1,2017-06-03T17:37:26,0.0
44350408,3557096.0,<tomcat><jhipster><microservices>,start jhipster microservice gateway box,build jhipster microservice gateway box jhipster answer setup question answer assign localhost instal tomcat work turn server localhost gateway start follow warning early tomcat server localhost ton boilerplate copy follow error keep repeat eventually shut start start netbeans tomcat turn quit fail start tomcat port fine start tomcat turn turn start connection refuse app start answer setup question,1,387,0,0.0,1,2017-06-04T03:05:46,0.0
44395806,2319720.0,<java><spring-integration><spring-cloud><microservices><spring-cloud-stream>,communication microservice large datum,build spring cloud base microservice pipeline data ingestion service currently datum sql data prediction service general consensus write async message base communication kafka rabbitmq sure orchestrate service api gateway invoke ingestion start pipeline,1,574,2,0.0,1,2017-06-06T16:59:51,0.0
40876048,3166160.0,<rest><microservices><api-design>,endpoint multiple api,api set micro service api manage user user api api manage security access role permission create user api assign define security api association security micro service user micro service initial thought security micro service application request security assign endpoint endpoint feel belong user micro service endpoint option assign multiple group design associate disassociate associate good option well handle type api call aware,1,108,0,0.0,1,2016-11-29T21:28:05,0.0
40910259,411871.0,<java><jhipster><microservices>,expose jhipster microservice client class,micro service create jhipster ms ms authorizedfeignclient communicate micro services ms dto class input output class rest api ms call api ms dto class pojos input output datum dto class ms option mind currently copy dto class ms ms import ms maven dependency ms approach easy duplicate code approach ms ms package war file jar file good include war file class approach dto class ms ms,1,157,0,0.0,1,2016-12-01T12:06:55,0.0
40784804,3209319.0,<spring-boot><spring-cloud><microservices><consul>,register consul server consul client,create spring boot microservice application microservice consul discovery single datum centre host microservice connect consul agent client respective localhost consul server remain host mention cluster server applicable situation,1,229,0,1.0,1,2016-11-24T11:06:18,0.0
40832097,3127632.0,<spring><spring-mvc><junit><mockito><microservices>,mockmvc return null object,develop microservice application test post request controller testing manually work test case return null read question stackoverflow documentation figure currently order work add post return response null object,1,4779,2,1.0,1,2016-11-27T18:00:32,0.0
39096701,3645827.0,<domain-driven-design><microservices>,ddd user domain specific setting,currently develop micro service responsible authentication bound context responsible identity permission specific setting base user role tie domain generate token example persist identity bc domain persist setting example inside book bound context inside book product bound context,1,305,12,1.0,1,2016-08-23T08:57:59,0.0
44610219,2214751.0,<java><event-handling><messaging><microservices>,good case process event system microservice broker,framework allow messaging architecture implement process thread spring guava eventbus reactor question good case send message full fledged broker understand usage allow well decoupling business logic microservice architecture publish event consume microservice advantage failure tolerance add cluster broker erroneous message failure instance retry implement logic decompose execute send message consume system specially subscriber execute thread difficult datum consistent state,1,102,0,0.0,1,2017-06-17T23:05:40,0.0
44642751,1493808.0,<amazon-web-services><domain-driven-design><microservices><cqrs><event-sourcing>,aws kinesis microservice choreography,develop microservice online shop cqrs ddd event sourcing concept aws kinesis event stream good choreograph microservice service service customer datum service order system total number unpaid order total amount order customer send ordercreated event orderpaid event service customer datum recalculate total unpaid order total amount order customer ordering system event aws kinesis listen command side service customer persist event ordercreate orderpaid event aws kinesis database customer command side service update customer query side service aw lambda event processor good practice model advance,1,1137,0,0.0,1,2017-06-20T02:15:51,0.0
44645743,5554070.0,<spring-boot><oauth-2.0><microservices><netflix-zuul>,autherization service responsde access token zuul gateway,create multiple microservice springboot week decide implement oauth authorization service plan request handle zuul gateway register eureka authorization service call eureka access token problem find jwt access token directly authorization server port jwt token zuul gateway empty string gateway configuration application yml zuul gateway application class zuul authorization server configuration class access token request directly zuul proxy empty string zuul gateway version spring boot face issue,1,641,1,0.0,1,2017-06-20T06:47:48,0.0
44482448,5213999.0,<firebase><microservices><firebase-hosting><polymerfire>,deployment dependency cloud function firebase app microservice style development,project polymer web app polymerfire publish firebase host project cloud function database trigger deploy project cloud function express app route mapping deploy create rewrite rule map route register cloud function project polymer firebase json file current firebase limitation manage rewrite rule multiple project follow st project polymer project request route cloud function write app work log statement inside code work send simple throw error code execute library uploaded cloud function understand deployment scope architecture dependency cloud function app google io repeat advice microsrevice style development app single monolith follow microservice style development kindly help,1,138,1,0.0,1,2017-06-11T09:48:49,0.0
44464660,4372824.0,<azure><microservices><azure-functions>,ideally function fucntion app,template visual studio prev function function app share dependencie custom business code library add function function app problem monolithic design chance sneak change function require entire set function redeploy design keep function app thin function function app opinion segregate code dependency function flip side bring deployment maintainability nightmare design guideline follow balance maintainability hassle help achieve micro service design goal,1,216,1,1.0,1,2017-06-09T18:35:42,0.0
44585239,5913755.0,<database><oracle><join><microservices>,split monolith microservice database issue,split monolith application microservice split three microservice easy explanation suppose user crud message crud thing crud distinct bound contexts database table microservice db web search filtering message column table example web user enter surname user col thing title message return filter row monolith simple database join situation find good option option well,1,419,6,0.0,1,2017-06-16T09:08:05,0.0
41431506,3361529.0,<java><spring-cloud><microservices><netflix-zuul><spring-cloud-netflix>,zuul route endpoint multiple microservice,setup zuul underlie microservice service gateway context example microservice microservice access microservice zuul follow microservice gateway microservice api hello microservice gateway microservice api bye set request route correctly reason front route client side rest call server gateway provide simple maintenance front application yml,1,2630,2,0.0,1,2017-01-02T18:14:51,0.0
41329351,5203951.0,<messaging><microservices><nsq>,send message sender message architecture,solve communication microservice messaging architecture tradition application module create post video convert username user split module microservice chain visit microservice directly convert username call service service messaging good problem receive convert user send message service continue step service function service lot function service message architecture work clue communicate service messaging messaging architecture,1,91,1,0.0,1,2016-12-26T09:53:32,0.0
41287712,2042097.0,<microservices><consul>,random port microservice register consul,note consul http port call api expose microservice discover consul service consul port number consul discover multiple version microservice microservice write java port predetermine service register consul service service consul service port version micro service register consul servicev service consul port service definition alter example ping dig service pe service service consul access api expose microservice explicitly work access api port number build consul register service add port,1,620,1,0.0,1,2016-12-22T16:31:20,0.0
48308464,3125470.0,<rest><post><networking><microservices><transfer>,transfer multiple file meta datum post request,python django backend running design microservice microservice rest post endpoint open transfer multiple binary file meta datum json single post request django microservice besteht accomplish transfer datum multipart mord html form protobuf appreciate help common problem efficient django python answer,1,49,0,0.0,1,2018-01-17T19:19:04,0.0
48344922,7903107.0,<java><spring><spring-boot><jhipster><microservices>,unable save datum jhipster micro service gateway ui,set micro service application microservice gateway generate micro service entity jhipster import jdl books jh command entities ui gateway jdl file gateway option skipserver file generate ui entity gateway entity generate microservice doc issue raise people find proper documentation generate entity micro service ui entity gateway path micro service jdl file correct syntax incorrect well open entity save object save follow error console books micro service jdl file bookstore gateway jdl file jhipster version jhipster info browser operating system,1,225,0,0.0,1,2018-01-19T15:55:56,0.0
48277437,508219.0,<postgresql><kubernetes><containers><microservices><stolon>,kubernetes database db user,plan kube postgre deployment application microservice separated schema logical database security sake separate user schema logical db suppose db schema user create kube application access db admin account possibility create single user single database case ha postgre chart question preferred microservice kube create db user,1,751,0,0.0,1,2018-01-16T09:00:58,0.0
48180454,4049271.0,<ruby-on-rails><performance><microservices><scalability><rails-engines>,rails engine scalability issue,find scale rail monolith application help rail engine goal database connection timeout issue monolith model divide model tree structure engine separate database engine usecase engine base engine include engine engine live level tree model seggrate engine engine datum relate user engine datum relate product engine datum relate report main issue define association earlier association method access association define engine product table live option open user model inside engine define association title product logic relate domain engine include engine engine result circular dependency follow approach messy application large additionally good rail good practice advance,1,196,1,0.0,1,2018-01-10T04:45:17,0.0
46333428,3475216.0,<microservices><rest-assured><spring-cloud-contract><groovydsl>,service point path variable cloud contract,write contract plugin autogenerate test strange behavior autogenerate test follow service endpoint contract mvn clean install test autogenerate work fine contract test pass perfectly change datum path check start fail thing understand endpoint path varaible string type type path good follow path work work great explanation behavior resolve practically string work example,1,200,0,0.0,1,2017-09-21T00:03:43,0.0
47191332,8093707.0,<java><gradle><build.gradle><microservices>,centralized build gradle project,number microservice service project build gradle file wonder centralized build gradle pull cut amount code project help time service update dependency initial thought jfrog artifactory pull curious common practice,1,288,1,0.0,1,2017-11-08T23:14:54,0.0
47146939,998692.0,<java><spring-boot><https><ssl-certificate><microservices>,manage test ssl certificate dev environment,spring boot web service https http create keystore sign certificate configure server spring boot propertie certificate localhost match local environment test proper dev environment certificate work environment preferred deal create separate keystore certificate environment well separate yml file respective property,1,307,1,1.0,1,2017-11-06T22:30:40,0.0
47184194,5424566.0,<maven><pom.xml><maven-plugin><microservices>,common pom base plugin multiple microservice project,figure import set common maven plugin multiple microservice project idea maintain single place manage common plugin jacoco javadocs totally avoid parent pom handle,1,80,3,0.0,1,2017-11-08T15:58:41,0.0
47017875,762421.0,<java><spring-boot><scheduler><microservices>,scheduler java spring boot microservice,microservice write spring boot nosql datastore work functionality delete datum magnitude document regular basis day base presence record type data store scheduler everyday deletion correct approach microservice instance control scheduler instance,1,2045,3,0.0,1,2017-10-30T14:34:41,0.0
53867543,836048.0,<design-patterns><microservices><service-layer>,type implementation suitable service layer,develop microservice application big architecture lot microservice application content application encapsulate http call service layer notice approach assume application contact microservice deploy user api business file approach business file inside file public method receive single parameter method call filename method api file approach encapsulate communication user api consumer application single file method endpoint provide user api filename method pro con approach,1,31,0,0.0,1,2018-12-20T11:12:40,0.0
53955613,2929562.0,<spring><microservices><spring-cloud><netflix-eureka>,work eureka client programmatically issue complete shut discoveryclient,createde eureka server replication start client start error spring boot version error boot version spring microservice eureka server application yml springmicroserviceseurekaserverapplication java pom mxl spring microservice eureka client springmicroserviceseurekaclientapplication java reference issue major issue pom xml,1,1374,0,1.0,1,2018-12-28T08:27:53,0.0
53920414,673187.0,<rest><asynchronous><database-design><architecture><microservices>,efficient architecture tool implement async web api,consider event drive microservice base web application async web api afaik achieve async http request response respond api call status code location header caller retrieve result generate unique request store relate event future persistent storage api caller track progress request question api layer implement consider ten request response second efficient architecture tool api load store request relate event database cache redi limited time minute well pattern architecture tool big company website solve issue database well scenario mongodb mysql … appreciate answer specially production experience,1,106,0,1.0,1,2018-12-25T07:52:28,0.0
53944909,4162134.0,<spring><spring-boot><spring-security><microservices>,micro services authorization session maintenance spring boot,application divide micro service increase performance high load structure plan create previous application monolith spring boot spring security problem log thing createdby lastmodifiedby laso aspect log action app track change session microservicie log action owner log maintain log possibility structure ready patter change structure,1,156,0,0.0,1,2018-12-27T12:14:45,0.0
53989458,2929562.0,<spring><spring-security><oauth-2.0><microservices><spring-security-oauth2>,org springframework security oauth common exception invalidgrantexception bad credential,develop spring boot authorization server oauth resource server example easily query postman spring microservice oauth server protect datum create client access datum postman error clear version error spring microservice oauth server authorizationserverconfig java websecurityconfig java springmicroservicesoauthserverapplication java code work fine call token protect resource create client ui create client project websecurityconfig java springmicroservicesoauthclientapplication java edit postman code work fine curl command postman call code client code error,1,705,0,1.0,1,2018-12-31T16:23:15,0.0
53989088,4307413.0,<spring-boot><microservices><jhipster>,jhipster rest api permit microservice,jhipster microservice application dependency microservice msa msb user rest call msa msa process request authorizedfeignclient call rest endpoint msb perform logic user problem logic perform msb internal user expose user restrict rest endpoint msb microservice request public user,1,83,1,0.0,1,2018-12-31T15:36:06,0.0
54013470,4260303.0,<web-services><architecture><microservices><publish-subscribe><distributed-system>,microservice notification,familiar notification pop top fb ack late order question design thing reading side arch high level microservice system service create service receive message service worried service talk sqs kafka main follow maintain notification psql column timestamp timeserie db store base severity fatal info critical ack notification,1,123,1,0.0,1,2019-01-02T21:36:20,0.0
54023020,5791.0,<kubernetes><microservices><kubernetes-ingress><azure-kubernetes><nginx-ingress>,replace microservice inside aks smart nginx config,question nginx call microservice inside aks prior route request api goal speed request hop simplify build deployment service explanation currently deploy azure ak kubernetes cluster additional service hope replace nginx routing microservice call identity api prior routing reason common imagine recieve kind authentication token pre define header standard header bespoke debug token impersonation call route api identity api pre define header user identity object return pass basic user identity object microservice quick easy access user role explanation nginx receive request load ssl route request service route api authorization header call identity api identity api validation authorization return authorization error auth fail serialize user identity object router api return failure route request microservice crack request path attach user identity object header request microservice turn user identity object claim principal case net core example option merge router api useridentity api keep separation concern well move remove route api order maintain separation nginx work,1,73,2,0.0,1,2019-01-03T13:13:42,0.0
54004986,10857388.0,<amazon-web-services><microservices><saas><spring-cloud-netflix><paas>,spring cloud netflix oss aws azure cloud fit provide microservice base solution,query regard spring cloud netflix oss aws azure cloud fit provide microservice base solution technology architecture deploy spring cloud base microservice solution aw containerization docker container orchestration docker swamp kubernete list component fit aws azure netflix ribbon load balance netflix zuul route netflix hystrix circuit breaker netflix eureka service discovery spring cloud security authentication authorization example aw content delivery network amazon cloudfront aws api gateway care load balance routing authentication authorization create microservice netflix oss spring cloud aw containerization,1,478,2,0.0,1,2019-01-02T10:49:53,0.0
53908919,1677071.0,<java><microservices>,deal long invoke chain micro service,project create micro service architecture business multiple service call currently service call serial call request service call generate service call response invoke chain long performance bad solution deal scenario change micro service design,1,70,3,0.0,1,2018-12-24T03:31:15,0.0
40542220,6829167.0,<.net><azure><microservices><azure-service-fabric>,expose service deploy service fabric cluster traffic distribution handle internal load balancer,secure service fabric cluster sign certificate moment internal load balancer deploy azure rule probe configure internet face load balancer equivalent resource public ip access vnet expose service deploy cluster expose service fabric management url westus cloudapp azure find option public load balancer configure vpn gateway application gateway option replace exist internal load balancer internet face expose management url well multi tier app web tier option require configure access private ip vpn gateway access option undermine exist internal load balancer custom route request service build top exist architecture,1,282,1,0.0,1,2016-11-11T06:18:48,0.0
40688160,913622.0,<docker><kubernetes><microservices><devops><environments>,kubernete create specific namespace service,micro service architecture number stateful service mongodb mysql redis elasicsearch kubernete environment staging production stateful service environment namespace wonder limit resource cluster limited budget create third namespace service production staging environment create service namespace good practice case disadvantage,1,58,0,0.0,1,2016-11-19T01:07:02,0.0
40556757,1669464.0,<azure><spring-boot><microservices><azure-service-fabric><windows2012>,host ms service fabric deploy spring boot window,keep mind completely service fabric window guru linux base server option documentation instruction create java application window base installation thing great point direction deploy java spring boot application windows base service fabric installation internal network,1,349,0,0.0,1,2016-11-11T21:48:25,0.0
40564595,3399047.0,<ruby-on-rails><nginx><docker><docker-compose><microservices>,docker process single container,create ruby rail project nginx rail app nginx separate link container configuration work fine rail puma server nginx single container cmd command dockerfile command command attribute docker compose yml configuration separate container well solution possibilite puma rail app server command bundle exec puma config puma rb,1,935,0,0.0,1,2016-11-12T15:48:29,0.0
53551495,9548364.0,<spring-boot><docker><kubernetes><microservices>,access kubernetes pod point jenkins,face follow query jenkin kubernetes cluster separate network common build tool build application infrastructure deploy containerise application kubernetes completely network jenkins pod application spring boot application actuator enable check health container expose load balancer ip dns public individual service refer pod query actuator spring boot check health kubernetes crd purpose approach recommendation exist case,1,44,0,1.0,1,2018-11-30T04:59:22,0.0
53578806,9088011.0,<java><design-patterns><microservices>,link relate datum separate rdbms database micro service typical micro service architecture,design learn portal user choose course payment online course module course payment user management choose design separate microservice course payment user management base domain system monolith foreign key link user course payment table relate datum micro service database datum link relate user enrol course,1,78,0,1.0,1,2018-12-02T08:54:15,0.0
53412323,6493369.0,<aws-lambda><microservices><aws-api-gateway>,forbid error call api node js code work fine postman,microservice deploy aw lambda node js code deploy ec instance access microservice api postman correct response api call node js code fail error code error api simple api cloudfront https,1,314,4,1.0,1,2018-11-21T12:44:47,0.0
53537688,4818810.0,<node.js><angular><microservices><webhooks><event-driven-design>,choose protocol event drive architecture,app rely backend microservice architectur choose protocol inclined choose web socket check aws api gateway support window work webhook consider implement webhook good fit backend nodejs signal app angular event weigh option read article hear people experience scalability security performance,1,72,4,1.0,1,2018-11-29T11:10:24,0.0
53448772,8239214.0,<java><node.js><spring><java-ee><microservices>,nodejs java layer micro service architecture,create web app design consideration fact lot load server request java backend spring framework good language platform high load request web presentation layer handle request backend heavy computation create architecture useless point question wrong choice develop team advance,1,336,4,3.0,1,2018-11-23T14:46:53,0.0
48653762,3764306.0,<rest><architecture><microservices>,microservice isolate standalone service,understand microservice create separate stand service rest soap instance create license system webapp simply separate rest service consume webapp tweak scale isolate webapp microservice pro con approach,1,258,0,0.0,1,2018-02-06T23:45:15,0.0
48743105,0.0,<csv><go><service><microservices>,parse csv file api request kit golang,build service user input file request iterate csv pass database problem pass file read code endpoint transport pass csv file service read iterate csv file csv file,1,1282,0,1.0,1,2018-02-12T09:27:26,0.0
48836908,5099097.0,<azure><microservices><azure-logic-apps>,azure logic app http communication microservice,logic app consider microservice http api call logic apps http function apim connector violation direct http communication microservice,1,332,0,0.0,1,2018-02-17T00:59:14,0.0
48671754,1090265.0,<ruby><error-handling><microservices><grpc>,return error grpc service,simple grpc service ruby condition return error client control fashion http status code error message clear documentation correct,1,341,0,0.0,1,2018-02-07T19:24:35,0.0
48663545,1632961.0,<docker><architecture><docker-compose><containers><microservices>,implement microservice architecture docker compose,work web application require microservice url short mailer analytic service implement rest api talk service docker compose yml file container nginx php mysql … work single system don expose rest api docker network question combine multiple docker compose yml file service work big docker compose yml file define service network base service container ubuntu base install php mysql nginx dockerfile docker compose yml shared network misunderstood implement microservice docker,1,628,0,0.0,1,2018-02-07T12:14:30,0.0
48788264,1210757.0,<architecture><microservices>,microservice call multiple function custom client specific function,microservice expose grpc function grpc function datum table single record parameter record client backend datum management system build report require datum multiple service function obvious thought microservice client multiple service call combine datum requirement pro client microservice independent con multiple grpc call consider record record feel monolithic architecture record grpc call alternative create grpc function combine datum service pro grpc call con client microservice dependent kind defeat purpose microservice biased approach confirm scenario,1,148,0,1.0,1,2018-02-14T13:20:52,0.0
48760583,3049524.0,<java><microservices><access-token><spring-cloud>,refresh request token microservice multiple instance,scenario request token expire multiple request happen service instance request request token remote http call time request token request token invalid request token previous invalid service generate request token third party change question application architecture microservice base service multiple instance reuse request token service store external redis option service start sure refresh token request send third party service request token expire renew tech stack java springcloud redis rancher mysql,1,581,3,0.0,1,2018-02-13T06:18:32,0.0
48743223,2861312.0,<domain-driven-design><microservices>,share domain model class aggregate microservice,base limited knowledge microservice design bound context level aggregate level microservice create aggregate level refer aggregate create microservice share bound context create aggregate multiple time microservice require case aggregate,1,246,3,0.0,1,2018-02-12T09:34:50,0.0
36681094,1669106.0,<microservices><intrusion-detection>,setup intrusion detection system micro service,good architecture configure ids micro service thing mind instantly follow configure entry point micro services configure separate ids micro service pro con follow method anyother thing consider,1,129,0,0.0,1,2016-04-17T19:20:27,0.0
36660279,3644938.0,<soa><microservices>,microservice group module,develop employee management system follow microservice style architecture initially create erd design master maintenance table department project position question create single service table create single service call master maintenance table help decide advance,1,124,4,1.0,1,2016-04-16T04:55:50,0.0
36716838,306406.0,<architecture><microservices>,microservice architectur layer,discuss architecture microservice environment discussion internally company feedback serious thought orchestration layer code duplication move change api option orchestration layer webapp orchestration service persistance api api gw orchestration service persistance case service allow talk aggregated service orchestration layer option orchestration layer webapp service persistance api api gw service persistance service allow talk aggregated service exist specific question billing belong solution prefer pro con suggestion,1,580,5,1.0,1,2016-04-19T11:18:52,0.0
36285239,710817.0,<design-patterns><asynchronous><architecture><microservices>,acknowledgement client asynchronous microservice,read service service call asynchronous microservice request pass async service client acknowledgement real time scenario develop email send functionality organisation plan api service follow order public api expose email functionality public validation api validate genuineness email field template fetch api fetch email template database cms prepare final content send email send api receive recipient email content problem acknowledge client initiate request successful return error code adapt good practice asynchronous service service call acknowledge client email send api final api,1,511,0,1.0,1,2016-03-29T13:08:53,0.0
42392789,7330994.0,<javascript><store><microservices>,query syntax nanoscale io store,query string access store collection datum nanoscale io read documentation example syntax priority order numeric priority asc doc apart true form query,1,52,0,0.0,1,2017-02-22T13:26:04,0.0
42394690,7583037.0,<c#><azure><rpc><microservices><azure-service-fabric>,service fabric communication rpc metadata,app set request traceid pass stateless service service call service pass traceid service accord pass traceid service rpc,1,420,0,0.0,1,2017-02-22T14:46:23,0.0
42499778,741174.0,<docker><spring-boot><docker-compose><microservices>,spring cloud config docker compose https certificate find,write spring cloud application config service point repository development machine work properly create docker help docker compose virtual machine follow error assume config access https certificate compose image yaml docker ssl certificate,1,193,0,0.0,1,2017-02-28T03:40:37,0.0
42439626,913622.0,<node.js><laravel><rest><api><microservices>,restful api design token auth,design standard compliant restful api resource point verb resource jwt stateless client authentication utilise semantic design auth route endpoint verb workout good auth resource,1,239,0,0.0,1,2017-02-24T13:17:36,0.0
42478361,7627929.0,<jhipster><microservices>,login microservices ui app jhipster,create application microservice create jhipster registry uaaserver microservice call ui app url add entity ui app mongodb database jhipster registry uaaserver microservices uiapp jhipster registry table create mongodb login uiapp uiapp throwing,1,548,4,0.0,1,2017-02-27T05:24:39,0.0
47971020,5539716.0,<go><microservices><grpc>,unary stream benchmark,start play grpc golang microservice application read grpc docs clear example build microservice parse xls json stub thrid party lib parse job receive xls call lib send forward simple good pratice performance reach send row row streaming send parse json,1,587,0,0.0,1,2017-12-25T18:15:23,0.0
48062134,9148537.0,<java><docker><spring-boot><microservices>,connection refuse microservice docker,microservice consume mistake execute url browser work perfectly microservice access microservice mistake kown consume resttemplate code microservice docker,1,3485,2,0.0,1,2018-01-02T13:44:21,0.0
48043523,9156499.0,<microservices><pact><pact-jvm>,pact provider verification public api,test consumer driver contract testing pact jvm generate consumer side contract file provider side verification provide public api localhost example localhost provider help pls,1,455,3,0.0,1,2017-12-31T15:06:54,0.0
48030343,7975356.0,<java><docker><war><microservices><continuous-deployment>,microservice deployment simple jar docker container,deploy set java base microservices confuse simple jar java jar jar java base docker container war offer pro con implementation save lot headache good approach advance,1,1255,3,0.0,1,2017-12-30T02:14:56,0.0
48055121,8049084.0,<java><caching><kotlin><microservices><hazelcast>,reconnect hazelcastclient hazelcastserver server restart,problem hazelcast architecture base microservice springboot keep application application server hazelcast client update application hazelcast server client application cache overturn connection server version server client application reconnect set hazelcastclient pool server reconnect client bean open fun hazelcastinstance hazelcastinstance return val clientconfig clientconfig hazelcastclient newhazelcastclient clientconfig catch exception log error connect hazelcast server server cache null receive hazelcast client hazelcastclientnotactiveexception client shutdown server grateful help,1,1259,0,0.0,1,2018-01-02T02:59:38,0.0
48095718,5568862.0,<spring-boot><kubernetes><microservices><minikube><jaeger>,service dependency find jaeger ui,jaeger face issue find service list jaeger ui yaml configuration prepare jaeger spring boot app kubernetes minikube locally create deployment spring boot app jaeger agent container spring boot app service yaml,1,1015,3,0.0,1,2018-01-04T12:50:20,0.0
37537605,5888829.0,<docker><microservices>,application client tool scale,three micro service image docker advantage micro service scale require case scale scaling service demand,1,32,0,1.0,1,2016-05-31T05:39:41,0.0
37555434,1245668.0,<web-services><architecture><microservices><service-discovery><etcd>,locate service registery standalone lan service discovery pattern,background work project involve standalone lan network number linux pc central window pc write web service example work jersey java linux pc central window pc publish api gateway central pc address port pc address rest service question hand question seperate service discovery work option till easy simple benefit manage database api gateway publish route register deregistering service linux pc service address central windows pc read article service discovery pattern fail find single address exactly service address service registery assume address lan change system work deploy client deploy lan address central station trust define config deploy lot advance assistance,1,69,0,1.0,1,2016-05-31T20:53:55,0.0
37706697,625348.0,<ruby-on-rails><microservices>,microservice sync,application architecture three microservice call authority hold user permission include permission send sms permission update publish event service interested datum listen permission change control send sms main rail app integrate app update permission prevent student receive sms publish event delay queueworker app start send sms update queueworker delay ensure change design ensure user receive sms permission change false,1,82,0,0.0,1,2016-06-08T15:22:35,0.0
37528335,1042646.0,<spring><rest><spring-boot><microservices>,split monolith microservice,exist web service support ordering multiple operation single webservice support ordering function interact multiple service provide ordering capability lot business functionality app support member team monolith assume hard fast rule define monolith plan application deploy cloud foundry environment plan split app microservice enable scale independently api enable search product typically number hit api support actual order submission receive hit product search api large number instance compare order submission api sure split base domain read basis split base call sequence explain earlier read microservice choreograph orchestrate order ensure exist consumer impact expose api layer orchestrate call microservice provide api gateway normal approach follow ensure consumer call multiple microservice provide layer abstraction orchestration choreography hang theoretical aspect understand solution pursue problem statement enterprise,1,967,1,1.0,1,2016-05-30T14:39:57,0.0
37693542,798735.0,<ssl><nginx><cross-domain><dropwizard><microservices>,implement https web face nginx microservice,start develop spa java dropwizard rest backend kinda web development internal web app security big concern nginx public face web server discover slew complication split actual server static web server serve spa file java microservice apache talk tomcat mod jk implement cor dev spa deploy lite server serve port rest api serve dropwizard minimum viable product deploy prod idea cor header dropwizard separately port local process configure nginx route incoming request api port count cross origin serve full http dropwizard serve https update ssl cert multiple microservice read nginx ssl termination enable plain http local http nginx caveat watch deploy architecture,1,215,1,0.0,1,2016-06-08T04:54:18,0.0
57023091,8182381.0,<spring-security><microservices><spring-cloud><gateway>,allow anonymous access endpoint,spring cloud architecture allow anonymous access endpoint code gateway pom xml bootstrap property application property auth service application application propertie bootstrap property dc tool box service application bootstrap property application property property file configuration service auth service gateway dc tool box service order endpoint dc tool box service person signup dossier keep security dossier person signup anonymous access authentication gateway postman access dossier token message access person signup provide property authorization header help thankful,1,60,0,0.0,1,2019-07-13T21:50:43,0.0
57012535,239879.0,<node.js><microservices><zeit-now>,set long running microservice zeit,api endpoint upload file currently set file uploaded kick process handle audio time minute architect framework,1,80,0,0.0,1,2019-07-12T18:45:31,0.0
57097346,5465098.0,<angular><typescript><npm><package><microservices>,angular convert component microservice,create angular app microservice clear tutorial turn component microservice explain packaging process package component microservice package library import project good prepare component consume microservice,1,74,1,2.0,1,2019-07-18T14:50:11,0.0
56964610,4273466.0,<spring-boot><kubernetes><microservices>,access spring boot backend service service kubernetes,kubernetes create simple front application front service reason access service front service simplicity front service create nslookup follow service msgnc travel curl keep waiting response receive behaviour idea issue occur manage workaround ingress curious access spring boot backend service directly provide deployment yml service yml,1,46,2,0.0,1,2019-07-10T06:32:24,0.0
56923600,4621020.0,<java><rest><spring-boot><design-patterns><microservices>,monitor rest endpoint long running job,api feature series endpoint preform long job job hour complete course keep client wait hour return response good solution handle case idea unsure worthwhile solution thing production base app implement cancel job update monitor progress job current setup work follow api receive request start long job entry job info store db job status set pende job info place rabbit mq message send rabbitmq producer job retune client initiate api call accept status rabbitmq consumer receive message job info call class responsible execute long running job job status update progress client check status job endpoint accept job return current status info approach work scalable concern insight help address kill job expose endpoint good accomplish thing persist thread job info step service update status progress process hit cancel job endpoint job kill associate thread viable solution well handle implement update strategy allow quantify progress job progress pende front percentage job complete front desktop app eventually info support progress bar concern performance constantly write job table time progress incremente constantly read table endpoint check status hit client second well solution handle base info difference job process time admin portal people access feature specific job type progress type win allow complete cancel fail,1,132,3,0.0,1,2019-07-07T15:34:45,0.0
57011456,6252399.0,<java><hibernate><spring-security><oauth-2.0><microservices>,manage security context multiple microservice,develop system rely multiple microservice provide analytic microservice manage authorization oauth resource owner password credential goal audit create update entity embed column sure token send request ambassador gateway authenticate request kinky wrong opinion method token attach request send request authentication server user email role pass parameter service turn set column intercept kind context pull user info automatically spring call authentication service,1,152,7,0.0,1,2019-07-12T17:18:16,0.0
45721143,8473966.0,<java><spring-boot><swagger><microservices><springfox>,api segmentation swagger,question regard microservice architecture app swagger app generate jhipster backend app lot endpoint load endpoint swagger impossible gateway app stuck idea kind endpoint group swagger filter api item dropdown list gateway app open swagger ui item default api doc service service api docs item click second item complete gateway app stick load endpoint multiple dropdown item item service service api docs follow tutorial gateway app gatewayswaggerresourceprovider main class gateway microservice app backend app main class docket bean filter endpoint specific package restart application swagger initial item dropdown list multiple item endpoint group lose plenty time good help,1,344,0,1.0,1,2017-08-16T19:03:39,0.0
45630225,3768028.0,<google-bigquery><kubernetes><spring-batch><microservices><google-cloud-dataflow>,etl google cloud dataflow spring batch bigquery,consider bigquery data warehouse requirement datum google cloud cloud sql bigtable expose rest api retrieve datum retrieve datum api etl load datum bigquery evaluate option etl daily frequency job hourly datum java spring batch create microservice kubernete deployment environment scale cloud dataflow etl bigquery batch insert api initial load stream insert api incremental load datum source load bigquery denormalize schema opinion,1,739,0,0.0,1,2017-08-11T08:17:25,0.0
45597395,8286947.0,<web-services><amazon-web-services><microservices><spring-ws><go-restful>,decide pick micro service add exist micro service business feature request,understand well micro service checklist help decide feature build micro service combine exist micro service application,1,30,1,1.0,1,2017-08-09T17:44:10,0.0
45791262,3248096.0,<docker><development-environment><microservices><orchestration>,orchestrate multiple microservice local env,moment speak bunch service container repo code docker file docker compose file order bring service local dev machine fine access service map exposed port problem service augment well idea local private network service container ip address well approach orchestrate container locally start mind,1,948,6,0.0,1,2017-08-21T07:14:59,0.0
41983447,227705.0,<api><amazon-web-services><microservices><rate-limiting>,implement rate limit public facing api deploy aw,public api deploy aw develop tech stack introduce rate limit base ip access key api service generic op effort introduce service path exist service require effort configure api gateway consider follow easy sure add route require effort keep sync service good maintain approach well tool suggestion,1,570,1,1.0,1,2017-02-01T15:25:58,0.0
42046797,5420432.0,<oop><microservices>,microservice refactore monolith marketplace database,microservice struggle wrap brain surface sound good idea practical standpoint break centralized database background example real marketplace example figure microservice help hurt site work well po private product fragile slow major refactor good time implement microservice feel system type coupling deconstruct example instructive current state marketplace user belong company buy product currently exist monolithic database user company catalog product order simplification actual scenario complicated user role order header detail product inventory user belong company company catalog product company order product company good break app microservice major entity boundary requirement architectural aspiration product owner feature case private product product public private company send time bind invitation product catalog user company seemingly simple request suddenly complicated case user display list product example list search product simple case product list search top query system simple case messy user public product easy user company private product horrible user product company order privacy uh product user company order history user private product active invitation uh product user product catalog invitation time dependent initial monolithic approach solve database level sql join basically table master data table transaction well lot slow dbms design big join appropriate tool start work optimize query reason system feel fragile initial design thought ultimately question consider microservice architecture potential direction start datum redundancy translate major entity service list product datum redundancy service call big slow mess start idea carve product catalog microservice catalog collection product belong call thing product service service api manage product catalog importantly search list separate service perform product search require lot redundant datum subscribe event affect product privacy listen order keep summary relationship purchase product purchase company listen invitation maintain list active user product time relationship listen user company event maintain user company relationship worry keep synchronize product service large current schema replicate microservice work situation melodramatic schema simple managable faster worth approach properly microservice base design intend push direction,1,205,3,0.0,1,2017-02-04T23:20:58,0.0
38698109,2804324.0,<wso2is><wso2carbon><microservices><msf4j>,add microservice wso identity server component,microservice independently stuff talk separately wso identity server add microservice identity server kind extend identity server include capability microservice start wso identity server care requirement microservice create msf create osgi bundle follow link create bundle place repository component dropin folder wso identity server follow link place bundle start identity server dosgiconsole mode hope work fine type ss bundle dint return console microservice independently msf meaningful assume achieve port service access expose resource help greatly appreciate,1,91,0,0.0,1,2016-08-01T11:49:18,0.0
38790603,678853.0,<microservices>,microservice resource discovery,lot article discuss maintain central registry system base microservice strategy registering perform discovery article center discover microservice microservice require access resource network database service retrieve database location registry database example sense create connection pool thought edit example database microservice,1,169,0,0.0,1,2016-08-05T13:32:22,0.0
38812779,6687603.0,<database><database-design><cassandra><network-programming><microservices>,database design microservice,build web application base microservice architecture microservice responsible manage task relate specific module local database microservice module example customer module microservice microservice local database persist customer datum order module wise local database persist order record manage datum persistance event drive architecture database implementation cassandra open suggestion,1,645,1,0.0,1,2016-08-07T09:32:08,0.0
54897282,2809427.0,<apache-kafka><microservices>,kafka topic filter ephemeral topic microservice request reply pattern,implement request reply pattern kafka work service unnamed client send message service client expect reply client interact single service consumer group service strategy filter message thought topic service helloworld service consume helloworld topic produce reply helloworld reply topic client consume reply topic filter unique message reply relevant drawback create unnecessary work client filter large amount irrelevant message client interact service strategy ephemeral topic second idea create unique client send message client consume unique topic clientid service send topic reply client filter irrelevant message drawback client short lifespan single script create topic delete afterward extra process purge unused client topic client die processing well idea,1,194,0,1.0,1,2019-02-27T02:53:02,0.0
54965396,541657.0,<amazon-web-services><architecture><microservices><3-tier>,difference monolithic architecture tier architecture,application package single ear file deploy websphere inside package code organize ui file business logic file database file monolithic application tier architecture difference,1,246,0,0.0,1,2019-03-03T03:51:43,0.0
55002448,1266073.0,<microservices>,microserivce database level,hat standard pattern orchestrate microservice microservice domain flow datum require multiple service interact manner invoicing shipment sake argument order ship invoice create press button gui classic monolith service architecture esb handle shipment service knowledge invoice service call people deal brave micro service consider highly opinion base concrete side micro service suppose definition opinion base shoot,1,34,1,0.0,1,2019-03-05T12:04:18,0.0
55035575,1040006.0,<amazon-web-services><amazon-ec2><microservices><scale><api-gateway>,api gateway connection slow micro service,api gateway connect multiple service traffic pattern unique time surge traffic req min access content start slow gateway start socket connection connect connect service user access service long tail critical business unable access socket thing — scale api gateway fine temporary hard predict surge traffic increase cost increase socket maxe setting server optimisation architectural change sure system respond well update stack node js,1,48,1,0.0,1,2019-03-07T03:24:18,0.0
55057491,9703849.0,<java><grails><microservices><micronaut>,configuration multiple microservice single micronaut project,convert multiple backend service grail microservice single micronaut project microserservice port simultaneously configuration achieve scenario,1,270,4,0.0,1,2019-03-08T05:56:38,0.0
57646951,11974611.0,<microservices>,resttemplate getforentity method error,resttemplate getforentity method invoke microservice port port error postman post corp firt method getcase call getjudgement method microservice throw null error,1,25,0,0.0,1,2019-08-25T14:33:24,0.0
57658434,7339571.0,<database-design><architecture><microservices>,micro services architecture common datum model,exprience microservice architecture create simple project collect persist datum dynamic source web crawler stock price aggregate calculate base datum display web separate multiple project service example docker code collect persiste datum rest server api display aggregate query base datum collect ui framework display datum rest api problem discuss share model code base entire thing seperate three project jars testapp testapi testui testapp persist datum testapi testapp dependency testapi sort common dependency handle three project three jar project,1,30,0,0.0,1,2019-08-26T13:01:54,0.0
57635187,8518863.0,<google-app-engine><google-cloud-platform><microservices>,simple example microservice project,learn develop gae app microservice pattern python standard environment blackbox imagine component app service understanding service represent business component app conceptually bit blur example build todo app divide service area understand service communicate accord documentation service call http request request library request aspect implement microservice understand request basic code example full microservice app,1,54,0,0.0,1,2019-08-24T04:47:25,0.0
57621106,10256891.0,<spring><spring-security><microservices>,current authenticate user microservice,create project microservice architecture spring zuul centralized security management microservice access current authenticate user zuul code user microservice extract token jwt header request extract user info claim find method annoying pretty method add dependency spring security microservice time execute request zuul authentication unauthorized error message despite disable security autoconfiguration microservice suggestion,1,75,0,0.0,1,2019-08-23T06:45:55,0.0
57717431,3690467.0,<authentication><microservices><api-gateway><kong>,kong api gateway setup authentication flow,experience api gateway setup kong auth mechanism user detail add kong admin api setup complex authentication flow kong user register custom business code validate user email send confirmation microservice talk admin api ui simply talk microservice turn add user admin api path,1,83,0,0.0,1,2019-08-29T20:33:40,0.0
57666833,4534.0,<amazon-web-services><architecture><microservices>,handle order microservice message,adopt aws power microservice architecture sort payload enter system uuid type mysql lambda async database problem notice message order imagine scenario follow type message deassign role assign role actual intention quick toggle assign role deassign role user wrong elevated permission cursory example answer sequence number introduce sequence number hard type message sequence number require syncronous counter great pain simply asynchronous bear mind system generate message sql trigger ultimately simple solution,1,67,4,1.0,1,2019-08-27T02:00:00,0.0
57639364,927215.0,<c#><microservices><ravendb>,unable connect ravendb cloud microservice aws lambda,problem statement connect ravendb cloud service aws lambda function poc fail connect background client certificate pfx file throw error exactly certificate assign certificate convert certificate byte pass certificate full access database include error code exception detail,1,64,8,0.0,1,2019-08-24T15:40:43,0.0
47324184,1645230.0,<php><oauth-2.0><authorization><microservices><kong>,add api oauth top kong,add api top kong oauth authorization plugin kong step follow create api add oauth plugin create consumer create application client client secret provision key step wonder create oauth server kong configure call endpoint build api laravel,1,1694,0,0.0,1,2017-11-16T07:47:32,0.0
47324935,8735568.0,<microservices><spring-cloud><netflix-eureka>,register spring cloud microservice eureka server,create spring cloud microservice include eureka server zuul spring cloud tool create module spring boot project register service eureka server create spring boot project add zuul service discovery register eureka project doubt add module spring boot project register application current eureka server client type relation eureka server project microservice register microservice eureka server client,1,195,0,0.0,1,2017-11-16T08:32:51,0.0
47456945,466521.0,<apache-kafka><microservices><netflix-zuul>,microservice consume kafka event zuul,microservice architecture create microservice netflix oss architecture thing describe microservice zuul reverse proxy consume event kafka event team sure good idea expose microservice suppose abstract zuul wall zuul consume event stream kafka push microservice stream zuul microservice,1,503,0,0.0,1,2017-11-23T13:41:45,0.0
47282162,4074186.0,<cloud><microservices><soa><pivotal-cloud-foundry><api-gateway>,api gateway microservice presentation layer,work microservice architecture api gateway pattern secure service good presentation layer orchestration layer monolith ror application suppose orchestrate microservice user functionality deploy company enterprise paas platform question presentation layer fall beneath api gateway pro con approach,1,192,1,0.0,1,2017-11-14T09:35:37,0.0
47335455,117700.0,<c#><.net><visual-studio-2017><microservices><azure-service-fabric>,sf project applicationmanif configuration,service fabric application set enable class library applicationmanif xml configuration file sf project allow project appmanifest build deployment simply create project add service fabric project applicationmanif service fabric project appmanifest include parameter setting xml servicemanif sf project,1,75,2,1.0,1,2017-11-16T17:10:04,0.0
47366889,0.0,<elasticsearch><google-cloud-datastore><microservices>,sync google cloud datastore elasticsearch,google cloud datastore single point truth datum dedicated service read filter searching purpose create elasticsearch base service wonder simple library keep es sync datastore simply write bridge handle event fetch datum ds es handle deleting create update specific record event avoid complete syncing service instance,1,597,2,0.0,1,2017-11-18T13:57:40,0.0
47343439,1372978.0,<spring-boot><microservices><spring-cloud><netflix-eureka><zipkin>,microservice locate zipkin service discovery server,mircroservice environment base spring boot zipkin server discovery server eureka config server rest microservice send log zipkin server microservice require resolve zipkin server discovery server follow zipkin configuration rest microservice application property pull config server mtd zipkin server zipkin server discovery server discovery server dashboard resolve zipkin discovery server connect directly spring zipkin baseurl exception provide exact zipkin url property spring zipkin baseurl rest microservice connect zipkin server goal read zipkin server location discovery srever wrong add zipkin enable annotation spring boot rest microservice,1,1676,2,0.0,1,2017-11-17T04:44:23,0.0
47228231,1712880.0,<java><php><microservices><spring-cloud><spring-cloud-netflix>,spring cloud eureka jvm language php discover service eureka rest endpoint,spring eureka discovery server application implement microservice architecture service create php register start eureka rest endpoint send heartbeat second work well imagine service talk service discovery happen currently service send request endpoint retrieve list current instance service choose approach load balance implement service instance time choose randomly help greatly appreciate update,1,1012,2,2.0,1,2017-11-10T17:31:52,0.0
47309649,5772498.0,<java><microservices><grizzly>,microservice path api api,build microserive plan publish service uri convention uris vx api swap opinion approach well reason second approach,1,140,4,0.0,1,2017-11-15T14:12:46,0.0
55646845,7937702.0,<architecture><microservices>,analytics api microservice integrate exist api,hosted portfolio service sort api cakephp mysql separate frontend application javascript connect api call content api pretty monolithic deal authentication store retrieve content send email basically server side small team service small user currently single amazon ec instance scale future build analytic system comprise front fancy graph api store event provide datum aforementioned graph dilemma struggle create separate analytic api integrate functionality exist content api read advantage microservice analytic distinct feature inclined deserve api datum deal crazy talk gbs tbs analytic data pretty structured event type datetime user content sort stuff search text string lead relational database suited elasticsearch mysql inclined mysql analytic well cakephp inclined cakephp analytic api well open lightweight php framework mention analytic api store event pageview datum content api usernames filenames authentication handle content api analytic frontend request analytic api analytic api multiple request content api reply authenticate user gather datum analytic graphs advantage microservice mention work independently add change functionality move platform scalability scale microservice scale microservice require datum microservice case situation advantage negate change endpoint content api endpoint analytic api unittest cover usage analytic api grow scale analytic infra content api hit wonder monolithic approach sense situation benefit microservice approach,1,34,0,0.0,1,2019-04-12T07:48:57,0.0
55622796,4338327.0,<kubernetes><routing><microservices><istio>,istio version base routing,istio route microservice cluster example follow application frontend contact backend frontend contact backend create require istio config response route option attempt setup routing rule traffic label app frontend version route backend subset error example current virtualservice eventually control version frontend versioned subset backend iterate microservice independently istio return error remove sourcelabel match access backend service frontend pod tia,1,69,0,0.0,1,2019-04-10T23:49:21,0.0
55570947,6478628.0,<java><node.js><microservices><jhipster><jhipster-registry>,install jhipster registry error implementation jaxb api find module path classpath,install jhipster registry instal java node yeoman yarn window build tool comand mvnw application error reinstall webpack error,1,137,0,0.0,1,2019-04-08T10:07:55,0.0
55527240,5745183.0,<microservices><amazon-ecs><netflix><netflix-conductor>,netflix conductor orchestration aw ecs,currently work approach work collaboration multiple microservice provide solution dataflow example service deploy ecs alb front stitch workflow system help follow plan route dns service service discovery conductor eureka client service discovery swap dns base implementation eureka conductor deploy docker image ecs cluster create internal ecs cluster deploy ec server documentation help maintain docker image create,1,155,0,1.0,1,2019-04-05T01:56:33,0.0
55593939,2401844.0,<java><spring><orm><dependencies><microservices>,microservice map entity share datum multiple application,cenario multiple application care datum business couple access application datum basically database dependency strategy share entity application mapping view create dependency hell microservice help cenario access multiples url well strategy database join entitya mapping dependency entityb microservice strategy call apirest resourcea apirest restourcea resourceb better faster select entitya inner join entityb decouple data betweeen application application point access datum material article tecnologie indication,1,58,1,1.0,1,2019-04-09T13:20:35,0.0
55506381,1989579.0,<kubernetes><microservices><grafana><istio><jaeger>,istio metric,test istio collection metric work correctly find problem follow verify step problem access prometheus log request hand access jaeger service istio grafana strange behavior graph datum,1,150,1,0.0,1,2019-04-04T01:00:59,0.0
55578335,4069293.0,<mysql><node.js><connection><microservices><connection-pooling>,mysql connection pooling work node microservice,node microservice talk common mysql database microservice code create connection pool connectionlimit follow initialize pool mysql database max connection set variable max connection return pool connectionlimit set microservice case scenario number connection microservice node service maintain connection expect instance microservice pool connectionlimit work limit connection instance microservice microservice api database transaction connect database connection function implementation mysql createpool happen api call concurrently number request second number connection mysql pool create connectionlimit,1,168,1,0.0,1,2019-04-08T17:01:54,0.0
55659774,5043145.0,<spring-boot><spring-mvc><java-8><microservices>,pass parameter spring boot microservice display url,multiple spring boot microservice communicate wihin modelandview redirect url redirection pass modelmap parameter issue modelmap content visible url good pass display url redirectattribute flashattribute face issue best practice scenario,1,63,2,0.0,1,2019-04-12T21:39:44,0.0
55569202,11327890.0,<java><microservices><micrometer><spring-micrometer>,disable enable micrometer metric microservice,disable enable micrometer metric restart microservice expose endpoint change metric application collect,1,135,2,0.0,1,2019-04-08T08:32:43,0.0
48841121,5900555.0,<microservices><dcos>,microservice dcos,decide move microservice architecture divide project multiple service service dcos good story project deployment maintenance development process complex developer easy application locally implementation progress project divide multiple service dcos require good configuration test application developer middle implementation nightmare guy dcos microservice process follow internal development,1,38,0,0.0,1,2018-02-17T12:10:36,0.0
48983199,2320335.0,<spring-boot><performance-testing><microservices><jhipster-registry>,mock dependent microservice test performance microservice,work set environment test performance microservice microservice dependency micro service microservice register jhipster registry rippon client communicate microservice mock dependent micro service hit real microservice,1,315,0,1.0,1,2018-02-26T07:13:55,0.0
48959272,7595191.0,<azure-devops><microservices><sharing><endpoint><projects>,vst workflow microservice share service endpoint,vst deploy azure container service ak kubernete build collection microservice share application time kubernetes instance manage service orchestration confusion vst fact state microservice project vst project change update kubernetes ingress nginx service project feel well define term overlap ci cd task single project set duplicate service endpoint kubernete mention private github repos intent vst feature workflow avoid redundancy deployment pool group case create team share project avail,1,143,0,1.0,1,2018-02-24T04:09:18,0.0
48979234,2595859.0,<spring-boot><microservices><orchestration><mule-esb>,orchestrate microservice,triye migrate soa architecture mule esb microservices spring boot stack face problem relate large flow orchestation basically flow user input response compound user account creditcards data stock loan flow splitter allow send concurrent request send request account backend credicard partner stock partner loan partner agregattor wait response merge finally node prepare response apply business logic migration develop account microservice loan microservice stock microservie creditcard microservice partner problem orchestation event model approach response point consider choreography approach add logic relate ot orchestrate call microservice stepback heavy coupled service connection microservice orchestrator good solution microservice concept note front orchestration closed product touch advance,1,945,0,0.0,1,2018-02-25T22:36:02,0.0
48914388,8808456.0,<node.js><mongodb><web-applications><passport.js><microservices>,separate node js application multiple,stupid build application front node js application instance figure thing service current application front main site front application software backend figure best separate front main auth front app backend app post code example sure long code word ratio git repo public post stack mongo node js express passport js,1,41,1,2.0,1,2018-02-21T19:55:11,0.0
48909754,2508038.0,<rabbitmq><microservices><amqp>,rabbitmq message session stickiness microservice,read session stickiness monolithic application understand feasibility microservice downside session stickiness microservice internet talk hit scale badly instance overload depend design factor application advantage throw light rabbitmq messaging inter microservice communication session stickiness rabbitmq message route work queue header message message session reach queue route client rabbitmq amqp configuration client side implementation publisher publish handshake message route key session payload consumer create queue binding topic publisher publish message route key cleanup point mistake,1,493,1,0.0,1,2018-02-21T15:35:06,0.0
49026803,9373808.0,<api><docker><.net-core><microservices>,create access folder structure net core web api host docker,currently windows docker toolbox visual studio asp net core web api problem create asp net core web api physical path read file perfectly host docker enable support docker build image hit url exception find path change dockerfile,1,347,5,0.0,1,2018-02-28T10:05:25,0.0
43058415,1911755.0,<javascript><node.js><reactjs><webpack><microservices>,load react component inside container app ajax,good practice associate loading insert react component exist react application ajax consider container app load react component ajax work webpack,1,111,0,0.0,1,2017-03-28T00:00:16,0.0
43243883,922581.0,<rest><rabbitmq><microservices><distributed-transactions>,distribute transaction microservice architecture handle timeout fail commit,service large microservice architecture service communicate rest api messaging broker involved rabbitmq service expose rest endpoint communicate party service service architecture create stuff service receive response party good persist datum response database good cover follow issue mind party provide idempotence mechanism creation party side good db write fail service lead inconsistent state create party side datum database receive timeout party repeat call provide idempotence mechanism repeat call created resource problem number solve retry mechanism retry db call number time problem approach service instance repeat db call suddenly presumably well approach service successful creation party side publish rabbitmq message successful creation service listen message db call receive message nice retry mechanism benefit acke message solve issue solution service publisher consumer message well idea solution introduce eventual consistency api caller guy call service endpoint receive response successful creation party side persist service database api client nee timeout problem handle timeout party case well issue call check create call fail repeat succeed marginal case service time issuing call,1,967,2,0.0,1,2017-04-06T00:49:46,0.0
40216232,6287214.0,<java><email><microservices><netflix-feign>,move email service thread,feign connect microservice compose email send email client service email compose controller microservice send email api call time email process send work receive email sockettimeoutexception problem client wait long email service send mail move method sendmail thread order solve problem,1,83,0,0.0,1,2016-10-24T10:33:22,0.0
40201069,6357470.0,<ruby-on-rails><mongodb><docker><docker-compose><microservices>,connect mongodb rail container docker compose,error insert model rail console container fine rail connect mongodb dockerfile docker compose yml file content dockerfile,1,1433,3,1.0,1,2016-10-23T08:38:33,0.0
40097751,1017111.0,<java><kubernetes><microservices><devops>,access service instal kubernete,work mac machine instal late kubernete follow dev purpose smooth hope kubernetes provide ip address port number service listen access correct wrong well ip address port wasn access command kubernetes live reason access vm project machine call rest service instal dev env don wait service push production fyi micro service project appericiate feedback,1,160,0,0.0,1,2016-10-18T00:38:00,0.0
59105204,1727166.0,<domain-driven-design><microservices>,aggregate break small aggregate,contract list location list claim business rule claim location contract claim location location add remove rename contract long claim claim aggregate context team split micro service contract service claim service eventual consistency work concurrent user edit claim time select location add remove rename location contract,1,21,0,0.0,1,2019-11-29T12:52:15,0.0
58960908,11985089.0,<azure><microservices><azure-keyvault>,secure resource connection data string microservice azure,microservice access azure resource connection string authentication key requirement azure key vault good store connection resource microservice authenticate order gain access connection good practice approach,1,25,0,0.0,1,2019-11-20T18:15:56,0.0
58949491,12402540.0,<api><wso2><microservices><api-gateway><wso2-mgw>,compose multiple microservice wso api microgateway,wso api microgateway states feature support compose multiple microservice find example case type process api query database odata find query odata api case result transform reformatte,1,27,0,0.0,1,2019-11-20T08:09:37,0.0
59122663,12462633.0,<java><spring><spring-boot><microservices><netflix-eureka>,spring boot netflix eureka custom uri access microservice,good morning create microservice spring boot netflix eureka work perfectly uri question localhost port spring application share grateful follow application property eureka server eureka client server client help,1,14,1,0.0,1,2019-12-01T05:03:57,0.0
59003971,12418905.0,<java><json><spring><spring-boot><microservices>,properly path requestmapping path jsonnodetree,requestmapping tempath location file jsonnodetree work perfectly fine instance path error path timezone object array jsonnode element opinion error integer path app handle resolve tostring luck idea problem,1,48,4,0.0,1,2019-11-23T02:16:51,0.0
59043811,12434516.0,<reactjs><spring><spring-boot><kubernetes><microservices>,react application springboot kubernetes,react application spring boot container kubernetes react application interact backend rest resolve dns rest uri directly service call rest api react application work,1,39,5,0.0,1,2019-11-26T04:34:39,0.0
49990620,2540256.0,<java><domain-driven-design><immutability><microservices><event-sourcing>,ddd design immutability event source good idea,third question ddd event source good practice unrelated ddd good concept class immutable problem head marry event source pattern immutable domain model domainmodel domainmodel rinse repeat event concern implement domain model immutable create lot domain object domain model waste resource upside domain model immutable plan event sourcing,1,66,0,0.0,1,2018-04-23T22:06:57,0.0
49901574,5446671.0,<maven><docker><spring-boot><microservices><maven-docker-plugin>,docker mvn plugin unix localhost break pipe,implement application spring boot build docker image mvn plugin build mvn clean install error solve problem,1,629,0,0.0,1,2018-04-18T13:55:29,0.0
49817769,2766417.0,<rest><architecture><microservices>,polymorphic microservice,describe trivial example course reality complicated picture api gateway application call list animal animal microservice handle incoming request delegate request microservice animal equate polymorphism launch application dog cat point future ability add rabbit list animal question architecture pattern search learn clean add rabbit microservice client app complete list animal animal microservice communicate dog cat rabbit http message bus,1,231,0,0.0,1,2018-04-13T13:05:50,0.0
49843956,9648836.0,<database><microservices><messaging>,perform database query async microservice,problem concept async microservice assume service subscribe event bus expose api gateway http request translate amqp protocol handle request api gateway rpc single entity search filter game genre game service rpc single entity create separate search service elastic expose endpoint api gateway simple solution problem idea btw correct translate http request api gateway amqp message,1,115,1,0.0,1,2018-04-15T16:01:52,0.0
37389481,851749.0,<api><microservices><devops><infrastructure>,connect internal api,software define timeframe request endpoint system provide output deal internal endpoint party saas option thing configurable preferably http api request endpoint feed output configure time frame accept authentication method side preferably support community opensource preferably free extensive internet withe day find saas provide collegue work sure exist find,1,49,0,0.0,1,2016-05-23T11:13:18,0.0
37439039,2964293.0,<messaging><microservices>,microservice message cancel request,head micro service messaging pure rest lot benefit decouple rabbitmq dispatcher thing understand cancel request example request compose call multiple micro service micro service number time expect request reach time example second guess case user time error cancel request flight seconds micro service number respond flow continue user receive error request,1,77,0,0.0,1,2016-05-25T13:42:52,0.0
37289487,839733.0,<spring><spring-mvc><spring-cloud><microservices><netflix-eureka>,spring resolve property multiple resolver,build microservice spring cloud framework service dependency legacy share library import xml file bean configuration problem face import multiple property resolver bring follow code fail resolve resolver fail resolve set resolver resolve property property set default previous resolver chance service registration eureka fail npe,1,198,0,2.0,1,2016-05-18T02:58:39,0.0
51170392,701829.0,<rest><microservices>,correct model summary rest,microservice expose canonical rest api deal resource match play team score add team team return specific team canonical implementation provide resource client application microservice public website display team total number match total number win total loss private website display great loss player receive red card add follow constraint return summary resource computationally expensive summary permissioning accord header http request accept reject request appropriate design api case single endpoint query parameter lead explosion number endpoint return response multiple endpoint internal summary external summary score summary fault summary,1,40,0,0.0,1,2018-07-04T09:32:23,0.0
51285225,4200001.0,<microservices><soa>,user account management distribute system,big distribute multitenant system sort account admin backoffice user account customer account cashier account tenant cashier client tenant account share lifecycle account create grant ressource deny account password reminder application system account specific application example system possibility bridge cms customer management backoffice user account authorize day ldap question search good model authorization service idea create service order manage type account kind soa modularize system idea create service micro service orient thinking opinion search advice feedback approach alternative habve,1,365,0,0.0,1,2018-07-11T12:14:38,0.0
51153850,1517321.0,<microservices><nservicebus>,nservicebus illusion good practice,nservicebus microservice msmq deploy instance service machine scale application improve performance instance powerful machine handle message,1,139,0,1.0,1,2018-07-03T11:47:15,0.0
51249515,1293719.0,<iis><.net-core><windows-services><microservices><soa>,kestrel iis apache ideal runtime host process queue window service microservice,message durability concern moment afraid load web server runtime design long running process invoke remote provider db call transaction ii apache proxye traffic kestrel hosted net core app resource share better efficiently classic iis net app wonder wait volume event buckle resource knee transition queue service,1,143,0,0.0,1,2018-07-09T15:51:49,0.0
51248930,630387.0,<spring-boot><java-ee><web-applications><microservices>,data model share administrations micro service,help understand well develop application micro service architecture structure base functionality micro service block point apart actor administration customer service user specific api question,1,150,0,0.0,1,2018-07-09T15:21:17,0.0
51143213,2750505.0,<microservices><denormalization><consistency>,real solution duplicate datum microservice,suppose microservice message microservice send email service template email sort template engine pugjs replace datum body message user service authentication authorization example bank account service user user microservice bank account microservice clear duplicate datum de user uuid send day message user account statement messaging microservice datum user microservice bank account microservice small case real benefit decoupled microservice follow rule share database microservice synchronous request microservice broker time user create update messaging microservice store datum stupid thing inconsistency datum keep thing sync hard development time complexity messaging microservice consider listen extract relevant data event keep datum consistent domain service manage save datum database messaging microservice store datum parse template read lot microservice people create rule simple example good explanation real example microservice datum duplication,1,170,0,0.0,1,2018-07-02T20:19:15,0.0
51250307,4834394.0,<docker><microservices><netflix-eureka><spring-cloud-netflix><netflix>,remote dockerise spring boot application registration netflix eureka service discovery server host,host netflix eureka service discovery server api gateway host machine dockerize spring boot service host machine register service eureka service discovery server container ip address call service expect service find good practice register remote docker service service discovery server,1,238,0,1.0,1,2018-07-09T16:40:06,0.0
51312346,437123.0,<architecture><microservices>,mix communication method microservice,struggle concept regard microservice communication expect tech specific answer work asp net core web api help answer question scenario resource widget widget update user ui external event message publish bus assumption base article blog work follow assumption microservice datum case microservice widget resource direct update user represent request response communication rest recommend event message connect queue process message bus message consumer better service inside web project host iis question base mention create asp net core project windows service change net core easy contrast create service handle rest call consume bus message assumption well difficult maintain long question assumption valid mix communication method service good idea create service communication type approach ideology microservice node approach node handle message bus well incoming rest call,1,151,2,1.0,1,2018-07-12T18:33:13,0.0
51282761,2726496.0,<spring-boot><google-cloud-platform><microservices><google-kubernetes-engine>,microservice scalable deployment,develop rest api project develop microservice springboot zuul api gateway eureka discovery server project deploy google kubernetes cluster load test rest api call handle request second autoscale kubernetes pod service parameter ram usage cpu usage,1,67,3,0.0,1,2018-07-11T10:09:21,0.0
58094669,4729925.0,<microservices><hystrix><circuit-breaker>,execution timeout enable execution isolation thread timeoutinmillisecond hystrix,project hystrix configuration confused command default execution timeout enable property set false property timeoutinmillisecond understanding time caller observe time execution time set false place point second property understanding correct,1,27,0,0.0,1,2019-09-25T08:52:46,0.0
57947927,303250.0,<tomcat><microservices><tomee><tomee-7><microprofile>,apache tomee maven compilation error microservice,play apache tomee microprofile learn microservice tutorial link find sample link follow error maven package phase understand error message pom xml appreciate help,1,32,0,0.0,1,2019-09-15T20:23:18,0.0
58081792,11984630.0,<java><angular><rest><microservices>,update specific entity row jpa entity manager,help update row entity manager table angular datum send rest service app html carsdto java service java resource java note app html generate jave class price variable good approach update choose entity field database record service java resouce url parameter url updatecar,1,43,0,0.0,1,2019-09-24T13:47:19,0.0
41194679,6549177.0,<architecture><microservices>,micro service perform background task auto scale group,fairly simple micro service read datum mongodb cluster datum transformation expose datum rest api update independent persistence datastore cron job create separate application update dataset easy deploy application exist aws auto scaling group large enterprise lot red tape release application instance update dataset background job locking write db field db workable solution antipattern well create separate application db write,1,108,0,0.0,1,2016-12-17T01:57:38,0.0
51665264,3391234.0,<java><microservices><vert.x>,wise stream file vertx event bus,set service vertx cluster serve web front api gateway service cluster client requirement download datum csv file transmit bellow service event bus api gateway web socket browser question wise stream file event bus service api gateway file large mb,1,261,0,1.0,1,2018-08-03T04:17:44,0.0
51798009,6569404.0,<docker><kubernetes><microservices><minikube><istio>,access service minikube cluster istio,access spring boot service minikube cluster local machine configure minikube cluster build docker image service service simple rest endpoint configure minikube local docker image pull docker image service access service command ping url service ideally response hit response guy,1,390,0,0.0,1,2018-08-11T08:43:30,0.0
51664743,8360221.0,<docker><nginx><kubernetes><ssl-certificate><microservices>,set correct hostname kubernetes nginx client,dockerize microservice architecture kubernetes nginx encounter issue hostname correctly add hostname kubernetes nginx problem microservice call talk microservice call logs error reach response error update hostname kubernetes config yaml file unsuccessfully base add apply update config file kubernete error emerge period period hostname hostname update server nginx config file update goal communicate,1,657,0,1.0,1,2018-08-03T03:05:42,0.0
51737931,8063400.0,<microservices>,micro service decision technology platform,good architecture application multiple technology leverage strong point example encryption python integration service java stick technology java comfortable reason question develop application speed major concern target attain database prefer mongodb suggestion technology apart technology approach help speed application,1,35,1,0.0,1,2018-08-08T02:47:39,0.0
51733070,5081171.0,<spring-boot><microservices><spring-cloud><gateway><netflix-zuul>,handle url pattern zuul filter,type url pattern gateway secure api user getuser gateway nonsecure api user getuser context root zuul gateway application zuul filter implement logic base url pattern write pre filter execute filter url pattern gateway throw access microservice working expect property change context root downstream microservice api user prefix set globally apply specific route achieve advice,1,269,3,0.0,1,2018-08-07T18:14:46,0.0
53310409,9242571.0,<http><nginx><lua><request><microservices>,request multiple nginx host arg,problem request route nginx backend service scenario frontend service log service log request request type servicefrontend product productname servicelogger productid productname create request send request time servicefrontend service trigger help solve problem handle problem post action annotation nginx resource,1,32,0,0.0,1,2018-11-14T23:41:32,0.0
53240057,2903709.0,<python><django><while-loop><microservices>,django microservice loop,django app microservice function follow check filename match json directory file process json datum convert xml save xml target directory exit function reason keep cycle previous developer threading thing complicated optimise performance,1,42,0,0.0,1,2018-11-10T14:44:37,0.0
53335782,1203552.0,<microservices><bounded-contexts>,microservice bound context share datum,microservice architecture concern share datum service master datum system example system business contexts import booking import invoice import booking company validate create company exist import invoice company validate system service import booking import invoice company service company service expose api service crud system service import booking import service crud company implement service,1,58,0,0.0,1,2018-11-16T10:19:43,0.0
53235216,897224.0,<networking><microservices><amazon-vpc><kong>,expose kong admin api internal network,kong gateway vpc aws currently admin api kong gateway restrict localhost traffic allow microservice vpc register route deploy order open machine vpc machine network access pretty network find kong doc clear recommendation,1,73,0,0.0,1,2018-11-10T01:20:38,0.0
53223512,7109010.0,<rest><microservices><identityserver4>,microservice architecture design subscription,opinion design system subscription model microservice architecture standard proper microservice architecture implementation well design,1,338,0,0.0,1,2018-11-09T09:58:05,0.0
53193632,3309246.0,<microservices><keycloak><api-design><api-gateway><kong>,original api api gateway,wonder api endpoint api gateway example follow tutorial keycloak kong api gateway secure api kong endpoint original express server listen user attacker url orignal service kong url port work api question strategy original api secure implement keycloak request api well benefit kong,1,104,0,0.0,1,2018-11-07T16:23:43,0.0
53186727,10602564.0,<rest><api><spring-boot><microservices><ignite>,pass json rest api call apache ignite,datum apahe ignite cache rest api provide ignite pass json datum spring boot application basic work fine pass lot datum json example json json understand purpose tweak answer requirement,1,166,0,1.0,1,2018-11-07T09:34:05,0.0
53361185,1503109.0,<algorithm><pagination><microservices><relation>,query result multiple head,microservice relationship model object relation define primary secondary object cardinality constraint microservice provide api create relation find relation secondary primary query api secondary primary object return secondary object secondary object large result paginate microservice good relation microservice work relation consume service accept pagination option number pass relation service return call application result relation service good identify consume microservice bit chatty relation microservice call secondary api multiple time multiple primary object secondary object fetch secondary api bulk api accept multiple primary object input stuck pagination work api return secondary object primary limit secondary object size earlier fine call unsure behave subsequent call number secondary object size primary object input subsequent call pass primary object suggestion design bulk api input,1,37,1,1.0,1,2018-11-18T13:06:25,0.0
58269790,1379723.0,<microservices><event-sourcing><aerospike><transaction-log><wal>,transaction log aerospilke,lot microservice manage team microservice persist datum aerospike database achieve build microservice rely datum handle service listen change entity microservice message queue usual rest api subscribe event idea listen transaction log event log commit log wal database approach event source system find aerospike api stream log question aerospike provide functionality,1,24,0,0.0,1,2019-10-07T12:42:15,0.0
58299803,1185981.0,<docker><microservices><docker-swarm><netflix-eureka><service-discovery>,service discovery microservice service discovery docker,confused difference docker swarm provide service discovery service microservice architecture microservice container separate service discovery provide api gateway service discovery framework eureka zookeeper add advantage specific service discovery framework provide docker swarm,1,42,0,0.0,1,2019-10-09T08:17:21,0.0
58137531,12131441.0,<docker><nginx><containers><microservices>,nginx unable forward request service container,nginx reverse proxy apigateway microservice architecture problem nginx unable proxy pass running container inside container work network docker compose yml default conf payment service work fine directly access work,1,45,0,0.0,1,2019-09-27T15:32:13,0.0
58304429,5320820.0,<c#><docker><microservices><asp.net-core-2.1>,exception unable load dll gdiplus dll module find,develop service fabric mesh application net core system draw common microsoft dotnet runtime windows container docker file code microsoft dotnet aspnetcore runtime base workdir app expose microsoft dotnet sdk build workdir src copy ms upload ms upload csproj ms upload dotnet restore ms upload ms upload csproj copy workdir src ms upload dotnet build ms upload csproj release app build publish dotnet publish ms upload csproj release app base final workdir app copy publish app entrypoint dotnet ms upload dll unable load dll gdiplus dll module find system drawing safenativemethod gdip gdipcreatebitmapfromstream istream stream intptr bitmap system draw bitmap ctor stream stream boolean useicm system draw bitmap ctor stream stream ms upload userimagemaster uploadallchunkimagelibrary int ipeppyprintid int isourceid string salbumid int ipickuporderid string sfilename int itotalchunk,1,103,0,0.0,1,2019-10-09T12:44:43,0.0
58196118,1373033.0,<amazon-web-services><microservices>,micro service architecute independent server service server,design architecture software process create micro service relate big component create micro service server server good create micro service component server instance create micro service diffrent server good server big component increase cost thought,1,30,3,0.0,1,2019-10-02T06:17:26,0.0
49666398,2726496.0,<docker><spring-boot><microservices><netflix-zuul><netflix-eureka>,eureka register weird ip address request work zuul,develop rest backend microservice architecture springboot eureka discovery service zuul api gateway work fine work localhost deploye service cloud zuul api gateway behave expect service register eureka request api gateway forward require sevice stick api gateway zuul configuration deploy service docker container wrong,1,514,0,0.0,1,2018-04-05T07:20:11,0.0
49573552,7980673.0,<rest><amazon-web-services><microservices><amazon-ecs>,rest communication microservice static ip amazon ecs,host microservice aws pointer achieve terribly lose follow numerous tutorial write pluralsight close case project architecture follow project infrastructure,1,224,0,0.0,1,2018-03-30T11:27:28,0.0
49559239,2429966.0,<spring><rabbitmq><microservices><spring-amqp>,subscribe specific route key rabbitmq,design microservice architecture rabbitmq message broker service specific queue define message kind event message route service service interested specific event intercept create task task message represent job create service publish queue service struggle implement spring amqp design message producer http request create task service restcontroller send method message producer rabbitmq configuration subscribe annotation custom annotation help,1,313,1,0.0,1,2018-03-29T14:56:07,0.0
49580394,3526468.0,<go><tcp><microservices>,send short message tcp socket golang,write service golang send message second message byte throughput mb tcp result slow configure setnodelay false sure data buffer send difference send message second message size matter assume code block test code suggestion,1,1818,2,2.0,1,2018-03-30T19:37:25,0.0
49637598,3258440.0,<spring-boot><microservices><spring-jms><jboss-eap-7><activemq-artemis>,error amq unable validate user spring boot app,follow error connect activemq artemis queue deploy jboss eap code,1,1634,3,0.0,1,2018-04-03T19:16:24,0.0
49610008,7616529.0,<spring-boot><filter><swagger><microservices><swagger-ui>,swagger spring boot microservice,microservice token header microservice implement swagger microservice problem request flow microservice swagger ui throw error local,1,196,5,0.0,1,2018-04-02T11:01:07,0.0
49659871,3254551.0,<java><microservices><hystrix><circuit-breaker>,java circuit breaker request thread,consider netflix oss circuit breaker solution hystrix sound good command thread sense case scenario work request handler require computation call remote service wait response example pseudo code post token token body authresult validate authresult authresult call remote service authz token return authz token remote call hystrix sense execute command separate thread block suggestion hystrix command thread caller,1,652,7,1.0,1,2018-04-04T20:28:50,0.0
47630891,5077196.0,<microservices><access-token><identityserver3><identityserver4>,override service couple identityserver accesstokenvalidation,identityserver validate token send request api receive identityserver accesstokenvalidation startup face case server identityserver shortly multiple second unavailable happen service api api service start identityserver server kind configuration identityserver accesstokenvalidation provide overcome issue,1,75,0,0.0,1,2017-12-04T10:08:36,0.0
58762856,7475937.0,<authentication><authorization><microservices><api-gateway><role-base-authorization>,api gateway authentication service,advantage disadvantage api gateway authorization api jwt token exist api permission header match api gateway match authorization service include overhead,1,29,0,0.0,1,2019-11-08T08:20:53,0.0
58913626,12391083.0,<shell><jenkins><microservices><monorepo>,deploy microservice trigger jenkins pipeline change mono repository consist microservice,single repository consist microservice write node js deploy trigger jenkins pipeline microservice change maintain jenkin file repository explore find resource lead solve problem statement great help famous open source ci cd tool achieve,1,29,0,0.0,1,2019-11-18T11:31:07,0.0
58749813,1165499.0,<java><spring><amazon-web-services><nginx><microservices>,serve static content microservice architecture,build web application microservice architecture decide build top deployment aws docker container image storage rds datum current concern regard serve static content html js microservice popular solution api gateway single point entry serve mentioned file nginx front helpful load balance route service serve static content choose nginx gateway serve fact nginx spring gateway purpose nginx simply gateway understand,1,67,0,0.0,1,2019-11-07T13:29:55,0.0
58833038,2405663.0,<java><maven><microservices>,microserivce maven sql server class find exception,build microservice intellij maven code pom xml build method connect sql server database receive excetption,1,20,1,0.0,1,2019-11-13T08:30:19,0.0
58770235,6456586.0,<maven><webpack><architecture><microservices>,multiple microservice repository,question microservice repository small team people create project microservice expect microservice application project repository microservice structure design recommend well repository app overkill small project team application imagine spring boot spa application angular advice,1,55,3,0.0,1,2019-11-08T16:17:39,0.0
58861152,3760216.0,<go><microservices><opentracing><distributed-tracing>,spancontext find extract carrier microservice,implement base microservice system service span datum service service follow error dump proper service request header set edit eminlala tracer init step,1,60,6,0.0,1,2019-11-14T16:09:52,0.0
58817709,1866300.0,<go><kubernetes><microservices><prometheus>,multiple replicas access cache kubernetes,statistic prometheus logging duration service call measure time multiple call service figure create map string time time entry current time store account … call … total time store work replica break kubernetes cluster call endpoint cache microservice replica access,1,65,7,0.0,1,2019-11-12T11:25:18,0.0
46956866,8838143.0,<authentication><microservices><openiddict>,openiddict authorization authentication microservice,mobile native web app spa talk backend microservice develop core authentication authorization domain relate function configure opendidict app access token struggle microservice accept bearer access token authentication authorization log user central auth service access token generate auth microservice openiddict change microservice rest api mark authorize code auth microservice exist code notification microservice notification controller,1,544,0,0.0,1,2017-10-26T14:22:22,0.0
46822414,56050.0,<microservices><ignite>,apache ignite service start second node,basic service start jetty server respond request repo ignite configuration file service jar scala library jar libs work expect start second identical node computer delay second startup start service exception restart original node node problem occur output single node second node wrong,1,179,0,0.0,1,2017-10-19T03:29:47,0.0
46892720,1920999.0,<domain-driven-design><microservices>,query language ddd repository,currently work split monolith rest api microservice introduce currently learn big concern moment implement domain ubiquitous language define entity social medium profile twitter profile extract separate microservice query profile introduce microservice include api gateway search pattern design repository meet search pattern create method query introduce sort dynamic query language monolith architecture create multiple repository case microservice architecture change microservice responsible time microservice query,1,259,1,0.0,1,2017-10-23T15:08:37,0.0
46804482,1826788.0,<architecture><microservices>,microservice architecture diagram,develop micro service architecture spring boot architecture service instance haproxy load balancer application jenkins grafana interface view node work green work red dependency node view complete architecture understand architecture,1,435,1,0.0,1,2017-10-18T07:04:19,0.0
46871609,6423036.0,<rabbitmq><messaging><microservices><pika><python-pika>,pika rabbitmq client service consume publish message,pika experience quick response follow functionality thinking indicate lack conceptual understanding pika desire functionality python service single thread script connection rabbitmq broker selectconnection adapter connection channel channel service declare queue bind exchange channel declare exchange service consume message queue small processing message carry crud operate connection mongodb instance publish message exchange read pika doc thoroughly find understand doable simply single python script publish consume selectconnection adapter connection,1,339,2,0.0,1,2017-10-22T07:34:51,0.0
46782161,8024812.0,<amazon-web-services><microservices><user-preferences>,user preference microservice architecture,team implement product base microservice architecture microservice data storage couple service deploy aw add ability save user preference saved filter query data ui widget setting columns order follow option implement saving user preference case extend user profile store company user role service add item create microservice keep user preference aws service check good security aws cognito saml idp jwt token user profile microservice mention earlier datum receive product admin service good option case,1,443,4,0.0,1,2017-10-17T03:49:05,0.0
50734807,6792646.0,<node.js><express><mongoose><microservices>,share mongoose model multiple microservice,user model share model multiple microservice share database service expose http manually model server,1,522,0,0.0,1,2018-06-07T07:00:10,0.0
50887887,2810311.0,<api><jwt><microservices><kong><api-gateway>,api authentication jwt token validation kong,plan kong project currently work poc integrate platform main api gateway jwt plugin authentication authorisation api call kong gateway authenticate authentication validate api client kong gateway api clear mind api kong fit imagine scenario client call directly api token bypass gateway api kong validate token kong authenticate api client example authentication client document authentication api protect kong,1,786,0,0.0,1,2018-06-16T12:24:49,0.0
50686734,5123722.0,<microservices><circuit-breaker>,microservice circuit breaker discovery service pattern,microservice doubt google help microservice independent counterpart offline keep work mind understand circuit breaker service discovery call microservice circuit breaker circuit breaker service server offline application doom importantly circuit breaker microservice well,1,71,0,0.0,1,2018-06-04T18:31:10,0.0
50873541,346629.0,<json><microservices><jsend>,jsend wrap json ajax response standard standard,set json http service response meta datum success failure http header json nice meta datum high client code consume http response object emerge standard aware jsend widepsread adoption jsend nutshell,1,177,0,1.0,1,2018-06-15T10:15:52,0.0
50783648,3398989.0,<spring-boot><microservices><netflix-eureka><spring-cloud-netflix>,spring sidecar application fail discover eureka server,order integrate jvm application microservice base application implmentation netflix concept example learn include official sidecar application discover server error throw application main class sidecar application dependency include appreciate pointer thing wrong,1,197,0,0.0,1,2018-06-10T12:24:33,0.0
50678338,2345933.0,<microservices><netflix-zuul><api-gateway>,define api gateway urls split monolith microservice,split monolith application microservice gradual process initially start microservice split monoligh expose rest api provide method manage ten entity user user type role role type consumer rest api expose monolith javascript frontend app currently investigate possibility configure api gateway zuul urls microservice serve serve url change time create microservice everytime consumer frontend change url base entity disadvantage zuul configuration explicit configuration single entity manage system approach correct,1,95,1,0.0,1,2018-06-04T10:20:36,0.0
50849415,2469871.0,<spring><rest><microservices><aws-api-gateway><api-versioning>,good microservice rest api versioning,develop project spring host aws ec instance requirement change api contract break current client implement rest api versione update endpoint consumer application crash confused api versione create version endpoint server spring requestmape api requestmape api wise completely api server instance keep api endpoint footprint aw apigateway proxy configure versioning route server server depend version number request approach lead lot code duplication code management messy keep functionality variation second approach keep set instance bot version version increase hard manage instance specially micro service instance cost effective company startup consider fact good practice regard api versione manage multiple version endpoint open suggestion guideline multiple server solution open reconsider cost limitation good solution problem,1,1946,3,0.0,1,2018-06-14T04:00:55,0.0
50759872,937440.0,<c#><domain-driven-design><microservices>,ignore guidance avoid validation command object,cqrs read validation logic command object example link command link business object link note change parameter pass customer constructor class interface case command store class library business object command share multiple microservice type project follow guidance validation command developer pass command validation domain object case domain object control pass guidance find validation domain object command separate class library domain object understand correctly question relevant pass event customer domain object event sourcing,1,150,12,0.0,1,2018-06-08T11:41:08,0.0
52529347,8024812.0,<azure><asynchronous><microservices><synchronous><gateway>,api gateway convert synchronous call asyncronous,service integrate minimum change system system provide send command azure service bus queue command process send event azure service bus topic process command system send initial command second service third party synchronous call message broker technical limitation integrate second service sense provide api gateway convert synchronous call asynchronous spring boot spring cloud java azure azure service bus find library framework convert synchronous call asynchronous custom solution api gateway provide rest api second service second service call gateway send command azure service bus queue sort wait mechanism implement gateway side gateway keep second service connection open keep wait till moment event second service receive pick event build response synchronous call party system pretty sure face case timeout synchronous call receive event service deal case rollback command process service sort compensation diagram concept recommendation well library pattern help implement solution understand synchronous conversion asynchronous unnatural web hook call urls send response caller command process third party service provide api link conversion sync async call sync wrapper,1,336,0,0.0,1,2018-09-27T04:13:14,0.0
52550644,5238035.0,<curl><microservices><zipkin>,zipkin version,curl late zipkin version curl currently version local environment version comparison currently zipkin version relate late walk issue raise github find solution,1,115,0,0.0,1,2018-09-28T07:43:11,0.0
52658319,9379063.0,<mongodb><express><microservices><api-gateway><express-gateway>,express gateway save response result database,question express gateway route express gateway hit postman follow response question store response mongodb mysql,1,125,0,0.0,1,2018-10-05T04:21:52,0.0
52520782,7215872.0,<gradle><microservices><devops>,maintain file exist multiple repository,gradle property exist microservice repo devop change property microservice commit change push deal maintenance nightmare note field gradle property configuration inside application property yaml centralize config server,1,49,1,1.0,1,2018-09-26T14:59:30,0.0
52642825,6158542.0,<microservices><amazon-rds><aurora>,aw rds read replica specific table database,question sum basically external aw mysql database gb table gb database import rds mysql team copy microservice db table gb optimal solution read replica column table constant sync master table aurora mysql reason speed cost google find helpful experience,1,163,1,1.0,1,2018-10-04T08:57:57,0.0
52691596,10432265.0,<microservices><soa>,microservice datum access layer developer maintenance,add updatedatetime column sql database entry change microservice architecture service access table include updatedate api microservice share dataaccess layer letter method development easy inquire developer maintenance associate microservice application interact table wrong table column add modify code app location oppose location service orient architecture,1,294,4,0.0,1,2018-10-07T18:29:28,0.0
52705424,8265437.0,<maven><microservices><jhipster><api-gateway>,jhipster webpack failure jhipster maven microservice gateway application dev environment,generate sample microservice application microservice gateway application jhipster application build maven jhipster registry identification route build micro service application reach assign localhost port build issue build mvnw gateway application build properly gradle application api issue maven org springframework boot spring boot maven plugin running windows machine late version jhipster debug classpath pass jvm argument long system variable properly set,1,205,10,0.0,1,2018-10-08T15:20:45,0.0
45998405,6602247.0,<soa><esb><microservices>,oracle soa msa,advicible build msa base service oracle soa esb suite matter advantage disadvantage java spring jpa message queue rabbitmq achieve controlled environment recur expense course mix tool drool jbpm achieve thing ootb box soa esb suite scale specific service pay licence fee additional environment good catch,1,109,0,1.0,1,2017-09-01T10:38:32,0.0
46022865,3213045.0,<docker><nginx><.net-core><microservices>,nginx net core kestrel multiple single instance,net core web application micro service web site decide deployment strategy docker understand option follow total container container core app nginx instance total container net core container nginx container total container net core container share nginx container note service add time setup linux future site load high load balancing website multiple server fire multiple instance service stateless question good reason separate nginx instance net app nginx container,1,638,0,0.0,1,2017-09-03T11:13:27,0.0
45866422,4737314.0,<subquery><microservices><cqrs>,cqrs es split monolith microservice database issue,relational database multi table subquery table database easy achieve subquery split table row microservice service database db table service database db table question cqrs es implement data aggregation struggle issue long time search article find answer suggestion appreciate,1,106,1,0.0,1,2017-08-24T16:08:56,0.0
39617171,1675642.0,<asynchronous><spring-cloud><synchronous><microservices><messagebroker>,synchronous public api integrate message base service,read microservice find lot interesting advice jonas bonér reactive microservice architecture download free emphasise asynchronous communication miroservice api external client synchronous rest asynchronous response message send microservice best route wait client obvious record request message send process request copy response message send service public api block process request collect expect response message matching finally send response client well approach framework work routing developer spring cloud streams interesting,1,283,0,0.0,1,2016-09-21T12:54:44,0.0
39668149,428454.0,<design-patterns><microservices><azure-service-fabric>,service fabric actor pattern list thing,conceptually follow object pretend item belong multiple group item identity itemactor stateful actor question groupactor keep itemid force call itemactor loop itemcontract groupactor keep item detail listen item change event keep datum view third viewactor compile datum call itemactor loop listen event keep datum option strike attractive require looping actor call high maintenance item management event guideline reassure general approach scenario,1,356,0,0.0,1,2016-09-23T19:22:41,0.0
39593580,3645827.0,<architecture><domain-driven-design><microservices>,synchronous communication microservice,understand micro service good separate context allow create small model achieve decoupling asynchronous publish subscribe communication micro service micro service charge process request store micro service solve micro service subscribe event micro service copy portion datum datum storage future processing user send request micro service process micro service process late event micro service well synchronous communication request portion datum directly consider violation current design coupling consider wrong modeling datum context context start,1,656,0,1.0,1,2016-09-20T12:02:45,0.0
39696697,5284778.0,<angularjs><microservices>,load html fragment demand angularjs,ton example angularjs route load html script dynamically scenario find assume code load browser understand lot people yell wrong angularjs work stuff stick architecture micro service mashup web ui module load browser fire event functionality module listen event load functionality demand url change routing,1,420,0,0.0,1,2016-09-26T07:09:39,0.0
39604499,432047.0,<asp.net><asp.net-core><microservices>,asp net core project microservice endpoint,docker plunge microservice framework numerous example expose endpoint call weather location exchange rate currency talk replace current window service type application application subscribe queue work example window service day zip file directory directory publish message complete build asp net core console app add startup cs startup cs startup method main lot demos build tiny web response endpoint,1,692,0,0.0,1,2016-09-20T22:09:26,0.0
39788745,374320.0,<c#><amazon-web-services><asp.net-web-api><amazon-sqs><microservices>,messaging amazon sqs web api return create client,start amazon sqs service wonder guide direction case rest web api interface expose client http request send asynchronous message separate service responsible create specific entity database process logic entity create return create entity client update additional call rest api find pattern approach support scenario perfect example amazon sqs general explanation helpful,1,211,2,0.0,1,2016-09-30T09:56:52,0.0
37806128,511837.0,<docker><docker-compose><microservices><docker-swarm><docker-container>,docker compose microservice local production enironment,develop microservice locally push production minimal configurational change microservice locally start practical idea single docker compose service container inside datastore point view well consist components python webapp vote option redis queue collect vote java worker consume vote store … postgre database docker volume node js webapp result voting real time push example production option forget infrastructure component add top kibana prometheus scale swarm question organize example single microservice word component combine single example service single docker compose add overlay network swarm dns feature detail install stuff question top level organization,1,275,0,0.0,1,2016-06-14T07:54:47,0.0
37801454,5658049.0,<go><single-sign-on><cas><microservices><beego>,implement sso front microservice,project implement multiple web application base popular sso project cas server center cas client web application offical cas client write golang support beego workflow cas bit complicated redirection ticket transmit cas web app user browser figure people deploy authentication service center web app front follow diagram diagram request force process authenticate service authenticate generate session save cookie redi share microservice redirection ticket request transmittion diagram critical problem ignore update session sharing scalable modular counsel transmit user email header request auth service downstream service creative work heipei work sso gateway sam newman share book update detailed diagram follow order describe childish idea bit clearly hope misunderstanding heipei sam newman handle redirection handshake request process authentication service firstly write user info mysql redi session provider http header transmit downstream service request authenticate user info transmit http header share redi warning redi depolye auth service share auth instance update cookie session school tech cross domain problem cookie share problem session primary barrier scalability flexibility modern web application fortunately json web token good single sign solution multiple lightweight service nowadays move user info storage server side client side transmit,1,1434,5,1.0,1,2016-06-14T01:10:36,0.0
37727820,2243610.0,<microservices><pact>,consumer drive contract,check consumer contract unit test micro service pact library java integration test junit wonder unit test,1,483,1,0.0,1,2016-06-09T13:47:28,0.0
38460678,5712607.0,<java><jwt><jhipster><microservices>,architecture microservices jhipster,start architecture microservice jhipster doubt piece hr front backend application selection front backend application validation database front customer share hr select front microservice hr select application validate database jwt application share microservicio customer backend front application hr gateway selection gateway implement security database jwt validate customer microservicio english,1,1886,0,0.0,1,2016-07-19T13:57:51,0.0
38435582,310648.0,<node.js><microservices>,share code dependency micro service nodejs,design platform micro service socket server front server expressjs email server send transaccional email project file strutture simple inside folder nodejs project comunicate micro service simple thing inside node module folder npm package duplicate redis dependency duplicate code update package time incorrect approach,1,236,0,0.0,1,2016-07-18T11:29:17,0.0
38466167,4535097.0,<python><google-app-engine><google-cloud-platform><microservices>,microservice google app engine,plan switch single app project multiple app project current ui app base django write code python google example app yaml example app question example call django microservice module call app microservice module current structure app yaml control app,1,811,8,0.0,1,2016-07-19T18:40:32,0.0
43655652,7930700.0,<amazon-web-services><jenkins><ansible><microservices>,aws instance ip address dynamically ansible playbook save external file ansible playbook,cluster cassandra node cluster kafka node cluster ec playbook deploy microservice aws instance microservice playbook maintain inventory file store cassandra kafka host ip adresse variable follow microservice playbook follow code retrieve ip address hardcode inventory file mention code achieve store ip address aws instance dynamically playbook microservice playbook store ip address inventory file suggestion request question question advance output kafka cluster kafka cluster output aws console follow ouput ips kafkalink help follow command work follow ouput command wrong exactly,1,283,0,0.0,1,2017-04-27T10:50:37,0.0
43542042,7683711.0,<logging><docker><microservices><elastic-stack><filebeat>,forward docker gelf log logstash filebeat alternative,gelf message subset json string filebeat alternative lightweight solution forward docker gelf log reliably logstash info cluster docker swarm machine network docker container log driver gelf gelf format field docker add gelf log entry docker send gelf log udp fear loose log entry package lose logstash load logstash logstash host heavyweight,1,472,0,0.0,1,2017-04-21T11:52:07,0.0
43639036,1003808.0,<microservices>,api gateway message broker microservice,question microservice implementation api gateway process request individual service kafka handle asynchronous post delete request good handling handle request microservice architecture,1,889,1,0.0,1,2017-04-26T15:51:22,0.0
43584079,837542.0,<.net><asp.net-web-api><architecture><microservices>,split existing webapi project,exist legacy net webapi project controller method traffic request wonder smart thing microservice approach split host project access client android ios website third party keep exist api url work quick dirty architecture build hosted api process kindly client url router process background competitively idea exist pattern,1,115,4,1.0,1,2017-04-24T09:13:47,0.0
50000445,6631533.0,<spring-boot><gradle><microservices><spring-security-oauth2><netflix-zuul>,save previous authentication spring,authentication application service third party internal service service employee store internal service company sso implement ability log service service unavailable authenticate service,1,31,0,0.0,1,2018-04-24T11:22:49,0.0
50159354,4343502.0,<html><microservices><soa><api-gateway>,microservice html belong inside api gateway,design microservice api gateway pattern html template belong inside api gateway service standalone service example website stack overflow change feature question layout messaging search inject feature html template template couple gateway latency decrease change templates affect entire gateway service template exist templating service latency increase update template necessitate edit gateway wonder method preferable design web application api gateway pattern pro con approach,1,59,0,0.0,1,2018-05-03T15:59:31,0.0
50070987,4723005.0,<aws-lambda><microservices><aws-api-gateway><aws-sam-cli>,sam template multiple microservice lambdas share single aws apigateway domainname,goal allow independent lambda resource microservice share common custom domain test environment template deploying microservice issue deploy microservice cloudformation fail roll domain assign microservice surely share common custom domain microservice unique path service template yaml service template path,1,1491,0,0.0,1,2018-04-27T22:21:36,0.0
50122851,2345933.0,<cloud><microservices><netflix-eureka><pivotal-cloud-foundry><netflix-ribbon>,client side load balancing ribbon service discovery eureka paas cloud pcf,currently deploy application pivotal cloud foundry pcf operate platform service paas model deploy app pcf pcf automatically apart action set load balancer forward request desire number instance automatically provision mind client side load balancer ribbon paas cloud client app reach directly instance app load balancer benefit question service follow naming convention benefit set service discovery service eureka paas cloud,1,990,0,0.0,1,2018-05-01T19:48:09,0.0
49999709,3791707.0,<spring><jhipster><microservices>,error detail jhipster uaa microservice gateway,context app jhipster generate gateway uaa service microservice architecture implement block user account fail attempt uaa service return bad request block user login custom code field frontend display correct user error good issue happen login request gateway answer issue http status case login fail wrong password normal expect behavior generate gateway field frontend lose pass gateway well edit gateway method check parse detail raise custom exception handle order conserve field bit preserve datum send service,1,291,1,0.0,1,2018-04-24T10:44:25,0.0
50010287,2540256.0,<java><domain-driven-design><microservices><event-sourcing>,event stream event source pattern,ensure clarity strip thing randomly event store database java side component event store event stream event event store responsible retrieve list event save event database event essentially row retrieve database event stream sense event stream sole purpose event stream ability iterate list event sound rid event stream call day source,1,239,1,0.0,1,2018-04-24T20:29:37,0.0
50035323,5518562.0,<spring-boot><jwt><microservices><spring-security-oauth2>,jwt token string service layer user request time jwt oauth spring security,development micro service jwt project structure login request url call url jwt token auth service database create single table call user follow field varchar create datetime modify datetime email varchar enable bit password varchar role varchar system generate password bit tenant varchar validate bit maintain log company user admin check user log time user login auth service user type company user call company service update user log call company service jwt access token url secure company side access token auth service request jwt token configuration jwt spring boot auth side custom token enhance security config resourceconfig java config auth service side user request jwt token auth access token service layer call company service secure url call guide access token user request jwt token customtokenenhancer print access token follow statement cf ae cdfccef actual token guide,1,515,2,0.0,1,2018-04-26T05:17:56,0.0
53768891,2419434.0,<spring><git><microservices><spring-cloud-config>,spring cloud config service git native,setup spring cloud config server option store property git native file system people leaned git native project follow trunk base development meaning cut branch release production git read property change property deployment change property read create problem production face issue solve,1,44,0,1.0,1,2018-12-13T19:34:38,0.0
53824821,7290845.0,<https><proxy><mocking><microservices><wiremock>,difficulty wiremock microservice external https service traffic capture,system microservice architecture setup hit url example json response describe resource system create turn complexity response connection external service provider wiremock mock service provider api call limit interact service provider follow url call consist call wiremock follow intention listen call microservice base system stub mock response problem capture traffic access successful response misunderstood wiremock application debug issue perform straightforward task ubuntu system difference,1,183,0,0.0,1,2018-12-18T00:30:25,0.0
53814843,4191111.0,<microservices><istio><envoyproxy>,log request response body istio,log request response body incoming traffic microservice istio envoy box body attribute mapping mixer entrylog add future version istio course achieve implement filter microservise well solution achieve,1,1228,0,0.0,1,2018-12-17T12:01:54,0.0
53696147,673187.0,<c#><rest><architecture><microservices><nservicebus>,invoke nservicebus saga single awaitable request response,consider web application implement database action query add update remove nservicebus message user call web api map method return response http request connection challenge message handler send message wait response finish job nservicebus allow call inside message handler saga implement message handler rely message handler response problem saga send result http request saga publish subscribe pattern web api respond http request connection keep open result receive timeout exception occur clean solution preferably saga example scenario user call web server call handler call successfull store purchase detail database return return,1,249,0,0.0,1,2018-12-09T20:00:22,0.0
53688678,2002995.0,<scala><akka><microservices>,change akka scala response model break exist setup,service multiple microservice internal client package service include model myrequ myresponse akka scala actor client akka pattern current system add attribute deploy service client work receive service push change breaking multiple service update add default help figure wrong good publish change akka system,1,46,1,0.0,1,2018-12-09T01:40:28,0.0
53817122,7758110.0,<spring><microservices><spring-cloud><spring-webflux><spring-cloud-feign>,reactive support feign cleint,plan refactor microservice block implementation reactive api spring webflux doubt choose annotation base controller functional router support reactive feign client help,1,1986,1,0.0,1,2018-12-17T14:19:28,0.0
53763907,10785892.0,<microservices><azure-service-fabric><service-fabric-stateful>,stateful microservice default port share issue azure service fabric cluster,cluster multiple microservice deploy detail follow total microservice deploy cluster stateless micro service stateful micro service implement http sys expose secure endpoint expose service endpoint default port differentiate service add alias url proper load balance rule probe enable access port access service fqdn url stateless micro service work fine expect unable access stateful microservice fqdn url error http error service unavailable specific port service work fine access share port advance suggestion,1,64,2,0.0,1,2018-12-13T14:18:33,0.0
53683081,5126604.0,<docker><kubernetes><microservices>,route specific container service,multiplayer game base microservice architecture figure scale horizontally currently orchestrate docker swarm consider move kubernetes detail game table game card multiple player sit table play work single container responsible table player join table sit establish websocket connection route container player table connect container game logic game event easily push client currently client sit table connection container easy push dynamic game datum scale increase number container problem client sit table connect container game action share dynamic game datum update database sit container increasingly hard write maintain design component simple route client sit table container avoid write player action public table update db architecture dramatically decrease complexity app problem connection client identify route correct container find route specific container service tool correct approach scenario manually route request target container viable option correct architect service,1,76,2,0.0,1,2018-12-08T13:39:35,0.0
56877149,4019775.0,<amazon-web-services><amazon-ec2><routing><microservices><aws-application-load-balancer>,aws load balancer route traffic target group multiple microservice,alb listen http traffic port add target group alb listener consist single ec machine ec instance multiple microservice port app app app ec listen port incoming request alb path base route incoming traffic ec app port base path example achieve well route base ip table route traffic port ec single port serve microservice configure serve,1,911,0,1.0,1,2019-07-03T19:57:59,0.0
56742490,4230665.0,<spring-boot><microservices><event-driven><event-driven-design>,event drive architecture multi instance service,microservice architecture project deploy service cluster kubernete service develop java programming language spring boot framework three replica exist service service communicate event rabbitmq message queue service send email detail email provide service event sendingemail event publish service three replica email service consume event email send three time prevent send email service,1,32,1,0.0,1,2019-06-24T19:02:23,0.0
56886551,10574154.0,<spring-boot><elasticsearch><microservices><jhipster>,microservice reach elasticsearch image,microservice jhipster version image elasticsearch vagrant cento image operation save search reach elasticsearch image docker compose application dev yml application prod domain,1,56,3,0.0,1,2019-07-04T11:02:10,0.0
57794664,1765862.0,<.net><microservices>,microservice folder organization service repository,understand create good approach test microservice microservice structure follow mytestservice api represent application layer mytestservice domain represent domain layer mytestservice infrastructure represent infrastructure layer application layer coordinate task delegate work command eventhandler validation infrastructure layer deal datum thing implementation repository db context nee introduce service call userservice call mytestservice api service repository order datum service store infrastructure layer expose repository domain layer domain layer outer thing leave application layer option web api project service service folder structure microservice folder structure,1,40,0,0.0,1,2019-09-04T19:23:39,0.0
57784098,8586803.0,<domain-driven-design><microservices><cqrs><event-sourcing><event-store>,delete event tombstone public private datum event source system,david schmitz mention solution delete user datum event source system work delete event user emit tombstone event specific user service listen tombstone event clean datum question stream tombstone event write event stream specific user event stream tombstone event keep datum user advise split user stream public private event stream question practically append event stream command append event public private user stream sure event append event store publish event bus create snapshot stream independently lot overhead hear strategy encrypt event delete key delete datum event source system,1,67,0,0.0,1,2019-09-04T08:09:10,0.0
57911729,9601017.0,<microservices><prometheus><metrics><prometheus-alertmanager>,fire alert activity suppose happen time interval prometheus metric alertmanager,fairly prometheus alertmanager doubt regard fire alert period microservice receive file processing invoked message kafka queue aforementioned suppose day utc time microservice metric incremente time receive file raise alert receive file interval create query question correct well case update return datapoint find increase correct function tend result decimal extrapolation understand increase play scrape interval set,1,72,0,0.0,1,2019-09-12T17:21:39,0.0
57909126,419425.0,<javascript><node.js><typescript><microservices><nestjs>,expose normal http endpoint nestjs microservice,microservice write nestj implement endpoint prometheus question nestjs microservice issue impression true workaround apply middleware follow happen middleware call update help,1,172,0,0.0,1,2019-09-12T14:38:49,0.0
57882051,8059790.0,<spring-boot><microservices><spring-security-oauth2><api-gateway>,authentication authorization api gateway,build api gateway springboot microservice implement feature principle api gateway authentication authorization route route spirng cloud gateway load balance netflix ribbon cache management rate limit api performance monitiore explore implement authentication autherization oauth find suiltable solution suggestion example implement feature nice,1,193,0,2.0,1,2019-09-11T04:14:24,0.0
57775148,1353364.0,<microservices><message-queue><messaging><vert.x><distributed-transactions>,microservice persist rdbms queue transaction,rest service request persist relational database good small business functionality email notification sms alert newly receive update datum process work datum background require persist datum message queue problem three common design rest service insert database publish queue problem distribute transaction combine type transaction relational database queue tool support usual rest service persist database additionally insert datum table schedule job query publish queue background job start work problem scheduler reactive batchprocesse limit time slot realtime slow rest endpoint publish datum directly consumer persist database process background eventsource tmu bit complex implement number service grow db persistent service fail save datum background service emailer send email functionaly wrong lead inconsistency service functional read database complex require tool configuration work datum processing system case thought manage scenario reactive apology naive,1,59,11,0.0,1,2019-09-03T15:59:11,0.0
55836600,169034.0,<.net><architecture><microservices><dotnet-httpclient>,example bulkhead net micro service,building microservice reilly sam newman bulkhead chapter talk prevent clogged microservice mess system state example bulkhead separate connection pool connect downstream service author talk synchronous call downstream service read pool http client net consider good practice singleton http client order improve scalability straight net sort bulkhead applicable type bulkhead concerned,1,29,0,0.0,1,2019-04-24T18:39:38,0.0
55764132,2466474.0,<networking><microservices><azure-service-fabric><azure-service-fabric-mesh>,service fabric mesh application virtual network,simple service fabric mesh application microservice deploy public ip access service wrap mesh application azure api management restrict access mesh application word microservice api disable direct access idea mesh application api virtual network add application gateway visible public mesh application vnet,1,51,0,0.0,1,2019-04-19T15:25:01,0.0
55778449,30674.0,<docker><kubernetes><microservices>,understand kubernetes worker node pod compare docker service,learn kubernete push microservice solution kubernete cloud azure kubernetes service understand main concept yml file compare inside file concept context currently docker compose yml file image split solution network network microservice access browser network reverse proxy aka traefik nginx route request appropriate microservice simple spa web app work awesome backend microservice web api host background task host scale webapi host require scale background task host simple diagram solution spa app request datum follow route hit reverse proxy match rule forward learn write kubernetes deployment file base docker compose concept question pod ip create pod container pod multiple container install software product machine worker node replicate scale base scale scenario example background task host scale hardware requirement node small replicate scale path understanding lot node pod feel weird,1,58,0,0.0,1,2019-04-20T22:54:50,0.0
55869970,328059.0,<docker><gitlab><microservices><gitlab-ci><docker-machine>,gitlab ci docker machine multiple container test app,gitlab ci configure docker machine executor build test app spot instance main app require microservice production well test step microservice build test gitlab ci server pipeline output microservice docker image push gitlab docker registry test step build provision spot instance idle instal microservice docker test step provision spot instance idle instal app docker testing script app container release spot instance microservice container release spot instance work follow instruction sure achieve rest docker machine explicitly yaml gitlab docker machine executor configure credential limitation offpeak setting gitlab executor correct sure testing microservice find info,1,110,0,0.0,1,2019-04-26T14:41:58,0.0
55863925,649605.0,<java><microservices><micronaut>,choose package folder create controller micronaut cli,create controller micronaut cli documentation project well define folder structure example default micronaut create controller package project controller project controller achieve micronaut cli,1,62,3,0.0,1,2019-04-26T08:44:33,0.0
49227957,3893627.0,<mongodb><spring-boot><spring-data><microservices><restful-architecture>,advantage spring repository restful service,currently work project microservice orient architecture spring boot mongodb repository team save time write query face problem approach entity user expose entity resource parameter client search repository repository create lot method user repository conditional answer accord client query problem grow entity field spring support work search range example advantage spring repository query service receive,1,55,0,0.0,1,2018-03-12T03:56:23,0.0
49210733,2058904.0,<docker><microservices><consul>,microservice discovery docker consul,interested build microservice bit stuck service discovery work multiple instance single microservice suppose ocr app read text image deploy instance easy instance docker swarm spin instance send request exact container specific instance care long healthy send request ocr container achieve consul promising http api unsure retrieve url service interested request sure point healthy instance consul step relation docker swarm register service consul container start automatically de register fail container aware consul guess stick load balancer infront incase scale consul bunch instance completely wrong direction article book topic appreciate,1,344,0,0.0,1,2018-03-10T15:24:56,0.0
49260669,6585764.0,<rest><microservices>,http base micro service rest,currently develop micro service basically provide calculation service micro service store datum resource sale order call micro service calculate metric price return result kind struggle rest api resource noun calculate stuff return result action micro service behave http api restful service bad practice anti pattern architecture smell regard,1,49,1,0.0,1,2018-03-13T16:01:39,0.0
49107497,3487990.0,<domain-driven-design><microservices><cqrs><aggregateroot><bounded-contexts>,microservice ddd cqrs,read ddd microservice start prototype case cqrs case sport soccer app video news score homepage identify domain bound context news video score homepage domain totally independent homepage domain requirement score video content content database video http call video service data score http call score service datum question homepage domain find highly couple service independent design homepage domain,1,131,2,0.0,1,2018-03-05T09:49:34,0.0
48479325,6569205.0,<cors><aws-lambda><microservices><api-gateway>,enable cor api gateway lambda microservice template dynamodb,enable cor resource api gateway work,1,86,0,0.0,1,2018-01-27T18:50:00,0.0
48571805,5981004.0,<javascript><node.js><promise><microservices>,zeit micro resolve promise,scratch head piece code resolve reject read code correct understand promise log response terminal blink cursor kind help appreciate,1,140,0,0.0,1,2018-02-01T21:12:40,0.0
48483491,2224344.0,<spring-boot><microservices><spring-cloud><distributed-system><scalable>,automatically scale scale micro service instance build spring boot spring cloud,automatically scale scale micro service instance build spring boot spring cloud find info web help understand approach,1,370,1,0.0,1,2018-01-28T05:32:23,0.0
48487098,2750505.0,<events><microservices><saga>,saga choreography implementation problem,design develop microservice platform base specification entire framework integrate socket remove overhead multiple http request rest api service registry host receive registry multiple microservice host microservice responsible domain business host call router api gateway responsible expose microservice consumption third party structure sagas choreography style distribute requisition doubt microservice issue event process manager pass directly microservice responsible chain event logic apply rollback build saga chain event microservice receive work router event pass large volume datum saga event term request structure divide multiple sagas example result pagination type main point router microservice structure responsible build sagas propagate event,1,596,2,0.0,1,2018-01-28T13:54:26,0.0
58624472,2613577.0,<architecture><microservices><event-driven-design>,event source synchronous concern,struggle understand design backend event drive event sourcing support synchronous request understand advantage event source develop system react event replay recreate state decouple event trigger event handler assume case client send request update datum accomodate synchronous request response model event drive system step correct handle request event drive manner receive network request api gateway service edge network emit event represent request api gateway point hang wait emit event capture event store log service business logic handle update capture event subscribe event store produce success event handle update error event unable api gateway receive success error event wait finally send response browser great deal separate concern skeptic enable event source system accept request external client,1,38,0,1.0,1,2019-10-30T11:33:45,0.0
58696512,3760216.0,<forms><go><http-headers><microservices><distributed-tracing>,post data faild http newrequ,pass datum golang service follow code dump receive datum user service empty inject tracing span request pass datum work perfectly,1,41,0,0.0,1,2019-11-04T15:31:19,0.0
58578726,1839104.0,<spring-boot><kubernetes><microservices>,scale microservice frontend backend instance,develop series microservice spring boot plan deploy kubernete microservice compose api write message kafka queue listener listen queue perform relevant action write db construct messsage onward process service work fine locally plan multiple instance microservice kubernetes follow option multiple instance microservice serve api listener introduce frontend backend environment variable frontend variable true configure listener process backend variable true configure listener process start scale frontend backend service benefit shut backend service lose request pointer good practice option appreciate,1,49,2,0.0,1,2019-10-27T10:55:23,0.0
56088240,4575603.0,<deployment><kubernetes><microservices><devops>,configure pod start accept request connection,microservice deploy inter microservice api call issue perform release deployment service start accept request randomly second base application platform service start accept request earlier time accept request api call service dependent full deployment perform application throw error delay deployment dependent service implement rolling update smooth deployment downtime deployment application api endpoint add release affect application start accept request deployment configure pod start accept request time update service current release pod start accept request,1,39,0,0.0,1,2019-05-11T07:38:09,0.0
55994990,8441046.0,<rabbitmq><microservices>,datum consistency microservice rabbitmq,attempt setup practical microservice demo simple internal system deal order management company struggle understand datum consistency microservice scale identify simple scenario microservice current application play order process website update customer account credit basically outstanding money spend account review attempt break simple requirement microservice define api provide differing level functionality allow create customer trigger sql optimistic query work database ensure order process time scale microservice instance order microservice microservice instance microservice database example assume sql manage lock number number order process time credit order process order distribute instance order microservice assume correct figure customer table order microservice mssql query base locking care automatically problem attempt integrate customer microservice message instance order microservice pass event example follow pattern update customer sql table follow query base speed customer microservice instance create customer moment process request slow instance sql query execute order leave order database creditlimit correct customer microservice creditlimit incorrect monolithic application add element locking mutex require rely sql lock functionality order microservice distribute process method apply advice,1,94,0,1.0,1,2019-05-05T18:16:48,0.0
55962977,824434.0,<.net-core><microservices><opentracing><12factor><jaeger>,opentrace net core dependency specific solution library,log microservice application simply log stdout console docker log driver handle redirect log gelf logstash fluentd basically follow guideline log developer work application code underlying logging solution elasticsearch graylog splunk entirely op configuration concern theory change underlying logging solution code change trace lead opentrace developer underlying tracing solution jaeger zipkin elastic apm log theory change underlying tracing solution code change net core poc send trace jaeger library fully head opentracing wonder send trace opentrace compliant api hard dependency solution jaeger jaeger client csharp library base understanding opentracing standard configure opentrace endpoint sampling option jaeger client csharp library jaeger client csharp jaeger specific send trace opentrace api example configuration jaeger client library,1,128,0,1.0,1,2019-05-03T03:36:38,0.0
55942795,419425.0,<node.js><microservices><nestjs>,call nestjs microservice nodejs app,bit noob microservice play nestj easy create app copy microservice doc example controller project start well wrong write small test nodejs app call communicate microservice suggestion start axio example help appreciate,1,350,1,0.0,1,2019-05-01T21:16:07,0.0
55927006,4432463.0,<oauth-2.0><jwt><microservices><openid-connect>,jwt access token contradiction,attempt implement security solution micro service architecture authentication server support oauth oidc figure pass jwt token micro service avoid repeatedly exchange opaque token user claim practical jwt token auth server bearer token call service validate token auth server cached jwks sure valid service include token call service read great moral issue jwt intend fact spec basically reject bearer token issue token bearer read mail pass half dozen service read mail question simply jwt bearer token bonus point link nice article video example effective distribute authentication solution,1,62,2,0.0,1,2019-04-30T18:45:06,0.0
45380558,6095381.0,<spring><microservices><spring-cloud>,spring cloud stream kafka message read restart consumer,micro service base application read message kafka topic service message write topic consumer read message time message service consumer read message read service message micro service message return topic application propertie consumer code micro service root dir appreciate clue issue,1,373,0,0.0,1,2017-07-28T18:56:51,0.0
45441593,1854345.0,<azure><microservices><azure-cosmosdb>,microservice cosmosdb azure,read bit microservice favor approach appear separate database microservice regard azure cosmosdb separate table service good architect,1,658,0,1.0,1,2017-08-01T15:14:03,0.0
45484451,6255699.0,<java><configuration><yaml><microservices><spring-cloud>,spring cloud share configuration group microservice,share property limited group microservice declare common datasourse place microservice database implement gradle variable consist datum relate db connection profile easy exist,1,309,1,0.0,1,2017-08-03T12:38:16,0.0
45474338,1493808.0,<domain-driven-design><microservices><event-sourcing>,event source choregraphy relate multiple record,develop microservice order transaction process event sourcing concept staff place order transaction customer phone system record number order group customer aws kinesis send customer ordercreated event service customer datum increment number create order separate order processing customer base ddd concept anticipate human error staff select wrong customer order feature change customer relate order problem orderupdated event late datum order event customer increment number order customer decrement number order previous customer solve problem suggestion advance,1,65,2,0.0,1,2017-08-03T03:34:52,0.0
45390260,3218618.0,<node.js><microservices>,thing consider split monolithic nodejs app microservice architecture,build restful api nodejs commerce application minimal functionality user account product inventory system cart order payment wallet credit delivery management notification implement microservice architecture framework explore learn start parameter choose microservice architecture common term user model product inventory order build full monolithic app heavy basic guideline direction helpful appreciate help subject,1,624,3,1.0,1,2017-07-29T14:16:27,0.0
45486658,341311.0,<apache-kafka><activemq><messaging><microservices><tibco-ems>,bad practice produce consume message topic,micro service architecture multiple service produce consume unit statusse multiple design recommend option mind create generic topic service consume produce message topic consequence consume message filter consider dirty solution easy consumer unit status event create specific topic status example service produce topic consume list topic exclude example loading service consume list allow service interest specific event require code config change service status topic add status partition consume partition produce design thing complicated bookkeeping partition specific status auto balance partition add add partition live thing bit risky preference,1,669,4,1.0,1,2017-08-03T14:09:23,0.0
52875393,6872018.0,<spring><microservices>,import org springframework boot actuate metric counterservice resolve,earlier spring boot starter parent version upgrade dependency error import spring data mongo update pretty sure deprecate spring release pointer replacement class tweak logic personcounterservice java personcontroller java application yml,1,1299,0,1.0,1,2018-10-18T13:39:40,0.0
52858977,8467565.0,<service><redis><architecture><microservices>,suggestion system arcitecture,question system architecture build ticketing system basically create support ticket figure component case senario client request create ticket gateway forwards request ticket service ticketing service check token valid throw publish nat token token valid authentication service register token info key pair redi time min publish result nat nat redirect ticket service result alright ticket service create record database second case senorio user step authentication side authentication service redi exist step question redi purpose remove request authentication authentication stuff gateway relate question initial login request case scenario login second case scenario highly appreciate suggestion criticism comment advance,1,48,0,0.0,1,2018-10-17T15:53:59,0.0
52817192,5804871.0,<python><domain-driven-design><microservices><bounded-contexts>,create pipeline process ddd,difficulty define pipeline process ddd scenario follow bound contexts patient data manager responsible retrieve manager entire patient data mrna mirna dna methylation annotation datum management annotation gene mirna protein analyzer specfic analyzer patient datum extract usefull user create pipeline create puglin define additional step process patient datum step unique job pipeline task task task task pipeline task task task task task generate datum task manager datum read write datum reduce coupling task tak patient data manager context exemple task datum patient data manager amount datum task datum process datum process process result datum task save task pipeline task task entire datum task taks process datum result datum task save pipeline finish note pipeline configure task datum work generate datum command pattern tho datum patient data manager context pipeline factory define configure pipeline task command datum process command save datum tightly couple command choreography pattern message difficult implement pipeline amount datum patient data manager amount datum task result well solution code python lot,1,121,0,0.0,1,2018-10-15T12:50:00,0.0
52841394,10435965.0,<spring><microservices><spring-cloud-config>,spring config server return null property client application,spring config server work properly return response url client application limit service return response url code upload git repository location help continue spring cloud learn advance client application limit service config server application client config server git resource file,1,406,0,1.0,1,2018-10-16T17:57:41,0.0
52888880,3237832.0,<asp.net-core><asp.net-core-2.0><microservices><asp.net-core-webapi><asp.net-core-2.1>,share configuration file project asp net core,solution multiple api project inside kind micro service architecture solution structure class library project common functionality api project keep connection string inside class library project file file connect database repeat project problem keep file json config library project place publish project store generate dll file access connection string api project reason initialize connection api project keep file upper folder add setting work publish project separately folder find guide achieve track,1,679,0,0.0,1,2018-10-19T08:48:30,0.0
52829712,8259352.0,<architecture><microservices>,microservice architecture manage referencedata common stuff,design microservice architecture base exist huge monolitic application read lot design microservice communicate find problem microservice correctly bound managing building manage person microservice bound manage referencedata country state manage user preference manage person country nationality building country address user call business microservice person building simple sync http call retrieve user preference anti pattern definition share stuff class shared assembly net good practice account,1,238,1,0.0,1,2018-10-16T07:05:21,0.0
52943491,1934452.0,<google-cloud-platform><load-balancing><microservices>,path base configuration gcp load balancer,work sort prototype project micro service host separate server tech stack endpoint gcp host app load balancer point backend service host path rule service screenshot access user management micro service micro service forward url service directly add route load balancer path setting difficult maintain forward hear solution advance,1,182,2,0.0,1,2018-10-23T07:33:06,0.0
52734300,753943.0,<token><microservices>,microservice authorization,microservice suppose datum shared database token include userid clam claim authentication authorization monolit application check user group claim fetch database group microservice replicate authorization microservice example user belong team service application belong team example member team access forum team gallery team store team claim membership change token alive team datum microservice sound bad,1,43,3,0.0,1,2018-10-10T06:52:51,0.0
52885863,1201759.0,<amazon-web-services><kubernetes><microservices><kops><kubernetes-pod>,architecture kubernetes microservice,design website solution multiple spa high level design machine spa render ui ssr request browser example abc foo route machine application ui code kubernetes pod host machine node kop manage autoscaling node pod application pod call pod datum web example abc api foo call pod pod live node web pod node pod live single node autoscale traffic website node pod question good practice design solution achieve path base route abc foo call web pod expose pod external internet load balancer repos pod,1,75,3,0.0,1,2018-10-19T04:18:51,0.0
52929613,2490510.0,<ibm-cloud><microservices><cloudfoundry><websphere-liberty>,kill invalid signal number igterm,application deploy cloud foundry hit application browser follow error log find error advise,1,198,4,0.0,1,2018-10-22T12:39:52,0.0
52794870,5410011.0,<c#><api><microservices>,api authorization microservice,multi tenant project call multiple microservice perform specific task microservice understand db play request send microservice tenant tenant db solution web project deal api key management example api key management sit domain portal example tenant example call microservice microservice example middleware listen request microservice side apikey request validate check portal example service apikey valid grab tenant api key determine connection string microservice feel efficient require call determine connection string well method determine connection string validate apikey,1,148,5,2.0,1,2018-10-13T16:12:45,0.0
52906824,3890577.0,<java><testing><junit><microservices>,bad verify microservice test scope java,task verify rest response remote micro service build app call rest endpoint verify result question write test write test scope junit testng unit test mock object case test remote service correctly bad pattern call real service test scope junit,1,41,8,0.0,1,2018-10-20T14:42:16,0.0
47730089,3369837.0,<java><eclipse><java-ee><glassfish><microservices>,eclipse microprofile config throw configproviderresolver implementation find,jersey complete build gradle follow require property file locate whichs content configuration throw configproviderresolver implementation find configproviderresolver class classpath glassfish deployment wrong server log glassfish sample project problem download,1,790,0,0.0,1,2017-12-09T15:26:43,0.0
47915158,4704522.0,<azure><containers><microservices><azure-api-management>,connect azure api management micro service orchestrate ak,follow instruction manage connection api management micro service kubernetes cluster instruction cover connection specific node real multiple node auto scale node connect api management kubernetes service work ak orchestrate microservice azure api manager publish api,1,1046,0,0.0,1,2017-12-20T22:17:04,0.0
47917777,7867528.0,<amazon-web-services><microservices><amazon-elasticache>,elasticache microservice worth scenario,bunch ec process object assume object unique url image download web elasticache dbs three dbs track thing image consult database decide process image discard decide ec instance consult dbs encapsulate dbs microservice ec communicate directly dbs microservice api communicate add processing time overhead generally scale worth elasticache fast memory db service decide overhead worth decide,1,77,0,1.0,1,2017-12-21T04:04:46,0.0
47766808,8735568.0,<spring-boot><http-status-code-404><microservices>,response encoding spring boot micro service front angular application,create web application microservice architecture front application angular communicate microservice develop spring mvc spring boot spring data jpa confusion add method repository findbyusername findbylastname result http status code bad request unauthorized encode status code result return findbyusername result add result transfer result json format angular parse datum json format sample controller action add status help clarify status add problem,1,157,0,0.0,1,2017-12-12T06:51:42,0.0
47704607,3673633.0,<rest><spring-boot><microservices><netflix-zuul><spring-cloud-netflix>,post request zuul microservice microservice,route request zuul micoservice datasource microservice api method live call zuul ms datasource ms post operation achieve operation work involve pathvariable parameter github,1,209,0,0.0,1,2017-12-07T22:04:56,0.0
47887023,9110932.0,<spring><web-services><spring-boot><microservices><bonita>,integrate process bonitasoft application spring boot webservice,integrate bonita spring order implement custom ui workflow process bonita provide rest api box matter java library api ready spring,1,197,1,1.0,1,2017-12-19T12:26:19,0.0
47860278,320587.0,<microservices>,good practice share domain model microservice,good practice guideline share domain model micro service micro service provide point interact resource order crud micro service perform specific crud task resource order micro service order attribute perform operation case sense create common shared lib domain model share service technically combine micro service support scalability memory cpu intensive,1,746,3,0.0,1,2017-12-17T22:59:00,0.0
54248225,10931648.0,<java><android><react-native><push-notification><microservices>,display push notification change db api,android application display push notification change table app student change rank st teacher notification list refresh app node js develop api firebase push notification reflect change database api trigger push notification display app monitor time rank change database,1,49,0,0.0,1,2019-01-18T05:34:41,0.0
54173451,3139595.0,<architecture><microservices><soa><gateway><api-gateway>,gateway architecture design good practice,build gateway serve proxy infront set downstream endpoint requirement authenticate authorise request jwt downstream service care consider expressjs project wrong architecture require send pr time expose downstream endpoint gateway,1,54,0,0.0,1,2019-01-13T21:37:22,0.0
54076086,4413431.0,<architecture><microservices><keycloak>,keycloack user database,build application microservice approach keycloack authentication authorization service application require lot personal datum user address telphone personal certificate insurance store extend keycloack store user datum advantage disadvantage approach keep datum keycloack microservice query keycloack user data role agent user checkout user submit datum store minimal datum keycloack design separated service user datum,1,311,1,0.0,1,2019-01-07T14:18:07,0.0
54127889,8195188.0,<java><api><spring-boot><microservices><health-monitoring>,health check stream service,write health check stream service consume service write easily method affect post method change exist,1,63,1,0.0,1,2019-01-10T11:38:29,0.0
54226943,9440.0,<architecture><microservices>,architecture microservice multiple requirement share datum,scenario moderately large loc microservice base project large rapidly evolve content sell datum content multiple client client requirement time datum content require high availability avoid issue code data change client adversely impact client deployment time datum change datum share client specific solution explore single deployment client specific statement currently require manually juggle client extremely difficult test entire feature matrix change adversely impact client multiple deployment issue microservice high dependency eachother require set source repo deployment client client specific change specific client codebase deploy cluster code datum infusion client require review datum code change adverse impact turn nice community stack overflow address retain ease change management time avoid adverse impact client,1,60,2,1.0,1,2019-01-16T23:31:01,0.0
54171883,233495.0,<microservices><jhipster><swagger-ui><api-gateway><openapi-generator>,api rest endpoint list jhipster gateway api swagger ui,jhipster create api gateway micro service create entity work perfectly gateway gateway display api endpoint generate entity generate second micro service time api define yml file choose api api define open api generate code api test call direcly micro service endpoint curl work expect point problem micro service gateway gateway api api menu micro service dropdown select endpoint weird thing find search call follow url micro service directly point micro service swagger yml file declare openapi search find openapi problem rewrote yml file swagger finally exact problem micro service api work visible gateway start wonder problem side,1,338,2,0.0,1,2019-01-13T18:25:53,0.0
54057704,386739.0,<c#><domain-driven-design><microservices><azure-service-fabric><event-store>,convert exist class ddd aggregate event,follow class perform trade operation buy sell subscription convert class micro service event sourcing cqrs idea mind live inside service fabric actor class entirely memory start conversion aggregate trouble tradeexecutedevent raise modify state aggregate word event fire sense dependent event reason tradeexecutedevent notify ui trade execute well store tradeexecutedevent event store corresponding apply method service subscriber notify trade happen feel entirely wrong aggregate suppose transient long live appreciate suggestion guidance,1,102,2,0.0,1,2019-01-06T00:51:11,0.0
35286730,5902017.0,<php><rest><restful-architecture><microservices>,execute efficient communication multiple micro service,case software build microservice internal service doubt manage performance issue network latency size resource multiple resource microservice imagine http request access resource,1,774,1,1.0,1,2016-02-09T08:01:49,0.0
35324974,1100135.0,<java><spring><microservices><netflix><netflix-eureka>,query eureka register service,build service eureka spring boot spring cloud check configure correctly load balance service discovery locally connect query exist eureka company uat environment register service traffic redirect local machine configuration achieve,1,798,0,1.0,1,2016-02-10T20:13:08,0.0
35198346,283851.0,<json><api><rest><http><microservices>,distinguish deliberate controller generate actual error rest api,json rest service architecture follow method response code generate deliberate response example route controller unable find user entity return response case include json payload error message code provide client specific api client behave differently condition example point client wrong host find host oppose invalid user reach service case user find error client concerned oppose find client throw exception question distinguish error solely base response add header indicate valid response,1,43,2,0.0,1,2016-02-04T10:21:05,0.0
35304113,2241463.0,<linux><server><cloud><microservices>,microservice keep port open cloud,microservice envision set process machine suppose process instance separate machine reliability setup depend kind client process work tcp server serve specific high port speak http protocol low bandwidth testing purpose find free cloud service provide kind environment machine process – java linux – keep high port open facility expect pay customer implement microservice architecture cloud simply process machine share database clarify direct free service,1,559,0,0.0,1,2016-02-09T23:17:06,0.0
35368503,4134826.0,<architecture><microservices><falcor><falcor-router>,proper falcor architecture lead monolithic router,grasp falcor concept read find understand application employ single model model single source source endpoint backend falcor router router example single route single source file problem map micro service concept netflix combine micro service architecture falcor route separate route,1,247,1,1.0,1,2016-02-12T17:16:02,0.0
57181818,11829969.0,<docker><cookies><authorization><microservices>,secure httponly cookie multiple service,identity service issue http cookie authorization request identity service totally physically separate service site dockerise service dockerise well current setting authorization cookie send service question technically multiple physically separate service share secure http cookie,1,25,0,0.0,1,2019-07-24T11:25:40,0.0
57185988,10580671.0,<spring-boot><microservices>,good practice develop generic microservice,project develop micro service common configuration class filter search good practice method develop moment create generic micro service fork develop module convenient modification web service difficult merge generic ms idea develop source inspire response,1,40,0,0.0,1,2019-07-24T15:04:26,0.0
57299220,1054104.0,<microservices>,implement constraint external microservice,suppose microservice customer order dependency call order reference customer customer word customer order order belong exactly customer sake example totally fine delete customer order belong customer appropriate implement constraint customer prevent customer delete order reference customer analogous referential integrity relational database approach customer order customer order api call customer keep track order assign customer customer record maintain list order merge customer order single microservice manage internally sure approach good example microservice context pro con three approach list hear people thought problem include approach list,1,51,0,0.0,1,2019-07-31T21:44:41,0.0
57310401,11865029.0,<docker><ssl><docker-compose><microservices><spring-cloud-zookeeper>,ssl certificate hostname issue case microservice internal communication,secure microservice internal communication ssl microservice spre boot application zookeeper discovery server internal service communication place rest template feign client ribbon client side load balancer set follow property microservice sign certificate generate import certicate jre trust store communication ssl handshake catch keep cn certificate system host lp pf hmvqu service register zookeeper store machine hostname address reture handshake service register zookeeper production docker container service multiple docker container service docker container register zookeeper keep ip address container create certificate cn match ip address wildcard cn work achieve,1,57,0,0.0,1,2019-08-01T13:40:54,0.0
57155738,11821955.0,<web-services><microservices><kudu><streamsets>,parameter rest http url method streamset microservice pipeline,create microservice pipeline streamset callout retrieve datum mysql depend parameter send http url expression evaluator url suppose retrieve datum base handle case param send null,1,64,0,1.0,1,2019-07-23T02:02:14,0.0
57143913,9527512.0,<spring-boot><microservices><netflix-eureka>,registry service ip address,learn microservice eureka spring boot register service eureka service eureka create localhost wonder store service computer register eureka computer document question eureka document create eureka service localhost eureka server application property product management service application property,1,147,0,0.0,1,2019-07-22T10:22:16,0.0
57315466,1170235.0,<typescript><microservices><e2e-testing><nestjs>,test microservice nest,attempt write test microservice nest proxyclient create properly order request service test create proxy client send message client message pick service return result message processing service close keep test,1,253,1,0.0,1,2019-08-01T18:59:49,0.0
57259898,1398378.0,<events><architecture><rabbitmq><microservices>,publish event rabbitmq datum expiration time,currently event drive architecture datum expiration time data base good solution publish event datum expire exact moment datum expiration time real time scheduler process batch,1,31,2,0.0,1,2019-07-29T18:56:41,0.0
58536522,7656623.0,<spring-boot><microservices><netflix-eureka>,load balance eureka server machine,spring boot eureka server achieve scalability server eureka server multiple eureka client load balance api call client server server connect local eureka eureka check client availability peer eureka server redirect eureka server peer configuration check availability peer eureka server second eureka server eureka dashboard,1,26,0,1.0,1,2019-10-24T07:45:47,0.0
58385452,11357623.0,<.net-core><microservices><url-routing><service-discovery><ocelot>,path conflict ocelot routing configuration,set reoute follow set route machine advise problem question conflict situation machine machine machine ocelot json,1,38,5,0.0,1,2019-10-14T23:58:54,0.0
58528818,12063682.0,<rest><apache-kafka><microservices>,kafka conditional produce consume,situation microservice ms db record external source provide datum valid persist validation process perform microservice ms consumer kafka topic ms send datum validation potential record involve query previous record validation successful ms produce result topic ms consumer persist valid datum problem follow imagine valid datum big lot time write db happen validation potential record fail query db record kafka capability pause validation process ms commit previous valid datum db kafka find ensure validation query db rest call microservice wait response help solution appreciate,1,50,5,0.0,1,2019-10-23T18:16:04,0.0
54291285,1575761.0,<node.js><typescript><redis><microservices><nestjs>,nestjs redi microservice,learn nestj microservice command receive datum redi,1,2080,0,0.0,1,2019-01-21T13:42:44,0.0
54278949,10723707.0,<azure><file><service><microservices><azure-service-fabric>,fast store file stream service fabric application,scenario service fabric app return file request associate distinct combination unit scale word load affect performance load affect performance experience understand stateful service reliable actor partinione wonder achieve file store physical disk node direct access file store directly disk stream fast well,1,48,0,0.0,1,2019-01-20T17:18:26,0.0
54298307,7802149.0,<.net><sql-server><architecture><microservices><system-design>,relate entity database communication application,short story relate entity database microservice service database entity database relate microservice architecture long story write separate application management system vehicle seller account finance system application work independently well suppose vehicle deal finalize management system finalize deal datum generate invoice finance system deal delete delete corresponding invoice well delete corresponding invoice relate deal invoice simply relation entity application completely independent database well relation table database good idea relation table database communication example deal edit invoice edit well invoice edit relate deal edit well microservice system independently alongside well solution solution single database separate application layer design good approach lot drawback technology stack technology stack net mssql answer people design kind system face problem,1,56,0,0.0,1,2019-01-21T21:56:41,0.0
54262342,6327772.0,<events><microservices><event-sourcing>,datum event sourcing,understand event sourcing change datum architecture service lot understand datum suppose properly store event sourcing service keep track vehicle transport package current relational structure data model document represent vehicle field represent origin location destination location type package amount package status vehicle query read front change user appropriate change document order update event source snapshot event store interpret multiple version document describe exist snapshot time change event create version document alter easy wrap head incorrect interpretation event store specific alter document vehicle status change road example event vehicle status change trigger call vehiclestatusupdatedevent vehicle number status timestamp event event store publish messaging queue pick queue appropriate change current version document understand misconception understanding event sourcing allow snapshot datum change point describe keep log change version file event specific piece file describe datum flow architecture work event source vehicle datum example provide help frame better feel close understand fundamental piece understand search online,1,61,0,1.0,1,2019-01-18T22:40:08,0.0
54341252,680154.0,<apache-kafka><microservices><apache-flink><apache-kafka-streams><flink-streaming>,kstream flink,flink stream micro service architecture etl datum service reporting search database sense data change currently generate custom event rmq stream partition aggregate transform datum base reporting search migrate kafka broker debezium datum micro service database wander kstreams api flink possibility combine,1,72,0,1.0,1,2019-01-24T07:19:35,0.0
54287217,1885666.0,<spring-boot><microservices><spring-cloud><netflix-eureka>,microservice accept request event eureka server registry,microservice register eureka server remove instance eureka server rest api remove instance eureka server delete remove instance register update status service service micro service status set service send request micro service unavailable accept request response microservice accept request event status eureka server registry eureka server application yml file eureka client micro service application yml file,1,75,0,0.0,1,2019-01-21T09:47:17,0.0
54447230,6536121.0,<laravel-5><oauth-2.0><microservices><laravel-passport>,laravel passport authentication micro service multiple server domain,micro service multiple server domain authenticate server laravel passport api authentication laravel passport passport scopesfor place order check status vital service limit time consumer authenticate check access level good,1,106,0,0.0,1,2019-01-30T18:29:47,0.0
54372740,9043206.0,<spring><azure><cloud><microservices>,azure aw service replace spring cloud netflix feature,architecte java microservices middleware deploy cloud compute provider azure tech stack consider follow frameworks library database include spring spring cloud spring cloud config server spring cloud sleuth netflix ribbon netflix eureka netflix zuul netflix hystrix kafka apache question avoid spring cloud package family netflix replace functionality service azure,1,173,0,0.0,1,2019-01-25T21:03:31,0.0
54344284,584508.0,<entity-framework><api><architecture><dependencies><microservices>,best handle share entity microservice entity framework,microservice api call microservice separate dbcontext unrelated entity requirement list order simplified entity efficient approach con retrieve order send userid user microservice method approach practical someday requirement change user gender additionally require write method specific requirement change code time retrieve info everytime practical well consume network traffic good practice handle share entity better mind approach good,1,277,1,0.0,1,2019-01-24T10:20:27,0.0
54377624,4230665.0,<java><spring-boot><microservices><spring-cloud-bus>,communication microservice delete object,application consist microservice side delete microservice microservice side send event spring cloud event bus wait response return response tu ui response listener class forward message controler manage process idea sensible delete request send event microservice wait response save response microservice mongodb object delete controller check database response,1,213,2,0.0,1,2019-01-26T10:44:17,0.0
45179621,1052099.0,<java><scala><lambda><soa><microservices>,microservice architecture,question relate microservice architecture granularity microservice table relational nosql database service table service datasource sense soa create bunch microservice provide client library facilitate consumption service caller rest library call sound lot work three git repo microservice deploy multiple microservice ec instance imagine deploy microservice aw lambda perfect application bunch lambda function mention tight coupling aws lambdas implement microservice lambdas appreciate feedback,1,535,0,0.0,1,2017-07-19T01:37:15,0.0
45270983,2429966.0,<docker><docker-compose><microservices><docker-swarm>,volume share docker swarm node,start play docker docker swarm wonder volume share docker swarm node pick postgre database instance volume declare data docker compose yml manager region occur share datum docker operate,1,651,0,0.0,1,2017-07-24T00:01:28,0.0
45301310,1352530.0,<java><jms><microservices>,jms rest client centralized library microservice,microservice architecture mindset benefit duplicate rest jms client service independent code trade work comfortability maintainability single library adapter server spec abstraction benefit practice,1,236,0,1.0,1,2017-07-25T10:59:09,0.0
45255164,442041.0,<rest><spring-boot><integration-testing><jhipster><microservices>,header error springboot rest test,strange error execute integration test microservice generate jhipster springboot rest endpoint fail test error message debugging find specific header idea,1,1948,2,0.0,1,2017-07-22T13:34:27,0.0
45293123,1401162.0,<go><microservices>,design multi file processor golang,figure design service handle multiple file format micro service example customer file format format format process specific format customer transform format common format insert database thing design service customer base format update base format update service decouple service processor single place translate base format customer service base format format change update service translate format service customer format design solution,1,63,4,0.0,1,2017-07-25T02:53:46,0.0
45275679,3227319.0,<java-ee><architecture><jax-rs><microservices>,share code microservice,service service service split differ traffic requirement service consume kind client service ui client web desktop mobile consumer service service limited number expose endpoint generate high traffic consumer service ui client large number expose endpoint generate traffic currently share code figure micro service share base code wrong approach key issue understand order solve kind micro service architecture issue,1,497,8,0.0,1,2017-07-24T08:28:19,0.0
51924926,3682067.0,<spring><security><spring-security><microservices><restful-authentication>,communication user service auth service microservice architecture,scenario login scenario microservice application user enter phone number verification code send user send receive code verify user enter password jwt token receive rest implementation implement scenario create three service auth sms user point view well handle request send verification code generate jwt token user service detail implementation user call send phone number user service inside request sms service send verification code user call verify code request handle inside user service code valid user service generate temporary token pass header response assume user register system user pass password temporary token credential valid user service call auth service jwt token append response header question communication user auth user sms service,1,531,0,0.0,1,2018-08-20T06:07:06,0.0
51842770,1532018.0,<microservices><azure-service-fabric>,monolithic web api microservice design,monolithic web api layer application point break microservice azure service fabric break multiple service duplicate code example account service create account payment service apply payment transaction case service customer class domain account service exhaustive customer full detail payment light weight question copy domain entity layer create maintenance issue copy code create service monolithic service exist web api thought ndly case transaction mention today separate good design record failure rollback maintain transaction,1,108,0,0.0,1,2018-08-14T13:33:43,0.0
51988439,5486116.0,<database-design><microservices>,loose coupling model microservice architecture,microservice architecture implement micro apps user administration task administration user microservice micro app define model hold user object database task microservice micro app define model hold task object database user reference task application develop microservice architecture model reside micro service task user reference oblige define user model task microservice contradict loose coupling concept bad approach maintainability application,1,137,0,0.0,1,2018-08-23T14:42:54,0.0
51921762,6872018.0,<spring><spring-boot><microservices><netflix-eureka>,whitelabel error application explicit mapping error fallback,develop code link work version launch require service register guidance actual error launch error application yml pom xml,1,2230,0,1.0,1,2018-08-19T20:51:12,0.0
52011686,10271236.0,<docker><.net-core><microservices>,docker access server,backstory implement couple web api microservice architecture microservice accessible https microservice develop net core accord microsoft document enforce http configure kestrel follow simple kestrel skip reverse proxy include nginx reverse proxy future work test locally work deploy docker docker compose override file dockerfile port expose build project image docker docker problem leave https api access http browser find question server listen fully understand reason change kestrel configuration build docker image docker work replace ip http problem configuration wrong helpful light advance,1,241,0,0.0,1,2018-08-24T21:02:13,0.0
51944296,1197804.0,<microservices>,dependent microservice call async,microservice call async microservice depend response microservice depend response,1,38,1,0.0,1,2018-08-21T08:07:36,0.0
51965342,6899919.0,<design-patterns><microservices><message-queue>,dynamic message route pattern,build application microservice aw sqs messaging requirement single message handle multiple microservice process final destination microservice example microservice generate message message validate microservice validated message transform microservice transform message apply data store microservice pattern dynamically message creation time prescribe flow message listener message queue,1,156,1,0.0,1,2018-08-22T10:58:07,0.0
52011129,7762785.0,<java><docker><docker-compose><microservices>,access database docker environment,create microservice environment precisely service connect access database postgresql development start create docker image service image create postgresql docker environment machine localhost application depend migrate docker environment application access database environment docker compose quote problem postgre accept connection problem start configure connection,1,71,2,1.0,1,2018-08-24T20:11:30,0.0
51918125,6872018.0,<spring-boot><microservices>,java lang illegalstateexception locate propertysource fail fast property set fail microservice,follow microservice link simply start config service start registry service error guide issue proper step set sequence microservice,1,2736,2,1.0,1,2018-08-19T13:27:27,0.0
51863914,2549020.0,<spring-boot><load-balancing><microservices><netflix-zuul><google-kubernetes-engine>,load balance spring boot micro service host kubernetis,context building micro service base architecture springboot rest api micro service application containerize docker deploy google cloud platform kubernetes service thinking nextflix zuul api gateway cross cut concern authentication authorization oauth service discovery eureka compose query application host kubernete question load balancing limited knowledge option ribbon kubernetes service combination great help pointer good practice optimum solution kindly additional require side,1,501,2,0.0,1,2018-08-15T17:51:11,0.0
55280233,7758110.0,<java><spring-boot><microservices><spring-cloud>,datum validation remote call microservice,bit confused validate datum return remote call microserivce rely contract microservice extra check hurt approach,1,33,0,0.0,1,2019-03-21T12:14:54,0.0
55229340,10565873.0,<spring><docker><dockerfile><microservices><netflix-eureka>,eureka service find docker container,simple setup eureka server service locally tomcat work perfect locally docker container service register eureka server http call feignclient load balance service find service service find eureka server server find service broken runnind docker container eureka server service,1,290,0,0.0,1,2019-03-18T20:13:03,0.0
55108867,5601929.0,<node.js><rest><api><microservices>,build properly micro service filesystem,api call api perform task crop image save image process long course call time api build nodejs rest api properly construct process timeout call endpoint call endpoint check,1,41,0,0.0,1,2019-03-11T19:16:40,0.0
55123026,9993548.0,<java><jersey><microservices>,transfer inputstream server,follow code send server second server api error success response,1,60,0,0.0,1,2019-03-12T13:46:30,0.0
55184058,937440.0,<c#><domain-driven-design><microservices>,restful web service message queue scatter gatherer,scatter gather setup scatter gather add future supply image update image web app web app display result screen display image good restful call api web app add update image message queue send image option good microservice architecture image process web app request competiting consumer image webpage problem option scatter gatherer api tightly couple web app appropriate approach,1,62,0,0.0,1,2019-03-15T13:48:19,0.0
55276990,217648.0,<asynchronous><microservices><amqp><messagebroker>,factor microserivce,create application base microservice architecture microservice inter service communication synchronous call directly loosly couple service eventual consistency rabbitmq asynchronouse communication pattern factor service smart achieve asynchronous communication refactore servcie,1,28,1,0.0,1,2019-03-21T09:11:07,0.0
55290185,9947487.0,<heroku><microservices>,heroku pricing dramatically increase microservice architecture,start heroku consider host app problem plan build app micro service architecture understand heroku pricing charge dyno micro service bunch app service work provide functionality app inevitable multiple dynos add dynos price three question interpretation heroku pricing correct well micro service architecture heroku deploy multiple docker container single dyno,1,221,3,0.0,1,2019-03-21T22:28:11,0.0
52464419,1334983.0,<java><spring><model-view-controller><entity><microservices>,microservice arrange spring project structure entity mvc pattern structure,build micro service huge system clearly break domain structure spring boot java folder entity serve mvc folder structure example structure case location micro service entity country region city project structure case project structure,1,335,0,0.0,1,2018-09-23T08:35:51,0.0
52456287,6022333.0,<java><intellij-idea><repository><bitbucket><microservices>,microservice project intellij bitbucket,structure project intellij create web application base microservice architecture microservice project intellij submodule question commit mocriservice separate repository bitbucket microservice repository good practice matthew,1,451,0,1.0,1,2018-09-22T11:31:46,0.0
52344354,7703570.0,<spring-boot><microservices><netflix-zuul><api-gateway>,usage zuul gateway,create microservice architecture demo application doubt,1,473,0,0.0,1,2018-09-15T11:39:54,0.0
52475493,3205479.0,<microservices>,handle rest call ui api microservice,start implement monolith microservice architecture figure drive message queue durable rest api stick basic question example website user create order http request api gateway request push queue operation continue result push queue hold rest api request long clue implement help greatly appreciate turn sync http request api call async response,1,61,1,0.0,1,2018-09-24T08:40:31,0.0
52477283,6479122.0,<.net-core><ipc><microservices><azureservicebus><masstransit>,masstransit consume equal object define namespace,excuse english bad masstransit azure service bus asynchronous communication microservice definition avoid generate dependency message send microservice define namespace automatic management masstransit queue topic manage object type prevent microservice consume message receive message send microservice publisher thing happen class property namespace class solve option occur remove namespace endpoint destination address class masstransit manage creation queue topic base serialization object manage base object type type wrapping object leave example hope help understand problem regard borja,1,471,1,0.0,1,2018-09-24T10:24:20,0.0
45052239,487291.0,<iis><soa><microservices><aws-api-gateway><api-design>,expose rest api microservice client,split rest api monolith microservice encounter follow issue assume split monolith microservice ideal situation microservice correlate resource messy example microservice serve resource resource serve microservice solution iis rewrite match resource microservice fe domain ticket iis rewrite call ticketsm domain ticket api gateway route request proper microservice endpoint fe domain ticket api gateway call ticketsm domain ticket basically primary goal full rest api apear iis rewrite api gateway option microservice expose directly client trought api gateway api gateway overkill scenario,1,1045,0,1.0,1,2017-07-12T08:23:21,0.0
45095183,3511426.0,<rest><redis><network-programming><apache-zookeeper><microservices>,low level protocol microservice orchestration,start work microservice write library service discovery redi store service url port number ttl entry turn expensive approach cross service call service require call redis caching good idea service time downtime well write separate microservice care orchestration figure low level network protocol care exchange heartbeat help figure service instance unavailable application zookeeperclient redisclient care heartbeat industry preferred protocol cross service call call rest api http eliminate possibility join collection well,1,153,3,2.0,1,2017-07-14T05:18:57,0.0
44927532,8086746.0,<microservices><cqrs><event-sourcing>,newly create resource client cqrs event source base microservice,experiment microservice event sourcing cqrs bit confused issue command perform query return state regard interaction web api gateway example simple application attempt write aid learning create random graph perform long running calculation graph model separate service imagined process flow follow user request random graph api gateway construct command send create graph publish event subscribe topic graph event process event store graph persistent read storage client newly create graph subscribe topic graph event process event long computation calculate diameter publish event event handler subscribe topic computation event process event update graph persistent read storage client update easy graph poll change websocket sse simple confusion lie inform api gateway web client graph highlight bold typical crud process result create graph return url resource instance cqrs command return exception pass client service case api gateway graph perform query representation resource send user web client api gateway moment send command leave hang sort subscription model interrogate status graph creation consider api gateway generate request embed command couple service api idea example discussion read address issue assume resource find discussion address issue point duplicate question pointer hugely,1,413,4,0.0,1,2017-07-05T13:23:43,0.0
56178598,5555164.0,<rest><wcf><soap><wsdl><microservices>,communication application device,application communicate pc main application helper application launch main application helper application modify datum main application helper application microservice familiar microservice check net find helpful tutorial create wcf duplex bind main application helper application communicate wonder good solution microservice well,1,35,0,0.0,1,2019-05-17T01:56:17,0.0
56295728,5007985.0,<kubernetes><microservices><message-queue><istio>,pattern match message istio,implement approach explain book tao microservice kubernete istio word microservice communicate pattern match queue message route ability istio send message microservice canari deployment read istio support queue route moment wonder state example implement solution istio queue topic message follow route key reroute microservice register accept,1,42,0,0.0,1,2019-05-24T15:37:30,0.0
56131598,2871845.0,<spring-boot><microservices><netflix-eureka><netflix-zuul><netflix-ribbon>,good consume microservice spring boot cloud eureka zuul,project base spring boot microseroservis eureka service registration zuul proxy server service depend thah service rest controller service serviceimpl repository traditional spring boot application service depend service question manage dependency approach inject service interface service ribbon load balancer create client service de client consume service approach good pro con,1,45,0,2.0,1,2019-05-14T13:25:09,0.0
56174134,4911049.0,<microservices><spring-boot>,circuit breaker open upload large file,exist project follow microservice architect client api gateway spring cloud hystrix circuit breaker uploadservice upload small file fine file large upload time long hystrix open return fallback practice case set timeout request hystrix,1,52,0,0.0,1,2019-05-16T17:32:56,0.0
56191395,734130.0,<docker><.net-core><docker-compose><microservices><visual-studio-2019>,docker add command produce find file error,move microservice docker container docker compose project type visual studio service fabric project install service fabric sdk docker container achieve dockerfile rest code matter crash add command error output ctrl understand wrong system find file simply load file internet place newly create temp folder link valid check relate,1,84,0,0.0,1,2019-05-17T17:56:34,0.0
56184799,11515099.0,<spring-boot><microservices><bad-gateway>,set max swallow size spring boot,set max swallow size property tomcat springboot microservice upgrade springboot version early code work upgrade class change work set property work service configuration control flow debug print point response bad gateway second application property file property honor verify property set set correct,1,471,0,1.0,1,2019-05-17T10:42:35,0.0
50248129,2853386.0,<testing><microservices><pact>,pact consumer test generate contract json file,pact consumer test generate contract json file stud pact qurioused consumer test test response test class definde code define response simple body test call mockprovider useless guide,1,281,0,0.0,1,2018-05-09T07:46:54,0.0
50225125,4597172.0,<node.js><python-3.x><docker><microservices>,multiple language microservice approach,straightforward question find totally mind easy find microservice nodejs microservice python apigateway nodejs express work nodejs express gateway microservice nodejs cote js problem logic python flask good approach second language read internal restapi find clear example docker help totally hesitate,1,191,0,0.0,1,2018-05-08T02:57:20,0.0
50415015,9797998.0,<aws-lambda><microservices><aws-api-gateway><amazon-cognito>,cognito control api access,build number microservice api gateway lambda dynamodb secure api cognito user management user pool group iam role attach group user group access service user group suggestion implement issue token generate cognito validate api gateway check level access user check cognito token valid,1,275,1,0.0,1,2018-05-18T15:47:09,0.0
50248560,6612922.0,<java><maven><spring-boot><microservices><netflix-eureka>,spring boot multi module maven project,micro service setup eureka server multiple spring boot application eureka client setup maven multi module project parent root level hierarchy module order define parent pom xml parent level module eureka server module deploy read relevant answer find maven module order parent directory achieve,1,912,3,0.0,1,2018-05-09T08:14:42,0.0
39435028,4282677.0,<rest><microservices>,micro service core application framework,example micro service service core application communication rest api question create service module question clear assume clear micro service well explanation helpful,1,135,5,0.0,1,2016-09-11T10:16:13,0.0
39476480,0.0,<java><maven><microservices>,microservices repository org glassfish jersey core jersey client jersey client jar invalid loc header bad signature,develop example follow link simply compile source code face compilation error sure wrong sure error reference update pom xml java version special pom xml entry dependency jar file download,1,909,0,1.0,1,2016-09-13T18:11:12,0.0
57359917,603774.0,<authentication><caching><architecture><microservices>,cache authentication call,imagine authentication service application http call cache authentication service cache redi example caching application number,1,30,0,0.0,1,2019-08-05T13:44:31,0.0
57501598,3241983.0,<java><spring><kotlin><microservices><jhipster>,fallback instance type class kotlin unit find feign client,consume microservice feign client error kotlin spring boot release project base feign client wrong,1,111,0,0.0,1,2019-08-14T20:27:53,0.0
57370433,2746065.0,<reactjs><webpack><architecture><microservices><micro-frontend>,create micro frontend bundle webpack share library container application,task micro frontend single spa framework portal main application load js code url micro frontend react base micro frontend react base problem duplicate vendor library react react dom share micro frontend bundle webpack bad practice global stuff violate idea bundele webpack solve problem duplication vendor library find solution load decency systemjs separated tag html wonder solutuion systemjs approach load dependency demand cdn load dependency share webpack bundle react stuff,1,220,1,0.0,1,2019-08-06T06:51:15,0.0
57333830,3234803.0,<kubernetes><microservices><consul><istio>,service discovery dispatch job worker node,apology advance noob question experience devop project stumble problem don service discovery tool consul istio address case voip app idea discord user join voice channel start talk forward voice packet user voice channel webrtc voice connection handle server process process forward voice packet voice channel memory order separate service call service front voice service service receive user request join channel base assign server service user guarantee channel pick server implement scalable quick prototyping implement properly wonder tool consul istio help scenario common approach address kind problem,1,48,7,0.0,1,2019-08-02T21:52:20,0.0
54522891,6025132.0,<rest><websocket><microservices><server-sent-events><openapi>,rest http relevant broadcast datum client application,currently work project microservice asynchronously broadcast datum client application additionally client application communicate system set microservice rest open api broadcast datum consideration mom message orient middleware amq reconsider solution prefer rest endpoint http order provide api open api orient big specialist http main technology send asynchronous datum server client websocket sse open discussion order advice feedback developer help measure pro con solution http technology sse websocket relevant help contribution,1,91,0,0.0,1,2019-02-04T19:18:23,0.0
54591680,11033294.0,<spring><spring-boot><maven-3><microservices>,generate war file multiple microservice spring boot,micro service change account service product catalog service car service order service develop feel difficulty start deploy application strong reason client purchase weblogic enterprise edition reluctant pay infrastructure cost incur deploy microservice follow monolithic architecture configure cluster well performance micro service jar war deploy single war advance,1,91,0,0.0,1,2019-02-08T11:42:19,0.0
54492493,8367537.0,<database><reactjs><architecture><microservices>,microservice authentication authorisation architecture,authorise user microservice architecture deny request microservice authorise module user datum main db share user main db microservice db maintain data integrity create user table microservice basically everytime user access microservice create user post main api microservice loss datum integrity suggestion solid secure architecture microservice host subdomain paa avoid transfer attack reduce delay,1,184,0,0.0,1,2019-02-02T11:13:33,0.0
54504159,4239311.0,<rest><design-patterns><microservices>,design question good aggregate datum microservice ui,scenario aggregate datum service ui current scenario agent login case assign agent case aggregate microservice case assign agent time agent perform sort base case datum good approach datum scenario api call service case aggregate well approach achieve,1,202,0,0.0,1,2019-02-03T15:02:50,0.0
54638575,710618.0,<go><rabbitmq><microservices><messagebroker><go-micro>,consume broker produce micro,write microservice micro framework consume rabbitmq broker write micro rabbitmq plugin micro abstraction rely lot global state internal library set consumer manually create separate broker care internal global state default exchange call consumer function marshal message manually ship support pattern micro well mention main reason choose micro case reliable rabbitmq abstraction reconnect support hard rpc support case,1,219,0,0.0,1,2019-02-11T20:26:07,0.0
51532187,8622785.0,<java><rest><machine-learning><microservices><conv-neural-network>,access machine learning model rest api,convolutional neural network classify cat dog image dataset well code online python programming language deploy model server access rest api save model hdf format example model reference convert pmml file well cnn support pmml file flask library convert model restful web service prefer java prefer microservice spring boot step step article help achieve access model rest api java method deploy access rest api help appreciate,1,537,0,0.0,1,2018-07-26T06:20:11,0.0
51422290,872487.0,<spring><architecture><microservices><hystrix>,advantage threadpool hystrix,advantage threadpool hystrix suppose call third party service call service db thread wait state keep create thread call short circuit threadpooled method batter normal short circuit method,1,314,0,0.0,1,2018-07-19T12:06:33,0.0
51428155,672628.0,<elasticsearch><design-patterns><microservices>,elasticsearch microservice architecture,design system microservice manage datum type common approach database microservice thought elasticsearch place database elasticsearch instance cluster microservice claim architecture nice shiny instance cluster expect answer depend love thought,1,1638,0,0.0,1,2018-07-19T16:55:44,0.0
51481780,5040777.0,<docker><microservices><jhipster>,jhipster microservice mixed docker locally gateway access uaa,question jhipster work combine docker localhost start registry uaa app docker compose fine start locallly microservice gateway sucessfully registry instance view problem gateway connect uaa fail set host uaa localhost help idea deal issue advance,1,147,0,0.0,1,2018-07-23T14:55:07,0.0
51379968,2170547.0,<microservices><cqrs><event-sourcing>,example micoservice app cqrs event sourcing,plan create simple microservice app set appointment cqrs event sourcing sure correctly plan docker container public delivery app rest endpoint setting appointment endpoint setting datum trigger rabbitmq event async endpoint datum call command service sync docker container command service connection sql database setting edit appointment listen rabbidmq event main app change overwrite datum create entry version datum change fire event sync datum query service docker container sql database command service docker container query service connection mongodb listen change command service update database main app call datum rest docker container event source service listen command store mongodb docker container event mongodb couple question appointment command database sync query service call change title appointment command service perform update insert version number read datum sql trigger event query service listen store datum mongodb overwrite datum create entry version redundant fact sql database main app call datum query service rest store command event db docker container restore state command order event sourcing event source change datum sql create version change confused exactely event sourcing apply docker container event source client change change datum trigger change wait polling query service datum good achieve check exist future version number structure reasonable architecture completely lot question help,1,422,0,3.0,1,2018-07-17T11:11:25,0.0
51469118,6311798.0,<rest><microservices><distributed><api-design>,method document contract microservice,http drive microservice architecture service number public endpoint return json example client api gateway intermediary service accept post json body shape query string shape good option documenting programmatically keep track contract service service endpoint refactore return datum documentation tool methodology facilitate update api gateway adapt change,1,180,0,0.0,1,2018-07-22T20:46:16,0.0
51408476,5373288.0,<docker><repository><microservices><web-application-design>,web ui code microservice monorepo,startup process port entire web app decouple concept angular web ui talk collection microservice standard modern approach standard strategy cto basically insist include code angular front monorepo microservice write php luman supposed advantage change common protocol json structure easy deal repo totally onboard keep microservice monorepo hesitant throw angular code well find good practice precedent search search experience kind setup share recommend approach specific sort setup,1,192,0,0.0,1,2018-07-18T18:11:07,0.0
51586999,3016392.0,<java-8><hashmap><microservices><spring-webflux>,refresh hashmap java load startup postconstruct annotation,work java application micro services spring jdk springboot helper class load hashmap postconstruct helper class private void loadempmap application startup postconstruct call hashmap load datum jpa repository hashmap object requirement update auto refresh hashmap set datum ofcourse entity refresh update save operation entity write interface refresh entity entitymanager extend custom repository application respository sure refresh hashmap late object entity refresh hashmap,1,321,1,0.0,1,2018-07-30T04:30:57,0.0
51531230,7683712.0,<spring-boot><architecture><spring-data-jpa><microservices>,manage jpa entity spring boot micro service,micro service share database user management service organization management service service entity problem manage relationship organization user solution doubt solution suggestion help save day well solution,1,355,1,0.0,1,2018-07-26T04:51:51,0.0
42595302,1619369.0,<web-services><rest><microservices>,microservice granularity domain model,build microservice orient application wonder appropriate microservice granularity image application consist set resource type resource map business model todo app resource user todolist todoitem resource save nosql database replicate resource expose rest api application manage internal chat room api gateway gather chat room rest api interaction application front spa application connect api gateway naive approach microservice match application monolith service manage resource business logic manage provide rest api resource handle persistance resource database service database replica service provide internal chat room websocket service authentification service api gateway service serve static asset spa front approach split service service business model exist system call service resource service wonder benefit second approach fact lot downside approach setup inter service communication process request service represent resource relation resource lot work interservice request devop work difficulty share common code resource service business logic start fresh project second approach seam bit engineer work feel start approach split monolith resource service specific service depend observe minimize complexity risk opinion regard good practice lot,1,1030,0,3.0,1,2017-03-04T11:13:39,0.0
42741917,5483488.0,<microservices>,swim protocol node address exist node cluster,background microservice service discovery thing interested swim protocol confused node join network node join cluster address node exist cluster single point faliure question,1,195,0,0.0,1,2017-03-11T23:29:24,0.0
42667203,885203.0,<eclipse><google-app-engine><microservices><google-plugin-eclipse><google-cloud-tools>,cloud tool eclipse plugin create microservice google app engine,upgrade eclipse neon eclipse google plugin eclipse longer support switch google cloud tool eclipse plugin time easy google plugin eclipse create multiple module microservice create enterprise application project gae runtime create dynamic web project tie enterprise app cloud tool eclipse choose enterprise app google app engine option runtime selection help cloud tool eclipse create microservice gae,1,336,2,0.0,1,2017-03-08T09:13:51,0.0
46143509,1599719.0,<microservices><spring-cloud><netflix-eureka><netflix-zuul><netflix-ribbon>,capture log instance microservice zuul,setup multiple instance microservice register eureka server ribbon client side load balancing zuul gateway server usual stuff capture log instance service respond request bring conclusion base usage instance,1,774,2,0.0,1,2017-09-10T17:24:13,0.0
46120795,2203868.0,<asp.net-core><microservices><pivotal-cloud-foundry><service-discovery>,steeltoe service registry discovery prefix hostname resolve url,pcf service registry register micro service discovery client resolve actual service url inter service call work fine resolve target service url requirement support access gateway host resolve url prefix dns access gateway accomplish eureka configuration hostname eureka instance configuration mention url resolve thought advance,1,533,0,0.0,1,2017-09-08T16:20:51,0.0
46110222,138288.0,<asynchronous><message-queue><microservices>,recommend handle microservice processing bug insight,question sketch sample set microservice illustrate dilemma scenario outline suppose microservice activation service feature supply customer de activate registration service member add change secure key service generate secure key multi step process member communicate communication service communicate member external vendor secured key service request secure key feature activate additionally communication service communicate member secure key communication feature activate microservice service datastore completely sufficient datum require microservice duplicate locally keep sync asynchronous message microservice dilemma face main dilemma pretty datum synchronization multiple datum store keep sync account message lose process order plenty box solution fail fall kind etl process keep thing sync main issue face action perform example secure key service perform action receive message registration service member secure key feature active activation service receive message activation service secure key feature active member registration service case message external system lead update local copy datum well logic process question actual question recommend cope bug insight handle message suppose bug message handler activation service handler update internal datum structure fail detect register member start secure key generation process alternatively bug decide handler system reason resubmit reprocess message message fail real trigger behavior message hope clear apologize post stack site stackoverflow,1,54,0,0.0,1,2017-09-08T06:45:56,0.0
46230643,7028781.0,<rest><messaging><microservices>,microservice rest api messaging,microservice expose public rest api gateway communicate service messaging,1,94,1,0.0,1,2017-09-15T02:06:02,0.0
46185813,1348798.0,<node.js><http><logging><cloud><microservices>,track log http call internally node js server,debug call express app micro service network receive error full raw http log security team analysis advice track http call micro service deploy pivotal cloud foundry tool zipkin opentrace appear debug latency http log morgan winston modules track internal call morgan currently log basic http code pick call inside app app browser full raw http request assist security team default log output morgan stdout console log header header readable format,1,674,0,0.0,1,2017-09-12T21:47:08,0.0
46092764,7967490.0,<java><shared-libraries><messaging><microservices><dry>,microservice share object,currently build microservice orient application monolith issue face send receive object service keep service independent problem eventservice notificationservice eventservice generate event serialize json java publish serialize object activemq topic notificationservice listen specific topic receive serialized object deserialize event class good approach solve problem share event class service introduce project event class problem lead scenario shared project bloat class service include extra project service share type object result massive overhead grow number service,1,760,4,1.0,1,2017-09-07T09:28:30,0.0
56525260,1534925.0,<spring-boot><microservices><spring-cloud-sleuth><zipkin><distributed-tracing>,disable distribute tracing development,set microservice framework follow stack distribute trace spring boot kafka zipkin follow configuration pom xml follow starter dependency add add alwayssampler bean thing work automatically kafka server start case development environment comment code mention starter dependency spring boot automatically configure understand change property yaml file comment code disable comment,1,68,0,0.0,1,2019-06-10T11:11:01,0.0
56696750,5770245.0,<microservices><devops>,manage micro service devop,node three node node communicate node set language library understand devop lifecycle single monolithic web application workout devops pipeline work microservice micro service github repo ci cd pipeline keep version sync microservice version push version incompatible keep environment sync version suppose rely deploy service multiple server ip change service find location service monolithic application command simply navigate site interact code good practice develop locally service learn,1,68,0,0.0,1,2019-06-21T04:13:17,0.0
56670269,834243.0,<kubernetes><jwt><authorization><microservices><istio>,istio http authorization verify user resource owner,istio handle authorization application build microservice architecture kubernetes thing accomplish decouple authorization service utilize istio authorization api gateway kong handle verification parsing jwt token pass required attribute usernames group role header username homer abstract service accomplish verify base role ensure username owner resource access userid match username header continue serve request send configure istio authorization advance time,1,69,0,0.0,1,2019-06-19T14:37:29,0.0
56686391,10933006.0,<node.js><microservices><nestjs>,configservice bootstrap microservice,configservice bootstrap microservice nestfactory createmicroservice,1,81,0,0.0,1,2019-06-20T12:50:11,0.0
56582069,10389781.0,<amazon-web-services><docker><microservices><amazon-ecs>,dynamic port set dockerize microservice,deploy instance microservice port scalable port task definition dockerfile microservice listen port provide environment variable command moment microservice describe aws ecs task definition static port assignment microservice register eureka server multiple service instance ec instance container ec instance service instance free port listen standard implement,1,112,0,0.0,1,2019-06-13T13:53:12,0.0
56645765,2582017.0,<java><mongodb><elasticsearch><microservices><reactive>,architecture spring boot application elasticsearch reactive stream,spring boot sure architect app feature external json restful api rest api reactive streams elasticsearch microservice mongodb angular front resource connect retrieve json external retrieve store mongo db db time time check update external resource json retrieve update field pass json elasticsearch server return response base query reactive stream microservice include oauth restful api token api service service create response finally front angular react search bar query json datum elasticsearch server input direction structure appreciate,1,469,0,1.0,1,2019-06-18T09:20:29,0.0
56643311,10593233.0,<architecture><microservices>,share state instance microservice,rewrite legacy service store datum counter state machine decision service receive query key update perform action service deploy multiple pod service instance receive query counter update sync counter data replicas promise consistency,1,35,1,0.0,1,2019-06-18T06:54:21,0.0
56640304,4181830.0,<kubernetes><openshift><microservices>,choose application openshift,deploy application openshift command navigate application directory command deploy openshift perfectly problem automatically application sure change app test app dev application change,1,60,1,0.0,1,2019-06-18T00:22:09,0.0
56586879,8032425.0,<java><microservices><cqrs><event-sourcing><axon>,retryscheduler axon framework retry nohandlerforcommandexception,saga saga send command microservice specific event configure commandgateway retryscheduler retry send command case microservice retryscheduler perform retrie exception runtimeexception nohandlerforcommandexception throw service offline definately set maxretrycount error message gateway intervalretryscheduler processing command xxxcommand result exception time permanently set attribute error message gateway intervalretryscheduler processing command xxxcommand result exception retry microservice command handle correctly problem idea issue configuration commandgateway retryscheduler,1,136,1,0.0,1,2019-06-13T18:49:09,0.0
56649230,1272094.0,<microservices><loose-coupling>,micro services architecture loose coupling complication,fairly micro service bandwagon architecture principle good micro service environment main thing define micro service suppose loosely couple nature service micro service call micro service directly effectively create monolithic system loose scalability offer architecture pattern question example develop micro service return guid example reasonable micro service environment call guid service directly require understand variety queuing system pass datum service mind insert delete update head round queue simple read guid example call guid service directly micro service note return guid example aware language generate internally clarity appreciate,1,102,3,0.0,1,2019-06-18T12:30:48,0.0
31845342,5196129.0,<spring-boot><spring-cloud><microservices>,spring cloud config download remote configuration service,find spring cloud github day ago problem config service example work correctly configuration microservice application store environment project sure microservice instance spring boot application config file,2,1122,3,0.0,1,2015-08-06T01:24:32,0.0
31165181,1434854.0,<amazon-web-services><docker><amazon-elastic-beanstalk><microservices><netflix-eureka>,set connection docker container aws beanstalk spring cloud netflix,app consist microservice netflix eureka discovery server deploy app docker container set communication service problem beanstalk nginx reverse proxy container default route request port beat tricky script network interface ec beanstalk instance docker bridge docker eth host ip problem dynamically determine host ip address inside container pass eureka discovery server docker image hardcode code configuration expose internal docker interface bridge bottom build microservice enable application docker beanstalk eureka solution scalable hardcode eureka host ip,2,806,4,1.0,1,2015-07-01T15:09:58,0.0
30732982,648325.0,<javascript><php><angularjs><html5><microservices>,correct embed remote angularjs application webpage,work correct embed angularjs application web serve app app server app php app app angularjs app calendar widget sort php app primary app embed calendar serve remote server full access server apps idea angular app loosely couple php app preferably embed single code currently html tag work well wonder wrong approach well mention happy html solution worried backwards compatibility browser iframe solution valid solution ultimate goal head microservice style architecture advance help,2,782,2,0.0,1,2015-06-09T13:10:16,0.0
30772774,3602683.0,<amazon-web-services><amazon-ec2><spring-cloud><microservices><amazon-elastic-beanstalk>,microservice cloud resource limitation,large migration single monolithic web service collection microservice spring cloud spring cloud netflix microservice understand demarcation service mirror separation concern additional factor affect separation service require scale individually concrete example depend level granularity desire microservice environment account signup login profile store product payment report inventory chat social chat room user status area concern bracket represent microservice accounts signup login preference microservice community second approach tend agree issue hosting resource limitation migration streamline provisioning resource installation update service aw stack elastic beanstalk perfect choice elastic beanstalk dishearten discover limit application account ec limit instance region account microservice architecture hit limit add multiple environment staging production service mix website internal tooling amazing content web regard microservice surprised disappointed lack regard actual hosting microservice development deploy couple microservice aw understanding netflix aw microservice host request additional resource amazon throw money solution asgard tool help issue handle sharing instance service result outcome,2,365,2,0.0,1,2015-06-11T06:01:25,0.0
29387250,4194831.0,<spring-boot><load-balancing><failover><microservices>,restful microservice failover load balance,moment monolithic web application transfer project microservice infrastructure monolithic application haproxy session replication failover load balance build restful microservice spring boot clear good build production environment course application unix service reverse proxy load balancing failover solution heavy lot configuration maintenance resource management scale server manually process good possibility setup production environment server easy resource management solution support continuous deployment,2,2355,0,2.0,1,2015-04-01T09:30:10,0.0
30053782,2968101.0,<java><web-services><api><amqp><microservices>,microservice architecture authentication service,study micro service architecture question admit multiple service host follow authentication service billing service plan service question user request gateway send access token stateless oauth gateway authentication service user exist permission access ressource service call directly billingservice host port closed agree port allow host meaning billing service port allow gateway machine advance,2,698,0,0.0,1,2015-05-05T13:02:18,0.0
30000824,1326627.0,<rabbitmq><kubernetes><microservices>,kubernete replication controller replicate message base service,message pass send message decouple service service discovery issue amqp rabbitmq instance broker route capability dispatch message queue feed correct service load balancing handle message broker enter kubernete case lay talk service replication spawn failing service client active protocol http contact service service handle request asynchronously context natural fit replication controller manage group service single entry point load balance kubernetes intuitive concept roll deployment control beast http interface update set cluster message broker message consumer service service client connect directly service send message message broker message broker load balancer dispatch message subscribe queue consumer consumer implement service question gravitate fact usage pattern demos handle service call http kubernete good job create service proxy service replication controller create replication controller kind service http interface se benefit rolling update minimum instance,2,1231,0,0.0,1,2015-05-02T09:50:02,0.0
27838280,4064296.0,<web-services><oauth><oauth-2.0><microservices>,oauth grant server server communication,work microservice architecture oauth provider order allow service interaction develop service grant access user resource order perform internal task user account service access user resource internal viable solution user allow access resource concerned choice pick grant perform task allow update service datum access user resource solution automatically provide authorization code user signup user click allow button perform request grant downside create authorization code time service create clear solution auth code user xxx allow access resource user xxx understand implementation standard lot flexibility opinion appropriate solution handle clear statistic service allow access user resource statistic service grant user access resource,2,367,0,1.0,1,2015-01-08T10:48:57,0.0
34973135,4189441.0,<c#><.net><microservices><azure-service-fabric>,service fabric service service fabric actor user representation,application user post event map entry point application stateless web api service represent user internally user service reliable stateful actor reliable stateful service store profile datum post event user client create user frontend actor service create user internally time user log web api service forward user interaction internally representation user actor service user post event web api service find user forward post event post event public reliable stateful event service store post event inside user user service forward event event service example user public event map event geo reference partition eventservice base geocode program model actor service prefer application,2,1578,0,0.0,1,2016-01-24T07:06:53,0.0
34973165,441889.0,<scala><akka><microservices>,share communication model akka microservice,akka microservice platform support jvm platform direct messaging akka actor communication platform communication unit case class repeat define case class microservice message class single project share microservice project share model microservice recommend akka communication protocol sure create communication case class multiple project correct microservice change model handle versione upgrade version communication model break system,2,363,0,2.0,1,2016-01-24T07:12:41,0.0
31973473,433344.0,<java><microservices><message-bus><backpressure><quasar>,message bus versus quasar http internal microservice call,optimize microservice architecture currently http rest internal node node communication option implement backpressure capability service integrate quasar stack doubt improve thing couple challenge async client thread transient memory client failure crash retry thread lose second theory target server time client eventually reach oom attempt retry thread ultimately limited quasar fiber paranoid wonder queue base alternative advantageous large scale work asynchronously quasar fiber queue centrally manage client jvm queue durable event client target server flight message lose downside queue course hop slow system sweet spot quasar roi peak centralized durable queue critical scale ha question tl dr realize phrase question,2,1046,0,0.0,1,2015-08-12T19:08:08,0.0
35585519,5043003.0,<angularjs><ajax><spring-cloud><microservices><netflix-zuul>,cross origin issue ajax angular zuul,zuul server implement routing microservice seperate ui project angular ajax call ui app specific microservice route zuul error directly hit api local host host work perfectly fine cor configuration add actual api problem happen hit api zuul add configuration zuul work origin issue solution microservice suppose public request domain working ajax call change url zuul cross origin header iam receive hit api zuul header direclty hit api work help,2,1616,4,0.0,1,2016-02-23T18:38:01,0.0
35531784,1828162.0,<authentication><authorization><microservices>,identity user multiple microservice,basic commerce microservice identity access microservice care user account role authentication authentication method base usual token base flow user enter username pass server return unique random token cookie service user profile cart microservice microservice product cart check product cart asume identity access microservice generate random token result succesful authentication link token user token user identity cart microservice example user add product cart send authorization token cart microservice identify user base token distribute database option database token store link user build microservice access microservice user identity special identity access api expose user base access token,2,869,1,0.0,1,2016-02-21T02:59:56,0.0
35589045,1340582.0,<logging><service><spring-boot><microservices>,aggregate log large number micro service,build large number micro service spring boot ofcourse generate large number disseparate log option good practice manage log sense help,2,666,1,1.0,1,2016-02-23T21:57:02,0.0
35501600,5097551.0,<spring><docker><spring-cloud><microservices><oauth2>,config spring cloud oauth docker container,meet problem micro spring docker sso token url correct demo https github keryhu micro oauth docker local computer sso service auth service work fine docker container sso pc gateway service application yml docker compose yml start docker container open auth redirect auth server login open timeout ， address bar sso tokenurl correct resolve,2,1199,0,0.0,1,2016-02-19T09:20:34,0.0
33228178,1525691.0,<performance><http><testing><microservices>,mock web service latency throughput,order experiment error handling strategy typical micro service architecture simple mock web service configurable latency throughput changeable runtime handle request second cheap hardware thing advance,2,116,0,0.0,1,2015-10-20T04:43:45,0.0
32889746,3307993.0,<erlang><cluster-computing><elixir><riak><microservices>,erlang intra cluster communication,erlang cluster connected machine soft limitation machine suffer message send gossip protocol work properly statement benchmark riak node find link basho test understand erlang node cluster capable heavy load wonder alternative limit bottleneck answer big scale huge isolate system small isolated cluster micro service approach question recommend communication rest service unnecessary weight marshle unmarshile json https handshake protocol bind operation load balancer good fit development stale implement erlang elixir joxa lfe,2,278,1,0.0,1,2015-10-01T14:10:48,0.0
32887039,1807118.0,<java><spring><rest><microservices><spring-hateoas>,implement hateoas spring boot microservice project,experiment build microservice java spring boot framework currently work microservice systeem resource independent service book service review service service restcontroller mongorepository interact database user application web client communicate independent service api api call book review service merge datum return client note communication read learn hateoas microservice set question good implement example find extend entity class case book entity review entity spring class error entity parameter method clash method resourcesupport class example annotate controller question case good implement hateoas book service add link hateoas api change link user call api api process request delegate necesarry service,2,596,5,0.0,1,2015-10-01T11:56:39,0.0
32996097,1364684.0,<java><spring><oauth-2.0><microservices>,single sign microservice,couple web app convert microservice future create microservice authentication authorization permit sso read lot feeling solution good idea microservice architecture hand oauth authorization authenticate good option find good guide implement oauth third party good solution bit confused term tecnologie head saml openid choose,2,882,0,2.0,1,2015-10-07T15:17:12,0.0
35928639,299152.0,<json><rest><clojure><microservices>,clojure bind rest json data,frontend engineer team switch service micro service write clojure main issue clojure naming convention prefer hyphen separate word variable straight map variable json js consumer access datum bracket notation response separate word ideal easy good practice lookup hour doc read avoid issue single word deal,2,264,0,0.0,1,2016-03-10T22:29:44,0.0
33763271,2655332.0,<docker><vagrant><microservices><consul>,consul registrator architecture separate consul agent vm,consul registrator pick microservice vms understand registrator auto register container consul vm consul microservice vm registrator microservice unable registrator talk consul agent separate vm closely architecture separate consul agent vm understand registrator forward container info consul agent vm registrator vm consul agent server,2,381,0,1.0,1,2015-11-17T17:26:21,0.0
36307211,218635.0,<spring-boot><dropwizard><metrics><microservices>,override url suffix hystrix metric stream endpoint,setup lot dropwizard service stream metric hystrix dashboard write service spring boot metric stream url dropwizard find override stream servlet url pattern sure configurable idea,2,394,0,0.0,1,2016-03-30T11:17:08,0.0
37176069,1098606.0,<python><docker><cassandra><microservices>,docker container die excute query insert update cassandra docker service,docker cassandra well face weird issue help debug issue great container host cassandra service container container perform insert query cassandra container execute query container service container die log container relevant log debug reason container die insert sure exception catch exception baseexception add logger track issue container die block suspect docker error memory moment write die code docker container offend docker work exception sure shutdown cassandra session advise,2,226,0,3.0,1,2016-05-12T02:05:36,0.0
34357893,2180959.0,<caching><spring-cloud><microservices><netflix><hystrix>,netflix hystrix share request caching,spring cloud base netflix oss architecture cache result method set pattern question pretty simple distribute cache multiple instance service redi size grow,2,614,0,0.0,1,2015-12-18T14:31:46,0.0
34316241,526390.0,<session><socket.io><real-time><microservices><sockjs>,realtime connection sockjs socket io microservice application,currently build application micro service architecture application api user authentication receive request initiate keep realtime connection user socket io sockjs system store socket user object second application worker stuff send realtime datum user question second application worker send realtime datum user worker send message api api forward message user worker directly send message user,2,421,2,0.0,1,2015-12-16T15:44:51,0.0
37977210,5855116.0,<sql><jpa><join><microservices>,microservice join large list datum,find move microservice technology compelling reward challenge traditionally write query base jpa join customer address example problem return customer record time address assign customer assume relationship join jpa solve problem easily microservice essentially microservice customer address problem fetch customer record return address record relate customer address record dependency customer query single query microservice return address customer result horrible criterion query pertain microservice example search single criterion microservice allow easily map datum gateway,2,664,0,0.0,1,2016-06-22T20:00:38,0.0
38049334,403617.0,<maven><dependencies><release><microservices>,manage multiple dependency microservice maven,maven define manage dependency microservice example microservice microservice problem release phase lot time fully manual perform microservice remove change version dependency perform second microservice remove microservice wonder automatize perform release cascade,2,1202,0,0.0,1,2016-06-27T08:39:27,0.0
38045423,740175.0,<docker><architecture><cluster-computing><microservices><docker-swarm>,concept ambassador distribute system,explain simple term architectural concept ambassador cluster computing benefit implement microservice architecture pattern study docker docker swarm term mention repeatedly article repos example repository call project call,2,296,1,0.0,1,2016-06-27T03:21:58,0.0
38006427,825920.0,<.net><f#><microservices>,build microservice application net,plan build internal application company implement micro service server company windows server build asp net core good example kind tech stack,2,1083,5,0.0,1,2016-06-24T05:53:13,0.0
34498033,5682222.0,<kubernetes><microservices><fabric8>,namespace currently fabric console,complete instruction install fabric google compute engine connect console,2,373,0,0.0,1,2015-12-28T17:35:18,0.0
34578641,4064296.0,<ssl><https><microservices>,real adopt ssl transport layer microservice architecture internal lan service service communication,scenario webservice reason sign cert microservice add overhead service communicate vpc sit firewall public endpoint nginx public face valid cert service multiple server aw,2,1657,1,0.0,1,2016-01-03T16:13:29,0.0
34450732,458870.0,<architecture><microservices>,microservice bound context distribute analytic,current system slice service single monolith application independent service pretty standard architecture analytic side lambda front service parse http request push stream consumer service build roll kind event call database directly performance reason reporting service read roll table return meaningful datum datum curation service hour batch job read datum sample delete row short live datum report architecture follow diagram consumer reporting service table break bound context follow anti pattern time schema change deploy consumer service create datum report service read datum time deploy curation service follow bound context rule expose method reporting service build roll base consumer call parameter curation service expose curation method reporting service transform report service kind god service huge downside solution impossible predict latency report box perform batch job create ton roll calculate report service multiple responsibility architect three service consumer reporting curation loosely couple depend directly database integration,2,166,0,1.0,1,2015-12-24T09:49:05,0.0
54763936,6655341.0,<node.js><docker><docker-compose><microservices><traefik>,communication microservice docker compose traefik,microservice base node app docker docker compose traefik service discovery microservice moment server app node app localhost search microservice search microservice localhost issue request microservice docker compose config node app search microservice expose port call node app call browser work,2,266,0,0.0,1,2019-02-19T10:24:02,0.0
54678687,3859743.0,<google-cloud-functions><microservices><serverless><next.js><ssr>,properly implement serverless ssr js target serverless version,js introduce config set describe set basic hello app test copy paste output google cloud function equivalent aw lambda call outline blog post problem render fine fetch static asset script file domain lambda course work lambda script happen idea feature js implement micro frontend architecture development team lifecycle scale backend main selling point feature standard solve set separate server static asset load balancer router sort defeat purpose develop micro frontend static asset include js js script file redeploy time update hope sense help appreciate,2,551,0,0.0,1,2019-02-13T20:13:25,0.0
54763290,1783198.0,<mysql><docker><kubernetes><microservices><rancher>,access mysql docker container manage rancher publish port host,rancher manage kubernete orchestrate docker container microservice container require persistence corresponding mysql container myapp container call myapp persist mysql container call mysql myapp define node mysql container publish expose port host case clash port host wrong datum microservice access mysql instance relevant container mysql workbench view edit datum database external machine physical network idea temporarily expose publish port fly mysql container connect mysql workbench,2,303,0,0.0,1,2019-02-19T09:51:42,0.0
54803880,8030220.0,<spring-boot><jwt><microservices><keycloak><api-gateway>,implement jwt keycloak spring boot microservice acrhitecture,read article keycloak spring implementation mention jwt create zuul api gateway add keycloak adapter describe link article jwt keycloak mention set client access type bearer session strategy nullauthenticatedsessionstrategy jwt question configure client keycloak admin jwt configure keycloak backend config file jwt configure keycloak adapter jwt pass user info microservice create filter gateway user info request,2,633,0,0.0,1,2019-02-21T09:42:58,0.0
54712714,2546809.0,<oauth><authorization><jwt><microservices>,pass user identity authorization microservice,confused good pass user identity authorization microservice asynchronous entry point api gateway hand authentication issue jwt token user call api endpoint token point clear endpoint communicate microservice microservice authorization role channel asynchronous jms kafka processing dalaye case service expose api access external user jwt token auth cooperate asynchronously jms user identity context pass pass jwt token queue message safe token expire target service start processing convert jwt token pass http header target service return regain authorization context response process context specific user handle type authorization jwt return asynch process con find universal solution edit consider case product catalog service order service expose public api user place order queue process step verify product user allow order processing call product catalog service pass user context talk,2,629,4,0.0,1,2019-02-15T15:46:52,0.0
44722194,1629171.0,<spring-boot><jersey><jetty><spring-data><microservices>,deploy independent maven project rest service jar standalone embed jetty server,initial stage application design decouple application business logic module maven project maven project data access layer spring datum independent rest service interface spring boot spring boot create standalone executable jar file module deploy module jar single jetty instance implement micro service single fat application reason client user traffic comparatively low scenario feel independent jetty rest module kill client expect user data load huge implement flexible solution meet requirement wrong approach,2,107,0,0.0,1,2017-06-23T13:04:41,0.0
44797253,3239907.0,<architecture><message-queue><microservices><distributed-system>,reduce unnecessary work multiple instance service,service connect third party web service save mongo collection datum service interested pretty static change exceptional circumstance football schedule btw notify change service check hour match cancel reschedule entry database discard collection service expose endpoint user connect fine single instance service nice multiple instance sense instance query data service three hour discard result follow idea solve kind leader election algorithm leader query third party service separate service small service query datum problematic instance result message queue guarantee consumer process result combine idea leader election query service message queue consume datum kind distribute lock aware solution redis jedis service query feel bit overkill add redi lock meh well idea commonly case preferred solution problem,2,78,2,2.0,1,2017-06-28T08:23:47,0.0
44802594,5403074.0,<asp.net-core><rabbitmq><docker-compose><microservices>,refuse connection rabbitmq docker link,microservice application service rabbit mq message queue communication deploy docker follow code file version service build rabbitmq image container link container container asp net core web api follow setup connect message queue receive follow error message mistake sure correct,2,2101,6,0.0,1,2017-06-28T12:34:43,0.0
30648139,2554190.0,<rest><microservices><trust>,send body,read microservice doubt datum send body datum populate server example imagine real estate agency domain model agent client house imagine agent submit deal log agency system account create client profile system fill transaction form client datum house sell click submit submit datum sale service question sale service require field client client contact house address send require datum browser house client service handle rest restriction system sell house client guarantee sale service agent sell house client trust datum browser advance,2,34,0,0.0,1,2015-06-04T15:32:45,0.0
31449013,2172625.0,<spring><spring-boot><microservices>,micro services spring boot ordinary spring,advantage spring boot regular spring people follow thing code default embed server easy start configs fine fact boot rad rapid application development simple hellocontroller application develop spring mvc rad advantage correct wrong hear spring boot design facilitate micro service example hellocontroller application assume micro service happen create micro service create project assume server tomcat glassfish spring boot embed server handle server configuration example add parameter tomcat confused spring boot usage appreciate explain,2,417,0,1.0,1,2015-07-16T08:26:10,0.0
34790550,978164.0,<java><multithreading><jersey><grizzly><microservices>,thread configuration microservice write java jersey grizzly,design micro service base system service deploy standalone jersey process embed grizzly web server assume service execute machine change threading configuration grizzly prevent situation thread machine wide default threading model grizzly limit number thread single web server create,2,793,7,1.0,1,2016-01-14T13:12:12,0.0
34676168,4189441.0,<azure><events><geolocation><microservices><azure-service-fabric>,geo mapping stateful actor,azure service fabric reliable stateful actor geo mapping issue actor represent event event create user set event map lot user create lot event event represent actor store geo coordinate state event distribute map group actor represent event actor base area map base rectangle coordinate group actor store list event actor map area view performance issue recommend create dynamically grouping actor area determine user input,2,107,0,0.0,1,2016-01-08T11:36:16,0.0
42843777,5398105.0,<microservices><consul>,microservice consul,interested consul solve follow issue consul load balance microservice instance console server host api gateway monitor microservice discover load balance microservice consul microservice level spin instance essentially iis find alternative reason consul monitor microservice offline attempt start force shut microservice reason consul software solve issue alternative,2,398,0,0.0,1,2017-03-16T20:03:11,0.0
33287495,2663572.0,<oracle><weblogic><spring-cloud><microservices><netflix>,netflix oss spring cloud weblogic,currently infrastructure weblogic java apache wl plugin zxtm traffic flow follow start microservice evaluate netflix oss spring cloud complexity spring netflix cloud weblogic infrastructure explain follow finding turbine java upgrade java wl support java wl upgrade fine upgarde wl upgrade orcale db currently upgrade require issue complexity netflix cloud weblogic wl support jdbc dependency netflix oss product jdbc version eureka ribbon wl cluster load balancing apache wl plugin require session stikiness appreciate share experience thought matter answer query share,2,1404,3,0.0,1,2015-10-22T17:55:36,0.0
33291874,2079172.0,<microservices>,microservice worker role api,mixed example microservice implement worker role processing request queue api rest support asynchronous scenario queue utilize simple dumb queue listener forward request microservice rest api synchronous scenario call rest api directly term microservice vaguely define people consider api restful service abstract service processing request request provide,2,1476,1,0.0,1,2015-10-22T22:32:19,0.0
46725906,7925728.0,<rest><security><spring-boot><oauth><microservices>,spring boot micro services rest api security,newbie spring boot micro service micro service ui service ui micro service call api service validate rest api call implement security rest api call global share micro service good approach oauth oauth server achieve google clear view resolve,2,1052,0,0.0,1,2017-10-13T08:43:38,0.0
46682651,5555681.0,<docker><docker-compose><dockerfile><microservices>,create docker image whitout os,install microservice binary centos microservice find optimize image size wonder create docker image os moment deployment docker os layer cache image beginner clear statement,2,341,0,0.0,1,2017-10-11T07:47:59,0.0
46696171,3583084.0,<microservices><distributed-transactions><eventual-consistency>,achieve consistency microservice architecture,example amazon rely microservice architecture order payment seperate micro service checkout order amazon finally order detail eventual consistency approach pc generalize question eventual consistency appropriate business transaction user result transaction seperate microservice meaningful order payment handle consistency,2,501,0,2.0,1,2017-10-11T19:34:36,0.0
46571540,1322563.0,<java><spring-mvc><spring-boot><microservices><netflix>,java spring boot micro service exception handling,java exception handling divide error check exception unchecked exception question exception normal java exception handling extend exception class check exception handle consider exception hierarchy major spring book internet tutorial mention spring boot context micro service extend runtimeexception class controlleradvice clear violation java exception handle basic argument extend runtimeexception exception handle exceptionhandler method generate handle runtime extension runtimeexception compile time exception handle trail visible hard trace exception throw reason follow basic java check unchecked exception handling concept exceptionhandler method follow extend runtimeexception exception scenario excpetionhadler follow basic java check unchecked mechanism exceptionhaldler idea suggestion correction,2,2408,1,0.0,1,2017-10-04T18:14:18,0.0
46564574,7750824.0,<asp.net><docker><.net-core><docker-compose><microservices>,unable docker container entrypoint,build docker container asp net core application microservice inside fail exit error log docker container docker file dockerfile dockercompose docker compose command exit asp net code error code debug issue solution issue clearly define entrypoint dockerfile entrypoint dotnet flousermanagement dll fail execute code microservice inside container,2,271,2,0.0,1,2017-10-04T12:12:02,0.0
46600610,1619369.0,<authentication><jwt><microservices><api-gateway>,pass decode jwt payload micro service,change application authentification architecture switch json web token incoming request pass api gateway dispatch request micro service stack authentification verification jwt pass request gateway authentification jwt pass subsequent micro service decode gateway pass decode payload service pro con solution pro keep standard authentification http header con decode token service pro token decode directly usable service con standard http header pass decode payload standard situation opinion,2,209,2,3.0,1,2017-10-06T07:35:44,0.0
46585082,5506061.0,<asynchronous><spring-boot><microservices><spring-rabbitmq>,async communication spring boot micro service,spring boot create micro service communicate synchronous asynchronous synchronous communication resttemplate asynchronous call requirement asynchonous query micro service fetch query datum query large sum datum case save request transaction table return response transactionid callbackapi call callbackapi transactionid query datum help,2,1701,4,1.0,1,2017-10-05T12:00:04,0.0
41548676,5561963.0,<java><akka><actor><microservices><lagom>,lagom production,work set lagom application production contact lightbend conductr license hear age alternative approach multiple question scale application pretty small static service locator work open alternative mysql event store default configuration cassandra reason relevant thread suppress cassandra lagom service locator add follow build sbt add follow piece application conf service impl module dev environment application tmux session configuration service locator default port individually hit service port sure expect behaviour comment create zip file unzipped executable interestingly zip create service impl folder multiple module service sbt dist create individual zip file service executable create connect cassandra launch service locator ignore static service locator configuration add basically ignore add build sbt explain lastly service service service node cluster node service node service static service locator application conf service application conf copy configuration static service locator application confs specific actor spawn node work service locator configuration tmux session production good finally code production,2,1549,0,1.0,1,2017-01-09T13:00:59,0.0
40333799,4749577.0,<go><architecture><domain-driven-design><microservices>,abstract persistence layer,programming wonder community consider good practice attempt abstract persistence layer ddd handle introduction repository expose set agreggate application layer concern overly condition thinking problem perspective object orient design explore programming paradigm attempt develop micro service reason keep design simple,2,702,0,1.0,1,2016-10-30T21:27:59,0.0
40296598,649811.0,<architecture><microservices>,micro services approach isolation decoupling,add service micro service architecture service compute datum responsable computation occur high frequency order compute thing service retrieve additional infos service bound context issue call computation performance issue good approach good idea service save kind snapshot additional infos asynchronous synchronisation service perform call time compute,2,193,3,0.0,1,2016-10-28T01:27:44,0.0
40485481,2463810.0,<azure><microservices><azure-service-fabric>,front developer workflow service fabric web app,front developer join project team work service fabric build web front microservice drive application problem work local service fabric cluster redeploy application test work web app slow developer velocity massively process longer longer service add work web app communicate api gateway service graphql net local web application service fabric cluster communicate allow front developer tool chain remain intact develop fast pace incremental building live reload tool course well solution problem love hear,2,489,7,2.0,1,2016-11-08T11:15:26,0.0
36876367,5224823.0,<c#><azure><microservices><azure-service-fabric>,cloud service service fabric authentication,recommend authorize service service traffic service fabric classic cloud service call web api endpoint service fabric service open specific port specific ip service fabric cluster well sure service fabric endpoint call internet,2,1287,0,1.0,1,2016-04-26T21:47:08,0.0
36877722,1508665.0,<microservices>,microservice db table,person nativecountry spokenlanguage query microservice granularity explain query example assume table database relationship person nativecountry table relationship person languagesspoken database front application suppose crud operation person entity capability retrieve people base nativecountry spokenlanguage sense develop independent microservice entity aggregator microservice upper layer build combine datum ux layer combine build single microservice,2,915,4,0.0,1,2016-04-26T23:41:28,0.0
36913462,2083957.0,<java><spring><maven><containers><microservices>,difference fabrica vert karaf felix equinox spring dm fuse docker,plan convert monolithic server architecture microservice architecture base pre requisit base understanding inheritance maintain lot disruption project cent container good develop deploy microservice tool platform container good manage microservice base application keen find container provide spring boot application lot turbulence spring environment spring dm shut inflow multiple container provider virtualization require docker main question additional question,2,972,5,1.0,1,2016-04-28T11:35:58,0.0
36948775,3225105.0,<concurrency><scalability><microservices><data-consistency>,manage data store concurrency microservice scale,find micro service fundamental question enterprise scenario micro service write persistent data store rdbms kind nosql case persistent data store enterprise grade single entity ofcourse replicate consider case single micro service deploy private public cloud environment persistent datum store enterprise grade rdbms scale micro service multiple instance micro service read write datum store traditional data store tune handle concurrent connection handle situation microservice scale good practice scenario pattern,2,1751,2,0.0,1,2016-04-29T23:04:45,0.0
36812791,1124180.0,<report><microservices>,compex report microservice,start project interested architecte microservice wrap head order service product service report service order product product category order product fetch order loop fetch product order return match assumption correct efficient microservice,2,2523,0,0.0,1,2016-04-23T15:36:11,0.0
42134186,3142695.0,<javascript><mongodb><meteor><microservices>,db ddp connect application,connect meteor application ddp expect db datum second service application datum server side subscription example wrong start main web application load mongodb port start service application web main server main js service server main js collection datum service application result,2,36,0,0.0,1,2017-02-09T10:28:47,0.0
42344020,788833.0,<rest><asp.net-web-api><asp.net-core><microservices><asp.net-core-webapi>,hide multiple web service,system big amount small service idea hide entry point system consider good practice common approach solution case asp net core,2,70,0,1.0,1,2017-02-20T11:59:15,0.0
42281634,6067957.0,<node.js><amazon-web-services><orm><microservices><loopback>,application side join orm node,start loopback loopback nice allow relation multiple rest datum service call initial data service pass query parameter perform join query reinvent wheel write massive wrapper loopback loopback rest connector find exist library framework tackle extensive googling turn true microservice environment service database article example datum microservice pet return object completely microservice owner owner return owner info api level microservice call datum service microservice apply establish model pet query pet successful response pet join owner send owner owner response user simply return list pet include owner datum pet pet find return,2,206,0,0.0,1,2017-02-16T18:11:38,0.0
42354108,1603828.0,<c#><azure><asp.net-web-api><integration-testing><microservices>,integration testing microservice architecture,pattern good practice integration testing microservice quick description context microservice depend azuread authentication microservice authorization microservice talk azure sql db crud user role permission expose endpoint check permission service protect azure ad authentication good approach create integration test case reference guidance question mock mock setup teardown strategy,2,766,1,0.0,1,2017-02-20T21:00:15,0.0
41756234,5446671.0,<spring-boot><configuration><microservices><consul><spring-cloud-consul>,consul key pair configuration spring boot,change registration server eureka consul consul config server service discovery consul success understand key pair option bootstrap application spring boot dependancie spring boot app consuledemoapplication class bootstrap yml,2,3339,0,1.0,1,2017-01-20T04:40:47,0.0
41745964,2753974.0,<asp.net><angular><asp.net-web-api><architecture><microservices>,microservice asp net,read migrate platform micro service architecture stack asp net web api rest server angular front proof concept check continue road understanding chunk web app slice micro service screen user purchase history big micro service poc create micro service read ui microservice create angular app rest call rendered html,2,507,0,0.0,1,2017-01-19T15:42:23,0.0
41776814,2928425.0,<amazon-web-services><amazon-s3><aws-lambda><microservices>,access large file store aw aws lambda function,gb file store write lambda function access file parse algorithm sure lambda function big file work max execution time lambda function min find aws feature regard fast acceleration help consider scenario lambda function service host code micro service parse file advance,2,3202,1,0.0,1,2017-01-21T07:29:07,0.0
41747165,157017.0,<azure><microservices><azure-service-fabric>,service fabric development environment windows server,develop microservice net core top service fabric development environment release process automate test environment functional test environment full instance sf azure costy tolerate availability performance dev environment production environment azure vm sf work windows server core find affirmation online instance application vm,2,172,1,0.0,1,2017-01-19T16:42:28,0.0
41832273,5954938.0,<docker><kubernetes><microservices>,kuberenets web ui dashboard graph,instal docker kubernetes kubeadm instal web ui dashboard access cpu memory usage graph happen,2,848,2,0.0,1,2017-01-24T15:41:14,0.0
41739975,2629219.0,<database><microservices><nosql>,reason decouple database microservice,current finding subject correct aspect major principle microservice strong cohesion relate code goupe class well define job strong hingh cohesion loose couple interconnect component system component depend practicable coupling refer degree direct knowledge element change service require change shared database decouple architecture principle cover follow fact link user specific technology choice well actual database implementation businiess application logic spread multiple user share edit trigger change behavior multiple place monolithic architecture share database failure serverie tie compelte system failure happen coupele avoid mention issue decouple database microservice share database microservice database ease scaling system provide system availability service fail update benefit microservice improve flexibility speed development correctly decompose microservice develop deploy independently parallel service,2,1184,3,0.0,1,2017-01-19T10:51:46,0.0
39891218,2009079.0,<microservices><gateway>,set development environment micro service architecture,move develop web app micro service architecture service api gateway handle authentication proxy request appropriate service encounter problem set development environment develop service local machine laptop test production gateway consider follow requirement inter process communication manage sync version access service authentication token produce gateway,2,509,4,0.0,1,2016-10-06T08:30:12,0.0
53158306,4211520.0,<docker><webstorm><microservices>,microservice docker node js debugger,microservice docker connect problem example problem connect service port debugger option debugger connect breakpoint webstorm well,2,44,0,0.0,1,2018-11-05T16:22:29,0.0
53026671,10568657.0,<design-patterns><service><architecture><microservices>,reconcile microservice share principle independence,entire domain entity decide separate service person info manager friend manager deal entity literally interpret share service storage basically partition store place guess share potential problem case friend manager service system comb service person info manager service follow previous point ui user manage friend ship query friend manager service perform join friend manager service dependency person info manager service third service dependency remedy potential problem sure real problem share datum minimum person order manage friendship friend manager service work independently potential downside extra storage cost duplicate datum friend manager service stale lag receive update person info manager service error friend manager service query person info manager service info query account person remove,2,122,0,1.0,1,2018-10-27T22:02:53,0.0
50645878,8054579.0,<cloud><microservices>,microservice well stateless cloud application,understand better stateless state application encapsulate inside subset micro service avoid spread component system allow stateless elaborate add,2,180,0,0.0,1,2018-06-01T14:39:00,0.0
50455134,1090265.0,<architecture><microservices><soa><software-design>,software architect predict microservice architecture mature time,march year ago time question james lewis martin fowler write msa build variety business general understanding maturation architecture work time forward work,2,96,4,1.0,1,2018-05-21T19:05:24,0.0
38178535,5820341.0,<c#><asp.net-web-api><microservices><asp.net5>,share web api controller microservice,exist web api build asp net framework plan develop micro service code exist api api monolithic micro service deploy base customer find tough share controller monolithic api micro service add link file work case controller file share controller,2,1424,0,0.0,1,2016-07-04T06:55:40,0.0
38230495,5118336.0,<spring><spring-cloud><microservices><netflix-zuul><spring-cloud-netflix>,zuul spring security add additional param request,build microservice spring microservice question relate spring security api gateway zuul server zuul forward request read request stream authenticate username pass post request read request forward request downstream service zuul forward request setattribute downstream service workaround ctx addzuulrequestheader huge acheive request setattribute downstream service,2,2739,7,0.0,1,2016-07-06T17:48:01,0.0
38197629,5820341.0,<c#><azure><service><microservices><appfabric>,azure service fabric accept normal portable class library,deploy service asp net core template stateless web api local cluster refer exist class library class library portable type normal class librarie solution compile fine deploy follow error outputpath property set project check sure valid combination configuration platform project configuration debug platform refer portable normal class library service fabric help appreciate jojo,2,251,2,0.0,1,2016-07-05T07:29:25,0.0
55399711,7979517.0,<java><mongodb><spring-boot><microservices><aggregation>,retrieve datum mongodb databse specific range aggregation spring boot,work spring boot project mongodb database studentdb database student document document follow field student attend lecture iso dom iso dow iso month iso year iso week student document retrieve student attend lecture range january march method aggregation great clause mongodb clause retrieve january march problem feasible retrieve student attend lecture range january march example student document,2,56,0,1.0,1,2019-03-28T14:11:53,0.0
49352887,6093604.0,<security><external><microservices><internal>,microservice access security understanding,today microservice architecture logic poc thing sure totally understand logic manage security service thing app usable connect service call case service call user connect case api client access access access http request sure understand logic security apply microservice architecture fact couple article couple stack overflow exchange dmz logic white list ip access internal services external service finally good approach white list ip access example database access api logic wonder good approach understand external internal logic service public organize work bottom example explanation feel free extra detail advance,2,147,0,1.0,1,2018-03-18T21:17:10,0.0
49393058,2972326.0,<c#><rabbitmq><.net-core><microservices>,rabbitmq asynchronously,process rabbitmq queue consumer service follow tutorial process message message processing message long longer db response process asynchronous process message wait time piece code work correct await task follow continuewith await task process message,2,1443,3,0.0,1,2018-03-20T19:55:23,0.0
49490466,8735568.0,<java><spring><spring-boot><microservices><configuration-files>,global variable application variable define spring boot project,develop micro service spring spring boot project convert monolithic service orient architecture project micro service set application variable global variable confusion relate add confusion declare global variable application property file define global variable spring config server global configuration import property conditionally client project set property file profile config server conditionally import client project profile profile represent region case,2,6059,5,3.0,1,2018-03-26T11:33:22,0.0
43939970,0.0,<facebook><security><authentication><single-sign-on><microservices>,social sso microservice architecture,evening grasp concept social sso facebook google work microservice architecture scenario backend microservice order user front webapp user hold user profile detail email address order hold list order link user webapp provide front interact service add social sso simplify process user sign website person social sso create user account user service question assume user click login facebook webapp log john good approach create account john user service log john webapp propagate identity john order service order service validate john log interdependent service order user trust concern downstream service chatty authorisation server facebook google daniel,2,408,0,0.0,1,2017-05-12T14:16:25,0.0
43941794,3281900.0,<api><reactjs><architecture><microservices><graphql>,graphql system frontend client,guide involve communicate frontend client graphql wonder usage purely backend communicate microservice,2,79,1,0.0,1,2017-05-12T15:49:28,0.0
43792085,766118.0,<google-app-engine><oauth-2.0><google-cloud-endpoints><microservices><google-oauth2>,check service service authentication google cloud endpoints,split monolith google app engine application python standard environment service application default service call api implement endpoint framework service work nicely understand correctly check authentication default service work local development server production call service default application credential service api code production return correct application user correctly validate application local development environment return,2,219,3,2.0,1,2017-05-04T20:17:14,0.0
43369008,551049.0,<azure><kubernetes><credentials><microservices><azure-container-service>,unable connect azure container service kubernete,work set environment deploy microservice build code deploy registry problem azure container service follow guide connect acs fail step download cluster credential command ofc change reseource group clustername correct portal error change resource group clustername error find search error ip adress problem figure command network sure work firewall block error help appriciate,2,680,7,1.0,1,2017-04-12T12:03:27,0.0
52051459,995781.0,<docker><microservices><jhipster><keycloak><gateway>,jhipster unable gateway app deploy docker host gateway mixed docker locally deployment,jhipster spring microservice gateway project deploy host docker gateway start gateway host keycloak oauth authentication work fine deploy microservice database gateway docker container docker network docker compose work deploy docker gateway gateway reside docker create network motivation action ui programmer gateway pc microservice deploy server host ease ui development sole gateway technique assign separate ip container docker network technique call docker macvlan networking container host separate ip address physical network container visible host network problem normal docker deployment gateway deploy docker network host work fine scenario successful login microservice return microservice error token invalid mechanism work deploy host docker keycloak prevent token validate external host personally doubt prevent log gateway check keycloak command help gateway summary rephrase question ui developer test angular spring gateway project pc service deploy powerful server docker authentication keycloak deploy service ui developer pc jhipster,2,233,0,2.0,1,2018-08-28T06:30:31,0.0
52137902,678833.0,<node.js><express><microservices>,microservice api authentication api gateway nodejs express,create microservice architecture node js express main feature microservice service orient architecture team design develop ship application independently design microservice offer api communicate api microservice independent life wait request autentication test jwt authenticate api microservice work fine example express middleware authentication route protect layer autentication communication microservice read good api gateway find library read well add authentication middleware inside api gateway implement thing single microservice duplicate code importantly piece software maintain question api gateway communication microservice move authentication middleware microservice api gateway remove middleware api route api unprotected gateway request wrong call route mantain middleware mircorservice code duplicate,2,2007,1,0.0,1,2018-09-02T14:24:18,0.0
39134238,1592213.0,<api><authentication><jwt><microservices>,client authentication microservice jwt openid connect,question regard authentication microservice architecture monolithic application goal split application small microservice bigest problem authentication read lot documentation good solution openid connect authenticate user retrieve jwt pass request microservice avoid multiple endpoint deploy api gateway endpoint user question architecture standard flow authentication user contact identity server openid connect implicit flow token jwt access token user contact api access token api gateway valide access token identity server retrieve jwt add request microservice api api gateway jwt access token red documentation contact userinfo endpoint json format jwt allow authenticated call microservice microservice generate jwt contact microservice directly thought contact identity server oauth client credential flow retrieve token jwt classic oauth access token jwt second thought microservice directly sign jwt certificate issue pki identity server jwt sign certificat private pki microservice receive jwt identify witch certificat sign jwt find rfc regard problem add private claim token certificate day browse web kind solution wonder wrong path sum perfom user service authentication alor service service authentication jwt,2,1253,0,1.0,1,2016-08-24T22:57:09,0.0
44000812,4025493.0,<service><microservices><consul><service-discovery>,consul connect client server,consul setup server client environment start server follow command configuration config file follow consule config server json output start consul commandline command computer domain consul client follwoe commandline config file config file consul client json follwe output error message wrong good regard,2,1303,0,0.0,1,2017-05-16T11:56:48,0.0
51123104,4154302.0,<kubernetes><microservices><vert.x><zipkin><istio>,istio request trace vert event bus message,vert kubernetes hand hand istio service mesh zipkin request tracing track communication event bus client rest http service eventbus service istio trace request eventbus header propagate http grpc eventbus send message tcp istio trace request visualisation tool waterfall graph visualisation service,2,328,0,0.0,1,2018-07-01T12:02:02,0.0
51071363,1818664.0,<concurrency><locking><microservices>,microservice concurrent payment account,transaction microservice transfer money account account mysql data store request call transfer money account account request account account concurrently transfer money question strategy transaction microservice account lock processing request time return error request multiple time,2,171,0,0.0,1,2018-06-27T21:02:51,0.0
50932766,7876302.0,<java><spring-boot><microservices><spring-boot-admin>,client application register sba server,application spring boot admin server couple client microservice register server docker client application register sba server follow step client application add dependency change application property file mention documentation service register surprisingly log server client throw purpose incorrect incorrect property file client logs restart docker restart intellij clear folder help,2,191,0,0.0,1,2018-06-19T16:11:59,0.0
51122354,1552494.0,<microservices><coupling>,couple microservice architecture,work application microservice architecture stumble issue concern couple service typical application order product seam reasonable service operate product catalog javascript client service product browser user click product create order manage order service order create user order product technical level simply persist user product database sum product service product class product product order service order class order product user order imagine follow scenario javascript client list product user order order service provide list product user user care product order service product tackle couple simply assume client responsible call order service list product perform call product service pass product corresponding product response client assemble response approach keep service clean leak domain knowledge service require work client side order service order product call backend product service retrieve product assemble response orderdate productname send client leave client datum downside approach order service gain knowledge product neccessary duplicate product order service order create pass product product order class order class order product product user order easly provide full order additional call product service time order service knowledge product beneficial tough order service provide relevant datum product service approach consider good practice solution,2,257,3,0.0,1,2018-07-01T10:11:20,0.0
56311512,9708474.0,<spring><spring-boot><microservices>,rest controller handle multiple request time single instance application,multiple request hit single restcontroller time application handle scenario multiple request single endpoint multiple request multiple endpoint post multi threading concept utilize handle request fifo pattern maximum request restcontroller restcontroller scope affect handle request behavior request scope default scope singleton handle application context example flow helpful consider build micro service spring boot,2,527,0,3.0,1,2019-05-26T07:24:32,0.0
38964840,2853228.0,<elasticsearch><architecture><microservices>,text search microservice architecture,investigate implement text search microservice base system search datum span microservice service manage organisation manage contact search organisation contact detail search operation prefer search solution elasticsearch work solution base embed object parent child parent domain update indexing payload enrich dependent object datum hold cache avoid call service manage child directly purpose wonder well solution microservice pattern applicable scenario,2,1585,0,2.0,1,2016-08-16T00:17:58,0.0
38922420,678853.0,<microservices>,microservice configuration server,well understand microservice architecture configuration externalize tool zookeeper etcd consul excellent option store configuration layer top service require order provide functionality fundamental configuration server versione change history draft publish configuration find interesting project address concern git handle mention requirement avoid git additional required setup replication option spring config server,2,667,0,1.0,1,2016-08-12T16:15:18,0.0
38931315,5284778.0,<asp.net-web-api><owin><favicon><microservices><self-host-webapi>,add favicon sefl host web api service,service move ordinary web api owin katana host web api service microservice small service favicon ico branding service developer add favicon host web api,2,423,0,0.0,1,2016-08-13T09:32:50,0.0
44460206,5213999.0,<firebase><microservices><google-cloud-functions><firebase-hosting>,microservice deployment firebase host app,build app polymer polymerfire deploy firebase host smooth maintain cloud function separate module separate project deploy independently firebase host google io talk advise microservice style cloud function problem face deploy individual module erase deploy cloud function project firebase function enable erase cloud function deploy declare project nutshell create single monolith complete web application cloud function single fat project deploy thing defeat point microservice style advise setup procedure,2,367,2,0.0,1,2017-06-09T14:20:55,0.0
44597832,5735967.0,<architecture><multi-tenant><microservices>,manage multi tenant connection pool separate schema db approach,multi tenant monolithic application separate schema db approach isolate tenant datum single running instance application multiple tenant access datum diagram sum idea good scale application increase number instance load balancer route request instance instance keep connection pool tenant database serve request tenant result problem grow exponentially number tenant increase high number tenant demand instance demand high number connection demand increase number resource keep track connection pool bad microservice application question approach maintainable alternative implement,2,882,3,1.0,1,2017-06-16T20:53:37,0.0
41408847,1407328.0,<service><backend><microservices><data-storage>,handle private file microservice,work backend project start move microservice development service place fileservice store fetch file underlie amazon storage fileservice provide file checksum authentication retry mechanism share file service client build service service private datum file service store business logic dilemma fileservice store fetch file handle storage fetching file internally service reason fileservice feature implement service free retry checksum reason service work autonomously fileservice tie service handle oauth authentication fetch upload file deploy fileservice authservice service deploy good practice store private file microservice environment good approach pro con,2,347,0,0.0,1,2016-12-31T13:48:21,0.0
48181477,1066894.0,<events><architecture><microservices><cqrs><event-sourcing>,event consumer event sourcing duplicate code,pretty event sourcing domain consider apply event source app store domain event consumer event generate read model read model generate memory consumer poll model fetch event request base request consume stream event generate read model return caller example generate event aggregate type store oracle db request type aggregate fetch event replay prepare read model exactly thing read model es provide historical representation datum change state aggregate change snapshot aggregate point time event basis example change state aggregate change event time represent diff state aggregate point time requirement poll manner consumer request view point time late previous question execute basically logic replay event code replay event implement common library code duplicate replay code consumer worried update event schema update multiple consumer question good case event sourcing,2,384,0,1.0,1,2018-01-10T06:27:20,0.0
48160266,7756558.0,<design-patterns><integration><microservices><soa><canonical-schema>,canonical data model microservice architecture,microservice service service call call parameter response json consume parameter request paramater realize problem better address canonical data model service consume produce canonical data model question canonical model case json suppose response correspond json schema include request attribute map canonical data model include attribute business score report buisness point commonly relate microservice aggregation json attribute replace correspond business,2,971,0,1.0,1,2018-01-09T01:23:28,0.0
48347363,973795.0,<c#><azure><dependency-injection><microservices><azure-service-fabric>,dependency injection type,create azure service fabric service rely native net framework dependency injection constructor problem constructor parameter type system timespan register type dependency injection framework clarify follow example,2,163,1,1.0,1,2018-01-19T18:24:11,0.0
48313647,6475860.0,<node.js><microservices><event-sourcing>,event source microservice node,build microservice poc incorporate concept es ddd cqrs couple question practitioner implement build microservice es add major amount complexity build production microservice es ddd cqrs nodejs framework route build infrastructure full framework axon akka exist node community basically roll good technology stack build microservice decent framework concentrate business logic eda architecture microservice multiple instance service cqrs require separate read write model implement completely separate service imply service multiple read model service keep projection base event receive people implement provide guidance experience,2,730,3,1.0,1,2018-01-18T04:02:02,0.0
47017657,2929562.0,<java><spring><microservices><lombok>,lombok create constructor null field requiredargsconstructor work,play lombok link work person java personcontroller java allow create argument constructor breaking edit error change edit final result,2,1708,2,1.0,1,2017-10-30T14:25:32,0.0
47178056,8881119.0,<spring><spring-boot><kubernetes><microservices>,spring boot kubernetes service discovery,issue kubernetes service discovery spring boot application discover service spring boot application kubernetes cluster local development cluster service discovery dns documentation autowire discoveryclient good discoveryclient spring cloud commons spring cloud starter kuberenete solve problem library share solution,2,3339,3,3.0,1,2017-11-08T11:04:17,0.0
53995130,2534584.0,<node.js><events><rabbitmq><microservices><nestjs>,nestj combine http rabbitmq microservice,microservice expose api gateway gateway care handle authentication route system service gateway simple crud service service expose api communicate synchronously http service include api gateway default nestjs application stick cat example update create emmite event push message broker rabbitmq service listen event process event asynchronously sure achive term inject rabbitmq wonder approach sense generel cqrs module nestjs cqrs bit domain benefit domain split read write model totally wrong track hope advise,2,2334,0,0.0,1,2019-01-01T11:41:08,0.0
53908897,1677071.0,<java><microservices><activiti><bpmn>,sensible generate aggregation layer activiti micro service,project create micro service architecture business process multiple service call activiti generate aggregation layer dev write code deploy bpmn file workflow change sensible experience,2,37,0,0.0,1,2018-12-24T03:26:41,0.0
53983400,1120878.0,<microservices><couchbase><scaling>,scale microservice handle request,couchbase db sprint boot microservice handle request create instance service handle design db consistent single couchbase instance service future problem instance request create datum post datum cb,2,40,0,1.0,1,2018-12-31T03:45:30,0.0
53944603,5026265.0,<microservices><qa><iso><software-quality>,response time turnaround time din iec difference,difference response time turnaround time microservices environment iso description response time turnaround time currently measure response time calculate average latency time response difference send synchronous request measure response time multiple thread hit service multiple request measure turnaround time difference response time measure time system response response matter measurement time microservice environment differ asynchrone response english native language definition state cleary update difference mrt latency mtt elapse time,2,143,0,0.0,1,2018-12-27T11:49:35,0.0
53981235,1797038.0,<c#><caching><microservices><cqrs><mediatr>,mediatr place invalidate update cache,question stem question interface qcrs mediatr library request response create bunch command query bunch behavior cache behaviour query cache check query execute db work great delima updatesomethingcommand update underlying object db refresh cache save db question update cache updatesomethingcommandhandler break solid principal call command updatesomethingcommandhanlder design update cache sure good design principal introduce behavior design update cache sure well solution,2,171,0,0.0,1,2018-12-30T20:37:10,0.0
53849940,5167144.0,<microservices>,manage common datum create microservice,refactore monolith microservie clear datum responsibility access microservice read vertical slice service responsible ui webapi db distinct responsibility example monolith shopping cart app break follow service customeraccount productsearch productmaintenance shoppingcart order share datum determine system responsible shopping cart example customeraccount shoppingcart order customer datum productsearch productmaintenance shoppingcart order product datum datum ordering update number product productmaintenance service send message datum master service handle communication workflow service read write common database,2,111,3,0.0,1,2018-12-19T11:05:36,0.0
53869629,2718128.0,<cross-platform><microservices><opc><interprocess><opc-ua>,good alternative opc ua industrial environment,manage distribute software application semi industrial environment software heart base soa employ opc ua communication process local lan base machine process server outer network management server hardware manager server client customer panel server talk opc ua follow problem configure maintain configuration hard job config file setting lot time security measure detailed certificate management sudden invalidation certification customer system modeling network overhead library hard work communication high datum rate server client disconnect unspecified weird error ua discovery server work respond report opc github forum time troubleshoot internal opc ua impossible performance stability reliable sacrifice feature well performance reliability consider write socket bottom inter process ipc trace error core advertised feature aka plc support desperate find good alternative main requirement opc ua datum model support enable provide clean interface customer team idl publish subscribe remote command update notification node base behavior tough security concern network close high performance datum rate gbps udp support entirely work net framework support opc ua great help dds lack command update notification wcf lacks cross platform support link note mqtt,2,297,6,0.0,1,2018-12-20T13:23:47,0.0
40691082,4050456.0,<soa><microservices>,splitting microservice,start side project suppose virtual recipe book capability store retrieve recipe crud rate search build desktop application learn database unit test uis core domain pretty ddd approach implement crud repositories bit extensible host core functionality online write multiple backend desktop application web application web api service orient architecture microservice sound good approach problem face decide project belong separate service follow project core domain aggregate entity object logic java persistence daos repositorie multiple database backend implementation java search search service sql query persistence db search java desktop application js electron javafx web application flask rail web api manage rate search recipe rest initial approach core domain persistence search web api single project host stack heroku client consume web interface desktop web app project dektop app share core domain write java valid approach split service small service,2,1824,0,1.0,1,2016-11-19T09:07:16,0.0
53559009,3744900.0,<java><spring><spring-boot><microservices><spring-cloud>,spring config refreshscope,property cloud config server config server well config server fetch property change property file request update,2,1095,0,0.0,1,2018-11-30T14:02:09,0.0
53606744,10742380.0,<asp.net><express><session><redis><microservices>,move monolith asp net webform application microservice session management,work move monolith asp net webform application microservice nginx proxy router node express api gateway browser aspx request route exist asp net webform application nginx call route api gateway till route work fine problem session management asp net webform application redi session store session access api gateway asp net store sessionid asp net sessionid cookie redis create key session sessionid datum sessionid internal set express redis session asp net sessionid gateway create key cookie generate api gateway problem asp net create key redi user session set api gateway share asp net web form session api gateway create authentication session management separate microservice session asp net web form api gateway auto increment ttl redis key request,2,118,0,0.0,1,2018-12-04T06:14:09,0.0
53590144,9845955.0,<microservices><soa>,microservice architecture service common feature common,question relate microservice multiple microservice offer feature service order billable approach order billing service billable microservice respective database common order management billing service microservice thing bother billable feature service billing criterion discount observe architecture blog depict bill common centric entire architecture insight highly appreciate,2,234,0,1.0,1,2018-12-03T08:42:01,0.0
48633781,1541609.0,<dns><kubernetes><google-cloud-platform><microservices><google-kubernetes-engine>,kubernetes resolve node service,issue internal dns service resolution kubernetes track issue api gateway pod kong call service internal service work fine attempt deploy service namespace stage production service work expect call code work production service service worth namespace behavior timeout curl service gateway pod timeout apart service deploy call service container pod work expect node service set service expose client side example kubernetes deployment micro kubernetes pre configuration work case absolutely fine lead code relate work fine locally pod resolve find cluster ip internal node service expect attempt curl ip address timeout behavior kubernete google cloud,2,390,0,1.0,1,2018-02-06T00:43:39,0.0
48687955,2761509.0,<apache-kafka><microservices><messaging><hazelcast>,communication microservice apache kafka hazelcast topic,disclaimer experience question preconceive widespread arrange communication microservice rest messaging region messaging communication microservice de facto apache kafka help find clue apache kafka better fit communication microservice hazelcast topic better guarantee feature architecture decision hazelcast example cluster wide messaging follow vert roughtly speak actor framework write top hazelcast topic member discovery kafka message better communication microservice,2,1676,0,3.0,1,2018-02-08T14:35:09,0.0
48762736,5325589.0,<node.js><microservices>,good send password app server authentication micro service,currently process develop micro service architecture project public layer app server route user request relevant micro service reply client mirco service private layer currently rest api send datum wonder good send username password app server micro service plain text format micro service private layer good,2,81,7,0.0,1,2018-02-13T08:49:49,0.0
36698706,5969171.0,<architecture><microservices><azure-service-fabric>,service fabric consistency update state stateful service,imagine code stateful service bad happen point safe transaction deal ensure data consistent happen point point update state service bad thing happen exception throw feasable recover state service node shut point recover state problem follow updatethething add command queue implement logic process queue invent result isok caller updateservicestate idempotent queue keep retry command problem invent remove command queue problem keep happen inform problem lot infrastructure place suggestion simple approach notice service fabric sample deal problem,2,163,0,0.0,1,2016-04-18T15:47:20,0.0
36715395,3102968.0,<cluster-computing><microservices>,cluster microservice component,microservice realise play framework base http service add fault tolerance service instance pick request instance understand microservice design ground cluster purely stateless sustain component simply add failover support external component check status service react failure start instance host suggestion,2,11558,1,1.0,1,2016-04-19T10:15:07,0.0
36582126,3517383.0,<microservices><service-discovery><lagom>,lagom service consume service,three case lagom service consume lagom service cluster lagom service consume lagom service cluster lagom service consume external lagom service external lagom service consume lagom service lagom service consume lagom service cluster case approach serviceaimpl depend serviceb api wich bind concrete implementation inject serviceaimpl understand correctly order consume service api client cluster lagom case type service service top level service api expose external service lagom microservice service external api internal service lagom service consume lagom service cluster documentation configure dependency service api ip port external lagom service lagom service consume external lagom service contract ip external lagom service consume lagom service lagom support,2,1281,2,1.0,1,2016-04-12T19:15:41,0.0
36152538,5755581.0,<docker><kubernetes><microservices>,kubernetes cluster ip,kubernetes service application service environment variable cluster ip service call service environemnet return null cluster ip guy idea,2,50,0,0.0,1,2016-03-22T10:56:50,0.0
36272482,455553.0,<spring-boot><spring-integration><metrics><microservices>,write spring boot metric stdout aggregator,java application write top spring boot metric generate management api filter metric generate base metric prefix print stdout send select metric party aggregator reference code result metric write stdout add class good intercept metric preconfigured cadence process write stdout publish aggregator,2,631,2,1.0,1,2016-03-28T22:45:25,0.0
42379365,1620696.0,<docker><docker-compose><microservices><docker-swarm>,output service docker stack,docker compose output service console color easy distinguish multiple instance service output appear today deploy stack swarm docker compose time service output service docker compose instance service replicas node node output replica docker compose output replicated service deploy docker stack docker swarm edit answer enable experimental option docker daemon inside docker machine create hyperv driver multi node swarm docker window enable inside docker machine,2,1822,0,0.0,1,2017-02-21T22:40:31,0.0
42393102,5954938.0,<spring><docker><monitoring><microservices><spring-boot-actuator>,spring actuator metric aggregation docker container,spring boot rest service application application spring actuator display metric health aggregate container application,2,726,0,0.0,1,2017-02-22T13:39:44,0.0
47992254,4716474.0,<google-app-engine><microservices>,microservice gae mix standard flexible gae service,separate project follow gae standard java runtime app gae flexible python runtime app move project micro service application project service app service default app service check host standard flexible gae service share application identity microservice setup quick answer highly appreciate ps,2,415,0,0.0,1,2017-12-27T12:31:25,0.0
48071720,5446671.0,<spring-boot><microservices><cqrs><event-sourcing><axon>,org axonframework eventsource incompatibleaggregateexception axon framework aggregate identifier null apply event,config cqrs event source axon seatresevecreatecommand work properly seatreserveupadatecommand work correct seatreserve aggregate controller send request postman create request update request update error solve,2,1239,0,0.0,1,2018-01-03T05:35:13,0.0
37634349,2180005.0,<java><jms><ipc><microservices>,handle large file process messaging query microservice environment,people good organize ipc imicroservicesc asynchronous communication query kafka jms pass large data file service suppose video microservice publisher microservice receive video user verifie send publisher convert publish oblivious video large file overload messaging system kafka suitable big message course share database send video kafka couple service real microservice architecture situation practice handle,2,1291,3,1.0,1,2016-06-04T19:45:51,0.0
37699062,1016265.0,<soa><cqrs><microservices><event-sourcing><eda>,api event microservice approach,term type request read subscribe event deal realise open api customer api gateway eventize transform event request microservice cloud instance invoice order service clear order create event consume invoice service create invoice clear receive list user order cqrs order service side service lastorder keep projection require datum request transform event lastorder provide api listen event update db,2,1076,0,1.0,1,2016-06-08T09:50:34,0.0
37684053,1808649.0,<ruby-on-rails><port><docker-compose><microservices>,docker connection refuse running service,local installation docker access port file config mailcatcher rail app rails app send email error connect port work docker beta mac osx,2,934,0,0.0,1,2016-06-07T15:55:56,0.0
57112530,2663572.0,<apache-kafka><microservices><integration><message-queue><apache-kafka-connect>,kafka connect integration multiple message queue,design system integrate multiple message queue mq base backend microservice backend process mq payloads choose kafka medium messaging consider kafka mq connect mq integration approach integration kafka mq connect source sink connect backend kafka topic backend pro extend backend touch exist connector con connector topic maintain single kafka mq connect source sink single kafka topic backend additionally sink connect dynamic route mqs microservice build message filter filter relevant message pro topic connector maintain con addition mq backend require connector change well approach integration alternative apart,2,59,0,1.0,1,2019-07-19T12:29:40,0.0
57017463,4852825.0,<microservices><azure-cosmosdb><cqrs><event-sourcing><materialized-views>,defense wacky challenge event source architecture cosmosdb,current plan incoming command handle function app result event send event hub materialize view argue store event table storage materialize view base event snapshot stream event log azure monitor auditing change domain object response command change feed source event materialized view doesn advantage materialized view query argument don expect lot traffic fulfill audit log save event azure monitor log application log command directly modify representation entity cosmos change feed cosmosdb domain object event create event subscriber stream advantageous approach ya ll reason lose longer concern eventual consistency consistency reference implementation evaluate deeply verse advantage disadvantage event source cqrs paradigm loss moment currently furiously conceptual issue code example reference approach,2,72,1,0.0,1,2019-07-13T08:28:55,0.0
56959625,4423840.0,<java><spring><rest><api><microservices>,error source propagation micro service architecture,implement product consist microservices java spring problem case integrate microservice communicate throw exception task service source problem service implement custom exception handler service return additional property propagate service cool lot manual implementation automatic pattern library magic spring property,2,74,2,0.0,1,2019-07-09T19:48:10,0.0
57109534,6796678.0,<docker><kubernetes><sbt><microservices><lagom>,versione deployment microservice lagom kubernete,question relate deployment micro service framework lagom suppose microservice git repository build sbt microservice define build sbt deploy microsevice kubernetes docker image tag tag docker image version microservice option define version microservice single repo recommend lagom doc build philosophy small team question doubt follow lagom good practice problem,2,83,2,0.0,1,2019-07-19T09:30:02,0.0
57074107,998997.0,<microservices>,handle ui event drive microservice,concern handle communication frontend backend event drive microservice architecture case user create product product list check flow question ui handle product list case product read side process product event,2,89,3,0.0,1,2019-07-17T10:47:35,0.0
57071441,294069.0,<spring><rest><spring-boot><microservices>,transfer file microservice,chain microservice spring boot cloud ui allow user download file file storage response return throw microservice download file microservice upload response store memory outofmemory error return stream,2,166,4,0.0,1,2019-07-17T08:14:42,0.0
55084927,11170047.0,<java><spring-boot><logging><error-handling><microservices>,centralized log wrapper microservice,spring boot microservice sl logger factory service log message follow log error exception log error validation log common microservice centralise log message wrapper wrapper separate maven application add dependency jar good design code snippet help,2,127,0,0.0,1,2019-03-10T06:03:47,0.0
54906876,1666284.0,<asp.net-core><asp.net-identity><microservices><identityserver4>,sense split user identity profile,write solution scratch base microservice approach azure service fabric idea split user identity login credential claim user profile social info avatar link social network birthday identity identityserver stateless asp net core store datum entity framework sql profile manage store microservice stateless well connection cosmos db mongo db api nosql storage disadvantage approach aware,2,158,0,0.0,1,2019-02-27T13:43:58,0.0
57720996,2736919.0,<domain-driven-design><microservices>,sum collection invariant prevent aggregate root creation update,aware lot topic set validation win read single ve read lot don feel ve definite answer doesn smell hackish consider concept general detail datum buy thing store credit mode limit spend year number year huge critical spent cent limit human deliver good check limit manually create add item exist limit check actualy actual transaction meaning create update concurrently avoid load create editing exist doesn scale well huge number introduce aggregate dedicate check create update transactional create update step check create update implement don care ddd rule eventual consistency approach wonder idiomatic ddd solve kind problem strict consistency involve load create update,2,54,0,0.0,1,2019-08-30T05:35:38,0.0
57541079,1132544.0,<spring-boot><generator><microservices><jhipster>,generate frontend code exist app jhipster,exist backend microservice native app support admin ui question jhipster generator create entity exist database mysql understand jdl create manually,2,89,1,1.0,1,2019-08-18T01:40:18,0.0
47451612,1298045.0,<microservices><serverless>,architect serverless framework microservice aw lambda,study microservice serverless solution play angular frontend host lambda function talk dynamodb table api gateway aw example video read watch simple crud microservice simple todo application problem business logic sit build complex application business logic frontend angular application build application api turn call crud microservice feel monolithic approach appreciate definitive answer advise novice good practice,2,369,0,0.0,1,2017-11-23T09:15:42,0.0
47287743,4830250.0,<api><e-commerce><microservices><commercetools>,microservice commercetools cart api,documentation commercetool microservice cart order shipping method independent call api postman body yield correct response provide productid commercetool platform catalog product db hosted localhost add item cart error error log service product catalog cart tightly couple microservice individually question commercetool individual service cart shipping method order exist commerce site,2,411,0,1.0,1,2017-11-14T14:01:57,0.0
47398736,5394713.0,<java><jwt><jhipster><microservices><consul>,jhipster gateway authenticate microservice,microservice project usign jhipster consul service discovery jwt authentication question client access microservice authenticate pass json credential post gateway finally de token gateway authenticate service gateway external client de service discovery find application dev yml guess microservice gateway share common secret key find key yml,2,712,0,0.0,1,2017-11-20T18:26:08,0.0
55559045,2788547.0,<java><spring-boot><microservices><spring-cloud><netflix-eureka>,technical difference api service consumption monolith micro service architecture,study micro services concept small demo understand difference monolith microservice application architectural difference cool demo spring boot eureka spring cloud client side service discovery understand client side server side service discovery struggle find difficult understand technical difference api invocation monolith app microservice invocation microservice application happen beneath curtain instance consider follow api monolith app consume monolith app micorservice api traditional rest api expect consider api microservice application eureka client initial api transform service discovery purpose usage observe eureka server service service registry registered eureka client request microservice specific service eurekaserver lookup resolve find perfect match forwards request request process concern happening internally monolith microservice discovery server microservice internally invoke specific microservice api monolith api invocation differ microservice service invocation abstraction ps learn apology advance mistake vague confused thing correct git hub link content follow javabrains,2,76,0,1.0,1,2019-04-07T12:32:33,0.0
55583167,5164485.0,<java><microservices><netflix-zuul>,status error gateway timeout message netflix zuul exception zuulexception hystrix read time,warn nio exec filter post senderrorfilter error filter request second increase timeout work warn nio exec filter post senderrorfilter error filter netflix zuul exception zuulexception org springframework cloud netflix zuul filter post senderrorfilter findzuulexception senderrorfilter java spring cloud netflix zuul release jar release org springframework cloud netflix zuul filter post senderrorfilter senderrorfilter java spring cloud netflix zuul release jar release netflix zuul zuulfilter runfilter zuulfilter java zuul core jar netflix zuul filterprocessor processzuulfilter filterprocessor java zuul core jar netflix zuul filterprocessor runfilters filterprocessor java zuul core jar netflix zuul filterprocessor error filterprocessor java zuul core jar netflix zuul zuulrunner error zuulrunner java zuul core jar netflix zuul http zuulservlet error zuulservlet java zuul core jar netflix zuul http zuulservlet service zuulservlet java zuul core jar org springframework web servlet mvc servletwrappingcontroller handlerequestinternal servletwrappingcontroller java spring webmvc release jar release ava lang thread thread java,2,862,0,0.0,1,2019-04-08T23:31:46,0.0
55591329,740902.0,<c#><azure><asp.net-core><microservices><azure-service-fabric>,unable resolve service type azure microservice,attempt create microservice azure service fabric net core debug mode work fine hit api point postman hit endpoint publish service fabric application service fabric local cluster single node throw exception sure code snippet controller service service extension startup cs,2,55,3,0.0,1,2019-04-09T11:03:16,0.0
48993781,1613902.0,<jhipster><microservices><jhipster-registry>,work jhipster microservice,understand jhispter microservice architecture image question gateway mandatory link microservice add hard coupling eureka config jhipster registry jhipster registry thing eureka server aim jhipster registry register microservice start,2,519,0,0.0,1,2018-02-26T17:18:57,0.0
48882829,7337938.0,<microservices>,backend frontend bff api gateway,micro service architecture single api gateway provide single api client single api gateway provider api kind client client api gateway provide client api bff pattern netflix second style surely create smart piece middleware architecture multiple responsibility work single api handle bottleneck easily question benefit choose single api handle request client create api gateway design type client face challenge manage maintain complex piece,2,1773,0,0.0,1,2018-02-20T10:16:42,0.0
49051663,5922900.0,<architecture><oauth-2.0><asp.net-identity><microservices><api-gateway>,authenticate authorize profile microservice api gateway architecture,build microservice architecture suppose microservice client web mobile scenario employee access specific share service credential store active directory administrator employee full access specific share service credential store active directory customer access specific share service credential store identity microservice api gateway request handle api gateway invoke responsible check token request valid identify customer employee admin check user permission access request api microservice misconception solution appreciate help api gateway responsibility identity microservice responsibility manage define apis microservice employee customer admin access identify user customer employee admin,2,244,0,0.0,1,2018-03-01T14:18:59,0.0
49069281,2610814.0,<ruby-on-rails><ruby><rabbitmq><microservices><sidekiq>,rails rabbitmq sidekiq architecture,trivial guess situation implementation choice rail app call core user request crawl datum internet crawler business logic fetch persist datum job time block consider architecture sure work good thing scale option sidekiq time user request datum crawl background job sidekiq bear crawl data persist job drawback pay sidekiq pro edition sure oss version suit rabbitmq develop microservice call fetcher rail consume rabbitmq fetch persist datum understand case background processing well sidekiq sneaker advantage message broker case sidekiq background process application,2,1059,2,2.0,1,2018-03-02T12:35:51,0.0
48861926,5705247.0,<rest><web-services><architecture><microservices><distributed-computing>,keep state consistent distribute system,build distribute system ensure client server eventually consistent view datum operate sync extra care network consider reliable word case network failure client operation successful decide retry call consider microservice expose simple crud api unbounded set client maintain house team team company example client request creation entity microservice create persist network fail client connection time client retry unknowingly persist entity second time solution client generate identifier prevent duplicate post primary key half client server generate composite key token issue service service persist entity reply message case entity identifier client network failure entity persist mutate internal view entity decide persist service point generally reasonable service silently update exist entity state client post service answer specific status code happen point developer service influence client design solution sensible practice keep state consistent distribute system avoid common pitfall case network system failure,2,291,5,0.0,1,2018-02-19T08:17:01,0.0
43264727,1163837.0,<python><go><concurrency><server><microservices>,call python task golang,build big datum application stock market analysis tb record day golang datum transformation calculation save cassandra mysql python good library datum analysis pandas spark easy multicore process lot time call python data analysis task concurrently golang execute command task directly scalable solution library communication golang python create multiple server python flask task speed sacrifice concise solution idea,2,834,0,0.0,1,2017-04-06T19:59:13,0.0
43208872,1196908.0,<java><spring><authentication><oauth-2.0><microservices>,communicate user spring boot microservice application,three service auth oauth token provision username password user resource link device birth domain data three spre boot application authentication oauth token provision jdbc token store logging token work well request datum resource server work well happy bit clunky datum resource server link user server side generate user link username bad idea user change username user short method return user object auth server map link application property file bring solution user face method start parsing separate class method feel method object input layer wrong feeling question efficiently clean sustainable definitely depend client send datum auth server fail thought jwt token usage fail fact jdbc token store compatible jwt jwt token revoke store deal short live access refresh token work open approach filter favorite work receive request parse datum unable distribute parse object straight controller solution guess approach completely wrong spring boot detail solve automatically,2,600,0,0.0,1,2017-04-04T13:37:07,0.0
43167750,2066562.0,<database><algorithm><sorting><microservices><sortedlist>,update sorted list,common algorithm search big list player sort score billion player second player change score update sorted list keep sorted player position update score sort hole list efficient sort oldpos newpos better move player shift player best algorithm correct regular database handle task efficiently develop service java keep sorted list ram shift,2,119,1,1.0,1,2017-04-02T11:25:21,0.0
43212533,2152061.0,<microservices><application-design><eventual-consistency><event-based-programming>,eventual consistency microservice base architecture temporarily limit functionality,illustrate question twitter example twitter microservice base architecture process server database tweet appear server store database datum generate event fire server event point store database process user create tweet edit tweet achieve three service process event store db require datum service consistent provide edit functionality moment workaround switch consistency microservice base architecture benefit problem tight couple workaround restrict user action time till datum consistent service solution depend customer business requirement workaround add additional logic service store edit user action apply datum consistent drawback increased complexity system phase commit reliable slow slowness huge drawback case load twitter solve lack reliability increase complexity solution question nice solution illustrated situation thing mention workaround programming platform database misunderstood workaround correct approach eventual consistency guarantee datum store action execute service eventual consistency pick case guarantee datum store action perform talk event drive approach service start work event fire follow example event tweet create case service perform action thing achieve reliability ability bear high load adequate complexity solution link subject appreciate natural limitation approach achieve paradigm problem solve,2,802,3,0.0,1,2017-04-04T16:15:01,0.0
40132631,6673314.0,<spring><web-services><spring-boot><microservices><eclipse-jee>,sockettimeoutexception null open spring starter project,sockettimeoutexception null open spring starter project,2,4142,0,0.0,1,2016-10-19T13:21:23,0.0
40068318,1939589.0,<java><spring-boot><microservices><netflix-eureka><netflix-ribbon>,ribbon client discover microservice register eureka,create microservice spotparkin spotparke register eureka server create ribbon client rest call application spotpake application application yml file microservice error source code,2,730,0,0.0,1,2016-10-16T08:18:22,0.0
58980083,3584773.0,<kubernetes><microservices><kubernetes-helm>,kubernetes helm wait kill pod helm deployment,big micro service website pod deploy helm chart production env deploy version helm chart second time start big microservice problem website solution kubernetes kill pod complete start version work eks version eks,2,82,0,0.0,1,2019-11-21T17:01:26,0.0
59082902,1461967.0,<spring-boot><architecture><microservices><distributed-computing><database-partitioning>,sync datum database database instance service microservice,instance service separate database microservice architecture keep datum sync instance instace serve request store datum database db request instannce datum insert db instance database db instance datum database db instance scaling solution,2,25,1,0.0,1,2019-11-28T06:27:18,0.0
49861169,3620559.0,<microservices><production-environment><multiple-instances>,good approach send update micro service multiple instance datum center,micro service rest springboot base service generally datum center location instance service problem solve send update kind polling check updated record service send update service rest call base updates service processing deployment cloud instance send update instance keep track instance db table lookup active instance send update create indicator sequence number base approach find update send active instance send update router load balancer thing care send active instance store active instance familiar network prod system behavior communication cloud system,2,45,0,0.0,1,2018-04-16T15:37:01,0.0
49944789,2540256.0,<java><microservices><event-sourcing>,handle status update source pattern,auditing pattern save history entity event source pattern interesting pattern sense question implement case scenario case invoice generate amount status review invoice status update bill payment adjustment status update pay realize amount incorrect rollback previous transaction revert bill status bill post payment adjustment update invoice status complete understanding event store action apply entity event update transaction amount payment adjustment status database invoice event store json info change payment adjustment status question balance reverse accomplish status handle api call command order event step call service step step understand balance fine invoice status incorrect advise best handle event source pattern,2,84,9,0.0,1,2018-04-20T15:13:09,0.0
37254914,522374.0,<rename><microservices><semantic-versioning>,rename microservice semantic version,number microservice distribute system rename better reflect bound context disambiguate service service version point rename question version conceptually service replace start lean option versione db schema match service position service db schema,2,102,3,0.0,1,2016-05-16T13:18:13,0.0
37413626,23562.0,<microservices><azure-service-fabric><stateful>,perform action upgrade stateful microservice azure service fabric,azure service fabric code stateful microservice upgrade case mind state migration version service update persisted state format delete state longer relevant version service,2,140,0,1.0,1,2016-05-24T12:29:29,0.0
37452239,3916509.0,<json><serialization><microservices>,share datum object model issue whel json transport microservice,architecture product microservice suppose follow microservice position data service work client security bond datum valuation service work client security security valuation datum json data structure hirarachy micro service receive respective input datum json parse java object client java security java valuation java java class object models client java security java valuation java separate java project jar dependency micro service serialize deserialize json object work share object model microservice change object model impact service dependent suppose position data service care client security attribute deserialize serialize share object model complete herarchy client list security list valuation violate design approach micro service microservice completely isolate suggestion appreciate,2,192,1,1.0,1,2016-05-26T05:24:11,0.0
37246989,5627348.0,<ruby-on-rails><microservices><httparty>,organize outgoing api request urls rail,application rail request microservice httparty microservice write rail hard code api urls httparty elegant organize,2,201,0,1.0,1,2016-05-16T05:02:07,0.0
57952084,792664.0,<kubernetes><microservices><jhipster><jhipster-registry>,switch active profile dev jhipster micro service app deploy kubernetes,micro service base jhipster app generate kubernetes deployment script generator deploy app azure ak smoothly current profile prod change active profile dev order view swagger documentation,2,41,0,0.0,1,2019-09-16T07:21:34,0.0
41096759,142540.0,<soa><microservices>,prevent duplicate code microservice soa define bound context duplicate model,refer separate model separate service basically model overlap service procedure canonical pattern canonical pattern solution keep model common place problematic manage service form repository service duplicate model fine find good logic,2,300,0,0.0,1,2016-12-12T08:25:58,0.0
41127782,618775.0,<gradle><build.gradle><microservices><gradle-plugin>,gradle composite build ignore resolutionstrategy customization multi project,build multiple independant project solution plugin override ignore build composite build project layout composite build master build library library multiproject note file spring dependency management share common library version build project library library multiproj individually build fine build composite build dependency resolution customization provide ignore multi project write gradle plugin reproduce turn call build multi project build composite build example resolution strategy customization continue work composite build,2,640,0,1.0,1,2016-12-13T18:07:11,0.0
41094112,2285855.0,<deployment><soa><microservices>,microservice process,assume separate monolithic application microservice microservice process single process,2,428,0,0.0,1,2016-12-12T04:12:21,0.0
41039545,1646449.0,<architecture><frontend><single-page-application><microservices><orchestration>,manage common frontend component microservice,manage frontend microservice common component find solution internet drawback good fit clearify problem group people work microservice large single project common share component frontend component huge project totally share manage share component duplicate solution find component share maintain single point node package npm install group point microservice approach break dependent component maintain good hard maintain future group component second duplicate component accord project develop microservice group time frankenstein common concept obey hard catch enterprise project component match term behaivor component reoccure project frontend solution microservice suitable enterprise project obey rule font size color action point monolithly write maintainable group time balance kayess shortly apply share kernel microservice team dependent,2,541,3,2.0,1,2016-12-08T12:27:36,0.0
51613104,10160422.0,<spring-boot><microservices><spring-cloud-config>,create spring cloud config client env specific configuration,face issue spring cloud config server eureka server profiling service spring application deploy service region dev prod dev region service localhost prod url myapp spring cloud config svc dev region point local git repo prod region point remote git repo configuration start myapp svc service local connect myapp spring cloud config svc dev set spring cloud config uri issue set property define bootstrap property deploy myapp svc prod change config uri point prod config service turn build creation good solution app relate service change property prod deployment set spring cloud config uri application dev property myapp svc work doc change bootstrap call eureka eureka call config service problem eureka config eureka client serviceurl defaultzone define bootstrap yml case change eureka url deploy service prod help property yml mention service,2,490,0,2.0,1,2018-07-31T12:11:19,0.0
51634486,1663618.0,<spring-boot><microservices><master-slave>,master slave configuration spring boot microservice,spring boot application micro service node register eureka server requirement follow autosys job trigger complex calculation micro service minute complete result calculation save gemfire cache database node master slave master node execute request complex calculation master slave master responsible execution complex calculation catch complex calculation adhoc request calculation late request reject calculation explore possibility apache satisfy requirement serve request master node achieve,2,689,1,0.0,1,2018-08-01T13:24:24,0.0
53195626,2527474.0,<node.js><reactjs><express><webpack><microservices>,recommend express js react js,find combine react express option expressjs serve react static file fundamentally idea pre compile javascript file disposal spin server express middleware tandem endpoint execute logic server side option host react file separately basically decouple logic entirety frontend backend server serve static js file express server query database return simple json response recommend advantage approach,2,313,2,1.0,1,2018-11-07T18:30:11,0.0
58316573,11349392.0,<microservices><aws-api-gateway><azure-api-management><api-gateway><ocelot>,aggregation datum api gateway,work microservice architecture aggregate datum microservice example frontend call api gateway api gateway call microservice customer order microservice customer microservice return customer detail order microservice return order product customer format return api gateway aggregation microservice ocelot azure api management format format format format second format achievable ocelot merging datum base gateway require processing good practice aggregate datum gateway business logic practice follow kind aggregation nice provide reference achieve aggregation azure api management,2,115,0,0.0,1,2019-10-10T06:18:31,0.0
58340244,6374900.0,<security><microservices><sign><tampering>,json web token jwt guarantee integrity http body,info internet jsonwebtoken lot sign content http message sign claim clear standard implementation carry signature body message http header paramount client steal token craft legitimate request expire resource find topic title promising article interest sign content body fail fast implementation signature validation great instance piece wise discard message recognize kb tamper ingest mb message detail aware jwt token common usage authorization party deliver token client forward transparently request server auth party idea actual request client sign content request impractical token issue request token client attach client unaltere request suppose case real jwt produce client third party client share secret legitimately sign request case client principle sign content http body content jwt token suspect jwt format cater signature client server define protocol format,2,39,2,0.0,1,2019-10-11T11:23:19,0.0
49698823,9608999.0,<microservices>,microservice reusability,reusability microservice design microservice base solution reuse lot mind impression thing subdivision responsibility reusability sure newbie fantastic microservice study microservice theory moment,2,423,3,0.0,1,2018-04-06T18:15:47,0.0
46961616,4965623.0,<amazon-web-services><microservices>,good practice health check,rest api smoke test dependency database couple microservice return error problem dependency mandatory application work problem access database critical problem access microservice affect small portion app top amazon elb tag app unhealty dependency unhealty elb recover unhealty dependency app healty lead question check health check check dependency hand realy helpful status app access dependency troubleshooting problem common endpoint purpose,2,1351,0,0.0,1,2017-10-26T18:42:12,0.0
46759745,7379424.0,<asp.net-core-mvc><microservices><cqrs><event-sourcing><get-event-store>,event trigger command cqrs,opinion suggestion recommendation case event trigger command cqrs scenario command service subscriber query service subscriber perform search base result search issue command question query service issue command direct eventstore guess defeat purpose cqrs normal api call command service api gateway issue command,2,141,0,0.0,1,2017-10-15T20:37:21,0.0
50785058,1319799.0,<websocket><microservices><grpc>,websocket grpc rest api intercommunication microservice,websocket grpc implement example system,2,3144,0,2.0,1,2018-06-10T15:09:17,0.0
50840229,0.0,<authentication><go><google-cloud-platform><microservices><credentials>,share credential multiple service access google app,apologize advance naïveté topic create microservice expose api gateway service credential google account access google calendar gmail user login credential share service service face google service credential,2,359,2,0.0,1,2018-06-13T14:50:23,0.0
52627034,10139298.0,<java><soap><jaxb><cxf><microservices>,add external xsd class service endpoint interface generate apache cxf,sei messagesubmitserviceporttype generate cxf wsdl call soap service instance request class messagesubmitrequesttype call wsdl operation method call follow request class field wsdl generate object attribute java set instance class generate external xsd object type attribute short jaxbelement create objectfatory class generate external xsd execution receive error add point class class generate time add annotation bind xjb file append class exist annotation file help idea achieve,2,63,0,0.0,1,2018-10-03T12:27:54,0.0
52664262,4619671.0,<spring-boot><microservices><connection-timeout><spring-cloud-feign>,feign retryableexception read time execute,architecture project ui service port feign call gateway service port call ui service call gateway service call ui service error minute direct call gateway server microservice error application property file gateway service set readtimeout connecttimeout property min error application property file ui service ui service timeout property property work ui service ribbon zuul feign call gateway increase timeout ui service,2,5702,0,0.0,1,2018-10-05T11:07:24,0.0
52687662,806299.0,<java><maven><spring-boot><microservices>,spring boot library application structure,implement microservice library developer create microservice pain implement internal feature health metrics kafka communication plan create multi module maven project install library jar separately jar add dependency application pom xml folder structure library pom xml application pom xml application pom xml question implement directory structure purpose pom xml inside microserviceapplication spring boot starter parent artifact library application pom xml,2,426,0,1.0,1,2018-10-07T10:36:06,0.0
52558131,3384529.0,<microservices><traefik><kong>,duplicate request kong traefik,nee send kong community edition webhook request api problem webhook third party specific url negotiation app docker traefik kong api call traefik kong picture send request service service create service option avoid option solution kong option good,2,196,1,2.0,1,2018-09-28T15:06:28,0.0
45934621,5213999.0,<microservices><dialogflow>,api ai fullfillment post request append action post url,currently fulfilment request originate api ai post request base url configure api ai fulfilment proper route microservice style set server side worthwhile append action post url large project fulfilment action manage single monolithic project cumbersome action url configure organise action multiple cloudfunction case firebase host server side microservice edit answer matthewayne proxy set route request achieve goal introduce additional delay request processing expect huge number webhook fire easy implementation google api ai team incorporate allow great flexibility expect answer google team,2,46,0,0.0,1,2017-08-29T08:51:02,0.0
45990451,3046683.0,<authentication><oauth-2.0><jwt><microservices><refresh-token>,silently refresh expire jwt token oauth,decide switch hazelcast share session stateless jwt authentication authorization oauth find problem fit infrastructure describe multiple system sc access direct link mysite scs mysite scs scs ui backend session implement stateless jwt authorization valid multiple scs es oauth authorizaion server dedicated server uaa oauth terminology scs resource server assume user log scs uaa jwt ttl minute refreshtoken ttl minute leave tab browser minutes jwt expire tab previous scs user click link follow mysite scs scs receive request check jwt find expire refreshtoken alive minute refresh jwt return response scs browser uaa silently refresh jwt kind redirect uaa authorization ability add refreshtoken header,2,1459,0,0.0,1,2017-08-31T21:38:12,0.0
45928269,2485103.0,<networking><amazon-ec2><architecture><microservices><consul>,consul docker base microservice architecture,work switch micro service monolithic application microservice docker amazon ecs decide consul service discovery server ec instance inside vpc question follow start consul agent micro service container instance docker compose consul inside consul agent inside exist docker container micro service attach rough representation situation consul client yellow docker container inside node js container,2,194,0,0.0,1,2017-08-28T22:38:38,0.0
45848118,5479655.0,<java><spring><spring-security><authorization><microservices>,spring boot authorization server send request external service user detail,lot service centralize authentication authentication service noobie spring boot clue implement normal security spring work perfectly find tutorial authentication authentication service send request service clue security base token manipulate decide username valid request feign wrong location code,2,863,2,0.0,1,2017-08-23T19:42:47,0.0
45855433,300520.0,<spring-boot><intellij-idea><microservices><netflix-eureka><netflix>,microservice config eureka service start,create simple project microservice spring boot netflix oss hand dirty create service config service register discovery eureka service discovery service require config service configuration start service service fail inter dependency good practice resolve issue start ps create circular dependency deal situation keep eureka configuration config server,2,1152,4,1.0,1,2017-08-24T07:27:40,0.0
46006400,1860447.0,<microservices><grpc><grpc-java>,grpc internal connection close unknown,grpc inter microservice communication grpc version test keep error microservice happen call test call microservice grpc subsequent call successful code path successful microservice idea,2,1250,7,2.0,1,2017-09-01T18:52:42,0.0
39764239,2108278.0,<apache-kafka><aggregate><microservices><apache-flink><event-sourcing>,recover state consistency flink kafka eventstore,problem implement microservice event source aggregate turn implement flink flatmapfunction basic setup aggregate read event command kafka topic write event topic processing result third topic kafka event store hope drawing help fact kafka checkpoine command replay output event write topic state recover case repeat message aggregate input stream start processing command thought solution flink implement rollback unconfirmed event sink implement current offset event source restart sink remove offset event kafka topic kafkasource kafkasink generate builder expose topology solution strong problem service read event topic inconsistency remove event flink statefull source read event offset match repeat event aggregate drop option robust situation patch deterministic subject flaw rethink aggregate topology warranty recovery case consecutive restart bad solution approach create special kafkasource special watermark kafkasourcestartedwatermark send source startup notify dependant operator watermark send source internally record current kafka offset second kafkasourceuptodatewatermark send source offset reach watermark travel topology transparently operator handle watermark implement special watermarknotifiable interface aggregate buffer drop rpc command input source implement infrastructure kafkasource implement constructor special watermark event travel operator require operator depend watermark emit approach process command criterion example command entry timestamp time time synchronization critical stackoverflow question,2,545,0,0.0,1,2016-09-29T07:40:17,0.0
37889067,6050943.0,<microservices>,reactive microservice example generic real abstract,business process find customer product sell customer lecture reactive microservice abstract form good real life example regard software create today better design utilize reactive microservice example webservice thing customer three major component subthe subthe subthing subthing memory resource intensive time good break reactive microservice subthing scale real time live work practical example thing subthe subthe subthing,2,241,2,1.0,1,2016-06-17T19:30:04,0.0
37715875,1225551.0,<unit-testing><junit><java-8><microservices><spark-java>,testing java spark microservices app implement sparkapplication interface,figure test web rest service write tutorial tricky find answer confusion work expect example embed server assume follow service test sure request follow test test execute aand output main concern method test webapp aim embed server sparkapplication implement override,2,758,2,0.0,1,2016-06-09T02:26:25,0.0
38504315,5318874.0,<restful-architecture><microservices>,monolith separate service help guidance,process break monolith separate microservice contact service store email address phone number create service organisation business organisation contact exist contact service recreate advise structure follow implement contact service org service user org service unaware contact service separate drawback recreate load endpoint org service simply pass contact service user service create contact contact service create attach contact organisation preferable,2,39,0,0.0,1,2016-07-21T12:28:09,0.0
38471362,2680392.0,<couchbase><microservices><couchbase-sync-gateway>,couchbase microservice architecture,read lot article datastore microservice approach good couchbase sync gateway sync gateway rest api call mobile backend server app simple couchbase cluster couchbase server instance bucket bucket session datum microservice database physical cluster datum bucket differentiate database table document field multiple database entry service point bucket sync gateway config file set acls kind control allow backend server application access database election api server read write doc correspond property sync gateway write read sdks sync gateway bit confusing sure good approach channel sort acl bad approach suggestion,2,347,0,0.0,1,2016-07-20T02:31:01,0.0
38480000,699426.0,<deployment><configuration><microservices><azure-service-fabric>,service fabric nest application,architect current monolithic web application modular micro service style design good idea boundary plan build app domain package backing rest api web front manage datum stuff unit test connection helper library argument sake monolithic app main component module accounts module create manage user product module administer manage product catalog order module create view amend order monolithic app application solution project distinct controller configure mvc webapi currently host iis nested application virtual folder replicate sort idea structure service fabric cluster isolate area account product order develop deploy independently configure service fabric cluster enable type situation instance cluster node node instance spread service service api vm scale set web api component vm scale set product api order web ui note system big lot component reason split monolithic style consistent structure enable major scaleability issue slow manual virtual server provision single monolithic sql server database feature sf modular design easy provisioning deployment drastic increase response time throughput system course good failover day customer consistent url structure cover separate work node advance help configure appreciate,2,217,6,0.0,1,2016-07-20T11:26:37,0.0
43665011,5090826.0,<docker><microservices><netflix-eureka>,microservice registration eureka replicas docker swarm cluster,microservice eureka service discovery replica docker compose yml eureka container spread multiple swarm node swarm cluster question microservice register eureka ip address master node swarm cluster config eureka server microservice register eureka whichever registry replicate eureka container swarm cluster eureka node swarm cluster service microservice,2,1416,0,0.0,1,2017-04-27T18:05:23,0.0
43617787,6518361.0,<spring><workflow><microservices><dataflow><spring-cloud-dataflow>,difference workflow dataflow,spring cloud flow watch activiti camunda workflow engine understand difference concept workflow dataflow сan call spring cloud datum flow workflow engine topic glad answer,2,1264,0,2.0,1,2017-04-25T17:54:44,0.0
43538070,7900291.0,<kubernetes><microservices>,manage state microservice,question regard thesis school problem tackle common jump problem example case multiple namespace microservice depend state manage microservice namespace state namespace state state microservice state startup service download file accord state launch state version state update month happen microservice depend state upgrade database memory state current approach problem simply event microservice update state change subscribe event migrate upgrade problem face service upgrade work duplicate service duplicate upgrade upgrade successful shut original orchestration service create duplicate include duplicate state question solution problem netflix conductor promise workflow event amazon swf marathon kubernete cover problem good exist solution bind specific platform azure gce,2,685,4,0.0,1,2017-04-21T08:49:10,0.0
43559197,4247860.0,<security><spring-security><jwt><spring-cloud><microservices>,shared signature key jwt microservice,microservice implement security jwt service validate jwt token key share service fine share signature key jwt microservice implement api gateway library require spring security trigger microservice,2,944,4,1.0,1,2017-04-22T12:27:52,0.0
43664192,2331746.0,<java><spring><spring-mvc><spring-boot><microservices>,create difference project implement micro service architecture spring,confuse microservice architecture understand implement microservice architecture spring spring rest api rest controller rest controller belong single project structure microservice create project create rest controller rest api user operation create rest controller rest api role operation microservice architecture service independently deployable definition service create project project independently deployable note service share database relationship user role,2,285,5,0.0,1,2017-04-27T17:19:09,0.0
43633659,3953989.0,<.net><design-patterns><microservices>,microservice inter communication net,split monolith micro service understand determine good communication service communicate service micro service web service serve http service bus pass work request,2,968,11,0.0,1,2017-04-26T12:03:03,0.0
53839160,2480766.0,<machine-learning><microservices>,centralize time series datum single micro service cross entity querying,develop set service microservice architecture pattern model large amount time series datum consume machine learn engine machine learn engine query cross entity datum meaning compare feature machine learning term datum point characteristic object examine multiple object occur centralized microservice design store serve time series create api service store business object feature service achieve single feature service domain model poll feature set model long time resolution question centralized time series datum store form microservice relate feature model locate external service viable design pattern achieve cross entity feature query design pattern utilize purpose feel comfortable replicating time series datum storage querying manipulation microservice create diagram pattern interested develop,2,108,0,0.0,1,2018-12-18T18:34:47,0.0
53752883,4074598.0,<microservices>,microservice call external service,apology realm question broad start journey define microservice start ddd base net tech stack reckon purpose discussion topic independent stack moment roughly identify domain define layer domain layer infrastructure layer application layer example customer client define follow layer point confused microservice service microservice se example rule createcustomer command creation creditscore verfication service provide external provider facade write house microservice communicate service pattern recomendation microservice service communication define recomendation suggestion,2,57,1,0.0,1,2018-12-12T23:19:59,0.0
53760483,10782561.0,<c#><asp.net-core><architecture><microservices><ef-core-2.1>,common entity model microservice,microservice entity model microservice microservice maintain code goal jsondata microservice map entity model exist microservice good practice,2,92,4,3.0,1,2018-12-13T11:07:34,0.0
57784672,5773947.0,<rabbitmq><microservices>,synchronize microservice event rabbitmq,microservice architecture implement web api nodejs service expose http endpoint app website interact synchronize database currently rabbitmq microservice publish message fanout exchange subscribe microservice receive message problem architecture add second instance microservice loadbalance purpose second service subscribe fanout exchange message consume time acknowledgment work fanout exchange wrong publish message fanout exchange subscriber message disappear acke lead question rabbitmq good choice microservice synchronization change architecture short example work user create account auth mc insert user database publish user create event mc mc mc loadbalance mc subscriber exchange well receive event insert user respective database event remove microservice queue acknowledge sure microservice loadbalance receive message time pattern implement rabbitmq edit good literature microservice suggestion,2,37,0,0.0,1,2019-09-04T08:43:24,0.0
57767124,12012756.0,<asp.net-core><websocket><signalr><microservices><signalr-hub>,multiple signalr websocket connection single connection multiple hub,suppose build spa single application depend couple independent system basically microservice ish implementation signalr hub system expose separate signalr endpoint separate set hub separation hub system intentional design microservice ish consideration basically single browser session app maintain separate signalr connection endpoint depend connection manage open close demand relevant component flow example lead follow question architecture overview assumption signalr hub completely decouple good practice regard usage websocket combination microservice ish architecture limitation fact browser limit number websocket connection manner scale,2,94,0,1.0,1,2019-09-03T07:43:27,0.0
55795284,1158977.0,<aws-lambda><dependencies><microservices><aws-api-gateway>,aws api gateway lambda dependency,doubt benefit api gatway lambda micro service concern happen decide move api gateway lambda ecs fargate cloud consensus lambda function route action theory design approach code unplug lambda plug community achieve attempt move api lambda xxxx design lesson language matter discussion python,2,30,0,1.0,1,2019-04-22T13:38:09,0.0
55797119,6539668.0,<node.js><microservices>,limit amount simultaneous connection microservice node js,create batch job executer front lot call backend base file file call backend call diferent micro service front call everthing work fine decide test micro service work owner create simultanly connection problem limit total amount simultanly connection api multiple user system currently express js axio,2,55,1,0.0,1,2019-04-22T15:50:36,0.0
49100994,6071135.0,<domain-driven-design><persistence><microservices><ddd-repositories><aggregateroot>,ddd aggregate root multiple persistent datasource,guide ebook relate chapter design infrastructure persistence layer explain general aggregate root perform cud operation persistent data source starting point mention aggregate ignorant method persistency infrastructure follow persistence ignorance infrastructure ignorance principle aggregate determine business infrastructure define repository aggregate root maintain transactional consistency object aggregate example mention aggregate root underlying object fall persistent data source pattern follow repository create aggregate repository unit work inject creation unit work method savechangesasync saveentitiesasync update command unit work manage transaction datum source database expand pattern aggregate write datum physical datum source depend underlying object type start start point perfectly justify root aggregate underlying object update datum source depend type underlying object example mention database xml file database nosql database database service database iot device aggregate ignorant method persistence infrastructure opinion argue design aggregate book write aggregate root persist datum source time start point perfectly justify complete set object aggregate root edit successful persistence entire package coordinate repository preferably unit work question deal domain drive design aggregate depend type underlying object hydrate datum source custom unit work decision write uow aware study deal inheritance repository deal datum source serve datum source time,2,500,0,1.0,1,2018-03-04T22:07:24,0.0
49262896,7195497.0,<ssl><https><kubernetes><microservices>,secure internal service communication kubernetes cluster http tls,work set microservice secure communication individual service https tls service deployment service object set assign cluster ip kube dns automatically create dns record format cluster local service create problem allow create tls certificate sn local org certificate create service fail certificate validation sn match domain add cname kube dns custom domain servicename cluster internal return cluster local domain resolve correct clusterip create certificate sn set custom domain certificate validation fail service handshake set secure connection open prefer dependency type dns provider write,2,492,2,0.0,1,2018-03-13T18:01:30,0.0
48384182,5295551.0,<amazon-web-services><docker><amazon-ec2><kubernetes><microservices>,integrate kubernetes exist aw alb,exist aw alb kubernetes setup alb ingress controller create update exist aws resource target group role alb communicate kubernetes cluster henceforth pass request exist service response alb display front create alb ingress resource exist,2,257,0,0.0,1,2018-01-22T14:47:07,0.0
48419410,5328163.0,<apache-kafka><apache-zookeeper><microservices>,kafka reliable message bus micro service,kafka message bus micro service architecture multiple service listen topic message service highly dependent topic live instance topic sure rely kafka topic service interrupt issue topic issue platform throw light reliability dependability topic recover issue,2,882,1,1.0,1,2018-01-24T09:52:48,0.0
48540114,3979851.0,<mongodb><spring-boot><apache-kafka><jhipster><microservices>,jhipster master datum management microservice communication,work project jhipster microservice architecture technology concerned performance app architecture case gateway microservice gateway responsible manage user relate datum favorite restaurant microservice responsible restaurant datum management include crud search operation question endpoint add favorite restaurant select favorite restaurant specific user approche follow ps mongodb store datum save restaurant user favorite document save favorite restaurant embed document restaurant choose well solution well architecture question benefit kafka case ps keep mind face large trafic,2,186,1,1.0,1,2018-01-31T10:40:24,0.0
48557437,8787614.0,<microservices><api-gateway>,api gateway combine result,separate auth service product service api gateway front service function protect url call auth service validate user token token valid attach user request request product service api gateway support custom logic handle request,2,247,1,0.0,1,2018-02-01T07:28:23,0.0
48457264,5752016.0,<architecture><signalr><microservices><asp.net-core-signalr>,integrate signalr microservice api gateway,design microservice system base net core architecture system picture problem requirement integrate signalr real time notification read signalr microsoft website consider hub api gateway microservice apply signalr system,2,2504,2,0.0,1,2018-01-26T07:31:45,0.0
48531937,2254140.0,<amazon-web-services><microservices><amazon-elb><amazon-route53><amazon-alb>,aws alb ecs service multiple service alb microservice architecture,initially multiple service alb listener path pattern distribute api call appropriately obvious choice term health check service smart divert traffic service region active active setup weighted route record failover health check solution cut entire alb traffic divert region ignore service continue send traffic partially fail alb mapping alb service solution add additional overhead term cost complexity recommend pattern follow active active microservice architecture,2,1115,4,0.0,1,2018-01-30T23:05:32,0.0
58563029,2892314.0,<angular><spring><docker><kubernetes><microservices>,compose docker container spring angular django microservice postgresql,good approach benefit sophisticated solution kubernete docker swarm deployment microservice develop spring boot angular django project postgresql database consider follow microservice microservice develop spring boot postgresql microservice develop django postgresql microservice front develop angular microservice dockerfile build good approach production base deployment platform deploy docker compose easy real advantage sophisticated solution kubernete docker swarm scenario container postgresql database create postgresql container microservice share microservice postgresql,2,88,1,2.0,1,2019-10-25T17:19:11,0.0
58593774,1027102.0,<c#><.net><asp.net-web-api><odata><microservices>,change odata edm model runtime,odata service dynamic edm model register create getedmmodel access metadata url model fine problem constant change runtime change odata edm model runtime,2,85,5,0.0,1,2019-10-28T15:29:39,0.0
55930850,1068446.0,<json><nginx><microservices><api-design><content-negotiation>,merge json response nginx,exist express endpoint return object extend api header fetch datum service add response express strike bit messy api versione nice nginx handle versioning modify exist api create service nginx examine header microservice call join,2,80,0,1.0,1,2019-05-01T02:12:17,0.0
56094802,10461625.0,<java><playframework><microservices><reactive-programming><spring-webflux>,java consume spring webflux application play framework application,question consume spring webflux application play framework application http provide help micro service reactive spring webflux write java springboot expose api consume reactive play framework micro service http provide advice small snippet achieve help,2,137,0,0.0,1,2019-05-11T22:39:32,0.0
55970673,2432359.0,<microservices>,group datum microservice,system store appointment appointment multiple resource trainer room decide move appointment datum appointment service resource resource service ui filter appointment filter trainer display checkboxe trainer appointment trainer resource service trainer appointment service grouped view trainer appointment call resource service info trainer group datum microservice edit system database rabbitmq sync datum service,2,43,1,3.0,1,2019-05-03T13:19:17,0.0
55985658,1819266.0,<microservices><connection-pooling><rpc><http2>,connection pool microservice talk http,http support multiplexing pool connection microservice communication benefit pool example service service service instance multiple connection help overcome os buffer size limitation connection socket,2,240,4,0.0,1,2019-05-04T18:33:03,0.0
45542936,568844.0,<soap><protocol-buffers><soapui><microservices><grpc>,manually test grpc interface,soap webservice soapui create test xml request manual interface test insert test datum xml document send request soap provider analyse response soapui currently switch soap xml grpc protobuf test gui grpc offer feature describe grpc,2,455,1,0.0,1,2017-08-07T08:52:48,0.0
45544777,2750476.0,<javascript><node.js><redis><microservices>,nodejs microservice combine datum,build nodejs platform consist core user message trading signal idea create microservice work pretty well head join datum microservice frontender originally example microservice mongodb machine complete isolate imagine common situation message retrieve single microservice message user username profilepicture combine retrieved message object read lot redi messaging service combine service help darkness general question grip good practice combine datum multiple micro service,2,375,13,1.0,1,2017-08-07T10:29:38,0.0
52790702,430861.0,<python-2.7><google-app-engine><microservices><app-engine-ndb>,access google app engine ndb datastore python microservice app project,search find simple example access ndb datastore python microservice live application service module access actual model class datastore user query class microservice google cloud datastore api app engine standard surely apply share memcache api call endpoint module service microservice set memcache endpoint microservice google talk share datastore memcache application include microservice propose access sure find,2,112,2,0.0,1,2018-10-13T07:45:14,0.0
52833650,5488103.0,<websocket><microservices><web-component><micro-frontend>,communication pattern microfrontend microservice backend trough single channel websocket,currently face tough architectural question integrate multiple individual backend service composite web ui smooth web application constraint negotiable design decision microservice serve frontend webcomponent html import allow include webcomponent composite ui frontend webcomponent recieve live update event backend microservice sum web component composite ui connection permanent occupied port communicate backend sketch represent abstract technical requirement discussion understanding problem rephrase concentrate communication enter distribute communication exit single transport path task solve side transport path backend frontend backend hopefull adopt bff pattern serve half backend side sketch transport path best serve standardized web technology https websocket wss time bidirectional communication keen learn alternative equivalent high adoption rate web technology sector frontend currently lack idea knowledge describe pattern framework tricky thing multiple basically independent webcomponent find central communication path frontend realize implement big angular application example implement inject backendconnectorservice discuss inject component decouple web component background layer share business logic dependency injection exist write proprietary js library load window context component convention communicate backend roughly integrate sketch design application wrong thankful reasonable idea hint prove pattern framework view problem architecture helpful circumnavigate issue face,2,463,5,1.0,1,2018-10-16T10:44:37,0.0
54125607,2477760.0,<events><microservices><cqrs><event-sourcing>,cqrs event source database microservice,question event sourcing cqrs microservice architecture understand send command microservice execute emit event event store subcsribe save inside database readmodel base event generate save optimize datum inside read database,2,528,0,0.0,1,2019-01-10T09:31:20,0.0
54124170,849727.0,<microservices>,consider good practice connect database microservice,consider good practice connect database microservice api implement microservice work second database call microservice api inside,2,80,0,0.0,1,2019-01-10T08:00:18,0.0
54230137,2800089.0,<spring><spring-boot><microservices>,load driver class org driver spring boot application,learn microservice create dummy project config repository git config server port work properly setting microservice project customer service customer account service customer microservice properly customer account microservice unable start throw exception bootstrap property configuration customer account microservice pom xml configuration customer account microservice help exception,2,7079,2,0.0,1,2019-01-17T06:25:17,0.0
35140042,215993.0,<django><flask><architecture><microservices><falconframework>,django flask falcon microservice,microservice architecture well monolithic architecture answer microservice architecture scalable service independent question build flask django rest framework hear framework documentation good,2,6286,2,2.0,1,2016-02-01T20:49:21,0.0
57167221,6426196.0,<transactions><microservices>,microservice api implementation database,work build microservice mongodb metadata database file storage api microservice require update mongodb api call scenario api post tickets update ticket document single folder document create pdf ticket send email image share email update mongodb table ticket status ticket book understand ticket booking complex affair multiple microservice involve theoretical scenario microservice sufficient ticket api computation decide book ticket update database mongodb question maintain content integrity database base general read distribute transaction microservice recommend pc event pattern saga understand level complexity transaction microservice solution applicable single microservice maintain content database,2,48,0,0.0,1,2019-07-23T15:10:00,0.0
57240638,3198603.0,<java><microservices>,share library microservice,micro services ms ms ms ms duplicate reusable code hash security relate orm fyi usable code maintain state well db matter chance proceed extract reuable code separate library include ms create separate ms reusable code expose rest point approach advantage redeploy ms case change approach redploy ms time approach require separate maintenance resource monitoring ideal approach term system design consider hardware resource challenge mention microservicebut case ms duplicate code sure criterion help decide share library micro service update clarity blog question post anew question require,2,131,5,0.0,1,2019-07-28T11:52:29,0.0
54272972,10723707.0,<azure><service><architecture><azure-storage><microservices>,create file cache layer microservice serverless architecture,essence service service stream file service store file fe fe return content request service multiple time service implement serverless technology azure function type cache system stream file store location time stream great scale ideally box solution ideally expose client service storage mechanism directly access goal incompatible,2,51,1,0.0,1,2019-01-20T02:02:50,0.0
54407655,5728060.0,<database-design><architecture><microservices><restful-authentication>,multiple user table microservice architecture,currently work large project utilize microservice architecture project handle user store separate service question good solution handle relation user database moment relational database nosql opinion service user table hold datum specific service datum keep central user service add userid column,2,236,1,2.0,1,2019-01-28T17:54:03,0.0
54415085,4493848.0,<java><maven><spring-boot><microservices><dependency-management>,spring boot unit test module module,work spring boot application maven dependency management divide project service doubt hope insight answer app pom xml main intention split project work individual module increase resilient scalability system ve divide system service service well problem encounter bug add feature single module force write test app module access module define dependency maven file encounter contradiction main microservice architecture develop test module independent module write test entire application level module access module dependency clean compile module write test module level question unit test module module write test module access module hope answer suggestion,2,281,2,0.0,1,2019-01-29T06:30:12,0.0
54398426,3558296.0,<java><spring-boot><locking><jetty><microservices>,synchronize microservice instance jetty cluster java spring,develop java spring microservice jetty embed server intend spawn instance microservice jetty server concurrently port spawn instance instance share database mongodb database microservice invoke third party rest web service save datum return rest ws database instance cluster advantage request instance data expire time instance invoke external web service time instance cluster invoke external web service time instance invoke web service require datum wait instance retrieve datum find problem lock instance jetty server invoke web service mongodbs transaction feature lock document service invoke success,2,237,2,0.0,1,2019-01-28T08:57:36,0.0
45225151,6037500.0,<microservices><netflix-eureka><netflix-zuul>,zuul unable fetch microservice instance list eureka,configure zuul eureka follow zuul auto configuration spring boot call customer service zuul follow exception check eureka customer service web console find instance customer service register correctly help wrong,2,607,2,1.0,1,2017-07-20T21:04:27,0.0
45212459,6495517.0,<microservices>,good practice share constant enum microservice,application micro service enum operation good practice place enum common place add common jar dependency microservice,2,1010,2,1.0,1,2017-07-20T10:43:41,0.0
45300410,3857032.0,<django><jwt><microservices>,django implement authentication service microservice architecture,basically independent service build service authentication client token authentication service client request service client attach token header request service receive token verify token send authentication server request client protect route verify authentication service thing good place code automatically send token authentication service receive result implement middleware problem solution request service auth service pass middleware client access unprotected route help extremely appreciate django restframework jwt,2,972,3,0.0,1,2017-07-25T10:19:57,0.0
51946603,6677551.0,<java><spring-mvc><spring-boot><microservices>,good approach design pattern call multiple microservice time single service,microservice dependency microservice client call endpoint service multiple http request service dependent detail optimal performance effective design pattern approach handle scenario simultaneously nb api gateway case,2,911,1,0.0,1,2018-08-21T10:24:54,0.0
52010721,1494134.0,<architecture><authorization><microservices><api-gateway>,api gateway acl,design microservice base application api endpoint user access user authenticate jwt belong organization turn organize hierachically user role define organization type combination beetween organization role define api access user method resource conclusion mess library provide acl feature wonder solution api gateway call component request jwt include list role user api gateway validate jwt role lookup table role list permission post user role match request forward service gateway respond option auth service architecture gateway simply forwards request deliver service service depend common library send token auth service request grant satisfy request case auth service service request auth resource login logout token refresh registration user click link provide sign mail solution provide fat gateway tiny layer logic enforce service respond secure call factorize authentication orization logic add dependency beetween service api gateway implementation provide feature advantage disadvantage approach answer,2,517,5,3.0,1,2018-08-24T19:36:02,0.0
55158327,10804384.0,<docker><rabbitmq><microservices><amazon-ecs>,rabbitmq listener docker microservice,deploy microservice aws ecs ci cd jenkin task service task definition apache foreground docker deploy service apache crash dev team rabbitmq communicate microservice microservice listen event rabbitmq server rabbit instal separate news ec instance listen rabbit mq server listener daemon dev team follow code time docker deployment listen rabbit mq server set cron job listener start crash good knowledge docker container process foreground currently apache foreground daemon cron rabbit mq listener background docker container restart daemon crash safe approach scenario good practice rabbit mq listener docker container,2,166,0,0.0,1,2019-03-14T08:52:21,0.0
55140683,10633596.0,<amazon-web-services><spring-boot><java-8><aws-lambda><microservices>,deploy springboot microservice application restful serverless aws lambda,develop simple microservice rest base java spring boot rest point call postman response well doubt understand design architecture deploy application aws cloud application behave serverless deploy aw lambda service assist clear follow doubt upload application code aws lambda order serverless aws api gateway compulsorily invoke lambda function request pass point point original microservice code ineffective override api gateway point doubt point point invoke lambda function assist clarify doubt sample reference material great cheer,2,704,0,2.0,1,2019-03-13T11:20:20,0.0
55208076,10719574.0,<microservices><spring-cloud><netflix-eureka><netflix-zuul>,route port zuul,route microservice route port shop microservice articlemicroservice connect eureka server port zuulservice connect eureka port example configure application yml zuul server shop port connect eureka articlemicroservice shopmicroservice edit example yml work edit eureka server,2,380,1,0.0,1,2019-03-17T14:21:58,0.0
55197252,5138149.0,<java><spring-boot><microservices><spring-cloud-netflix>,exception encounter context initialization,body help find root issue eureka server application face problem bellow issue maven dependency spring boot release error log,2,395,1,0.0,1,2019-03-16T13:17:15,0.0
55243744,3781025.0,<spring><spring-boot><microservices><spring-cloud><spring-cloud-config>,programmatically identify instance microservice create kill,programmatically identify number instance single microservice reach number time instance programmatically instance account microservice find number change intention notify admin threshold spring boot spring cloud spring config consul service discovery change eureka,2,65,5,0.0,1,2019-03-19T14:47:45,0.0
52342357,6872018.0,<spring><postgresql><docker><spring-boot><microservices>,java sql sqlfeaturenotsupportedexception method org postgresql jdbc jdbc connection isvalid int implement spring boot,develop example example deploy call rest endpoint error solve error link solution work refer link actual code reference error pom xml,2,678,0,1.0,1,2018-09-15T06:47:16,0.0
52349986,2203275.0,<node.js><authentication><authorization><microservices><roles>,authenticate authorize microservice architecture,short authenticate authorize role base user microservice architecture long architecture struggele good practice solution secure architecture search alot answer leave authentication thirdparty oauth provider add lot overhead complexity simple application desireable delegate authentication authorization third party jwt correct jwt token suitable external spa combination opaque token externally jwt internally link redis memchache good solution situation problem lack actual reference library code example higly appriciate reference actual implementation accomplish authentication role base authorization microservice architecture,2,470,0,0.0,1,2018-09-16T00:36:28,0.0
52368590,8718377.0,<java><spring-boot><docker><docker-compose><microservices>,cross origin error docker container,build application microservice locally docker container currently eureka zuul spring security microservice spring boot angular client parametrize spring security zuul order manage security cor extend class overriding method locally work perfectly client access api zuul add basic auth header option docker container build docker compose chrome throw unknown exception firefox indicate cross origin error option request api call client zuul file concern client gdt client zuul gdt gateway proxy service,2,504,0,1.0,1,2018-09-17T13:11:30,0.0
52475303,8342189.0,<python><django><database><django-rest-framework><microservices>,share database relation micro service django rest framework,django rest api project decouple micro service architecture service sso handle authentication jwt token base authentication manage user info payroll service problem relation model payroll service specific class payroll service field add user query sso service share database micro service consideration service database,2,570,2,0.0,1,2018-09-24T08:28:10,0.0
52378551,4930850.0,<docker><docker-compose><microservices>,micro service docker compose container multiple project,issue micro service architecture application employ summary micro service project call micro service depend container call problem ideally project dependency docker compose yml file issue docker compose duplicate container reality reuse error message commonly external link work introduce dependency docker compose yml file file define dependency approach read argue isolation container docker compose file reference multiple file build work stunningly convenient docker typically work unable work solution approach people mono repo micro service success approach clarify example compose yml file project project,2,779,4,1.0,1,2018-09-18T03:37:08,0.0
44939302,7434324.0,<angularjs><environment-variables><jhipster><microservices><gateway>,process env env define assume prod env,unable open jhipster angular gateway application port server port follow exception console application fine port yarn exception console problem port yarn unable communicate microservice application exception,2,840,0,0.0,1,2017-07-06T03:28:00,0.0
44949367,1233351.0,<events><dependencies><microservices>,microservice dependency event,ve lot google regard manage dependency microservice move big monolithic app micro service order scale organizationally develop faster multiple team work parallel functionally partition monolith microservice intertwine business logic datum problem sit top big db big relational join microservice problem solution microservice microservice datum equivalent db view join solution microservice listen event service populate local storage relevant equivalent materialized view microservice couple service info microservice service depend release prior microservice note microservice depend service bottom distribute dependency hell article advocate second solution – event source choreography appreciate share experience recommendation insight philometor,2,343,0,2.0,1,2017-07-06T12:49:22,0.0
56192279,242042.0,<spring><jpa><spring-data><microservices>,avoid code repetition multischema database,legacy application database split datum multiple schema physical database schema identical structure microservice spring boot data jpa work single schema avoid code repetition create router service forwards request single schema microservice replica database connection find bit overkill work reduce single microservice successful set table property confused inheritance reduce code duplication addition break apart inheritance error basically inheritance jpa table structure difference schema copy paste code ideally pass schema parameter dao,2,48,0,0.0,1,2019-05-17T19:11:40,0.0
56123195,938350.0,<spring><http><asynchronous><microservices><project-reactor>,wait multiple http response reactor,spring reactor multiple http call wait result code problem code exception reactor developing exception,2,400,0,1.0,1,2019-05-14T04:51:02,0.0
50390452,7113481.0,<java><microservices><netflix-eureka>,spring boot microservice hit microservice multiple time,eureka server problem microservice call microservice microservice call microservice multiple time time happen implementation service time respond hit feignclient xyz getcataloglist hit time response,2,126,2,0.0,1,2018-05-17T11:35:14,0.0
39358842,3862378.0,<json.net><asp.net-web-api2><microservices>,recommend approach deal json microservice,restful api deal underneath sql server database api method accept json stre string exact representation ef entity idea convert string entity save code expose entity structure external client alternate approach approach convert json stre dynamic build require entity mapping property approach create type dto create lot dto property question recommend approach question question kind question post create post api mention microservice architecture bunch microservice communicate http service decouple type datum contract pass json good approach serialization de serialization well performance microsoft native datacontractjsonserializer correct approach communicate microservice,2,655,2,0.0,1,2016-09-06T22:42:17,0.0
39457873,3862378.0,<microservices><asp.net-core-webapi>,include correlationid microservice architecture,create microservice architecture asp net core web api service decouple deploy environment service logging request flow service fail service trace series event source traverse multiple service handle issue service originate request create correlationid pass service service pass service exception occur corresponding service log exception message correlationid good place caller service pass correlationid caller pass correlationid httpheader pass method parameter service call approach exception method invoke correlationid global exception handler log suggestion alternate approach,2,1205,4,0.0,1,2016-09-12T19:57:35,0.0
39428356,6817125.0,<docker><jhipster><microservices>,jhipster fail generate gateway docker image,jhipster fail generate gateway docker image build micorservice application microservice gateway encounter error karma gulp js test notification hour resolve fail find source error error spawn eacce code eacce errno eacce syscall spawn formaterror user emac microservice gateway node module gulp bin gulp js help mac osx jhipster micorservice gateway jwt sql mysql hazelcast elasticsearch international gatling protractor npm install bower install proceed build docker image emacs macbook pro gateway emac mvnw pprod package docker build emacs macbook pro gateway emac advance sam,2,480,0,0.0,1,2016-09-10T16:47:06,0.0
57399513,95504.0,<java><spring><rest><microservices><spring-cloud-gateway>,spring cloud gateway merge result microservice,suppose microservice payment company endpoint payment late return list late payment create table front app table payment front app web service call microservice add api gateway label responsible call payment webservice payment webservice return call company webservice company data merge company datum payment datum single json spring cloud gateway,2,52,1,0.0,1,2019-08-07T17:25:03,0.0
54657466,4340685.0,<amazon-dynamodb><microservices>,dynamodb single table design play nicely microservice architecture,microservice multiple dbs table read microservice ms striking thing ms db understand concept embrace nosql dbs single table start nosql dbs dynamodb watch presenter discuss idea relational model table represent datum table technique datum super fast query scale understand concept combine confused mss split thing separate service separate dbs table nosql pattern table design pattern architecture work,2,506,0,0.0,1,2019-02-12T19:34:30,0.0
51512075,10131573.0,<microservices><zuul-testing>,springboot junit testing filter zuul,zuul unit test couple filter changerequestentityfilter sessionfilter paste filtercode write junit filter search mockwire unit testing paste empty method basic annotation wiremock port proper example unit zuul work refer doc simple work complete example fine current code basic annotation wiremock port,2,1411,0,0.0,1,2018-07-25T06:20:37,0.0
51477318,517123.0,<c#><odata><microservices><api-gateway>,stich merge join multiple odata microservice,publish multiple datasource company separate odata microservice microservice api gateway gateway stich metadata order service find drawback odata schema conform microservice api gateway third party application power bi nice maintain link nav property service gateway,2,210,0,0.0,1,2018-07-23T11:05:07,0.0
51584078,8082964.0,<architecture><microservices>,mirror external api merge datum microservice,case plan system provide follow functionality frontend category currently popular newcomer classic category list movie fit category title backend decision movie belong category base ratio viewership number release age movie external source public api plan gather datum movie source truth film exist metadata movie basically movie viewership number external api people view movie day medium cinema netflix statistic map statistic source movie source inherent necessity communication couple domain micro service orient system solution single game service save datum source table stat source table expose combine datum single endpoint solution service combine datum api gateway case model inherent dependency map statistic source truth movie service database thought understand literature community pick solution intuitively prefer solution display movie trailer future third external api cram single service create experience frankly deep understanding domain drive design software architecture sensible conclusion help greatly appreciate,2,72,1,0.0,1,2018-07-29T20:00:20,0.0
46199874,8537987.0,<events><domain-driven-design><microservices><cqrs><distributed-system>,cqrs event source handle event log failure,event source cqrs application introduce simple event log enable update read store imply state change application consist action update write model state sql insert insert event event log write operation happen atomic operation event log reside database distribute transaction cqrs sample deal saga pattern utilize event sourcing thing simple problem half finished state change sql insert succeed event log insert fail compensate sql operation pseudo code concept help follow scenario prevent sync read database event sequence number read side replication detect unprocessed event receive query event log event event system replicate event close require manual maintenance prevent read db sync real life experience,2,571,2,0.0,1,2017-09-13T14:14:04,0.0
46263443,3585050.0,<java><spring-boot><ehcache><microservices>,ehcache spring work correctly microservice,monolithic application accord microservice appearance adapt appearance split small app assume splint microservice model object microservice follow example clear micro micro repository service controller layer config ehcash spring save method service layer model work application monolithic split dependency microservice method save method repeat microservice ehcash work correctly microservice affect object obj microservice aware,2,318,0,0.0,1,2017-09-17T11:12:26,0.0
46061589,117700.0,<c#><.net><azure><microservices><azure-service-fabric>,kind specification require nodetype certificate,attempt install cluster error attempt install configuration follow error configuration file wrong nodetype certificate,2,115,1,0.0,1,2017-09-05T18:53:57,0.0
46094734,1926617.0,<asp.net-core><servicestack><versioning><microservices>,good versione service stack microservice,service stack net core service stack doc implement ihasversion route request version instance service,2,161,0,0.0,1,2017-09-07T11:03:45,0.0
46067333,5902567.0,<microservices><pivotal-cloud-foundry>,deploy micro service pivotal cloud foundry establish communication micro service,multiple net core micro service micro service talk communicate micro service deploy service pivotal cloud foundry pcf container establish communication registry service pcf work step establish communication micro service exist example code help help,2,205,1,0.0,1,2017-09-06T05:20:55,0.0
56654068,8586803.0,<node.js><architecture><microservices><cqrs><event-sourcing>,microservice create entity implementation,follow question issue outline gateway serve entry point application request client gateway allocate request responsible microservice handle authentication case gateway listen notify create book ist responsible manage store book entity follow pseudo code simplified implementation architecture queue communication gateway microservcie sure follow reason listener consume recreate time user request create book user simultaneously create book wrong book return fetch additional data implement architecture direct queue communication gateway microservice sure implementation violate cqrs return book creation return inefficient http request microservice system,2,70,5,0.0,1,2019-06-18T17:14:22,0.0
56546484,8810475.0,<rest><microservices><messagebroker><event-bus><cap-theorem>,combine rest messaging microservice,version application base microservice architecture rest external internal communication switch ap cp cap theorem message bus communication microservice lot create event bus base kafka rabbitmq find good practice combination rest messaging example create car service add car component sense purpose rest post request hand service book car good task event base approach approach dictionary business logic capability combine support approach separately unify approach version agree choose consistency partition tolerance availability,2,379,6,0.0,1,2019-06-11T14:55:14,0.0
30739851,2410065.0,<c#><esb><servicebus><masstransit><microservices>,microservice independent esb masstransit,initial investigation decompose current monolithic system masstransit main reason queue base esb set feature tackle shared database essentially queue read building microservice finish core tenet appear microservice essentially standalone reconcile masstransit necessity share message library contract fact service,3,763,0,0.0,1,2015-06-09T18:20:33,0.0
29434226,0.0,<java-ee><jpa><microservices>,generate jpa entity microservice design,design bit confused generate entity microservice architecture microservice design fascinate multiple lean war db multiple war mind generate entity db place jar include jar war create option secondly place persistence xml plan cache cache entity instance approach pose issue,3,626,5,1.0,1,2015-04-03T14:36:27,0.0
32604241,959664.0,<php><api><http><service><microservices>,good protocol app service server,php app talk service api produce xml response http request service separate server http client guzzle create consume request response service time server scenario http request fashion good option request api leave server add latency avoid,3,59,0,0.0,1,2015-09-16T09:10:24,0.0
32217639,1343096.0,<restful-architecture><microservices>,online store microservice,work big online store moment architecture weird microservice share db work well consider improve challenge independant case customer customer purchase product microservice customer authentication order management product management order link customer product describe solution follow problem link order customer service share customer handle datum consistency remove customer customer service side inconsistency service notify service tighlty couple service sound avoid place kind avoid event mechanism notify network error suppose receive event simple query retrieve customer buy product people buy product customer reasonably performant current db execute millisecond code kind relation solution duplicate data customer purchase order management service store customer detail product detail massive datum replication sure good thing worry consistency find paper address issue option,3,597,0,3.0,1,2015-08-26T03:44:02,0.0
34020234,2112409.0,<json><node.js><express><architecture><microservices>,communication node js microservice,create application node js microservice architecture find good communication node java background good option imagine soap create proxy object call method request remote node http currently option direct call convenient well approach,3,1992,2,0.0,1,2015-12-01T12:15:03,0.0
31095177,595943.0,<microservices>,datum replication micro service restore database backup,currently work legacy system consist service communicate kind enterprise service bus esb synchronize datum gradually work system direction micro services architecture plan reduce dependency esb message broker rabbitmq kafka resource exist technology limitation completely avoid data replication service clearly define single service data owner wonder safely database backup restore single service service sync service hold replicate datum experience suggestion regard,3,1246,0,0.0,1,2015-06-28T01:07:07,0.0
38070572,1718686.0,<microservices><openid-connect><oauth2>,architecture microservice openid connect,three microservice microa microb microc microa microb power product microa microc power product security layer case implement openid connect provider fit well business add stack openid provider user management easy natural associate openid identifier user microservice subset example service microa store user openid xxx isolate microservice level respect boundary context fine user login openid product grant access token user token situation complex product expose api third party user third party webapp prompt login allow third party product api understand correctly openid connect authentication oauth handle classic oauth scope management good scenario find openid connect authentication info full oauth process authorization server user grant scope third party third party user prompt login openid provider redirect prompt accept scope request correct oauth server flow http request user perform execute request authentication authorization flow massive,3,1817,0,1.0,1,2016-06-28T08:10:32,0.0
38106036,1094821.0,<c#><json><documentation><microservices><netmq>,document message bus api,search couple day document api microservice architecture work quick description project write net netmq pub proxy message broker communication plain object serialize json client javascript browser net application short people document model publish message bus project swagger help document rest call rest application entirely event base pub messaging json thought document json json schema tool convert nicely format api doc work bother tool automate schema generation build process model diverge api documentation build error better auto generate basic documentation build process doc keep sync guy lack documentation tool specific message bus architecture favor rest question decision messaging architecture base message queue,3,635,0,1.0,1,2016-06-29T17:07:47,0.0
38125926,5686594.0,<python><google-app-engine><publish-subscribe><microservices>,google app engine application microservice,big monolith application time separate module micro service read lot pub microservice google docs find answer question app yaml file module microservice app yaml app microservice declare module application app yaml app yaml single datastore app module app yaml credential libs wait answer,3,568,2,3.0,1,2016-06-30T14:20:04,0.0
54734412,9581062.0,<microservices>,authentication authorization microservice gateway,learn microservice architecture kind puzzled suppose authentication authorization microservice gateway application situation follow service ecommerce application accountservice manage user account list service manage product listing app cart service manage item user account order service manage processing user order app thing read mention auth server question exactly auth server authenticate user application imply auth server store user datum sense account service store user account auth server store user auth server microservice kind user store account user gateway application auth server request second question authorization microservice work token store permission technology stack php laravel javascript framework adonis java spring package oauth typically guess package hide internal working kind contribute confusion standard practice oauth server drom question handle authentication individual microservice handle authorization token permission microservice verify permission exactly oauth package instal individual package authorization capability doesn couple service technology philosophy microservice authorization gateway app well microservice resource repository directly accessible public assume dockerize help wrap head microservice architecture question sound trivial silly,3,926,1,2.0,1,2019-02-17T14:50:59,0.0
31525237,1988876.0,<spring><spring-security><oauth-2.0><microservices>,scope associate access token spring oauth build microservice,process spin system central grant scope access individual micro service picture explain service call number mark request chronological order nut shell auth server return user identifer scope controller login call follow example reture token return prefer rest call propose tutorial photo service receive access token authorization bearer header check auth server token valid scope require access photo example auth server respond list scope token eligible post service check list scope provide access side note pass request sure pass purpose,3,1024,0,0.0,1,2015-07-20T19:56:35,0.0
31510697,941913.0,<docker><load-balancing><coreos><microservices><akka-cluster>,automate microservice load balance scale,read micro service day wonder people automate load balance scale thing specific scenario mind achieve sure wrong cluster coreos machine thing transparent deployment fleet detect service huge load deploy instance deploy automatically load balance disrupt service traffic load balancer manually deploy version service load balance automatically traffic router load balancer question akka cluster development differ micro service,3,424,0,1.0,1,2015-07-20T07:16:00,0.0
42822348,1622551.0,<c#><postgresql><microservices><npgsql><polly>,npgsql exception call worth retry transient fault strategy,write service connect remote postgre server good determine exception treat transient worth retry define appropriate policy connect remote database service npgsql data access documentation npgsql throw postgresexception sql error npgsqlexception server relate issue good assume exception postgresexception treat transient worth retrying postgresexception wrong query retry help correct assumption polly create retry circuit breaker policy policy well determine error transient update follow shay suggestion open issue npgsql update policy,3,777,0,1.0,1,2017-03-15T23:03:22,0.0
42949138,5353059.0,<ruby-on-rails><ruby><jwt><microservices>,rail microservice architecture dedicated authorization service app service knock jwt,separate monolithic application microservice dedicated rail app solution move authorization service service example rail api service knock gem user model authentication purpose service share user database implement dedicated service user model service verify user token control service user accessrole service draft case user article frontend ui client auth service validate token client access service message auth service validate user role access article resource article service send response client json datum question access service communicate auth service user database verify user credential role article service private service access public black box user,3,631,0,0.0,1,2017-03-22T10:37:22,0.0
33478131,333294.0,<database><docker><config><docker-compose><microservices>,centralised configuration docker compose service,imagine trivial app nginx front webapp link datum store database pretty easy configure container expose pretty nice environmental variable control container template vhost file roll image rebuild change config dev setup test staging production lightweight manner testing flip config option centralise config management control docker compose write config file shared volume service add imagine microservice cloud example monolithic web app correct manage configuration docker compose project,3,126,6,2.0,1,2015-11-02T12:57:09,0.0
40422613,7114675.0,<web-services><heroku><database-design><web-applications><microservices>,share datum isolate microservice,microservice architectural pattern system trouble figure share merge datum service service isolate return consolidated datum populate web app ui http context intend deploy service isolated environment heroku communicate internally service plan rabbitmq inter service communication postgre database decoupling service sense create operation authenticate user submit join group webform frontend include add rabbitmq queue service pick event process reference user read operation hard merge datum table schema detail user group monolithic design sql user group table lose isolation benefit microservice option follow database service public api service view site visitor list associate group group service query service separately pro clear separation concern service entirely responsible datum con require multiple http request lot postprocessing client side multiple sql query optimize database service service share datum http single public api public api server handle request endpoint application logic api server request service http channel accessible service system pro good separation concern service responsible api contract schema datum store long api response change con performant http weird transport mechanism internal comms expose multiple service public internet notionally lock security threat grow great attack surface database service service share datum message broker rabbitmq queue request datum send datum example client request user group public api service send event service pick add queue user service pick add user datum queue api service listen event wait response merge datum correct format send client pro exist infrastructure good decoupling inter service request remain internal public apis con multiple sql query lot datum processing application layer harder reason strange pass large quantity datum event system latency service share database separate schema service read service isolate database schema schema write respective service service expose sql layer schema query service function api contract underlying schema service application logic change expose datum pro presumably performant single sql query relevant datum foreign key management easy infrastructure maintain easy report span multiple service con tight couple service break idea fundamentally atomic service add monolithic component database hard scale contrast atomic service scale database independently require lock service system record postgre good database service lean option appreciate thought approach,3,1265,1,3.0,1,2016-11-04T12:24:29,0.0
36844842,4447761.0,<design-patterns><publish-subscribe><amazon-sqs><amazon-sns><microservices>,pattern pub message successful,develop microservice project experiment pub communication aws sns sqs unsure signal service service complete task example service emit sns event service listen subscribed sqs queue service activity kick service inside service successful concrete example user register website network call reach backend user successful send event user create trigger send email user confirm registration happen fail send email respond frontend successful wait confirmation good pub pattern confirmation synchronous call example simplify brevity sake,3,589,4,0.0,1,2016-04-25T15:26:16,0.0
41757509,4916475.0,<docker><docker-compose><dockerfile><microservices><docker-machine>,setup docker polyglot microservice base application,work large usual project mine build web application talk api mine write language database mariadb second dgraph graph database local director architecture service service api apis auth user auth signup api current api version trial api call trial application app user interact daemon program daemon tool tool import data scraper database config mariadb dgraph component write php nginx python flask nginx proper docker setup mind service api daemon tool independant talk rest endpoint private github repository deploy server docker reading confuse create docker compose yml service entire project service deploy separately docker compose yml pointer clean solution create container service container nginx php python,3,281,0,0.0,1,2017-01-20T06:38:13,0.0
41893494,1557112.0,<docker><microservices><docker-swarm-mode><linkerd>,docker swarm mode route mesh linkerd,docker swarm mode route mesh build substitute linkerd route mesh word reason linkerd box solution,3,1000,0,1.0,1,2017-01-27T11:59:09,0.0
39888480,1743843.0,<java><microservices><vert.x>,vertx dashboard monitor,couple time vertx website vertx dashboard monitor setup dashboard,3,819,0,0.0,1,2016-10-06T05:53:38,0.0
53035362,1673776.0,<go><aws-lambda><structure><microservices><go-modules>,structure multi executable project,build micro service architecture project currently support module root directory arbitrary choose directory micro services architecture concept microservice independent share dependency stuff directory structure behavior expect executable functionality supply respective aws lambda function command explain work advice project edit file content,3,678,4,0.0,1,2018-10-28T19:32:09,0.0
38224152,2254364.0,<git><docker><docker-compose><microservices>,maintain repository single repository,repository micro service structure repository repository belong project call wholeproject maintain repository wholeproject easily maintain docker compose file repository revelant thing project good idea perform,3,78,1,1.0,1,2016-07-06T12:34:37,0.0
49534740,7980673.0,<docker><docker-compose><microservices>,communication microservice docker hostname,work microservice rest api request microservice static ip problem problem long guarantee static ip wan solve docker hostname achieve create define network docker compose ping container container curl example good achieve,3,1573,0,0.0,1,2018-03-28T12:36:59,0.0
49344182,1920113.0,<testing><automated-tests><microservices><wiremock><pact-net>,pact base stub service wiremock net,tool microservice dotnetcore component testing plan well pact net read pact net find link pact base stub library net lot sense pact pact stub consider wiremock net share feedback pick wiremock popular community compare seek automation stub help advance,3,948,2,0.0,1,2018-03-18T03:22:24,0.0
52118145,6872018.0,<spring><spring-boot><microservices><spring-cloud-netflix><spring-cloud-config>,javax servlet servletexception circular view path error dispatch current handler url error spring cloud,git base spring cloud project project point simply launch url error guide error url help error springcloudm configservergitapplication java application yml error screen shoot pom xml,3,1098,0,1.0,1,2018-08-31T14:59:45,0.0
39268365,132257.0,<microservices><graphql><apollo-server>,nested graphql server microservice,replace rest api graphql apollo server prefer clear graphql monolithic app clear microservice main api server consist multiple microservice microservice expose rest api central api server communicate replace rest api graphql microservice nest graphql server communicate graphql rest problem face easily build graphql query string microservice base receive attribute resolver main graphql server graphql return field microservice good simple forward main query microservice idea rest appropriate microservice graphql,3,403,1,1.0,1,2016-09-01T09:56:38,0.0
56343599,9812635.0,<go><logging><microservices><trace>,add trace log micro service,add trace log request micro service springboot application set trace mdc fetch log find mdc equivalent lang context set trace context problem log trace pass context function ugly well solution problem,3,294,0,0.0,1,2019-05-28T13:42:08,0.0
44331178,6694629.0,<javascript><node.js><rest><microservices><pact>,test api multiple response set,test api expose microservice contact consume microservice order avoid integration test create consumer drive contract test consumer microservice create pact publish broker producer verify pact separately achieve good face issue exhaustive test empty list return contact problem add interaction provider state find differentiate write test list contact contact empty list test create pact test consumer microservice find differentiate interation test help appreciate,3,312,0,1.0,1,2017-06-02T14:20:01,0.0
44253950,5296452.0,<web-services><rest><soap><microservices><azure-service-fabric>,soap service asmx azure service fabric,migrate exist service azure service fabric exist application support soap service asmx legacy user web service microservice web service test asmx call rest api well soln find soap service azure service fabric microservice approach help solution tackle web service scenario,3,415,0,1.0,1,2017-05-30T05:16:14,0.0
44433488,1695427.0,<docker><database-design><microservices><database-backups><database-restore>,micro service architecture database backup restore,work big project base micro service architecture consider service database database technology mysql mongodb elastic good practice backup restore collection service real problem database relate example logic backend server keep oauhid user oauth server consider restore database separately user db logic server user record oauth server docker docker compose docker swarm service orchestration,3,974,0,0.0,1,2017-06-08T10:40:29,0.0
40932850,4870349.0,<java><mongodb><microservices>,mongodb isodate issue modify microservice,insert document mongodb spring datum follow currentdate mongodb save mydocument modify mongodb database locate base purpose save verify mydocument modify base receive execute update follow isodate create database client document change send query database work perfectly problem spec header modify format millisecond pass modify header mongodb isodate save current millisecond exactly query return modify return entire resource query client send millisecond java millisecond zeros database great send client millisecond final question correct solve problem work correctly spec modify,3,308,2,1.0,1,2016-12-02T13:00:42,0.0
40829959,1262319.0,<database><design-patterns><microservices>,share microservice project,microservice project include microservice order product question good idea reuse microservice project store multiple website datum microservice retrieve correspond datum project token example website website share datum microservice database product microservice hold website website product reusing microservice good idea problem occur slight change website website product rewrite microservice website write generic product microservice handle type product,3,203,2,0.0,1,2016-11-27T14:21:50,0.0
40880443,1353809.0,<javascript><angularjs><reactjs><frontend><microservices>,micro service apply front js,project require developer build component module app time component write framework library search component write react result component write angularjs find serve serve module fully encapsulate technology wise path uri exist methodology approach allow app holistically serve module fragment single full unique path remain isolated front code allow datum pass technology developer essentially create component module subpath technology choice accept cohesively exist app write vary technology,3,1047,3,0.0,1,2016-11-30T04:40:09,0.0
40890804,4712061.0,<azure><asp.net-web-api><owin><azure-active-directory><microservices>,register microservice azure active directory aad security,service fabric application stateless statefull deploy service fabric cluster implement security application application active directory authentication library adal token azure ad oauth client credential flow client credential password implement scenario ordinary web api application register azure portal register service fabric microservice application webapi expose owin difficulty register reply url sign url url dynamic statefull partitionid replica receive unauthorized access call corresponding service sure url register statefull stateless application add application azure active directory wrong implement,3,1042,4,0.0,1,2016-11-30T14:24:14,0.0
40760397,4809675.0,<java><spring><maven><spring-boot><microservices>,java lang classnotfoundexception maven dependency,set spring boot application organize microservice month sprig boot problem maven build process switch spring boot develop microservice base software architecture core common service reference service dependecie service responsible provide common class method service separate service root service build service package file root service switch spring boot version root service test build rest service modules specification switch spring boot version execute root service exception message service form module specification find class core common service service module fine successful build test service eclipse fine idea help edit full stack trace case maven version edit,3,725,4,3.0,1,2016-11-23T09:23:29,0.0
39020065,969328.0,<microservices><mesos><marathon><consul>,marathon environment variable arg,consul container mesos slave node marathon follow json script marathon treat plain text error wonder workaround start consul container mesos slave node update janisz link follow discussion arg marathon file resolve env variable ability hostname app task environment variable config host rest api support variable variable expansion app definition well marathon documentation understanding currently pass environment variable arg post indicate pass environment variable environment variable task environment variable provide marathon environment variable host machine correct wrong,3,3380,1,0.0,1,2016-08-18T13:54:03,0.0
38975554,1364771.0,<microservices><azure-service-fabric>,multiple fabrictransportserviceremotinglistener single service,expose multiple fabrictransportserviceremotinglistener single stateless service inside cluster attempt register listener follow proxy implement second listener exception regard unimplemented interface method throw lead listener incorrectly respond proxy call create proxy follow code scenario describe,3,569,0,0.0,1,2016-08-16T12:54:40,0.0
39071178,6741936.0,<architecture><nuget><soa><nuget-package><microservices>,soa versus nuget package,interested service base architecture loosely base concept microservice management view place build nuget package feel articulate microservice soa nuget package,3,598,2,0.0,1,2016-08-22T03:54:20,0.0
44495957,7161899.0,<docker><kubernetes><microservices>,docker microservice app restart kubernetes,microservice application kubernetes rabbitmq elasticsearch eureka discovery service kubernetes three microservice application fine third restart reason config file result kubectl describe pod hrm kubectl pods kubectl version minikube version pod log error start problem problem edit output kubectl event,3,535,9,0.0,1,2017-06-12T09:29:14,0.0
48271960,5962.0,<apache-kafka><microservices><event-sourcing><distributed-system><distributed-transactions>,event source deal datum dependency,rest api follow operation result event post kafka addcategory updatecategory removecategory additem refer category identifier updateitem removeitem environment multiple user rest api time consumer event consumer offline extended period time day consumer add remove problem event order workaround single topic partition additem addcategory invalid category reference updateitem addcategory valid reference invalid removecategory additem category reference invalid infinite list concurrency issue event store snapshot fast resync restart consumer compact log topic category item entity key identifier compact log topic identify offset entry compact log topic datum serialize blob category item offset require single topic partition deal handover replay render entity event store live stream command event encode offset item compact log view pass replay live event log system fit problem better,3,372,0,0.0,1,2018-01-15T23:09:44,0.0
48201224,4802448.0,<rest><architecture><apache-kafka><message-queue><microservices>,kafka rest communication microservice,currently work architecture sure kind architecture call event drive data drive architecture input message send frontend message validate collect evaluate current approach persist raw message meta ms sorted collection ms evaluation ms separate datum appropriately concerned microservice produce message ms require produce message ms require evaluation collection meta ms require proceed kind send minimum datum queue provide api send datum queue forward datum follow service send service queue provide api misunderstand approach communicate microservice kafka feel free offer criticism advice,3,1693,2,1.0,1,2018-01-11T06:45:16,0.0
46386326,1042646.0,<spring-boot><cloud><microservices><cloudfoundry><12factor>,service attach resource,factor app principle statement statement state application respond backing service database message broker connect irrespective differ traditional connect microservice define database kafka broker user provide service cloud foundry provide connection parameter vcap service variable code connect database kafka broker entirely statement signify differ cloud environment,3,308,0,0.0,1,2017-09-24T03:32:03,0.0
46291406,2442190.0,<rest><http-post><microservices>,design database idempotent microservice post,general basic question regard design post database service implement microservice savecustomer microservice post pass customer datum savecustomer service receive datum json insert database network congestion client retry send duplicate request ensure insert duplicate record database obaid,3,657,2,0.0,1,2017-09-19T03:40:46,0.0
47163923,2446799.0,<kubernetes><microservices><orchestration>,good practice create monorepo kubernetes infrastructure,hard time construct workflow include monorepo multiple microservice single command start start local development experience instal entire infrastructure machine instal local development wait goal change local file instantly apply service rebuild image docker volume guess modular config file root config file infrastructure reference service small config hard example guide construct system luck design witk question close developer dev op experience good microservice find lack solid guide common case clear guide smooth local development experience rapid feedback loop opinion base find question focused general direction lead developer experience exact step sure find consider good practice professional dev op idea big infrastructure ten microservice manage single machine desire,3,397,0,0.0,1,2017-11-07T17:24:53,0.0
47077380,8735568.0,<angular><spring-boot><microservices><spring-cloud>,spring cloud services eureka,learn microservice spring spring boot learn deploy cloud platform plan create angular front application communicate deploy microservice spring cloud service eureka zuul circuit breaker read find eureka service registry finding service doubt communicate angular http request service register cloud configuration follow rest api microservice totally confuse push sample microservice cloud beginner help clarify doubt,3,1761,1,0.0,1,2017-11-02T14:10:53,0.0
53908473,2149484.0,<amazon-web-services><rest><microservices>,aws service design microservice,curious aws service design example service rest api alot endpoint service encompass full range functionality service scene surely collection microservice insight common design pattern point top level service layer encapsulate individual call multiple microservice fact,3,133,0,0.0,1,2018-12-24T01:48:05,0.0
40702179,2981597.0,<amazon-web-services><amazon-s3><amazon-ec2><microservices>,micro service web app aw,develop web application image upload retrieval aws cloud service micro service architecture aws micro service architecture help map component architecture aws component consider micro service ec instance auto scaling load balancing micro service ec cluster static html file call database method load html content call api gateway client search web unable find tutorial implement multiple service micro service aws ec ecs help figure map requirement tutorial implement app helpful advance,3,817,0,2.0,1,2016-11-20T08:43:36,0.0
40660163,7174012.0,<domain-driven-design><dependency-management><microservices><soa-governance>,microservices dependence management governance domain drive design,background international company federation model transform microservice chronic monolithic pain autonomous team quick deployment highly desirable spite theory service dependent high functionality autonomous independently develop deploy federation model decentralized control impose strict rule governance platform manage dependency multiple version production country foresee uncontrollable chaos call set microservice collaborate compatibility set service deploy satisfy high functionality compatibility set example microservice fully autonomous deploy work perfectly satisfy businessfunctionality work microservice microservice form compatibility set approach dilemma microservice real life rubber hit road learning experience approach governance platform rationale federal model international company country central lay model individual country choose destiny frequently frequently devolve chaos central team hook ddd solution ideal version inconsistency derail functionality release service fit compatibility set individually blameless fall apart result flawed inconsistent functionality homogeneity standardization terminology developer mixed skill junior learn reactive programming cloud native technology bound context heavily depend shared vocabulary subtle impossible enforce naive assume international mixed skill fragment scenario multiple version standardization single business model realistic heterogeneous system ideal central hold responsible chaos enforce governance platform create microservice governance system framework enforce dependency management verify enforce design time dependency microservice manifest perform check balance verify service implementation offer compatibility set approach domain drive design ddd ddd model domain constantly evolve domain expert typically business stakeholder analyst work alongside developer design system domain ubiquitous language form context word thing thing realise system order thing example list product system order financial transaction happen model describe fall service list order capability supply list order order list product financial transaction coordinate developer language impossible task doom fail ddd manage system level force service definition order ddd embrace inherent complexity coordinate large deployment huge number developer involve allow team work independently coordinate team centralise dependency management system term ddd bound contexts context order thing bound context order thing context function autonomously – describe service autonomous match definition order entire system register supply dependency central registry tightly couple rest system consider order – painful coupling monolith pain build distribute system win realise benefit microservice approach ddd base approach doesn heavy handed approach enforce dependency capability system level allow individual team work central coordination service interact service team manage service work team manage service build interface bound contexts agreement language interface team manage dependency system level thing remain opaque unenforced people implement microservice system inflexible fragile monolith call minilith monolith microservice require complete rethink architecture software development process require allow service autonomous independently manage team independent centrally manage centralise management dependency capability system inhibitor build microservice base system intelligent pragmatic comment invite approach governance pragmatic tactical intend solve real challenge question undermine long term strategic ddd model enterprise approach ddd ideal aspirational address real challenge deal opinion comment,3,368,1,0.0,1,2016-11-17T16:30:33,0.0
53621693,1185981.0,<java><.net><database><security><microservices>,microservice database security,microservice architecture design principle microservice database worried security connect database security communication microservice database,3,80,0,0.0,1,2018-12-04T21:29:00,0.0
53428768,2149453.0,<spring-boot><architecture><microservices><iot><api-gateway>,api gateway mqtt support iot,work iot department project discussion create core architecture application client specification mqtt protocol communicate device java application eclipse paho client web application base spring boot microservice architecture find good solution api gateway provide mqtt support find zuul good alternative kong,3,873,0,0.0,1,2018-11-22T10:23:27,0.0
36586934,1710444.0,<node.js><typescript><microservices><restify>,carry request context stack thrift service boundary node js,figure appropriate method carry request request restify request header stack thrift inter service call rabbitmq queue message goal service correlate error event initiating http request practice node avoid pass context virtually function call relic handle instrumentation blog type instrumentation require hook ton node core library call help carry context thrift call restify header request request access deeper stack async callback modify function pass clean pass thrift call service boundary typescript node js,3,420,0,0.0,1,2016-04-13T01:26:35,0.0
42490380,7492114.0,<security><jwt><microservices>,handle jwt refresh token flow,build front build react access multiple microservice api build auth build jwt login system wonder process handle refresh token refresh token inside jwt user info token encryption extra protection token micro service respond react app jwt invalid refresh common http status code read refresh token secure jwt issue jwt longer active time extra security encryption server side client side jwt refresh refresh token token timestamp invalid,3,1604,0,1.0,1,2017-02-27T16:06:38,0.0
42360790,1028270.0,<python><google-app-engine><google-cloud-platform><microservices>,deploy default app deploy multiple service gae,read initially deploy version app default service create deploy subsequent service understand gae microservice separate thing accurate depiction gae microservice work master controller default service set top level config kind routing bunch web app app wil schedule process datum frontend app accept web request create default service,3,1370,0,0.0,1,2017-02-21T07:08:05,0.0
37697171,1808649.0,<ruby-on-rails><docker><docker-compose><microservices>,docker independent multiple rail instance,create development environment multiple microservice production environment docker call master debug console ouput wrong docker compose yml file rails app error thing access browser docker version osx virtualbox work fine call ubuntu docker beta fail edit understand localhost rail app server localhost rails app machine access ip virtualbox instance access service well,3,742,0,4.0,1,2016-06-08T08:30:43,0.0
45755580,7395103.0,<microservices>,differentiate maven multi module spring micro service,read spring micro service project tut architecture style main application divide set application call microservice large application divide multiple collaborate process framework maven multi module separate project experience micro service separate project differentiate advance,3,1241,2,1.0,1,2017-08-18T11:29:16,0.0
41914911,3294568.0,<microservices><cqrs><event-store><eventsource>,microservice base event store,unfamiliar detail domain drive design sense microservice architecture service domain turn build event store service totally sure trade single monolithic event store entire system example difficulty replay condition system debugging cross service dependency,3,350,0,0.0,1,2017-01-28T21:15:33,0.0
55087016,11179064.0,<amazon-web-services><go><aws-lambda><domain-driven-design><microservices>,organize invoke lambda function,order microservice write aws lambda function main function order service bind api gateway receive parameter int create order artifact return serialize order order total price function invoke function order item create order item return parallel product function invoke product user function retrieve user product order function invoke lambda call fee function total price user fee price course call function user function basically simple example service work general function call user discount state taxis question good order function invoke fee function amazon import fee handler package inside fee function call deploy separate function well good function receive user load user invoking user function well preload pass good function call function call well approach situation sns step function dependency injection aws layer main reason withstand rpm pay lot help appreciate,3,102,0,1.0,1,2019-03-10T11:05:30,0.0
57589001,7762393.0,<java><transactions><microservices><distributed-transactions>,distribute transaction rabbitmq spring boot application,currently work migrate monolith app micro service achieve distribute transaction application example rabbitmq handle distribute transaction note duplicate question example find implementation,3,207,0,0.0,1,2019-08-21T09:55:27,0.0
47427629,5077196.0,<c#><microservices><masstransit><saga><automatonymous>,message service event command,understand method messaging service scenario service notify user product creation second service receive message create product respond service product create command request respond suit scenario service address specific service wait feedback understanding event command event provide loose coupling service perform publish queue service interested message pick command perform send specific queue service receive queue consume request respond publish subsribe request respond request respond service request perform operation wait respond return publish subscribe service publish message continue process wait feedback response start design messaging system rabbitmq masstransit saga masstransit automatonymous follow event publish subscribe method question command publishing event request respond understanding correct sagas request response,3,836,0,2.0,1,2017-11-22T05:47:23,0.0
47224077,8735568.0,<microservices><spring-cloud>,confusion spring cloud microservice architecture,create spring cloud microservice spring boot framework create rest microservice spring boot framework create eureka server spring boot project register microservice eureka server create spring boot project zuul project register eureka server eureka server register spring boot project eureka server ui properly work confusion follow standard develop spring cloud microservice documentation type spring cloud development blog spring cloud structure totally confused proper spring cloud microservice development spring cloud clarify current architecture create eureka server microservice registration client zuul proper,3,176,0,1.0,1,2017-11-10T13:38:16,0.0
48873507,7337938.0,<microservices>,cache microservice architecture,api gateway caching feature implement reduce access time bandwidth usage kind datum cache gateway micro service architecture gateway cache discover service description maintain consistency cache,3,1207,0,0.0,1,2018-02-19T20:14:02,0.0
48963386,2750505.0,<rest><apache-kafka><domain-driven-design><microservices><event-sourcing>,microservice rest event sourcing datum consistency,plan model microservice event source achieve high scalability high throughput handling capacity kafka message broker microservice point question implementation model benefit kafka topic partition requirement model fit microservice ingest datum message broker post patch delete data consistency mandatory entity previous existence entity exist record entity point valid record entity microservice couple domain refer ddd system handle high thrgoughput read write operation well requirement mind endend model elasticsearch database current valid state write request receive microservice gateway validate request state request produce write operation message broker receive state change event message broker respond requester state change write operation consume microservice processor handle business logic datum denormalization update state elasticsearch database produce state change event message broker read request handle microservice gateway searchs elasticsearch database request resource record respond requester result question model coupling domain gateway validate subresource ensure datum consistency elasticsearch database case pointing model fit report request complex report process lot datum input parameter user point view operation synchronous request response rest validation request state business logic relate ddd model incorret separate microservice edit proposal client gateway microservice gateway route microservice registry balancing auth stuff call dedicated microservice authentication authorization microservice hold data database consistency ensure event source architeture report domain resource microservice hold datum domain require microservice provide report,3,486,1,0.0,1,2018-02-24T13:29:08,0.0
40068013,564490.0,<git><bash><continuous-integration><microservices><monorepo>,ci cd independent microservice monorepo git bash,bash git collection directory file differ time branch merge well collection change match pattern file build collection change directory collection change,3,301,0,1.0,1,2016-10-16T07:35:35,0.0
40058568,4088940.0,<architecture><publish-subscribe><microservices>,synchronous communication asynchronous microservice architecture,extract service monolithic application pet project learning exercise amqp rabbitmq communication service work fine trouble separate web frontend rest application web service care view ui logic query backend core service main datum amqp good fit frontend service wait response response time critical thought implement rest interface communication service amqp subscribe communication service pretty common occurrence find answer guess main question service offer synchronous asynchronous communication ruby lend multiple thread require listen interface thing consider amqp send message field blocking response receive extract data access core backend service rest api web service subscribe query service unnecessary service access database multiple thread kind event loop listen interface overly complex,3,312,2,1.0,1,2016-10-15T11:40:51,0.0
49875284,3253853.0,<spring><elasticsearch><logging><microservices><logback>,logback elasticsearch yaml property,spring base microservice project logback elasticsearch save log elastic search configure xml base tutorial configuration base xml xml configure logback elasticsearch yaml key property file,3,566,3,0.0,1,2018-04-17T10:07:11,0.0
49777963,6460216.0,<docker><docker-compose><microservices>,best handle share service docker compose local development microservice architecture,set effective pattern allow communication service allow local development multiple service simultaneously currently set local development application docker compose basic idea question handle require local application application time communicate compose instance good app communicate understanding job prefer host issue docker mac lot opinion solution honestly unsure approach good solution include create share service separately docker compose host sadly working separate compose share service service depend advice share,3,331,4,1.0,1,2018-04-11T14:38:16,0.0
37243939,1600851.0,<node.js><postgresql><docker><containers><microservices>,initialize postgre database table microservice architecture node docker,good practice initialize node microservice table postgre database service start copy sql file container docker build install psql container sql file docker npm start sense consider fact manage upgrade database table microservice well,3,752,1,1.0,1,2016-05-15T21:39:56,0.0
41036330,4383715.0,<microservices><private-key><public-key>,store private key microservice,microservice communicate rsa encrypt message private key file currently good practice store private public key container current solution ssl bit hard manage safety,3,331,0,1.0,1,2016-12-08T09:49:19,0.0
41164987,1410512.0,<java><spring-security><jwt><jhipster><microservices>,user locale microservice jhipster,microservice jhipster microservice architecture generate document user language gateway user language retrieve cookie angularcookielocaleresolver request route gateway arrive microservice cookie find request option add locale claim jwt token contact gateway username retrieve locale generate locale specific content microservice prefer option well option help choose list alternative,3,414,0,0.0,1,2016-12-15T13:09:07,0.0
51602270,256770.0,<java><spring-boot><microservices><spring-data-rest>,spring data rest micro service entity onetoone relationship entity spring data rest service,spring data rest application follow entity jparepository entity class create instance foo bar associate bar instance foo instance entity define spring datum rest service endpoint well bar instance associate foo instance question postgresdb entity store association table foo bar column hold entity url bar store understand store split app separate spring datum rest service foo service foo bar service bar separate port split repository class project create association work modify code create instance foo bar associate bar instance foo instance request foo bar manage spring datum rest service second case work note excellent resource example,3,227,0,0.0,1,2018-07-30T21:04:54,0.0
51641688,7351459.0,<java><hibernate><lucene><microservices><hibernate-search>,asynchronously build hibernate search ensure downtime,hibernate search lucene engine enable fuzzy search text datum store sql server database consume search service write java data source search table moderate edit update frequency change rebuild ensure search function accessible lock process build short temporarily exist build replace completion,3,100,2,0.0,1,2018-08-01T20:20:59,0.0
51612524,5138906.0,<java><microservices><jhipster><jhipster-registry>,jhipster registry exception pre package war,gateway error registry service pre package war file download release version interesting microservice error happen gateway create gateway exception appear happen day day exception time,3,448,2,2.0,1,2018-07-31T11:38:44,0.0
51622666,186820.0,<api><microservices><identityserver4><audience>,identityserver mvc audience refer addjwtbearer,access token work application api gateway audience option addjwtbearer refer refer clientid apiscope moment base scope mobile application setup communicate api gateway change client send mobile ro client authorize api function access clear understand set correct addition add authorized scope asp net mvc core project controller,3,1853,4,0.0,1,2018-07-31T21:55:12,0.0
51627473,0.0,<java><spring><spring-boot><yaml><microservices>,spring boot yaml auto data source configuration issue data source url pick,currently create spring boot project module technology follow java maven spring boot release spring boot starter parent public class application application propertie spring datasource url jdbc oracle xxx xxx xxx xxx spring datasource username xxx spring datasource password xxx spring datasource driver class oracle jdbc driver oracledriver application yml spring profile active dev main banner mode spring profiles dev datasource url jdbc oracle xxx xxx xxx xxx username xxx password xxx driver class oracle jdbc driver oracledriver add data source property file application work expect yaml error error exception encounter context initialization cancel refresh attempt org springframework beans factory unsatisfieddependencyexception error create bean testapplication unsatisfied dependency express field datasource nested exception org springframework beans factory beancreationexception error create bean datasource define class path resource org springframework boot autoconfigure jdbc datasourceconfiguration tomcat class bean instantiation factory method fail nested exception org springframework bean beaninstantiationexception fail instantiate org apache tomcat jdbc pool datasource factory method datasource throw exception nest exception org springframework boot autoconfigure jdbc datasourcepropertie datasourcebeancreationexception determine embed database driver class database type embed database supported classpath database setting load profile active profile dev currently active,3,2434,7,0.0,1,2018-08-01T07:18:19,0.0
47607417,2381602.0,<node.js><microservices>,well build microservice nodejs,big project build microservice nodejs service import core common module stage single change common core module update build deploy artifact well handle,3,95,4,0.0,1,2017-12-02T11:28:07,0.0
46920685,2928710.0,<spring-boot><microservices><netflix-zuul><canary-deployment><dynamic-routing>,canary release dynamic route netflix zuul,face problem thing dynamic routing canary release example deploy microservice finish big feature deploy microservice question dynamically reroute request example header route microservice version example feature modify add specific header request header current microservice version service discovery eureka support eureka work course zuul great advise,3,353,0,1.0,1,2017-10-24T21:55:19,0.0
46803321,1358676.0,<java><spring-boot><spring-security><microservices><spring-session>,wrong session microservice,read session concept restfulness microservice inevitably apply well spring session list spring session allow provide session header work api feature,3,3026,1,2.0,1,2017-10-18T05:23:31,0.0
50775206,6235175.0,<typescript><visual-studio-code><microservices><nestjs>,debugging nestjs micro service framework,debug nest micro service framework vscode framework typescript project springboot convention,3,403,0,0.0,1,2018-06-09T14:19:08,0.0
52632129,10335281.0,<amazon-web-services><microservices><event-sourcing><event-driven>,aws event sourcing implementation,newbe microservice event sourcing figure deploy system aw implement event drive architecture aws kinesis datum stream aws sns sqs base strategy command convert event store dynamodb exploit dynamodb stream notify microservice event previous solution advantege message ordering delivery disadvantage problematic build autoscale achieve trigger message visibility functionality confirm topic subscription strict read transaction improve multiple shard read well define number lamdas invocation priority well define strategy avoid duplicate processing multiple instance microservice second advantege completely manage high tps topic subscription message visibility functionality drawback sqs message good effort order idea standard queue good effort preserve order message copy message deliver order copy message copy deliver order deliver unordered compare message copy big kind advice,3,2165,0,1.0,1,2018-10-03T16:57:43,0.0
52544905,3546205.0,<rest><microservices><hateoas>,generate hateoas link distribute rest service architecture,rest lot consider migrate internal monolithic service architecture lean distribute bit trouble wrap head generate hateoas link resource distributed microservice system understand generally store relation database alternative generate code primary benefit microservice allow distinct team work independently improve service api team reliably generate link team service resource matter keep eye break change api versione appropriately team update resource link choose good hardcode link sort good practice scene find search term help,3,153,0,1.0,1,2018-09-27T20:47:38,0.0
52555619,2932149.0,<java><spring><hibernate><spring-boot><microservices>,load balance spring boot micro service database application,micro service spring boot simple start read good approach micro service data access database database curious work start multiple instance micro service instance micro service work database separate database dilemma datum multiple database load balance micro service work situation edit comment appreciate comment feel lack explain thought question build monolithic application spring hibernate hibernatedaosupport hibernate enver transaction management spring manage commit rollback situation database work start micro service unable find proper explanation spring transaction management hibernate enver micro service work single database understand instance micro service work curious multiple instance micro service work properly database consider fact hibernate cache object database performance reason mention enver action,3,393,4,0.0,1,2018-09-28T12:43:07,0.0
39601492,2138633.0,<spring><spring-boot><microservices><netflix-ribbon>,monolith spring application communicate microservice,monolith spring web application develop spring spring security java deploy tomcat requirement create micro service module spring boot java micro service deploy separately ec instance suggestion idea access microservice exist spring web application perform inter process communication spring application provide help pointer,3,277,2,0.0,1,2016-09-20T18:41:04,0.0
38629740,5985566.0,<spring-security><spring-boot><spring-cloud><microservices><spring-cloud-netflix>,implement security microservice spring,monolithic application service user management fleet booking feedback develop spring rest migrate microservice spring boot cloud netflix oss question implement security rest service user database implement api gateway security stand point,3,342,0,2.0,1,2016-07-28T07:28:20,0.0
38492388,1042646.0,<java><spring><spring-boot><microservices><spring-cloud-netflix>,add dependency microservice,build microservice consume number external service external service consume microservice build build connector microservice library project include dependency microservice project read logic microservice duplication logic case recommend define connector microservice share library,3,516,2,1.0,1,2016-07-20T23:16:50,0.0
43529266,105678.0,<haskell><docker><docker-compose><microservices><haskell-stack>,haskell stack docker compose,docker compose tie haskell service local development time mess unit test code hit dependency docker compose great dependency database service link stack docker support build docker container create executable image leverage stack docker functionality dockerfile functionality follow question setting env link docker compose file,3,560,2,0.0,1,2017-04-20T20:25:35,0.0
50134195,2414674.0,<architecture><microservices>,authorization micro service user,good handle access authorization microservice user build application microservice architecture service speak rest endpoint access microservice directly user endpoint public require user register admin privilege top user role admin regular user figure oauth scopes good approach achieve microservice user permission scope service place order,3,253,0,1.0,1,2018-05-02T12:01:47,0.0
53838242,3972508.0,<django><django-rest-framework><microservices>,bidirectional communication django application,basic question microservice search article find apt develop django rest application authentication service build authentication service django rest framework simplejwt current plan token send tokenverifyview authentication service validate token case user require create view authentication service return username intend achieve send request authentication service view decorator understand slow optimal solution well achieve,3,155,2,0.0,1,2018-12-18T17:30:06,0.0
49292843,2870572.0,<java><spring-boot><swagger><microservices>,swagger gateway microservice aggregation,develop microservice application springboot gateway microservice public face redirect request microservice host multiple microservice microservice expose api swagger aggregate api swagger doc public client temporary solution incorporate copy swagger annotate class microservice gateway service,3,1942,5,2.0,1,2018-03-15T06:27:21,0.0
52736970,7654224.0,<microservices><rbac><authz>,authorization microservice,system move monolithic microservice architecture microservice architecture technical challenge address authn authz approach authentication service authenticate user generate access refresh token jwt access token pass request header chain microservice microservice validate token determine user authenticate authz permission enforcement microservice question relate authz illustrate talk specific example receptionist register member fidelity program instance web application support case assume system microservice receptionservice memberservice receptionservice offer rest api initiate member registration flow require user permission registration allow execution memberservice offer rest api create member resource protect crud permission request flow web application user log send member registration request receptionservice api include user access token header receptionservice validate user token ensure user grant permission registration business logic finally send member creation request memberservice api include user access token header memberservice validate user token ensure user grant permission member create finally create member design solution case team work follow assumption prerequisite microservice enforce permission api operation create member crud permission memberservice example product manager require top level registration permission user start case top level permission complete error lack permission underlie service call chain admin user understand chain permission require perform case example admin provide user registration permission complete example permission assign user break assumption prerequisite overcome colleague propose consider declare microservice identity user authn system assign appropriate permission user token initially provide replace participate service token call chain example request flow web application user log send member registration request receptionservice api include user access token header receptionservice validate user token ensure user grant permission registration business logic finally send member creation request memberservice api include service token header replace original user token memberservice validate service token ensure service grant permission member create finally create member solution service identity authn system flag filter admin user manage permission assignment permission assignment service identity pre define possibility user configure fulfill assumption pre requisite concern approach deal audit user identity service identity provide token list indifferently example registrationservice audit actual user initiate operation memberservice audit operation perform registrationservice reporting scenario reconciliate audit system determine create member correlation understand create identity system component scenario involve actual user automate batch third party access comfortable replace user token service token scenario user initiate case standard design pattern assumption prerequisite wrong instance security hole microservice enforce permission access control microservice safe environment assume answer security hole tomorrow memberservice api accessible safe environment instance third party add permission break registration flow wrong admin user set permission require case build system gracefully handle failure lack permission call chain sagas compensation routine comment link resource greatly appreciate,3,445,0,0.0,1,2018-10-10T09:30:26,0.0
52846654,2728956.0,<java><spring-batch><workflow><microservices><project-reactor>,java application sequence workflow pattern,spring web application user call save endpoint system execute external call save state multiple microservice step depend word sequence step perform call set step big deal create class step call appropriate modification step step fail happen properly report user pseudo code straight forward solution step process list item step send item fail step send half fail half pass stepexception pass fail maintainable spring batch overkill read write multithreade job detail checkpoint idea create building block control flow moment figure spring reactor help purpose stream pipe error handle imagine write word search framework async processing retrie future well reactor,3,182,1,1.0,1,2018-10-17T02:54:40,0.0
52854446,1535591.0,<kubernetes><microservices><kubernetes-helm>,kubernetes config code repo helm chart repo,helm advertise pretty manage deployment app microservice whith mapping code repo deployable find convenient config map code evolve add environment variable feature flag maintain single helm chart git repo occasionally update sync code good practice helm chart applicable mapping code repo deployable coordinate deployment composite app helm chart repo isntead single repo chart vanilla config map configure deployment git repo issue face start helm hope generic opinionated happy edit concrete,3,438,1,0.0,1,2018-10-17T12:03:01,0.0
47757342,1889864.0,<docker><docker-compose><microservices>,programmatically add service docker compose project,project components base docker orchestrate optional add runtime achieve create compose file separate project add base preferred option combine file keyword fit variable number service add runtime,3,1049,0,0.0,1,2017-12-11T16:34:58,0.0
47889886,3609255.0,<github><database-design><relational-database><microservices><continuous-delivery>,microservice sense separate code repository database migration script api code,identify microservice implementation call microservice repository benefit single responsibility well ownership repository database schema choice well separation persistence reduced maintenance db instance earlier extract database migration script continuous delivery separate single repository script schema single job ci tackle story start face challenge list change single schema trigger build database downstream triggering microservice increase feedback time general fail achieve continuous delivery schema change require respective change code cautious effort deploy common table schema currently duplicate schema question doubt separate db migration repository accord schema service separate repository db migration script club respective repository code extract common table raise pointer advice greatly help,3,415,0,1.0,1,2017-12-19T15:09:11,0.0
35223505,1340582.0,<java><spring><spring-boot><microservices>,spring boot project setup design decision,spring boot create service initial idea service microservice deploy jar file maven build wonder good spring boot project structure service guess service code entity reuse service option service standalone spring boot project implement entity controller util actual service require good service fully bad custom utility class service domain object service share service create codebase service utility controller service good easy bad jvm serve service call service boundary handle load balancer help,3,297,1,1.0,1,2016-02-05T11:50:38,0.0
35348080,260511.0,<java><architecture><redis><microservices><bigdata>,handle share datasource microservice architecture,couple service microservice architecture service service service api provide domain logic share logic return user state redi user state change iam publish service micro service solution create service responsible user state hold user datum redi disadvantage client additional call api request user state duplicate user state datasource microservice hold redis instance return independently request disadvantage duplicate datum duplicate redis instance microservice access redis datasource service disadvantage duplicate redis logic order retrieve datum service break microservice principle shared datasource,3,891,0,1.0,1,2016-02-11T19:14:25,0.0
58348457,11782468.0,<spring><spring-boot><intellij-idea><microservices>,spring boot instance,intellij idea ide version instance spring boot application port instance start application port change port parallel previous error browser find port work application port add configuration problem,3,56,4,1.0,1,2019-10-11T21:06:37,0.0
54452065,10074190.0,<networking><kubernetes><microservices><pod>,kubernetes pod connect external database,microservice kubernete server consist pair springserver database database public ip server work fine move kubernetes work pod log help spring connect database,3,1124,0,0.0,1,2019-01-31T01:26:06,0.0
54277935,7210166.0,<.net-core><domain-driven-design><microservices><crm><cqrs>,architectural choice crm,light complexity architectural selection start development cms crm erp find question watch read conference discussion monolith distrubute ddd philosophy cqrs event drive design panic architectural choice account flaw find unfortunate example microservice distribute system find easily net commerce example customer order product kind example database general nosql db microservice exist advantage keep minimalist representation datum context unique relational database single relational database work company produce crm access source code machine structure database relational listing report consult link entity crm contact company conversely user action task task assign user link item contact company publication calendardate lot record table row choice transaction omni lot concurrent access data record choose microservice system lot microservice lot contexts high probability bunch domain model impression light small bulb garland process simultaneously precise direction question easily mix ddd philosophy monolith system uncouple small quantity eventual service absolutely set apart reason resource learn lot work multitude database kind mongodb nosql imagine answer elaborate redirect article clear answer advance net core draft,3,149,0,0.0,1,2019-01-20T15:24:01,0.0
54447413,10992123.0,<java><docker><microservices>,dockerfile acce jar file,newbie java docker easy build microservice communicate return error dockerfile alternate achieve success help good read subject link answer improve skill,3,121,5,0.0,1,2019-01-30T18:40:10,0.0
45241581,487291.0,<aws-lambda><microservices>,microservice function service faas,microservice architecture big thing easy deploy easy develeop complicate scale develop monolith system orient container promising discover hype function service faas aw lambda example wikipedia follow faas build application follow model achieve serverless architecture typically build microservice application conclusion faas worry maintain hardware network resource advantage microservice architecture pattern fully achieve function service,3,1419,0,1.0,1,2017-07-21T15:36:08,0.0
45243781,6647374.0,<docker><containers><dockerfile><microservices><docker-machine>,build docker task productive,beginner docker create image application connection oracle db gateway nodejs code build longtime node local machine project nodemon productive transform build task faster,3,60,2,0.0,1,2017-07-21T17:47:00,0.0
51878195,9242571.0,<kubernetes><microservices><kubernetes-ingress>,kubernetes cross namespace ingress network,simple ingress network access service namespace ingress network ingress network yaml file set externalnames service type yaml file,3,6406,1,2.0,1,2018-08-16T13:25:50,0.0
51821786,4860939.0,<java><spring-boot><microservices><netflix-zuul>,enablezuulproxy doesnot work httpservletrequest class find,write enable api gateway microservice start microservice mention error numerous search find solution help enable reason disabled create custom solution feasible servlet spring boot app import cement api gateway annotate api gateway class help error highlight guess late spring thing thought,3,642,4,0.0,1,2018-08-13T11:55:10,0.0
51889526,5889530.0,<java><architecture><microservices><low-latency>,micro service requirement low latency code,monolith function call method invocation oppose inter process communication familiar micro service architecture help understand reason micro service develop low latency application chronicle framework claim develop micro service base product chronicle queue communicate incur network hop latency,3,121,7,1.0,1,2018-08-17T06:25:20,0.0
55280289,11219627.0,<authentication><authorization><microservices><openid-connect><keycloak>,handle authorization authentication microservice,company build application top microservice struggle decide handle authorization authentication path openid connect authenticate user authorization advice explain solution work user role department number department exceed department user multiple role understand recommend handle role token send client server jwt worried token payload big browser hold header kb datum case department role uncompress pro user authorize authenticate enter microservice con mention large payload token option keep jwt minimum userid departmentid query keycloak user request add cache mechanism short lifespan approach generate lot request authorization server advice experience solve happy provide easy advice short description choice jwt handle authentication authorization keep jwt light request authorization server microservice,3,89,0,0.0,1,2019-03-21T12:19:05,0.0
55119831,1417633.0,<java><spring-boot><microservices><openapi><openapi-generator>,generate springboot model swagger yaml openapi generator,api approach api service define swagger yamls openapi generator generate interface implement microservice model generate schema question rest endpoint consume xml parse spring boot model save database moment model model pretty spring boot automatically parse incoming xml save model directly database return json model generate openapi generator annotation parse xml save database yaml add annotation main reason autogenerate model form swagger large architecture nice change api definition yaml example add field microservice build model update manual update java class generate model openapi extend class add annotation afterward change derive class field definition change example annotation field generate fine case json property yaml influence java code generate wrong thing getter setter annotate attribute touch microservice derivate model define api move derive class api project contexts case xml mongo vary microservice microservice idea good approach cheer edit dig deeper sure approach add xml mapping annotation swagger yaml mention documentation extend microservice code add database annotation basically second example base class xml annotation generate swagger codegen manage swagger codegen generate xml annotation build schema model,3,744,0,0.0,1,2019-03-12T10:57:37,0.0
55117508,6646439.0,<java><maven><microservices><wildfly-swarm><debezium>,problem execute goal wildfly swarm plugin api incompatibility java lang abstractmethoderror,build app build finish output generate maven argument follow,3,803,1,1.0,1,2019-03-12T08:58:45,0.0
45007694,3289816.0,<database><rest><architecture><microservices>,microservice database compatibility version,dive microservice architecture start code small piece logic company microservice concern database handle microservice separate db schmema piece advice experience move microservice version rest api endpoint today prod week decide live version create column datum type entity envolve service order force client migrate keep version till user move progressively couple scenario mind version main doubt reason post read write db instance implementation adapt match schema structure read write separate db instance manner dbs synchronise till day decide turn guarantee datum eventual consistency question accomplish framework queue messaging code forwarding request inside owner migrate schema unique db instance read couple book write concept term specific technology good thing whit post appreciate opinion,3,311,3,1.0,1,2017-07-10T08:56:19,0.0
50344525,8236137.0,<spring-boot><web><microservices><high-availability>,high availability web application spring boot,develop web server allow user submit spark job hadoop cluster web server help create cluster keep monitor job deploy web server node loader balancer front high availability requirement user submit job server keep monitor case server server task monitor job impact user job central storage table database server keep poll job info table distribute lock ensure server lock row table monitor job,3,965,0,0.0,1,2018-05-15T07:24:57,0.0
39540366,6841141.0,<go><microservices>,kit real example inter microservice datum transfer,work kit gokit io build real work application example example great understand service service communication data transfer kit framework real shipping app understand real micro service source example build booking service pass foreign repository service datum repository repository belong foreign micro service call method explain build micro service micro service communication kit framework pattern understand share direct access datum real micro service expect micro service communicate datum understand kit framework,3,1301,0,4.0,1,2016-09-16T21:31:37,0.0
57329591,8202251.0,<php><symfony><nginx><routing><microservices>,configure nginx route specific request pattern specific php fpm upstream host symfony application,develop application compose microservice microservice symfony application route request application nginx three url pattern microservice pattern allow access authentication api php fpm upstream thing close nginx configuration objective configuration append request auth publickey nginx handle request auth publickey forward application upstream symfony application handle request auth publickey objective nginx handle request realpath root app public symfony entrypoint php fpm host fastcgi path info publickey valid route url symfony application question application handle auth request request handle nginx auth publickey therefor answer,3,58,0,0.0,1,2019-08-02T15:34:24,0.0
57497607,11928005.0,<.net-core><rabbitmq><microservices><integration><event-bus>,deduplicate event rabbitmq publish subscribe microservice event bus,read understand asynchronous event integration microservice rabbitmq publish subscribe pattern facilitate push event subscriber microservice architecture docker usage expect instance microservice type understand instance subscribe event receive book clearly explain ensure instance handle request duplication describe pattern explain deduplicate service instance microservice instance subscribe understand multiple microservice instance type microservice deduplicate loose message service process,3,52,6,0.0,1,2019-08-14T15:18:13,0.0
54629454,929059.0,<oauth-2.0><microservices><aws-api-gateway><amazon-cognito><spring-security-oauth2>,aws api gateway oauth spring security,aws api gateway front api gateway direct http endpoint alb application load balancer passthrough ecs fargate alb target group microservice develop spring boot integrate oauth spring security rest api integrate aws api gateway lambda aw cognito architecture integrate aouth multiple microservice,3,509,0,0.0,1,2019-02-11T11:20:53,0.0
51542197,1987266.0,<domain-driven-design><microservices><lagom>,async flow design lagom microservice,design asyn flow lagom problem face product lead aggregate user represent owner lead user limitation user max lead associate design create separate service resourcemanagement user pick lead send command leadaggregate generate event leadpickrequeste processmanager listen event resource resourcemanagement success send command leadaggregate markaspicke send push notification user lead pick build ui perspective difficult expose api third party sol request receive service save requestid request future command add request leadaggregate finally change pick state pick failure pm listen event check requestfuture request complete future correct response work sync api user well sol,3,102,7,5.0,1,2018-07-26T15:12:22,0.0
46098754,7431823.0,<database><distributed-computing><microservices><high-availability><stateless>,stateless micro service database,requirement build stateless micro service rely database cluster persist datum approach recommend redundant stateless micro service high availability scalability database cluster example multiple copy version payment service redundant micro service common share db schema schema case independent db schema inconsistency redundant service exist schema upgrade handle case common db schema,3,623,0,2.0,1,2017-09-07T14:19:43,0.0
46154092,514329.0,<c#><message-queue><microservices><cqrs><masstransit>,good practice wrap masstransit cqrs implementation,separate class solution provide adopter infrastructure expose context detail generally head issue deal question generally worth wrap masstransit deal infrastructure,3,1186,1,2.0,1,2017-09-11T10:59:31,0.0
46115104,6635855.0,<java><microservices><hazelcast><distributed-cache><hazelcast-imap>,hazelcast cluster serialization replication issue,application consist micro service microservice configuration hazelcast instance hazelcast instance form cluster distribute datum hazelcast replicate map replicate datum object dto include field micro service microservice host aw problem datum object serialization create separated project custom serialization config datum object java class replicate list config code artifact build configuration project include micro service maven dependency help solve serialization problem solution lead problem appear add datum object firstly add datum object config project rebuild project rebuild micro service update dependency redeploy micro service rebuild serialization error micro service hazelcast instance serialize datum object process rebuild redeploy application convenient share experience easy,3,423,0,2.0,1,2017-09-08T11:08:51,0.0
46193708,5998816.0,<spring-boot><spring-data><spring-data-jpa><microservices>,relation entity microservice spring boot,simple spring boot web app microservice architecture microservice entity define relation entity gateway feign client define article tag entity gateway table article tag database postgre define repository gateway write getarticlesbytagid gettagsbyarticleid function relation work,3,1494,2,0.0,1,2017-09-13T09:26:15,0.0
56622485,8586803.0,<microservices><message-queue><cqrs><gateway><event-sourcing>,api gateway communicate queue directly μservice,wonder method appropriate event direct direct communication send request send request return event store publish update consume event event event base communication message queue send request publish event consume event event store publish update consume event consume event send response misunderstood concept style architecture advance help,3,105,3,1.0,1,2019-06-16T20:42:18,0.0
30267737,1241201.0,<mysql><web-services><deployment><microservices>,microservice database share service,search find straight answer service instance service deploy machine share persistent store separate store sync mechanism master slave cluster orderservice mysql order scale service deploy second orderservice datum sound silly discussion service database package unit deploy discussion mention happen deploy second service,4,1217,3,1.0,1,2015-05-15T19:56:41,0.0
26529567,327702.0,<filter><pagination><filtering><paging><microservices>,strategy pagination filter datum microservice architecture,monolithic application data model create sql join table apply filter resultset data well microservice architecture data model disparate hear netflix extreme table expose microservice handle filter case api gateway pattern aggregation layer rxjava project great idea people microservice tackle problem,4,914,0,2.0,1,2014-10-23T13:46:09,0.0
29775643,4194831.0,<spring><jms><spring-jms><microservices><event-driven-design>,microservice event drive design multiple instance,moment design plan transform system microservice architecture pattern loose coupling event drive design jms topic great solve problem multiple instance microservice failover load balance instance service event publish topic instance receive process event handle lock process state data storage solution expensive instance work load balane good solution good practice pattern,4,1044,0,2.0,1,2015-04-21T14:49:06,0.0
27857790,445572.0,<redirect><docker><reverse-proxy><boot2docker><microservices>,good practice redirect docker container,multiple web application docker container user redirect service service browser wonder achieve application portable docker host host servicea redirect user serviceb relationship approach statically assign port hostname set environment var web service prefer care service port second approach proxy nginx link service proxy host port require change proxy configuration move service host third approach mind etcd ambassador register resolve service servicea serviceb ambassador serviceb etcd result docker container connect service prefer approach edit real problem inject uri serviceb servicea launch servicea argument servicea build correct redirect header,4,1176,4,0.0,1,2015-01-09T09:47:35,0.0
35465175,4746930.0,<microservices>,microservice architecture question code resue security database sharing,follow question micro service architecture common code utility libs reuse micro service common code develop micro service service client internal micro service good option internal service secure micro service database totally operation database table micro service gui case micro service deployment require website update well consider disadvantage,4,134,0,1.0,1,2016-02-17T18:49:53,0.0
33118913,59724.0,<authentication><oauth-2.0><authorization><microservices>,authentication authorization microservice,read fair bit microservice authn authz lot sense work play delegated authorization pass token client service pass token service service endpoint oauth service accept token return detail token user start validity period scope token valid problem order correctly issue token communication user service ensure user token valid order verify token communication user service ensure user valid order safely communicate user service detail user token permission access assume standard practice solve circular dependency oauth user service mention common problem obvious note implement client credential grant resource owner password credentials grant play work easy call curl difference,4,685,0,1.0,1,2015-10-14T07:13:53,0.0
33926707,1196369.0,<php><oop><soa><microservices>,pass object microservice,experiment move monolith external service idea lot clean encapsulate relate functionality inside application application rabbitmq communicate user object service exact class service easily serialize send serialize object message body sender receiver user class share library representation user object strange real user object library core main application guess pass array key define key someday create service php unserialize user object access datum message basically idea pass entity service user object receive sure approach question good pass object service,4,843,0,1.0,1,2015-11-25T21:28:36,0.0
37074642,6244459.0,<java><spring><spring-boot><spring-cloud><microservices>,setting application yml spring cloud config app execute,problem spring cloud setting application yml spring cloud config app execute detail service setting remote configserver create configserver spring boot app annotation enableconfigserver create client app config file main class extra configuration app dependency execute client app message configservicepropertysourcelocator locate propertysource error request app datum default uri localhost uri setting app debug mode org springframework cloud config client configservicebootstrapconfiguration create configclientpropertie default property setting application yml wrong,4,8688,0,0.0,1,2016-05-06T14:13:00,0.0
30995669,2968101.0,<web-services><rest><service><amqp><microservices>,microservice service registry registration discovery,domain presentation microservice user manage crud user billing manage crud billing reference user concern billing explanation billing call http request send fully bill object user load case specifical case time good idea message queue asynchronicity billing service send queue service exchange location problem question aim service registry case message queuing concern user service location service registration case aggregator pattern restful api navigate hateoas link case proxy pattern microservice interface service admit proxy pattern frontal service case service registration front send service userservice billing service service registration example front service send request user billing service imply user service userserviceofhell define project question multiple microservice pattern microservice architecture bad practice nb base,4,1652,0,3.0,1,2015-06-23T06:46:40,0.0
34301614,5043003.0,<spring-boot><spring-cloud><microservices><netflix-eureka><netflix-zuul>,zuul url mapping spring boot eureka,build rest api microservice architecture multiple api user multiple project ready map user face url application url zuul user face url user accountholder card actual url application user card accountholder card path variable api url configure generically zuul context root application url project eureka help set property yml file zuul progress mapping stuff input helpful solve input daniel accept answer zuul config,4,5558,3,1.0,1,2015-12-15T23:47:42,0.0
43041563,2849613.0,<amazon-web-services><authentication><architecture><microservices><aws-cognito>,user authentication microservice application host amazon ws,build web application base microservice architecture moment consider user authentication flow predict follow example user role admin create content upload file admin account create admin unauthorized user view content authorize user comment content authentication flow authentication service access db user credential permission api gateway retrieve request user check user log verify oauth access token auth service transfer flow service base user request attach jwt token basic user info service accept request api gateway trust user datum jwt token connect auth service user deploy stuff aw infrastructure thinking change bit understand aws product lambda serverless application api gateway implement authentication flow follow authentication service request user retrieve datum dynamodb provide user cookie jwt sign private key service retrieve request jwt token verifie signature public key perform action question deos aw cognito fit understand cognito simplifie flow authenticate user party facebook twitter aws cognito serve login separate application background webservice impelementation cognito replacement service impelemnt cognito authentication flow provide sdk amazon static website implement javascript sdk user login register,4,454,0,3.0,1,2017-03-27T08:36:46,0.0
43034203,1790300.0,<node.js><passport.js><microservices>,node js api gateway implementation passport authentication,work implement microservice base application node js search example implement api gateway follow article provide example implement api gateway find example implement api gateway pattern node js hard article good example item unclear issue find doc security major item app develop trouble authentication place passport add authentication item api gateway pass jwt token request corresponding microservice user log activity issue microservice passport order decrypt jwt token user profile microservice technically inaccessible api gateway aim scenario change scale multiple server docker image affect load balance sit high level deal load balancing,4,1326,1,0.0,1,2017-03-26T20:33:25,0.0
46605663,3252252.0,<haskell><architecture><microservices>,good practice share type multiple haskell package microservice,work haskell project compose multiple microservice type multiple service time define separate library import whichever type versione thing uncomfortable wonder good practise regard topic handle instance share type order avoid orphan instance define type module type instance microservice import package include add redundant dependency microservice example datatype share frontend backend instance store order store database frontend frontend depend store package order avoid previous issue introduce wrapper time type leave microservice represent type wire previous example storable instance store add lot overhead development process good idea share type microservice define representation type share type microservice ma representation instance serialise order send datum microservice decode datum representation mb finally regard logistical side matter convenient structure project monorepo well choice separate repos submodule relate previous find automatically microservice redeploy share library modify change library affect piece code microservice,4,190,3,1.0,1,2017-10-06T12:22:41,0.0
40457443,5837255.0,<c#><performance><linq-to-entities><microservices><azure-service-fabric>,azure service fabric reliable dictionary linq query slow,reliable dictionary service fabric stateful service simple linq expression ix async package build asyncenumerable data organize partition record partition int range partition key code result tolist minute execute partition weire thing actual result empty sql sql server return row customer point big concern performance reliabledictionary linq query regard,4,1767,7,2.0,1,2016-11-07T03:36:20,0.0
41881610,7475541.0,<spring-boot><utf-8><microservices><netflix-zuul><netflix-eureka>,spring cloud zuul break utf symbol forwarded multipart request filename,time patient question kind configuration problem day experiment stick application base spring cloud brixton release configuration portal web application serve angular base web ui zuul proxy single route configure gateway service zuul configure relay request inner bussiness logic service configuration work problem problem face file upload multipart request precise multipart request file upload latin symbol ąčęėįš request reach service deal return questionmark place aforementioned symbol directly upload file controller filename questionmark break bad interpretation parsing multipart request occur zuul filter proxy relay incomme request experience zuul direct resolve problem,4,1409,1,1.0,1,2017-01-26T19:40:58,0.0
39852947,1780700.0,<angularjs><spring-security><spring-boot><spring-cloud><microservices>,spring microservices stateless session angular static file serve,design backend large application divide microservice spring cloud tool eureka zuul implement oauth authorization server support grant type work problem serve html file manner authorize backend redirect login recommend session session spring token decide build security context start issue find example routing redirection accomplish inside angular help ui route skim project github angular redirection redirect backend totally stateless session sound dumb express answer coworker state example,4,776,1,0.0,1,2016-10-04T12:56:13,0.0
53147838,5462.0,<java><spring-boot><oauth-2.0><microservices><keycloak>,setup keycloak spring boot oauth microservice architecture,setup keycloak public front spring boot app work expect front spring boot app configure keycloak client app ui realm user login keycloak token pass great spring security secure endpoint role respect endpoint add downstream spring boot app web service mix aware log user secure call front spring boot app feign client call rest endpoint spring boot app authentication authorization couple question trouble figure setup front spring boot app pass authenticate user detail spring boot app requestinterceptor resttemplate feign config http header configure spring boot app authenticate user detail receive upstream spring boot app dependency add spring boot app facilitate org keycloak keycloak spring boot starter org springframework boot spring boot starter security configure keycloak spring boot app register keycloak confidential public client app api specific configure spring boot app talk keycloak verify authenticate user detail receive upstream caller love demo tutorial step farther secure downstream service figure post assume standard oauth configuration spring boot app sure recommend achieve architecture architecture setup,4,3036,1,1.0,1,2018-11-05T03:13:06,0.0
38186942,2246263.0,<logging><token><actor><microservices><azure-service-fabric>,correlation token service fabric actor service,start play service fabric microservice platform succesfully implement hello sample actor pattern stateless stateful service web api move solution core aspect auth autz application log doubt logging soa design till add correlation token service involve architectural level automatically add header wcf hide developer service fabric good solution flow correlation token actor service call find ready box wonder theoretically wrong suggestion,4,366,0,1.0,1,2016-07-04T14:20:13,0.0
43785728,685091.0,<rest><api><web><single-page-application><microservices>,good place datum aggregation ui microservice architecture,build application microservice architecture rest api ui single application microservice advise good option datum aggregation ui application static web application api request front browser javascript framework datum aggregation front render ui application dynamic web application api request datum aggregation web application backend,4,1180,3,0.0,1,2017-05-04T14:30:33,0.0
43498534,7206554.0,<node.js><microservices>,nodejs microservice architecture package json service,currently develop microservice architecture nodejs approach service tricky access common area logging database util microservice instance service typeorm module load installation common area logger service micro service result folder,4,638,2,2.0,1,2017-04-19T14:24:23,0.0
52222992,6818740.0,<spring><spring-boot><microservices><resttemplate><spring-rest>,configure spring resttemplate http request,restclient call request spring service server server accept http request response send http request spring resttemplate,4,1617,0,0.0,1,2018-09-07T12:51:53,0.0
39228311,6774299.0,<node.js><microservices>,good practice store content secure area,project separate login spa user access proper authentication static content place public cdn html file spa store db deliver user service store html file db inconvenient good store html file secure area,4,49,2,0.0,1,2016-08-30T13:04:59,0.0
50989454,2318834.0,<python-3.x><server><client-server><microservices><python-asyncio>,python asyncio protocol behaviour multiple client infinite loop,difficulty understand behaviour altered echo server attempt advantage python module essentially infinite loop stream datum server client indefinitely whilst connection connect send text testing follow attempt connect message attempt send text server endless stream error add salt wound message continue spam terminal kill python server process web technology desktop dinosaur long sure behaviour clue produce intend behaviour loosely server start client connect server server send message client client send arbitrary message server send message client long client connect client disconnects cable pull client connect server repeat step client enlightenment extremely,4,1226,0,3.0,1,2018-06-22T13:48:22,0.0
39015444,1680802.0,<docker><soa><microservices>,instance horizontally scale microservice share db,microservice relational database scale horizontally approach provision database server provide instance service db server instance coupled process lifecycle instance connect share identical instance service independent db server cluster event drive architecture approach instance microservice process event appropriate action mutate isolated state inefficient approach instance process event achieve mutation share state ensure event process instance microservice trivial avoid conflict consensus preferred approach lesson experience teach,4,193,0,3.0,1,2016-08-18T10:08:28,0.0
44582199,1119364.0,<angular><architecture><microservices>,angular microservice loadchildren url,start effectively implement angular microservice architecture service login service user management service browsing add edit medium service backend frontend serve private container isolate clearly define api interact backend isolate user interface consume api tie microservice single application configure server place service url application array spa sort mpa multi app create master app set route micro app load demand custom preloadingstrategy find process personally highly lose benefit microservice continuous delivery scheme thing aim create spa monolith microservice alternative chore fun second intriguing accross article start exploit load pre build angular module url package file system question security issue alternative tie microservice large application,4,580,0,2.0,1,2017-06-16T06:25:06,0.0
41400158,7358652.0,<docker><cloud><microservices><bitnami>,bitnami docker,bitnami docker container base deployment learn microservice docker image app container notice bitnami create virtual image cloud form launchpad link internet visualize docker bitnami,4,2799,1,0.0,1,2016-12-30T17:26:04,0.0
46390552,7574116.0,<spring-boot><microservices>,good api gateway micro service spring,build simple application microservice architecture detail microservice create micros embed tomcat server create common gateway micros api gateway help route request base request example example request read route request tom customer micro fetch response send client spring tool achieve,4,3451,0,0.0,1,2017-09-24T13:27:44,0.0
46404449,1651778.0,<angular><design-patterns><architecture><microservices>,micro service architecture angular,enterprise angular web app module screen customer management reservation book management reporting create common component component library main angular application main angular app module screen rest api integration assume rest app big big compile time render consume time resource area issue release bundle app micro service architecture method develop software system grow popularity question apply architecture type enterprise angular app customer management separate angular app book management angular app reporting app app separate war file deploy web server develop loosely couple app reduce head project size compile time resource unit test easy set developer consider unit module kindly share expert thought,4,892,4,3.0,1,2017-09-25T11:44:49,0.0
40539447,7143907.0,<python><docker><containers><apache-kafka><microservices>,process single docker container container connect db,develop application listen kafka topic save datum db cassandra high density stream datum save datum resource expensive data save query expose rest api option downside option create service separate docker container kafka listener process python flask web server advantage container process downside service connect db ideal accord microservice pattern architecture service completely decouple option kafka listener web service container advantage service connect db downsides process single docker container save update lot resource expensive scale uniformly involve move monolithic architecture good practice,4,335,1,1.0,1,2016-11-11T00:37:10,0.0
48803038,6024969.0,<c#><microservices><akka.net>,exception handle akka net pipeto task,refer akka net documentation prefer deal asynchronous job deal function return handle failure event problem problem deal function return type call function overload failure handle task result exception pipe recipient follow code actor order catch exception actor add receive handler cater exception example correct code block,4,812,0,2.0,1,2018-02-15T08:41:53,0.0
42498492,998997.0,<microservices>,avoid bottleneck microservice,apply microservice datawarehouse application main microservice application datum service import export external datum source dwh query datum dwh analytic service chart visualization ui machine learn recommendation system report report generate diagram service db communicate directly tcp thift serialization problem data service suffer high load service spof application datum dwh big miliion record avoid bottleneck datum service case define properly bound context avoid bottleneck,4,585,0,2.0,1,2017-02-28T00:51:28,0.0
42435307,4684766.0,<kubernetes><microservices><docker-swarm><netflix-zuul><spring-cloud-netflix>,spring cloud netflix kubernetes,finally choose spring cloud netflix kubernetes swarm build microservice environment cool choice hard describe kind problem solve find good design api gateway simple load balancer kubernetes swarm zuul side api gateway service discovery case kubernetes swarm embed inside orchestra kubernetes spring cloud integration server side discovery client side discovery inside kubernetes overkill wonder experience suggestion,4,5054,1,1.0,1,2017-02-24T09:42:37,0.0
38820356,6689348.0,<microservices><kong>,kong support api aggregation,couple api gateway documentation support request response transformation understand correctly limited header kong support api aggregation,4,2827,1,2.0,1,2016-08-08T02:04:58,0.0
57578139,6174341.0,<c#><azure><microservices><azure-service-fabric>,develop large service fabric application,develop application service fabric large time code service type developer team local cluster develop debug problem build time local deployment time minute depend sf application refresh frustrating developer perspective reduce build deploy time recommend pattern large application consider kind build farm remote development cluster note refresh application debugging mode resolve problem sf choose deploy app,4,105,3,2.0,1,2019-08-20T16:41:02,0.0
47451185,5529396.0,<reactjs><webpack><react-router><microservices><react-loadable>,microfrontend react component base splitting,background confront task modernize tool convert microservice react frontend idea general top level component nav component microservice functionality approach bundle component locally effectively monolithic frontend forntend code seperate repo advantage redeploy entire app change lazy load minified bundle component microservice define config file approach webpack component async import main huge overhead read component base splitting react loadable bundle react router webpack find load small bundle form url endpoint question bundle react component import resource url approach react suitable,4,512,2,0.0,1,2017-11-23T08:53:14,0.0
40081965,2201868.0,<microservices><lookup-tables>,lookup table place microservice architecture,microservice architecture microservice database table duplicate database table lookup table call reference table multiple microservice lookup table microservice database well create microservice database hold lookup table,4,460,3,1.0,1,2016-10-17T08:45:02,0.0
40234243,1459144.0,<authentication><oauth><microservices>,oauth service service authentication good practice,deal type auth flow create auth flow web user deal service service authentication follow diagram depict main component user authentication oauth implicit flow general clear question service service authorization oauth authorization code flow main problem inside datacenter plenty backend service good service work permission model user functionality retract additional question general recommendation case authorization server inside datacenter,4,1016,0,0.0,1,2016-10-25T07:48:33,0.0
37289634,839733.0,<spring-mvc><spring-cloud><microservices><netflix-feign><spring-cloud-netflix>,set request header feign client,develop suite microservice spring cloud framework thing set request header pass parameter feign method bean spel feign param common case client example find course dig spring course code override default feign configuration kinda defeat purpose declarative client write lot code achieve thought,4,10744,0,4.0,1,2016-05-18T03:14:49,0.0
47566338,2273909.0,<spring-boot><microservices><spring-cloud><consul><spring-cloud-consul>,read configuration consul spring boot application,create application read configuration db property read key consul application follow follow main class read consul property annotation resource folder consul local system file file strate application bind class application hint wrong,4,3189,3,4.0,1,2017-11-30T05:13:58,0.0
50700178,7290033.0,<authentication><architecture><authorization><microservices><api-gateway>,api gateway responsible authorisation,currently monolith application java spring boot follow endpoint access flow follow user request endpoint credential correct jwt token return header user send jwt token request token valid resource return split monolith service authserver someresourceserver api gateway top handle authorisation option user request endpoint api gateway forwards authserver credential correct jwt token return header step user send jwt token request api gateway call authserver validate jwt token token valid api gateway call someresourceserver return result option user request endpoint api gateway forwards authserver credential correct jwt token return header step user send jwt token request api gateway simply forwards request someresourceserver someresourceserver call authserver validate jwt token token valid resource return option api gateway responsible handle authorisation communicate authserver option communication server option correct good bad practice option,4,778,0,1.0,1,2018-06-05T12:32:36,0.0
52596616,6386639.0,<python><spring-boot><microservices>,register python microservice eureka server spring boot,inorder register microservice eureka server add follow config microservice create microservice python register eureka server achieve advance,4,2926,0,2.0,1,2018-10-01T18:12:16,0.0
43598939,7889714.0,<rest><soa><microservices><event-driven>,api gateway event drive architecture,split monolithic core microservice add connect message system kafka stage create api endpoint communication mobile app microservice api gateway good solution develop api gateway transmit datum microservice message system request reply transform request api gateway message command wait response message system status datum create rest endpoint microservice send datum gateway message system consistency datum base produce event microservice advice idea,4,824,1,1.0,1,2017-04-24T22:54:44,0.0
53732817,10397226.0,<microservices><vert.x>,build vert virtual host server channel traffic vert app kind inter app communication accomplish,illustrate build vert java app http server virtual host tls http traffic web socket traffic redirect channel specific domain traffic vert java app server jvm read day remain uncertain approach aspect task experience create http server vert virtualhost handler handle incoming traffic specific domain direct domain traffic vert app vert app server jvm naturally vert app respond http request vert mechanism employ accomplish aspect task follow concept solution unfamiliar concept form solution vert app cluster option vert streams vert pumps,4,181,1,0.0,1,2018-12-11T21:48:43,0.0
57738802,589490.0,<microservices><master-data-management>,master data management strategy microservice paradigm,work migrate huge monolithic application microservice paradigm needless domain identification mapping microservice orchestration task previous application share master datum schema paradigm difficult manage choice replicate master datum microservice pro cache application work fast looksup application true source truth con update master datum service lead inconsistency service communicate data update master datum serious consistency problem master datum host seperate microservice pro single source master data con hit performance service call wire lookup happen create distribute cache expose multiple microservice break single source truth principle datum microservice ensure performance consistency write implementation thought implementation strategy help vaibhav,4,170,1,1.0,1,2019-08-31T14:20:46,0.0
52919769,10537577.0,<testing><microservices><grpc><qa>,mock simulate grpc api,lot manual exploratory testing microservice feature story deliver simulate response grpc api start docker image microservice point grpc api control simulate type response test sad path scenario create mock grpc api,4,327,1,0.0,1,2018-10-21T20:51:51,0.0
57170349,1319542.0,<aws-lambda><microservices><serverless>,share database multiple serverless function good practice,share database multiple serverless function good practice crud application create update delete read operation share database migrate idea serverless ideal operation access database hesitation idea share database microservice increase couple thing fragile,4,67,3,0.0,1,2019-07-23T18:40:45,0.0
54285556,6872018.0,<spring><swagger><microservices><api-gateway>,unable infer base url common dynamic servlet registration api api gateway,spring security service annotation follow tutorial link project gateway service yml organizationapplication java service implement exactly,4,1738,0,1.0,1,2019-01-21T07:58:42,0.0
51939287,1805275.0,<heroku><architecture><microservices><paas>,design cloud microservice heroku advice,microservice learn apply design cloud plaform easily maintenable scalable rails api postgresql microservice frontend framework microservice python script microservice python script microservice inspire microservice separate heroku app security talk response time service grow expensive sooner optimize cost situation discover afraid lack experience user base popular paas solution digitalocean aws ec manage job heroku microservice microservice design service host machine microservice friendly approach answer cost issue design matter work feedback,4,321,0,0.0,1,2018-08-20T22:28:01,0.0
52031350,10277547.0,<java><rest><microservices><acid>,acid work restful micro service architecture,pretty implement microservice architecture question break mind microservice architecture address transactional mechanism point call example banking service base microservice architecture basically banking operation call service complete transaction fail eliminate partial process mechanism solve problem,4,304,2,1.0,1,2018-08-27T00:47:44,0.0
55145456,1401509.0,<amazon-web-services><microservices><netflix-eureka><netflix-zuul><netflix-ribbon>,netflix zuul ribbon eureka aws elb alb ecs,understand documentation netflix zuul eureka ribbon build active load balancer aws elb alb ecs container management apart vendor portability advantage netflix approach aws provide alb elb case netflix oss box aws elb,4,553,0,0.0,1,2019-03-13T15:22:52,0.0
55293128,1341284.0,<nginx><microservices><gunicorn><api-gateway>,web server alongwith api gateway microservice architecture,highly qualified moderator shoot question reason highlight designing current project question current python application gunicorn nginx move cloud nginx web server cloud architecture api gateway plan expose api internet load balancing authentication authorization purpose web server accomplish api gateway api gateway fancy web server,4,310,0,0.0,1,2019-03-22T04:54:34,0.0
55273667,5745642.0,<microservices><reporting>,build reporting microservice architecture,poc microservice architecture challenge explain reporting datum service effecient appreciate guide direction,4,954,3,1.0,1,2019-03-21T04:12:03,0.0
52460433,6872018.0,<java><spring-boot><microservices>,import de codecentric boot admin server config enableadminserver resolve,develop microservice code reference module error module error start microservice modules pom xml,4,813,0,1.0,1,2018-09-22T20:04:12,0.0
52357548,8748244.0,<java><frameworks><microservices><micronaut>,profile micronaut application,type config depend environment deploy app spring boot yml file set profile micronaut regard,4,2512,0,1.0,1,2018-09-16T19:10:34,0.0
52402591,158499.0,<java><microservices><spring-cloud><netflix-zuul><spring-cloud-netflix>,netflix zuul server route endpoint,code exercise learn microservice create netflix zuul project service route microservice sadly route endpoint mount work fine define prefix set specific route service error zuul server log file hit route url postman error zuul application class pom xml file bootstrap yml file zuul configuration file configuration server docker compose yml entry initialize zuul gateway server spot,4,2799,10,0.0,1,2018-09-19T09:29:36,0.0
50406887,357366.0,<architecture><microservices>,microservice datum retrieve,good day read book microservice architecture question situation retrieve datum entity connect example order user microservice example order user customer retrieve user order three achieve client app request order microserve request user microservice retrieve user info order client app request order mircoservice inter request user microservice order microservice db store user case complex client app construct aggregate datum source order user second case microservice total request time grow third case connect datum consistent problem user change datum order service db update case small question case microservice web api application microservice controller,4,509,0,0.0,1,2018-05-18T08:22:44,0.0
39467200,852243.0,<c#><asp.net-core><microservices><consul>,register service consul,register asp net core application consul registry startup deregister shutdown gather call http api app target class start add file stick method add service container method configure http request pipeline point direction online reading example,4,4995,0,7.0,1,2016-09-13T09:58:28,0.0
54598813,9546332.0,<kubernetes><microservices><netflix-zuul><api-gateway>,zuul deployment kubernetes,time deploy microservice architecture kubernete consider ambassador api gateway authentication service validate user generate jwt token validate token time service call represent overload problem time api gateway receive traffic external authentication service validate jwt token ambassador option filtering external service zuul gateway good option case allow validate jwt token inside gateway external service ambassador sure zuul work deploy kubernete understand zuul require address service discovery eureka deploy zuul kubernete cluster locate service locally example problem eureka address eureka deploy kubernetes good idea redundant zuul api gateway approach validate token gateway rely external authentication service ambassador,4,1975,1,2.0,1,2019-02-08T19:08:55,0.0
51371678,3440152.0,<amazon-web-services><microservices><amazon-rds-aurora>,call lambda function aurora transaction commit guarantee call acid,micro service project currently consider dynamodb aurora mysql underlying data store micro service offer rest api user interface micro service micro service suppose listen event stream event source generate ui connect service keep additional read model sync figure guarantee event publish change event stream exactly match change datum underlie data store generally concern rest api handler interrupt half execution change datum create event assume change event publish data change mechanism alleviate concern dynamodb dynamodb stream aws lambda trigger react data change data store level trigger lambda transformation low level data change meaningful change event publish event sns sqs kinesis aurora mysql mechanism article describe mechanism enable binary log aurora additional ec instance process change stream publish event service stream native lambda sync lambda async function call lambda mysql trigger publish event service lambda happy approach prefer manage additional ec instance process raw sql change plan constraint optimistic concurrency transaction aurora transaction fail rollback lambda sync call execute transaction outcome well idea aurora problem wrong angle keep question discussion focus question guarantee consistency change underlying data store outgoing stream change event aurora dynamodb,4,389,0,0.0,1,2018-07-17T00:37:21,0.0
51423358,139698.0,<node.js><amazon-web-services><amazon-s3><microservices>,npm install aws,store project module aws client project find bitbucket npm docs find store common project item method resource microservice,4,2397,1,0.0,1,2018-07-19T13:00:55,0.0
42788267,5964524.0,<oauth-2.0><single-sign-on><microservices><openid-connect><identityserver4>,oauth authorization code flow spa react app server side proxy,watch obscene amount tutorial oauth good practice repeatedly state react app angular ember implicit flow understand store client credential publicly visible javascript work scenario bit oauth single sign token generation microservice choose simply generate token well support third party library build oauth idea idea react app asp net mvc app serve javascript proxy api request user authenticate server side app oauth authorization code flow retrieve datum api call asp net mvc app react send simple cookie mvc app hold token expose user browser call mvc app redirect request api provide bearer token better understand requirement receive unusual access token share short live limit user account concurrent user session easy cookie server side session wrap head idea bad technical problem prevent work security risk,4,2650,1,1.0,1,2017-03-14T14:09:44,0.0
28339882,1648100.0,<load-balancing><connection-pooling><soa><microservices>,service discovery load balancing connection pooling approach,approach service interaction soa large system deploy cloud aw service cluster internal elb client connection pool correspond elb elb round robin balance service discovery approach netflix eureka currently st approach service cluster internal elb client communicate elb client instance maintain pool elb endpoint follow doubt regard apporach benefit move service discovery smart client architecture service client service instance eureka service equivalent internal load balance case connection pool work currently client instance maintain exactly connection pool correspond service elb rich client client service instance endpoint directly communicate connection request efficient connection pool service instance client overkill guess inputs suggestion question,5,781,0,1.0,1,2015-02-05T09:03:45,0.0
34909182,1015136.0,<visual-studio><microservices>,microservice solution structure net application,develop application microservice approach hard time define microservice visual studio project initial approach create visual studio solution microservice solution follow project host business api datum access layer model interface di data access mock test business api project microservice feel lot project reimplemente solution approach correct build microservice net project configuration,5,2016,2,1.0,1,2016-01-20T19:48:28,0.0
33881958,5592111.0,<java><spring-security><oauth-2.0><spring-security-oauth2><microservices>,spring oauth client credential flow example,implement service service security spring boot service spring oauth service access secured resource service user action involve lot example authorization code grant type client credential grant type case set auth server curl request token test find http object check status code client credential grant type java client resttemplate spring oauth simple add dependency annotation config file,5,1502,1,0.0,1,2015-11-23T22:29:42,0.0
34344850,5692747.0,<java><spring-boot><wso2><spring-cloud><microservices>,spring cloud wso api manager,goal build multiple microservice fault tolerant resilient microservice currently build spring boot key difference wso api manager spring cloud component spring cloud build comparable solution akin wso api manager general api manger component spring cloud mix match component spring cloud wso api manager compatible wso api manager spring cloud example load balancer ribbon service discovery eureka spring cloud security analytic component ws,5,1744,0,2.0,1,2015-12-17T21:46:56,0.0
34534079,2217011.0,<java><docker><spring-boot><dockerfile><microservices>,sync time java application docker container,docker file compile deploy app settint time notice host time containter time syncronize log app diferent time utc time sync host machine container java app time,5,757,1,1.0,1,2015-12-30T17:19:17,0.0
44704629,925714.0,<asp.net-core><microservices><identityserver4>,identity aspnet core microservice,develop application microservice architecture microservice work monolithich approach microservice care user authentication proxy api authorize request authorize request proxy api pretty well document identityserver doc proxy api pass request microservice authorize request setup microservice correctly token proxy api authorize request microservice pass grab token request proxy api pass microservice good practice well option block microservice receive request proxy api authorization logic pd asp net core,5,483,0,1.0,1,2017-06-22T16:15:48,0.0
42191831,1589549.0,<docker><redis><microservices><boot2docker><docker-swarm>,docker error response daemon rpc error code desc conflict exist object,create docker service face follow error error response step work suggestion add additional,5,2921,3,1.0,1,2017-02-12T18:56:35,0.0
39913816,6825250.0,<java><database><docker><spring-boot><microservices>,downtime deployment micro service architecture,moment work application base micro service architecture main technology plan spring boot docker micro service development goal provide downtime deployment feature user spend time find solution aspect clear main problem database state version compatibility find interesting approach spring article approach complicated application version release plane process backward compatibility requirement follow question suggestion downtime deployment process concept real experience box solution pay free provide downtime deployment feature application relational data base ps interesting downtime deployment work stackoverflow,5,1294,4,0.0,1,2016-10-07T09:22:58,0.0
39154613,4164025.0,<spring-boot><spring-cloud><microservices><hystrix><netflix-ribbon>,netflix ribbon hystrix timeout,spring cloud project micro service yml file properie zuul server test account service service call test timeout call request zuul port service internally call spring resttemplate start test add sleep time ms association service request account service getaccount call association service error association service error account service keep sleep time response throw exception relate ribbon timeout specific reason exception point test keep sleep time ms account service directly remove sleep time association service case exception netflix zuul exception zuulexception apigateway zuul application log error ribbon connecttimeout readtimeout error property execution isolation thread timeoutinmillisecond reduce property ms test behavior exception sleep time understand ribbon connecttimeout read timeout hystrix timeout test ribbon timeout application timeout microservice keep property respective yml file thought create document team easy developer timeout option work spring cloud lengthy description clear write detail,5,5580,2,1.0,1,2016-08-25T20:57:31,0.0
44065186,966698.0,<spring-cloud><microservices><distributed-transactions><hystrix><spring-cloud-netflix>,implement distributed transaction hystrix fallback base spring cloud architect,spring cloud implement micro service system ticket sale platform scenario zuul proxy eureka registry service user service order service ticket service service feign declarative rest client communicate function buy ticket main process order service accept request create order order service create order entity pende status order service call user service process user pay order service call ticket service update user ticket order service update order entity finish implement transaction example payment process finish error happen ticket movement revet user payment order status user payment service current solution sure proper well orderresource orderservice key point method function error creation instance fallback function persistence roll datum instance check running status pende pay finish check service call feign client feign client method method fallback sure fallback method call multiple time add call sure order save fail status solution work time fallback function error composite service call call problem complicated scenario implement dist transaction properly effectively suggestion advice help,5,1641,1,5.0,1,2017-05-19T08:35:52,0.0
39088230,1925997.0,<java><thrift><microservices>,ensure thrift object backward compatible,currently thrift develop micro service issue assume thrift contract summary object api update summary summary object pass version service contract summary release add object call list summaryvalue contract version list populate save list aganist client send list remove exist save summaryid problem occur service version thrift contract version call getsummary updatesummary intention client call updatesummary set client object send summary object null server result server remove exist handle thrift isset method work perform simple null check time release client modification existing object forcefully upgrade client version server change relate,5,1516,1,0.0,1,2016-08-22T20:31:30,0.0
42404800,3486720.0,<user-interface><architecture><microservices>,build front microservice,dozen microservice wonder front front html javascript css separate service handle ui team form api gateway request browser idea independent service browser api gateway microservice link javascript css serve microservice api gateway serve html nice diagram question implement api gateway serve js css file microservice html fragment initial load happen mingle html microservice serve android ios app,5,786,1,0.0,1,2017-02-23T00:20:21,0.0
47566892,2497115.0,<java><tomcat><kubernetes><microservices><embedded-tomcat-8>,microservice embed tomcat standalone tomcat difference,embed tomcat embed server microservice production environment embed server wrt normal standalone full fledged server performance reliability wise embed server light weight compare standalone feature embed server compare standalone change default security setting tls cipher advanced thing embed tomcat,5,3225,0,0.0,1,2017-11-30T06:07:52,0.0
47516458,852330.0,<elasticsearch><apache-kafka><domain-driven-design><microservices><cqrs>,cqrs project order notification elasticsearch read model,microservice architecture apply cqrs pattern command send microservice trigger application state change emission correspond event kafka bus project event read model build elasticsearch good microservice eventually consistent time consequently event send consistent guarantee coherence application state change emission correspond event persist db state correspond event transaction aware event sourcing avoid persist state altogether asynchronous worker responsible send event kafka bus pattern guarantee event send state change issue event idempotent microservice event table asynchronous worker guarantee event send sequence correspond state change occur respective microservice edit clarify microservice database event table worker specific worker process event order persist corresponding event table worker event table distinct microservice guarantee problem project incoherent sequence event microservice elasticsearch document concrete example imagine three aggregate aggregate domain drive design sense manage microservice relation aggregate reference aggregate root bind unaware relationship delete microservice manage listen correspond event undo binding similarily relation relate aggregate inverse true delete microservice manage listen correspond event undo binding property case find elasticsearch aggregate bind aggregate turn bind aggregate specific explain separate event table worker introduce variable delay emission event microservice create bind example result follow sequence event create bind create xyz create bound example batch event suppose initially aggregate command issue simultaneously delete bind result event delete bind unbound response event concretely trouble project event elasticsearch document event reference aggregate exist exist help appreciate,5,270,8,4.0,1,2017-11-27T17:17:35,0.0
37739538,5012278.0,<node.js><microservices>,api gateway example node js,good example implement node api gateway microservice application understand purpose gateway sure implement add level restful route call gateway suppose direct route microservice api gateway port microservice server js port microservice router js,5,3824,0,1.0,1,2016-06-10T03:45:31,0.0
57788014,5581989.0,<design-patterns><architecture><microservices>,microservice aggregate data good pattern,follow case micro service architecture issue current situation microservice apigateway gateway lot query aggregation compose datum service microservice provide basic set datas check picture detail good pattern pattern,5,76,1,2.0,1,2019-09-04T12:03:32,0.0
52854550,1201759.0,<web-applications><microservices><aws-api-gateway><aws-cli><aws-load-balancer>,api gateway front application load balancer,design web app suggestion infra decide application load balancer sure api gateway entry point app application load balancer entry point sure entry point application load balancer private vpc connect client app public internet throw light advantage necessity api gateway front application load balancer,5,1970,0,0.0,1,2018-10-17T12:08:18,0.0
55275001,6837992.0,<database><foreign-keys><microservices>,design microservice database,question microservice database design situation service aircraftsservice handle datum aircraft aircraft type service flightsservice handle datum flight link aircraft flight normaly create foreign key flight table link aircraft microservice architecture understand domain seperate database question represent problem thought database aircraft database flight flight table becom indirect foreign key aircraft call flight service flight service call aircraft service flight table build response promise call aircraft database direct flight service solution correct good practice case problem delete aircraft flight service aircraft exist flight service update indirect foreign key help,5,220,2,0.0,1,2019-03-21T06:39:01,0.0
20693516,529187.0,<service><deployment><architecture><port><microservices>,micro service architecture micro service serve,read article watch video find concrete suggestion serve micro service understanding serve application server question deploy server matter serve server computer port conflict,6,3218,0,1.0,1,2013-12-19T23:12:37,0.0
27891019,355742.0,<git><github><vagrant><fig><microservices>,build streamlined development environment micro service,micro service architecture wonder folk good good practice development environment work assumption micro service live git repository isolation ease deployment assume developer create fork repo work issue consider work issue involve multiple micro service example defect impact micro service appropriately consume micro service assume project involve defect check git repository configure work vagratefile dockerfile vms ideally vagrant vm serivce docker instance vm master repo project git module work problem create generic master repo project module point upstream fork developer currently master project config vagrant fig trick currently consider method implement approach provide config default project locate project provide script create submodule base user github account create remote user fork well remote upstream project solve problem good workflow,6,986,2,2.0,1,2015-01-11T19:14:05,0.0
32093067,941913.0,<akka><microservices><fault-tolerance><akka-cluster><tradeoff>,microservice style tradeoff akka cluster kubernetes,thing idea microservice set test decide production slowly chip piece rail app move logic microservice haproxy set routing base urls cover big concern overhead ensure smoothly infrastructure side preferrably low configuration ease development testing deployment benefit downside style akka cluster kubernete fabric top worry fault tolerance kubernete include message queue ensure message lose multiple queue queue retry queue akka actor retrying mail box strategy fault tolerance microservice differ approach enlighten,6,1740,0,2.0,1,2015-08-19T10:35:06,0.0
32470907,2129139.0,<microservices>,microservice maintain multiple datum store initial data load,aspect granulatiry mictoservice read pizza rule service develop week case study amazon nelflix gilt read hear service service granularity sense clear datum store microservice datum store service store maintain datum logical entity product customer slice relevant portion attribute store maintain corresponding microservice service maintain basic customer maintain additional customer subscription interest couple question mind datum store huge maintenance issue term backup restore initial datum populate store good practice organisation bind huge volume customer product datum master system approach multiple datum store impact omni channel approach imply single view datum organization datum consolidation initiative achieve edit edit subject bit,6,833,2,1.0,1,2015-09-09T04:28:10,0.0
33952306,2968101.0,<rest><architecture><amqp><microservices><service-discovery>,microservice amqp service registry discovery,study microservice architecture wonder fact service discovery request rest base microservice service front server cluster request sense discover ip port case wonder aim service registry discovery deal amqp base http call amqp expect answer server send response aim service registry discovery amqp base microservice help,6,1274,1,1.0,1,2015-11-27T07:31:10,0.0
34023438,2135094.0,<soa><microservices>,microservice model domain object,domain object project contract project contract database model classic relationship question model context microservice microservice projectservice contractservice projectservice encompass project contract answer microservice projectservice contractservice imply call service retrieve save complete project object hierarchy hand answer completely decouple project contract good thing theory practically useless contract logically exist project correct approach answer example nano service anti pattern,6,422,0,1.0,1,2015-12-01T15:02:03,0.0
41445442,5203951.0,<mysql><database><message-queue><microservices><nsq>,sync database microservice,develop website microservice architecture service database database store datum microservice service user service subscribe trigger user register service receive incoming user database thing service good question create service register user service exist service event push messaging queue copy datum microservice sure service late user service receive late event read,6,1481,12,0.0,1,2017-01-03T14:12:27,0.0
41814001,2849613.0,<heroku><docker><microservices><netflix-zuul><netflix-eureka>,heroku load balancer netflix zuul,accord answer bit good practice microservice heroku question approach well install service independent app rest proxy example netflix eureka create docker base approach example netflix zuul load balancer pro con approach pro well scalability easy create machine big load con communication service heroku word heroku app public address connect directly service throw eureka service provide authentication method share risk prone pro easy reproduce production environment test develop docker image communication service internally image image app app con hard scale load balance heroku app docker image bit overhead approach well mix well solution honest thing sure rabbitmq message queue,6,890,0,2.0,1,2017-01-23T19:20:54,0.0
43350853,1795229.0,<django><authentication><microservices><restful-authentication><kong>,authentication kong,replace current hand roll nodejs api gateway currently user service handle authentication write django provide jwt login client pass header current api gateway intercept call validation call user service replace jwt header kong roughly thing figure flow work perfect opportunity replace infrastructure rewrite service completely question mind happen follow user register site create consumer username kong user log stuck log case simply authenticate user user kong jwt consumer return datum payload jwt happen kong side jwt expire user request service kong sniff jwt header replace correct correct thinking wrong well achieve fairly microservice thing,6,1435,0,4.0,1,2017-04-11T15:56:31,0.0
43424176,1420100.0,<c#><rabbitmq><microservices><masstransit>,send command type masstransit rabbitmq,beginner message broker ticketing service multiple service supervisor service request help web api send service request header detect command type reserve refund availability json serializing object send message type object masstransit publisher supervisor system consumer easily general send message type masstransit rabbitmq consumer queue processing receive message read post suit start messaging masstransit example message type resource multiple command message type send example message type sender receiver interface message content convert usable object message type send receive message,6,3517,4,1.0,1,2017-04-15T09:01:03,0.0
35673254,2101353.0,<rpc><thrift><microservices>,communication microservice,microservice currently communicate http service send request service result response datum return response send service processing finally return service service display result web latency inherent issue implement microservice architecture wonder common reduce latency reading apache thrift rpc help elaborate well,6,3564,4,2.0,1,2016-02-27T17:50:46,0.0
44355294,7503569.0,<database><versioning><microservices>,offer multiple version api database schema,kevin goldsmith talk mention create version api create server keep server version long client call case smart lamp spotify embed confused maintain offer version year surely database schema change timeframe solution reasonable database version add table nullable field delete field rename field set field nullable delete table rename table database version keep version datum separate database version keep version datum separate write migrate pass request version version receive request valid parameter version solution sound induce code smell legacy code kevin opinion solution sound nightmare pull datum service report entity version database request solution sound nightmare write code migrate request version version leave exist currently production version create version add migration move request forward backward version receive correct parameter request hopefully simple magic solution problem easy accomplish,6,842,2,3.0,1,2017-06-04T14:44:09,0.0
40947247,3076730.0,<microservices><cqrs><event-sourcing>,event source cqrs database microservice,context micro service architecture read post familiar event sourcing datum storage microservice architecture read document aspect system event source simply share db orm row update event java object case save datum permanently db relational nosql question database event source read cqrs pattern understand cqrs pattern relate event store event object body provide complete picture set operation happen player gather cqrs pattern event source include event storage module finally microservice system compose microservice event storage microservice question cqrs pattern implement microservice finally case microservice architecture mandatory db microserivce understand small piece game relate compose image specially relevance cqrs event source store datum db read article example small player discuss hand draw piece image appreciate,6,1557,1,1.0,1,2016-12-03T11:30:16,0.0
41358754,6147315.0,<amazon-web-services><microservices><aws-api-gateway><gateway><service-discovery>,api gateway technology call multiple microservice,company plan migrate solution huge monolith sexier microservice architecture benchmarke technology aws infrastructure aws ec container service ecs microservice wrap docker container deploy container configure auto scale load balance work great api gateway technology allow call multiple microservice request client idea develop architecture netflix example client web site fetch cart client send request api gateway call user microservice return user list product cart directly respond client gateway call product microservice hydrate json product question nice technology job,6,562,1,4.0,1,2016-12-28T09:10:08,0.0
41433856,860099.0,<rest><email><microservices><restful-architecture><email-integration>,emailing microservice architecture,english thing clear comment clarify build system microservice architecture service user service offer service idea service offer idea comunicate restful api user service login operation wonder deal email service separate frontend send email action third person open link offer user create offer email user create idea manager email service frontend manager create periodic mailing season statistical datum service email differently content choice well proposition service separate emailing system send kind email action periodic independent user service engine send action periodic email service task inside task link service task link generate email content example witch statistical datum periodic email solution complicate user service engine periodic email task link generate email body email action send microservice indepenndent create microservice send email periodic action proper api ofcourse service offer send link mailing task link call periodic email send response link generate body email well well alternative,6,3138,0,4.0,1,2017-01-02T22:08:52,0.0
46462610,1405511.0,<git><github><microservices>,monorepo github submodule,app build microservice architecture service repo explore create monorepo company follow practice plenty discussion pro con mono find alternative allow con option git submodule provide alike mono structure,6,4009,0,3.0,1,2017-09-28T06:45:22,0.0
47007159,1518668.0,<node.js><authorization><jwt><microservices>,jwt auth microservice example,build authentication authorization service nodejs mongo jwt service micro service handle request api gateway allow request service check auth role assume service auth service validate jwt well role hopefully diagram better explain point resource help learn nodejs,6,3777,0,3.0,1,2017-10-30T01:54:51,0.0
36627628,4917760.0,<ruby-on-rails><elasticsearch><architecture><microservices>,set elasticsearch server process datum microservice,elasticsearch scaling question approach situation server rail microservice application pretty big piece datum aggregate post social network indexable search field database find solution allow keep datum currently set elasticsearch server dedicate exclusively search multiple database respective rail app turn search server set es server define search pattern multiple model search totally server final goal manipulation send entire activerecord object attribute main application achieve problem lost start,6,1001,0,3.0,1,2016-04-14T15:29:55,0.0
42486386,1212017.0,<api><olap><microservices><cqrs><oltp>,cqrs oltp olap database sense,oltp database api talk etl job push datum olap database hour task build custom dashboard hight level datum olap database build api pointing olap database add exist api call olap database cqrs type pattern read olap write oltp concern mismatch datum read write mismatch data depend etl job hour case add exist api call olap database client choose olap oltp datum api overlap concern client implementation detail data write api point olap database lot extra work,6,344,2,1.0,1,2017-02-27T12:57:36,0.0
37523631,3647105.0,<java><microservices>,http thrift microservice architecture,start learn micro service question answer java base developer situation service api service call thrift service datum service data response parse datum generate datum finally return client question call api parse example json data httpclient asynchttpclient connection pool direct call repeat imho thrift connection pool fast http call lot service http internal elastic search neo eureka netflix http popular internal rpc thrift protobuf bad english advance,6,3164,0,1.0,1,2016-05-30T10:39:41,0.0
49985156,2540256.0,<java><aggregate><microservices><event-sourcing>,aggregate event source pattern,dip foot event source pattern sense aggregate read blog confused infer aggregate enable user query event store retrieve stream event case replay event invoice action specific employee balance replay event invoice hope valid case event store json info change payment adjustment status invoice status review bill pay understanding component event specific event event source service call repo event event stream list event command request operation invoice aggregate api decide input load event understand thing play hard time wrap head aggregate aggregate class aggregateeventsbyinvoice aggregateeventsbyinvoiceemployee hard time figure aggregate example uuid sense help greatly appreciate,6,1720,4,1.0,1,2018-04-23T15:50:51,0.0
41018981,5705247.0,<database><docker><cloud><microservices><docker-swarm>,microservice database,good practice deploy database microservice architecture precisely distribute environment docker swarm microservice principle state service stateless enable scale database state live position cluster deploy configure cluster initialize confused docker compose example include database container service definition thing simple database lot configuration ready docker suck coordinate service start order good practice deploy database alongside service docker swarm ensure consistency persistence cricial datum,6,995,0,1.0,1,2016-12-07T13:38:59,0.0
38627025,4664675.0,<go><docker><microservices>,microservice communicate docker mac,container service service build package api frontend authentication service backend compose file link work api container code throw dial error auth service touch logger print screen request map environment variable map environment variable help appreciate help macosx edit return ip address thing edit remove port portion request error parse response response redirect nginx strange stack location header redirect strange well expose port host machine access port well luck hostname edit mac thing assume clone repo window connect auth service docker mac error report consider close issue mac user,6,388,2,2.0,1,2016-07-28T04:18:45,0.0
38565470,6593794.0,<azure><microservices><azure-service-fabric>,service fabric cluster maintain version service,micro service service fabric cluster example upgrade version successful upgrade service fabric replace version version micro service communicate version service achieve service fabric help kishore,6,444,2,0.0,1,2016-07-25T10:35:16,0.0
43609390,810555.0,<architecture><microservices>,user microservice,work paas solution product divide business process microservice core process closely connected microservice good practice create separate service manage datum user management implementation service access user db table service call user microservice user relate task approach enforced refactor db schema add denormalization underlying table serve multiple microservice serveral service datum share microservice,6,854,1,1.0,1,2017-04-25T11:26:44,0.0
47782247,2852166.0,<php><microservices><file-handling><api-design>,handle file upload microservice environment,process decision handle uploaded file user microservice environment php linux system deploy month key component incoming file currently option aware follow scenario gateway api design handle talk directly storage service gcs set filename validate storage confirmation receive pass filename datum microservice beneficial file handle receive fail impact add complexity gateway slow thing peak time scenario file receive gateway api pass file microservice beneficial visibility gateway offer flexibility easily change inside service impact gateway instance major downside single file handle require compute additional resource scenario client accountable send file separate service response send gateway api resource perspective huge load gateway api allow concern datum file major drawback client send faulty malicious gateway api require additional validation ensure file valid exist create potential congruence problem future service client option love experience solve approach handle file microservice architecture,6,1463,3,3.0,1,2017-12-12T22:01:03,0.0
35172625,3375378.0,<spring><spring-boot><spring-cloud><microservices><netflix-eureka>,spring cloud config eureka approach work,develop spring cloud eureka microservice application service connect config service eureka approach microservice package docker container deploy docker compose application compose service registry service implement spring cloud eureka spring cloud config service server example microservice config datum config service connect eureka approach connection config service fail describe configuration datum config server client initialize sample follow env variable replace actual launch check eureka work connect browser eureka dashboard test config service work respond configuration hand myapp service test crash startup follow log note implement eureka approach set spring cloud config uri directly service service register eureka find config server work correctly register service eureka dashboard check config property correctly read,6,14260,3,2.0,1,2016-02-03T09:08:19,0.0
45239377,8130681.0,<spring-boot><internationalization><microservices>,spring boot rest multilanguage,application angular ui spring boot rest microservice database postgresql project support multi language hear spring call implement microservice call category crud operation default language english add french call category lang fr add table call add word translate word user enter time site angular call java static word save session add template multilanguage system understand implement project example find,6,618,2,3.0,1,2017-07-21T13:47:35,0.0
45099677,2371715.0,<microservices><netflix-zuul><api-gateway>,zuul single point failure,work stand single point failure scalable resilient,6,575,2,1.0,1,2017-07-14T09:41:04,0.0
50435696,2362973.0,<django><django-rest-framework><django-admin><microservices><django-apps>,django admin authentication system microservice architecture,large django project basically monolith app break microservice question find clear answer currently django admin extensively wonder continue monolith break read manipulate datum microservice work ui helpful process smoothly authentication authorization build app microservice architecture pare service communicate http,6,548,0,2.0,1,2018-05-20T14:13:20,0.0
39388560,2546916.0,<security><microservices><openid-connect>,openid connect token purpose audience aud field validation,implement frontend single app pass token backend server authorization header validate documentation require trust audience token aud azp field struggle understand significance validation step security implication distrust token intend recipient reasoning trust issuer matter token issue expect claim clientid wrong ideally pass token microservice issuer trust figure key attack vector skip validation step,6,2747,0,1.0,1,2016-09-08T10:28:45,0.0
51573236,9953339.0,<node.js><express><microservices><api-gateway><express-gateway>,properly express gateway authentication web app,fairly concept microservice api gateway general understand role api gateway play modern web application microservice read documentation tutorial express gateway bit confused web application perform authentication api gateway set express gateway web app multiple microservice talk api gateway front microservice microservice worry user request authenticate microservice talk api gateway verify request valid user understanding correct assuming thought api gateway serve gatekeeper microservice correct follow question specific perform user creation authentication perform api gateway meaning custom user creation login microservice publically reachable api gateway custom user creation microservice creation create user account api gateway user duplicate microservice database express gateway storage guess general confusion api gateway role authentication user creation entirely web app microservice authentication microservice validate user work api gateway generate valid short live token read create user app account authentication express gateway confused role play,6,1842,0,3.0,1,2018-07-28T16:31:17,0.0
35882330,3047741.0,<java><jersey><dropwizard><inject><microservices>,configuration yml dropwizard microservice jersey injection,code snippet yml file myconfiguration class application class app receive log follow yaml problem dependency injection myconfiguration class productionserver object myconfiguration null service code snippet dependency bind myservice class myconfiguration class dependencybinder class import org glassfish hk utility bind abstractbinder public class dependencybinder extend abstractbinder myservice class invoking method invoke log follow problem dependency injection myconfiguration class myservice class productionserver object myconfiguration null service resolution thnx,7,6058,0,2.0,1,2016-03-09T03:26:41,0.0
34295221,4207875.0,<graph-databases><microservices>,microservice decompose graph db base application,plan decompose application start build monolith graph database microservice dilema face find proper solution split service loose benefit provide graph database idea consider initially split entity microservice document store persist datum service define high level service manage relationship example relationship produce microservice service entity type entity type third high level graph database store node type relationship question wrong approach term couple fault tolerance question toss third entity game example good approach scenario stick strategy high level service maintain relationship generate high level service maintain type relationship question case relationship entity type example person isfriendof person mind concept separation concern appropiate separate management relationship service input feedback idea subject sake clarity propose concrete scenario easy discuss graph model goal implement song playlist recommendation service find song user listen base genre artist song user listen song listen user follow current user,7,906,0,1.0,1,2015-12-15T17:05:38,0.0
53149896,2931744.0,<java><microservices><aop><guice>,inject java object write annotation base method interceptor guice framework,application structure create annotation create sample interceptor create guicemodule class annotation bind follow bootsrap class bind usage interceptor functionality start execute executing class execute interceptor code snippet insert result check code find object inject note microservice restful service concept,7,130,0,0.0,1,2018-11-05T07:19:30,0.0
53109442,2327863.0,<java><spring-boot><jms><microservices><saga>,message broker exception handle session transact consumer producer,pattern spring boot microservice example order customer order create event produce customer microservice listener update customer credit produce session transact event produce javadoc jms transaction commit main transaction question handle scenario main transaction commit example order recore committed system unable commit jms transaction reason saga phase commit saga move problem order customer service order service jms provider,7,224,0,1.0,1,2018-11-01T21:14:57,0.0
52219244,6725113.0,<c#><wcf><exception><service><microservices>,provide fault method wcf receive faultexception detail,implement service witch return case wrong authorization method wonder write nice check error status code authorization exception witch general find nice check string fact authorization authentication,7,137,2,1.0,1,2018-09-07T09:13:11,0.0
39215533,1653027.0,<java><microservices><spring-cloud-config>,spring cloud config multiple config,microservice project service service idea multiple understand load multiple config config client git repo point config repo multiple config case load product microservice orderconfig yml jmsclient yml productclient yml access property orderclient yml question question access property application question list expose config server case dispaly question clear,7,7759,0,3.0,1,2016-08-29T21:30:41,0.0
56396806,661363.0,<kubernetes><cors><microservices><ambassador>,ambassador handle cor request,ignorant question ambassador handle cor header pre flight option response doc kind ambiguous hook prevent request respond behalf service situation ambassador front http request microservice reason separate domain request ambassador authservice configure accord doc external authorization incoming request authenticate route destination include pre flight option request perfect sense authservice configure allow thing correctly work authservice respond appropriate header ambassador ignore care authservice respond totally reasonable annotate ambassador module expect handle cor header pre flight forwards service handle cor stuff,7,301,0,0.0,1,2019-05-31T14:18:18,0.0
40938088,5705247.0,<spring><docker><cloud><microservices><docker-swarm>,microservice practice,study concept microservice good understand quick refresher nutshell monolith application decompose independent deployable unit typically expose web api database service fulfill single responsibility well service communicate synchronous web service rest soap asynchronous messaging jms fulfill request synergy monolith application distribute system typically fine grain api api gateway proxy single point entry facade perform security monitor task main reason adapt microservice high availability downtime update high performance achieve horizontal scaling service looser couple system easy maintenance ide functionality build deployment process fast easy change framework language microservice hand hand clustering containerization technology docker microservice pack docker container platform principal concept cluster service discovery replication load balancing fault tolerance docker swarm cluster tool orchestrate containerized service glues handle task hood declarative manner maintain desire state cluster sound easy simple theory understand implement practice docker swarm pretty well view concrete example question build simplistic java application spring boot mysql database build system user webpage service submit form service manipulation datum send service manipulate datum write database return response send user problem service find service service find database deploy node cluster configure spring boot application thing mind dns find tutorial setup system docker swarm correct configure connection parameter spring distribute cloud deployment spring cloud project understand key dilemma confused database deploy live cluster deploy alongside service aid docker compose well manage traditional ip question load balance confused multiple load balancer service single master load balancer load balancer static ip map domain user request target load balancer load balancer fail effort scale service pointless setup load balancer docker swarm routing mesh node user target,7,528,1,1.0,1,2016-12-02T17:44:43,0.0
40575493,51197.0,<polymorphism><protocol-buffers><microservices><protobuf-3>,polymorphism protocol buffer,current design refactore exit api code return feed event user api normal restful api current implementation simply query db return feed code long cumbersome decide move feed generation microservice call api server design sake decouple datum move api server microservice protobuf object change programming language enjoy type safety slim size protobuf problem feed multiple type image voice message future type add share property timestamp title instance completely classic oop solution simple base class feed item inherit class sequence class express notion polymorphism protocol buffer enable type message list oneof repeat broad java,7,3516,5,2.0,1,2016-11-13T15:27:12,0.0
42484087,998997.0,<akka><microservices>,microservice service discovery service registry akka,apply microservice architecture application internal communication microservice achieve akka microservice aware register option design service registry discovery zookeeper centrailize service hold metadata microservice node access metadata communicate metadata node akka path address node communicate join microservice akka node akka cluster node keep reference communicate akka cluster support gossip protocol node cluster aware advice design service discovery service registry efficiently top akka option,7,772,4,3.0,1,2017-02-27T11:01:10,0.0
40222469,1791815.0,<microservices><graphql><graphql-js><apollo-server>,graphql filter sort nested entity separate datum source,attempt graphql tie number rest endpoint stuck filter sort result datum filter sort nested filtering rest endpoint case separate microservice separate database filter rest endpoint article author likewise sort filter sort pagination rest endpoint illustrate problem attempt solution wonder well boil solution minimal set file datum js represent return fictional rest endpoint schema define main js ease reference file setup send query variable intend variable post processing parameter formatresponse function response filter sam author sort descend second size variable response sort author descend article formatresponse function post processing filtering sort question valid case canonical filter deeply nest property sort,7,3804,3,1.0,1,2016-10-24T15:46:21,0.0
41067341,6546461.0,<terminology><distributed-computing><microservices>,difference distribute computing microservice parallel computing,basic understanding distribute computing model connected node hardware perspective share network connection communicate message node code responsible business logic erp system node hr node accounting communication html soa rcp microservice service responsible business logic communicate http microservice share hardware resource access thier api parallel system system optimize resource example multithreaded app thread share memory resource bit confused microservice distribute system multiple microservice single hardware resource parallel system,7,5630,0,3.0,1,2016-12-09T19:11:53,0.0
49646849,2659879.0,<authentication><jwt><microservices><soa>,token expire service,read communication service microservice pass access token user downstream service token expire microservice plenty solve problem reasonable validate access token user create short live jwt api gateway kind internal token auth service validate request token questing order sure token expire journey service check api gateway layer token expire minute reject user refresh token access token token valid time complete request pro con approach,7,513,0,3.0,1,2018-04-04T09:00:29,0.0
45510905,5506061.0,<spring-mvc><spring-boot><microservices><netflix-eureka><netflix-zuul>,authentication access spring boot zuul service route,configure micro service spring boot zuul eureka service authenticate route rest api call api client send accesstoken zuul service route service call micro service auth service accesstoken auth service check user exist accesstoken send accesstoken valid route happen help implement spring boot service,7,2406,3,3.0,1,2017-08-04T15:47:31,0.0
51863731,6872018.0,<spring><microservices><spring-cloud>,java lang illegalstateexception configure uri git repository,develop example develop version simply code error step mention setup local git remote git guide error pom xml,7,5912,3,2.0,1,2018-08-15T17:38:33,0.0
22987482,3518968.0,<node.js><api><plugins><microservices>,hapi js micro service framework,interesting presentation joy micro service wonder concept hapi js cto mail online large online newspaper planet check hapi plugin system relation micro service node framework set micro services senecajs org case study ideally tutorial leverage hapi,8,2475,0,2.0,1,2014-04-10T12:04:08,0.0
31317470,1568270.0,<node.js><mongodb><nginx><microservices>,deal auth share user info microservice,tltr good communicate service auth user info location server technology learn microservice bit unclear approach access user control access multiple service approach completely wrong example basic service blog crud operation service upload store image video authorization user account userid eventually model blog model objectid author commenter keep separate learn purpose moment build node js hope swap technology nginx java python service storage currently mongo switch sql option currently structure service build express js apps currently node http proxy proxy express service save set nginx dependent nginx approach authenticate user route create post update deleting post read eventually incorporate role populate user user store blog author replace user single app mongoose populate main aim keep auth user separate service call service store db example locate physical server http well point implementation example node js preferable essential require service registry bit lose implement,8,1346,3,6.0,1,2015-07-09T12:26:19,0.0
32715464,2684825.0,<spring-cloud><microservices><netflix><netflix-eureka><netflix-zuul>,forward request specific version service deployment netflix,instance service host deploy version service node node deployment incoming request forward accord load balancer version host netflix forward incoming request specific version generic define version serviceid incoming request version define header forward request specific version zuul proxy sample service mechanism achieve versioning service,8,1051,1,1.0,1,2015-09-22T11:17:13,0.0
43290480,1705705.0,<python-2.7><celery><microservices><celerybeat>,celery build microservice,break project small microservice microservice cron base celery task distribution well mechanism periodic task celerybeat build multiple celery app microserverice increase overhead multiple broker multiple flower system monitoring single app multiple server fail celery independent server microservice task belong microservice execute server sharing task server case microservice celerybeat clog broker pende task result halt service microservice communication microservice separate queue worker worker server worker microservice,8,2317,0,4.0,1,2017-04-08T05:19:33,0.0
44043159,1638626.0,<automated-tests><microservices><end-to-end><continuous-delivery><ase>,include test microservice multiple continuous delivery pipeline,team develop three microservice three work provide business scenario communicate rest rabbitmq microservice continuous delivery pipeline delivery deployment pipeline manual release decision include test business scenario microservice delivery pipeline team add shared stage deploy three microservice test time pipeline reach stage deploy test semaphore ensure pipeline pass stage failure three pipeline sacrifice independence microservice architecture win place stage bottleneck fast pipeline thwart slow pipeline reserve stage wait test failure pipeline pipeline deliver disable ship urgent bug solution adapt business scenario combination microservice super stage wire microservice business scenario require stage stage narrow result confirm exact combination microservice version work production version guarantee work well stage conflict manual release decision build pass decide release production production version microservice warped result well,8,585,1,1.0,1,2017-05-18T08:59:34,0.0
40966759,4318281.0,<architecture><microservices>,microservice centralized authorization authorization service,microservice system build api gateway request gateway pre authenticate authentication service firewall pattern authorization instance model service accord hotel management system user user hotel hotel hotel single user owner hotel employee user hotel room sake simplicity pretend employee owner hotel room room belong single hotel owner employee edit room hotel employ example request edit room authenticate verified claim state user edit request hotel service hotel associate employ question request gateway hotel service forward client request room service room service hotel service choose benefit modeling kinda wrong relation lay microservice system complicate grow hard visualize workflow service solution problem centralized relationship service utilize graph database neo,8,2238,0,2.0,1,2016-12-05T03:42:29,0.0
47451190,6814073.0,<rest><apache-kafka><microservices>,kafka rest communication microservice,change communication micro service rest kafka sure topic hear opinion consider follow setup api gateway provide crud function rest web application endpoint user call api gateway produce request consume response second service second service consume request access database execute crud operation database produce result topic create create endpoint request response well hear experience link talk documentation,8,3270,0,3.0,1,2017-11-23T08:53:42,0.0
46002727,7471053.0,<microservices>,difference api gateway edge service,understand concept api gateway describe richardson difference edge service concrete implementation api gateway pattern,8,2678,0,1.0,1,2017-09-01T14:42:21,0.0
45515650,1845593.0,<distributed-computing><microservices>,client microservice generic client responsible microservice client,microservice architecture microservice provide client inside client manage control microservice team receive parameter pass generic http invoker receive endpoint param call microservice http web api guess technology matter sense microservice team provide client responsibility consumer create abstraction invoke directly problem microservice problem web api contract delete client pass responsibility consumer microservice side create service layer consumer side generic invoker reach endpoint image represent component red define boundary responsible gateway adapter layer adapter layer reference microservice client package microservice client package reference generic http invoker package side number consumer repeat code client microservice provide client unique central place control approach correct client responsability microservice consumer internal product,8,315,1,2.0,1,2017-08-04T21:19:05,0.0
45215621,4982962.0,<node.js><architecture><protocol-buffers><microservices><grpc>,grpc microservice architecture implementation,microservice architecture advisable centralized collection proto file dependency client server proto file client server,8,508,0,1.0,1,2017-07-20T13:05:10,0.0
34442192,5700967.0,<microservices>,api gateway api gateway,develop application base independently deployable exposing implement top service map incoming request follow architecture discuss project substantial maturity base microservice architecture project follow open project regard api gateway contributor claim follow risk varying opinion confusing suggestion api gateway,9,2453,1,1.0,1,2015-12-23T19:09:44,0.0
48167778,388026.0,<kubernetes><microservices><google-kubernetes-engine>,kubernetes http communicate service,gce handle traffic cluster terminate tls request route inside cluster good call service service cluster external ip domain http call service internal ip service http encrypt datum safe long leave private network internal endpoint accessible cluster external https url endpoint reachable call service directly,9,1432,1,2.0,1,2018-01-09T11:59:14,0.0
26854986,1387421.0,<spring><spring-boot><hateoas><spring-hateoas><microservices>,cross service link hateoas micro service,number micro service build spring boot bit fun add hateoas help set cross resource link work nicely project wonder good link api example imagine service user detail service code user calendar service code user messaging service code browsable api good link user resource appointment message nice link resource achievable single api classpath write code code calendarcontroller classpath service currently hit good recommend method create link controller current project reference,10,1631,3,6.0,1,2014-11-10T23:33:32,0.0
43489589,1978395.0,<c#><asp.net-web-api><.net-core><microservices><rawrabbit>,net core microservice rabbitmq,plane microservice architecture project select technology stack simple service bus deploy service service service expose endpoint service problem inter service communication publish event listen event service perform operation database update listen event describe feel console application subscribe event find viable method achieve good practice consider scalability extendability system,10,8260,2,3.0,1,2017-04-19T07:47:42,0.0
48458627,4041951.0,<architecture><microservices>,filter sort datum multiple microservice,microservice work relate datum example ad stat filter sort aggregate relate datum ui example user ad car text click challenge lot datum user row filtration service datum example statistic service ad stat existent ad ad sorting filtration work ad stat consider ad click requirement eventual consistency couple second data loss acceptable second filtration sort big client row solution load datum require query service filter sort memory push update service elasticsearch elastic handle query return desire entity load service big database service pay attention solve problem,10,1639,0,7.0,1,2018-01-26T09:27:49,0.0
54575048,4558800.0,<jwt><microservices><keycloak><rpt>,partial jwt token token refresh,microservice architecture jwt token keycloak second access token claim role case access token owner access document document store limit damage steal token ideally second token special refresh token call user hold refresh token full access token partial access token scope work list scope evaluate login moment refresh token adopt list scopes understand rpt documentation fail idea example edit question rpt explicit access token permission goal experiment token grant type urn ietf params oauth grant type uma ticket issue change setting keycloak enable permission client support permission change normal login call longer work test token valid scratch keycloak config continue work understand permission model feature example keycloak documentation bit abstract,10,504,8,2.0,1,2019-02-07T13:59:31,0.0
46069921,1358676.0,<microservices><netflix-zuul><api-gateway>,difference api gateway pattern bff,understanding api gateway pattern proxy microservice client call api gateway care route bff specific case api gateway pattern route mechanism type client,10,4674,1,1.0,1,2017-09-06T08:07:33,0.0
35381163,4335622.0,<authentication><architecture><authorization><microservices>,good practice organize authorization microservice architecture,example service authentication seller buyer database model service authentication service user user group role permission create token store seller buyer entity authentication service seller buyer service seller buyer service interact create seller buyer entity seller buyer service check permission seller buyer entity common field password email additional field seller buyer interact,11,4527,8,3.0,1,2016-02-13T14:34:27,0.0
52161774,4860939.0,<java><spring-boot><microservices><netflix-zuul><netflix-eureka>,load balancer server client meeting,reach service zuul gateway zuul unable forward request respective service follow error face share application yml service eureka zuul gateway eurekaclient zuulgateway zuulgateway service class meet service class meeting configuration ensure service discover eureka client eureka console verify visible well view visit git repo help appreciable,11,6086,0,3.0,1,2018-09-04T08:16:08,0.0
36541906,3700626.0,<microservices>,centralized setting microservice,microservice decompose system separate component thing system centralized nature concern system setting monolith big file db parameter setting preference update backup restore export import window registry customer place set system microservice architecture centralism anti pattern mechanism framework deal contradiction,11,2912,0,2.0,1,2016-04-11T07:01:48,0.0
36407520,3009289.0,<java><spring-boot><microservices><wildfly-9><wildfly-swarm>,spring cloud boot wildfly swarm,analysis modern container java stack net major promising thing spring boot cloud pack tomcat jetty wildfly swarm moduler wildfly server minimum component feature find good comparison thing point view better decide good implement good developer health complex enterprise logic scalability hot deployment microservice approach enterprise integration pattern continuous delivery pipeline thought zaheer,12,6818,4,4.0,1,2016-04-04T16:02:13,0.0
44884316,7728822.0,<java><jvm><apache-kafka><microservices><pact>,implement contract testing kafka involve microservice architecture,currently work project kafka implementation micro service architecture successful create contract test case ms kafka topic interaction pact jvm implementation microservice publish message rest client turn post message kafka topic microservice method retrieve message kafka topic,12,3632,0,4.0,1,2017-07-03T11:23:29,0.0
41161769,4763929.0,<spring><security><authorization><acl><microservices>,authorisation microservice approach domain object entity level access control acl,currently build microservice base system java spring cloud microservice postgresql mongodb rest jms communication plan sso oauth authentication challenge face authorisation domain object entity level kind acl access control list good practice kind architecture avoid coarse grain security application service layer level microservice final idea spring security acl acl table share database microservice database access spring infrastructure spring api db schema stable change case simply break rule share db microservice consider kind distributed solution leave microservice acl access rest problem http call performance degradation extend spring security acl replace db access rest call acl microservice entity sound reasonable imagine case read model entity synchronise microservice entity exist bound contexts microservice acls unmanageable source error microservice acl table synchronise microservice read model problem support spring security acl mongodb custom solution github doable create entity create record microservice acl asynchronously synchronise read model microservice entity sound easy solution choose url base access control api gateway modify spring security acl api gateway service granularity access control bind rest api granularity imagine consequence problem approach bring finally solution share db mention favorite disqualify share database possibility work additional complexity case kind caching distribute cache advice opinion approach architecture tricky lot thing wrong lukas,12,1524,2,5.0,1,2016-12-15T10:22:31,0.0
41618538,3241889.0,<spring><spring-security><microservices>,secure rest microservice spring security,good practice efficient solution secure multiple microservice communicate rest web client application current setup microservice java spring framework docker container client angular application µservice gateway communication point web client service retrieve jwt encrypt token remote authentication api call lock solution store login jwt cookie send gateway gateway embed final payload send concerned µservice token store user database microservice query check remote authentication service user role sufficient return status result edit rabbitmq broker µservice hive websocket order secure websocket secure rest api sure manage security gateway manage microservice level lot message transit rid middleware slow thing question good practice better example thing fill lot share thought,13,7481,2,9.0,1,2017-01-12T16:41:21,0.0
40972026,567328.0,<microservices><netflix-zuul><kong><mashape>,netflix zuul mashape kong,zuul kong serve good api gateway layer microservice architecture difference,13,7946,4,4.0,1,2016-12-05T10:26:37,0.0
33726653,3230694.0,<c#><azure><pipeline><microservices><azure-service-fabric>,service fabric reliable service pipeline design,implement pipeline service fabric reliable service guideline approach preferable viewpoint reliability simplicity simple good design,14,2695,0,10.0,1,2015-11-16T00:03:44,0.0
51282283,5338243.0,<amazon-web-services><authentication><microservices><multi-tenant><aws-cognito>,multi tenant authentication aws cognito,current project aw cognito microservice lambda design microservice ddd process implement basic functionality business user api categorise client company work access datum client company well role base authentication full multi tenant solution user work website account associate client read aws user role pool client associate user create client typically consist user client unmaintainable term number user pool issue conventional add domain service architecture solely design add client datum request user call user microservice overly complex consider change architecture include basic user role microservice messy question officially support add datum aws cognito profile programmatically change front website client admin account create clientid field token experience issue recommend alternative user pool suggestion edit investigate attribute cognito profile mention achieve hear alternative advice,14,4264,0,5.0,1,2018-07-11T09:46:40,0.0
52266348,2420731.0,<node.js><typescript><microservices><nestjs>,split nest js microservice separate project,create simplistic cinema management platform microservice nest js big folder feel monolith separate nest js project git repository orchestrate kubernete connect service service separate project share redi edit question microservice general question nest js specific read documentation decorator connect transport layer decorator short snippet code separate nest js repositorie connect talk care transport layer thing figure advice framework documentation lack,15,6057,8,13.0,1,2018-09-10T22:31:56,0.0
48900551,5705247.0,<architecture><microservices><distributed-computing><soa><esb>,esb consider bad microservice architecture,microservice architecture autonomous business service talk directly communication synchronous orchestration event base choreography api gateway aggregate api client backend frontend microservice seek ultimate goal low couple high cohesion grant continuous deployment fine grain scale rapid technology adaptation reusability auditability course price high complexity highly discourage esb enterprise service bus middleware microservice esb rival solution esb bad long meditation channel additional monitoring authentication layer business logic problem microservice architecture,15,6778,5,8.0,1,2018-02-21T07:45:26,0.0
31786040,925141.0,<spring-cloud><microservices><netflix-eureka><netflix-zuul><canary-deployment>,spring cloud canary deployment zuul,start spring cloud eureka zuul question structure blue green canary deployment basic work eureka zuul config server work expect accomplish set service version subset specific user route version version zuul filter api light documentation struggle bit grok concept question basic filter lot moment identity principal service request hit wall understand expose version service eureka zuul thing curious documentation post stack overflow term service cluster interchangeably correct service expose serviceid target user request zuul send add node exist service add additional metadata node zuul distinguish version correct answer,16,2923,0,8.0,1,2015-08-03T11:27:35,0.0
29669180,2968101.0,<java><web-services><rest><microservices>,microservice service registry api gateway datum sharing,read tone article concern microservice architecture deal thing easy deeper explanation explain question actual architecture technically theoretical description domain mobile browser base customer connect application user consult billing buy monolithic application architecture presentation layer mobile angular ember business layer rest api nginx front dal standard mysql database scalability apply axis microservice architecture case domain scalable flexible learn bit course schema service http url expose api concern question flux mobile send http request mind apigateway standard service registry eureka zookeeper find authsrv accessible retrieve network address apigateway request authsrv respond server good work latency problem deal machine access data flux consult service registry service registry understand request auth child url auth expose relate service address ip port flux service registry authsrv bis authsrv application admit lose disponibility big system service link handle service deficiency post store billing relate user service database standard architecture microservice architecture recommend good handle service datum sharing couple service prefer amqp protocol http protocol specific case advance,16,4381,1,11.0,1,2015-04-16T08:22:16,0.0
33465577,2440934.0,<git><docker><microservices><secret-key>,manage secret microservice container cloud environment,microservice cloud thing talk write personally lot topic benefit challenge speedup daily development manage thing question bother day manage secret microservice cloud environment imagine company software engineer team product team create software service amount secret api key passwords ssh keys fashion create configuration file ini yaml txt format read factor app env var env var set machine config file place well work hand full machine deployment system admin general rule don store secret git repo team responsible application produce deploy team company move container service mesos marathon kubernetes course dockerfile set env var well add config file docker container build access secret team secret dangerous versionize dockerfile well application marathon versionize git well apply rest api store manage secret container apps scheduler framework swarm machine docker mesos marathon usable docker well kubernete don app schedule machine tool authentification default course add nginx proxy idea manage secret tool native support app apply don configuration management solve chef support encrypt databag afaik chef setup build docker container manage secret multi team env engineer microservice container cloud environment,16,2957,4,8.0,1,2015-11-01T18:21:40,0.0
41795612,2849613.0,<heroku><architecture><jhipster><microservices>,deploy microservice heroku,read lot microservice build app approach nead service load balancer deal request push forward service authorization service authorize user database microservice instance db schema service service functionality service functionality find heroku interesting place deploy application problem completely understand ideology creation registration app app auth app load balancer heroku public hostname app concern start deploy internal service public hostname question provide guideline deal microservice heroku deploy define load balancer hook internal service jhipster heroku tool example cli stay gitlab repo find point grasp internet,16,6793,1,11.0,1,2017-01-22T20:09:47,0.0
40900818,312201.0,<web-services><rest><integration><soa><microservices>,query pagination microservice,shop start soa approach application development great benefit separation concern reusability benefit soa microservice big item stick aggregate filter paginate result service describe issue scenario service personservice store people address itemservice store item purchasable paymentservice store regard payment people item build report admin tool display report multiple service aggregate instance display paginated list payment person item payment pretty straightforward grab list payment query personservice itemservice respective person item record issue play filter datum instance display paginated list payment people bob purchase item car thing complicated filter result service result service return performance perspective query service narrow result costly well solution find concrete solution problem good practice monolithic application simply sql join table ton trouble figure service question community approach thing consider sort search elasticsearch solr datum service update event push service query search result attempt understand project graphql neo assist issue,16,2061,3,1.0,1,2016-12-01T00:48:57,0.0
45567201,8081281.0,<docker><docker-compose><microservices>,user docker compose pull image private repository,docker compose command multiple container problem docker compose pull image public repository private repository plan push require image private repository docker compose pull image private repository short point private repository image,17,18499,6,0.0,1,2017-08-08T11:32:44,0.0
47071729,5856562.0,<amazon-web-services><amazon-ec2><microservices><elastic-load-balancer><internal-load-balancer>,aws load balancer,microservice programming language ec instance production notice bad gateway error service interact log request service api call hit example service call service service log indicate call service aws load balancer issue help appreciate advance solution http https connection agent service issue update lb log api log target response code lb response code lb handle traffic application solution,18,4970,6,7.0,1,2017-11-02T09:27:21,0.0
31313170,1581325.0,<spring-cloud><microservices><netflix-eureka><netflix-zuul><blue-green-deployment>,route microservice spring cloud netflix oss,development microservice spring cloud start zuul proxy connection microservice microservice contact microservice time conclusion zuul design edge service proxye traffic microservice intermicroservice communication spring cloud recommend eureka direct load balanced connection service zuul course work nicely expect spring cloud clueless perform case setup deploy version microservice version zuul microservice communication separate service continue version remove eureka achieve picture draw option picture zuul call eureka registry create route service call eureka registry route service service eureka registry routing second picture update service service deploy register eureka well service route service service blue green deployment third potential solution issue showcase instance eureka deploy purpose instance peer aware sync eureka instance oppose instance purpose facilitate blue green deployment service register second eureka instance service configuration change fetch registry second eureka instance main question face viable solution flexibility zuul route big scenario move route service service call zuul solution ribbon configuration sort appropriate second eureka instance good solution type deployment feedback greatly appreciate kind regard andrea,19,3215,2,16.0,1,2015-07-09T09:17:06,0.0
34640611,837173.0,<api><security><jwt><microservices><kong>,api gateway conjunction microservice jwt,afternoon double check work effective secure microservice premise break monolithic application monolithic partner api microservice orient specific business function small expressjs application docker container elastic beanstalk live stand api gateway aws api gateway encapsulate detail microservice feel good kong verify signature jwt pass header microservice mention party developer partake integration fun well basic sketch happen implementation generate consumer platform party developer web app mobile app current integration partner note create consumer user log secure add lot work figure secret api gateway clearly issue kong verify request kind bouncer door authorization authentication token valid microservice middleware decode custom logic decide user extra stuff nice access control plugin kong application mobile app god privilege definitely lock developer specific route method revoke party access easy revoke user access simple invalidate jwt generate secret limit token time minute application check expire token original request flag database jwt generate ssl jwt store ssl cookie web browser sensitive store claim guy,19,3454,0,8.0,1,2016-01-06T18:54:39,0.0
41731704,921187.0,<docker><docker-compose><microservices>,docker compose multiple repository,currently struggle deployment service proper deal multiple repository repository independent production launch setup git repository backend backend project rail docker compose backend expose db redis git repository frontend express js server docker compose expose independently test execute ci git repository nginx production connect service docker network forwards request service include service submodule nginx repository docker compose nginx repo happy,22,7216,0,2.0,1,2017-01-19T00:16:29,0.0
38633023,6544712.0,<java><spring><spring-boot><microservices>,disadvantage spring boot java web application,vote reopen answer spring boot default spring application set easy automatically wire common dependency industry spring boot manner advertise factually concisely disadvantage face developer adoption spring boot de facto spring advantage spring boot advantage agree rounder view example opinion base point spring boot unnecessarily increase deployment binary size unused dependency customize log easily,24,12565,2,2.0,1,2016-07-28T09:57:24,0.0
31031865,461800.0,<deployment><configuration><architecture><docker><microservices>,manage environment datum docker base microservice,microservice architecture hard time grasp manage environment specific config ip address credential database message broker three microservice maintain team team team integration environment work late snapshot microservice stable version dependency microservice course qa stage production environment well simplified view big picture microservice team environment microservice snapshot microservice stable microservice stable microservice team environment microservice stable microservice snapshot microservice stable microservice team environment microservice stable microservice stable microservice snapshot qa staging production microservice stable release microservice stable release microservice stable release lot deployment problem solve continuous integration server chef puppet hard microservice environment datum place deploy example team environment address set credential interact team environment deployment address credential interact deployment close production environmental config info security restriction people modify view microservice architecture maintain environment specific config info app approach mind problematic build server bake application build time suppose create repo environment propertie file script build process microservice reach pull appropriate script separate limited access repo production stuff ton script basically separate microservice place microservice deploy bake base docker image environment build server microservice application docker container step build process create custom base image environment base image shell script set environment variable dockerfile set invoke script prior start application challenge previous bullet point manage ton docker image pull environment info runtime sort registry lastly store environment config inside apache zookeeper plain database application code pull runtime start microservice application environment startup parameter set variable grab registry advantage approach exact build artifact application docker container team environment production hand runtime dependency manage datum registry people commonly address issue microservice architecture common thing hear,25,7852,1,19.0,1,2015-06-24T16:20:31,0.0
30296587,2205763.0,<amazon-web-services><amazon-sqs><microservices><event-based-programming>,amazon sqs multiple consumer,service base application amazon sqs multiple queue multiple consumer implement event base architecture decouple service service react change state system example registration service emit event registration user register user service emit event user update user update search service read queue registration user search read queue user update update user search metric service read registration queue send mixpanel read queue user update send mixpanel number issue message receive multiple time polling design lot system idempotent service metric service difficult message manually delete queue sqs implement message handle service handle deletion message service receive service emit message acknowledge event handle message guess question pattern ensure multiple consumer single queue sqs ensure message deliver delete reliably help,26,16835,0,7.0,1,2015-05-18T06:40:40,0.0
48906817,5705247.0,<transactions><cloud><microservices><distributed-computing><saga>,pc sagas distribute transaction,develop insight distribute system maintain data consistency system business transaction cover multiple service bound contexts network boundary approach implement distributed transaction phase commit pc sagas pc protocol application transparently utilize global acid transaction support platform embed platform transparent business logic application code sagas hand series local transaction local transaction mutate persist entity flag indicate phase global transaction commit change word state transaction domain model rollback matter commit series invert transaction event emit service trigger local transaction case sagas pc vice versa case pro con brittleness sagas nervous invert distribute transaction fail well,26,3601,1,8.0,1,2018-02-21T13:10:40,0.0
30422184,396090.0,<architecture><erlang><docker><elixir><microservices>,elixir erlang fit microservice approach,experiment docker compose order deploy multiple collaborate microservice benefit microservice provide good toolset manage extremely hard jump microservice wagon experiment elixir fond benefit provide encourage pack code multiple decoupled application support hot code upgrade mix docker elixir erlang matter example docker provide dev prod parity elixir fit docker container immutable lose ability hot code upgrade blue green deployment canary release write microservice elixir write language polyglotism benefit microservice full benefit otp platform guess pure collaborative erlang application optimal intermediate queue communicate microservice write language,106,10536,8,29.0,1,2015-05-24T09:54:33,0.0
48639206,3336921.0,<spring><spring-boot><microservices>,start single spring boot microservice multiple port st eclipse,start single spring boot microservice multiple port st eclipse,-5,1052,3,1.0,1,2018-02-06T09:09:11,0.0
36896418,1470311.0,<c#><web-services><asp.net-web-api><microservices>,choose window service web api service,windows service inconvenient cumbersome question validity app watch folder change react change understand oversimplification ignorant choose window service web api,-4,838,1,0.0,1,2016-04-27T17:07:15,0.0
44241320,1766922.0,<microservices><azure-service-fabric><service-fabric-stateful>,deploy service fabric app windows,release production version service fabric application windows machine,-4,144,0,0.0,1,2017-05-29T11:23:01,0.0
58047154,8751170.0,<java><node.js><spring-boot><microservices><seneca>,good opensource microservice framework develop service java node js php python,scenario micro service architecture service write node java python php micro service framework integrate service write language instance senecajs molecular support integrate service write java language micro service framework write java integrate service write language java language agnostic open source micro service framework,-4,34,3,0.0,1,2019-09-22T07:51:41,0.0
58849429,12370444.0,<microservices>,microservice essential application development,refer post video microservice work benefit example video satisfy confusion help share live example relate app development methodology,-4,16,1,0.0,1,2019-11-14T04:32:30,0.0
50111276,663853.0,<amazon-web-services><windows-services><microservices><windows-server-2012-r2>,technical requirement,goal build application dynamically monitor stock portfolio stock option build business logic tdd approach net core interface follow true broker etrade authenticate api position application pm est monday friday completion st mvp business logic start delpoy final solution seek community feedback hear work microservice aws azure sure direction tight timeline learn thing deploy open solution exclude microservice cloud consider follow program console application answer dedicated server ensure leave laptop blah blah conclusion plausible decision program windows service answer conclusion plausible decision program web site answer conclusion plausible decision investigate cloud microservice answer conclusion closing basically requirement time hour access app internet browser logic ping endpoint pretty minute market hour sure handle web application chance browser close web application defeat cloud help window service log accessible web deploy traderbot windows service build web application receive real time intel traderbot windows service log db sure appreciate knee jerk response,-4,128,0,0.0,1,2018-05-01T04:15:34,0.0
57835818,6446044.0,<java><spring-boot><apache-kafka><microservices>,apache kafka send datum microservice microservice springboot,apache kafka send datum microservice microservice springboot,-4,58,2,0.0,1,2019-09-07T17:05:10,0.0
56645343,523725.0,<java><performance><microservices><micronaut>,memory consumption micronaut microservice,question performance build microservice cloud orient micronaut deploy service kubernetes performance cpu super good barely consume cpu ram consume start mib thought mib read micronaut low memory footprint question normal micronaut microservice consume mib overview service wait incoming request memory consume mib,-4,235,0,0.0,1,2019-06-18T08:58:23,0.0
35040975,455042.0,<architecture><domain-driven-design><nservicebus><microservices>,microservice architecture break monolithic application,start process break legacy application build top episerver cms break small manageable component microservice lean nservicebus type domain model tool help start help identify abstraction point understand broad topic charge feedback great,-3,266,2,0.0,1,2016-01-27T15:09:26,0.0
56386646,4762042.0,<java><spring-boot><microservices>,variable recognize,class call movie catalog return list class class variable desc rating recognize restcontroller requestmapping catalog public class moviecatalogresource follow error multiple marker syntax error token invalid assignmentoperator desc resolve variable package correctly import reference code compilation variable recognize fail,-3,19,1,0.0,1,2019-05-30T22:57:00,0.0
42096392,7530226.0,<java><php><node.js><microservices>,combine language application,thing bit ambiguous language node js php develop web service instance node js responsible user authentication php responsible messaging idea app microservice architecture node js authentication service php messaging service good idea learn microservice architecure user authentication php complete rest project db advance,-3,53,5,0.0,1,2017-02-07T17:38:09,0.0
54927024,8641326.0,<java><spring><microservices>,share code multiple micro service,develop three micro service view offer add offer administrator opt offer view offer offer customer add offer service admin link offer customer offer link customer view offer return offer response opt offer customer avail offer design realize service share functionality logic share code develop api api code base,-3,50,6,0.0,1,2019-02-28T13:36:01,0.0
48984610,2902605.0,<java><xml><apache><web-services><microservices>,micro service web service,exactly difference micro service web service requirement link web service soap rest service micro service consider micro service web service,-3,941,1,0.0,1,2018-02-26T08:54:35,0.0
59081402,2196607.0,<java><spring-boot><microservices>,microservices java,learn microservice java technology spring boot find good book tutorial learn microservice detail guide great,-3,35,2,0.0,1,2019-11-28T03:39:59,0.0
49561411,9571042.0,<spring><spring-boot><microservices>,create microservice spring,intellij ide ultimate create project spring inicializer problem create microservice spring boot idk ide microservice terminal command create microservice inside project ide,-3,55,2,0.0,1,2018-03-29T16:54:28,0.0
50835951,9935604.0,<microservices><roadmap>,monolith microservice,heeeey create roadmap website monolith website microservice website understand step step sure exact task step help define detailed tak advance,-3,98,0,0.0,1,2018-06-13T11:21:06,0.0
56783842,10996153.0,<mysql><rest><flask><architecture><microservices>,system rest api website,social medium website microservice architecture rest api feature create account follow people post image system user log website python flask mysql machine learning system recommendation fetch user post log post people follow link github repo search lot topic convincing answer discuss figure update github repository,-3,22,0,1.0,1,2019-06-27T04:21:43,0.0
56773961,1956558.0,<go><microservices>,avoid multiple implementation method micro service architecture,work microservice architecture golang find duplicate model definition service avoid implement share library model definition evaluate pro con solve issue,-3,49,2,0.0,1,2019-06-26T13:26:30,0.0
57752271,12008357.0,<microservices>,alternative event source microservice arcitechure implementation,maintiane atomicity event source concept microservice alternative approach approach solve datum consistency issue event source framework,-3,29,0,0.0,1,2019-09-02T06:25:55,0.0
57918854,12061851.0,<node.js><microservices>,good communicate service microservice architecture,microservice nodejs user course user service keep info user info enrol course user list user info course info implement microservice architecture wait user query return course course info course service combine result return microservice,-3,90,0,1.0,1,2019-09-13T07:08:04,0.0
55918319,8380060.0,<node.js><azure><docker><kubernetes><microservices>,host code multiple product,three product google drive gmail doc three database three code user management code example user role privilege management integrate code application write product node js express docker azure,-3,44,0,0.0,1,2019-04-30T09:51:07,0.0
52425051,8283764.0,<docker><kubernetes><microservices><kubeadm>,kubernete container fail runsc gvisor runtime docker,single master kubernete cluster docker runsc gvisor kubernetes start container separate sandbox set runsc default runtime restart docker service surprise kubernetes container fail check exception gvisor docker kubernetes requirement ps beginner,-3,301,2,0.0,1,2018-09-20T12:19:33,0.0
25965275,4056930.0,<scala><microservices>,suitable scala framework choose microservice,currently finagle scala web framework microservice project easy convenient deployable time colleague play framework micro service huge micro opinion good microservice framework scala consideration advance,-2,1268,1,0.0,1,2014-09-22T00:36:00,0.0
36415988,544499.0,<java><monitoring><microservices><reliability>,crashreporte library java application,wan perform assert production runtime send crash report critical warn message channel email wan library perform collection commonly require stat stacktrace host detail configuration,-2,59,3,0.0,1,2016-04-05T02:17:38,0.0
40884616,5363076.0,<java><activemq><message-queue><microservices>,rest base message queue microservice,task implement message queue publish consume message queue requirement interact queue rest api activemq rest api problem activemq implement consumer keep wait message queue fetch listen queue rest client leave problem guy well alternative note solution open source product,-2,926,3,0.0,1,2016-11-30T09:29:26,0.0
47202936,7175427.0,<microservices><branching-and-merging><trunk><featuretoggle>,study paper implement trunk base master branch development,share study paper implement trunk base master branch development oppose long live branch micro service base environment preferably study business case justification proof benefit approach convince developer manager alike strive short live branch example feature toggle oppose long live branch difficult merge master automation test hard test main trunk master interesting paper discuss common pitfall pro con practical obstacle implement trunk base development example handle change contract version micro service team example feature toggle micro service trunk master update continuously micro team paper mention pact framework additional benefit convince management direction,-2,59,1,0.0,1,2017-11-09T13:20:53,0.0
42491958,7531008.0,<php><node.js><mongodb><google-cloud-messaging><microservices>,database app,database app create micro service authentication service messaging service chat app authentication mongo messaging service moment android app authenticate user send messaging push notification store respective database allow store user info reg token store chat room channel question kinda vague narrow advance,-2,47,0,0.0,1,2017-02-27T17:22:09,0.0
56933148,11105888.0,<node.js><docker><express><kubernetes><microservices>,develop microservice architecture nodejs,build microservice architecture nodejs express guide reference advance,-2,74,0,0.0,1,2019-07-08T10:37:56,0.0
38697565,2926377.0,<architecture><microservices>,break monolithic microservice stuck advise,develop application plan web mobile decide microservice app list sign email username password password confirmation sign email password sign facebook automatically sign email exist db create record automatically sign email exist db view article post article edit article delete article action service break sure split action service sign service sign service group user service question split service separately article datum author render site build broker service article datum article service author datum user service broker service simply article datum author datum web application controller,-2,228,1,0.0,1,2016-08-01T11:21:48,0.0
55644463,9779490.0,<spring-boot><microservices>,analytics spring boot microservice,requirement follow microservice db derive insight data db graphs chart thing ui good elastic search good option prodcution alternative redis cache good analytic spring boot microservice suggestion highly appreciate,-2,26,0,0.0,1,2019-04-12T04:22:15,0.0
55509642,4968804.0,<testing><microservices>,test microservice,application consist microservice example authnenticate service messanger service auth jwt test api messanger service jwt authnenticate service send request production authnenticate service bad idea solution hardcode jwt unittest turn auth check api unittest unittest case,-2,36,0,0.0,1,2019-04-04T06:59:15,0.0
57943847,1227941.0,<jsf><microservices><jakarta-ee>,jsf relevant microprofile,lose microservice jsf relevant microprofile migrate ui monolith application microservice view datum microservice,-2,75,4,0.0,1,2019-09-15T11:53:31,0.0
49607242,5210171.0,<docker><microservices><virtualization><linux-containers>,docker application base micro service architecture,totally explain layman term shift application employer application currently weblogic server micro service architecture deploy component individual container plan docker concern docker application base micro service architecture docker kind application sure explain process simple term newbie technology,-2,63,0,0.0,1,2018-04-02T07:40:43,0.0
47469430,8943842.0,<java><microservices><failover>,add failover java microservice,java miroservice deploy multiple service instance microservice work statelessly simple fetch request accord predefine criterion db process request fetch process consider add failover service add extra processor request process instance instance determine response request instance add heartbeat microservice leverage apache zookeeper curator achieve piece work well example java,-2,94,0,0.0,1,2017-11-24T08:46:48,0.0
58870891,964948.0,<microservices><azure-web-app-service>,xxx azurewebsite net currently unable handle request,error post deploy microservice app service azure,-2,35,0,0.0,1,2019-11-15T05:32:54,0.0
58743262,12336010.0,<spring-boot><spring-mvc><spring-data-jpa><microservices>,microservice,newly work microservice query microservice seperate microservice model class create project sevice project seperate file modal class project micro service search find helpful artical well alternative resource link help extremely greatful,-2,53,2,0.0,1,2019-11-07T06:42:10,0.0
50677506,3612242.0,<docker><kubernetes><microservices>,udacity docker kubernete,course course,-2,255,0,0.0,1,2018-06-04T09:35:33,0.0
43593778,2629026.0,<java><spring><microservices>,microservice design,microservice hardtime understand exactly example situation break microservice write scenario woud great scenario work content management system documentum ibm filenet content management system write implementation create file folder update fileor folder delete fileor folder update fileor folder metadata search file content file create update permission set apply file folder break microservice write implementation content management system seperate microservice help,-2,145,9,1.0,1,2017-04-24T16:53:13,0.0
55796888,8486752.0,<wpf><asp.net-core><microservices>,communication wpf microservice,communication wpf client app write net framework microservice write net core,-2,211,1,0.0,1,2019-04-22T15:33:23,0.0
58669423,9114331.0,<deployment><microservices><keycloak><keycloak-services>,keycloak deploy separate microservice,logic suppose connection keycloak check access create role user wrong,-2,20,1,0.0,1,2019-11-02T08:22:54,0.0
52925786,829543.0,<node.js><express><microservices><express-gateway>,return response accord common json schema,standard json key schema multiple api service original response map specific key add remove key json key output api service example api service output response,-2,55,0,0.0,1,2018-10-22T09:07:22,0.0
54293837,2428794.0,<python><microservices><python-3.7>,python high load capable microservice architecture,microservice python write pretty good write well structured flask restful api learn microservice python read lot info regard search online find example example sure exactly start invest time inefficient pattern course example python build high load service hint request handling sure message broker zeromq rabbitmq good idea read add request lag advice great ps current pattern stick api gateway pattern good direction start,-2,138,0,0.0,1,2019-01-21T16:13:31,0.0
56259621,1670437.0,<e-commerce><microservices>,good practice pattern implement ecommerce site microservice,understand experience good pattern implement commerce site microservice,-2,20,0,0.0,1,2019-05-22T14:53:01,0.0
50278841,3082046.0,<java><spring><spring-integration><visualization><microservices>,spring integration microservice visualization tool,application base microservice communicate queue topic microservice build spring integration xml configuration tool framework automatically generate diagram application ideally spring integration detail microservice well connection queue topic microservice,-2,645,0,0.0,1,2018-05-10T17:58:09,0.0
50334652,6825613.0,<microservices><atg>,create microservice atg,requirement expectation create microservice exist ecommerce platform current architecture atg version rest api host fact atg monolithic ecommerce framework create microservice atg independent service deploy test environment technical feasibility create microservice atg ecommerce platform,-2,120,1,0.0,1,2018-05-14T16:05:45,0.0
50281965,5678853.0,<docker><architecture><rabbitmq><microservices><messagebroker>,microservice architecture api gateway talk message broker directly microservice,main concern implement api gateway couple tier internal microservice architecture api gateway communicate directly message broker rabbit mq talk microservice base message architecture guide message broker microservice microservice communication api gateway microservice microservice communication,-2,236,1,0.0,1,2018-05-10T21:45:51,0.0
57374784,10380549.0,<spring-boot><docker><microservices><netflix-eureka><spring-cloud-config>,host spring cloud config server micro service docker,host spring cloud config server register eureka client docker container spring boot micro services architecture include component eureka server eureka service registry config server register eureka client business logic app register eureka client spring boot application work fine window local machine host docker container step create image eureka server docker execute container access eureka server url step create image config server eureka client execute container start service face error error config server register eureka server docker container include key config server property blog trail eureka client service url defaultzone trail eureka client service url defaultzone suggestion work debug,-2,71,9,0.0,1,2019-08-06T11:15:24,0.0
51382040,3667792.0,<c#><microservices>,merge user account system,write system synchronyze system work user account synchronization currently face problem user register system register system system send notification rebbitmq system system understand create account update exist account write externalid concrete user good practice,-2,56,2,0.0,1,2018-07-17T13:00:08,0.0
35838016,4511101.0,<microservices>,microservice library good,split business logic micro service micro services library good apache karaf,-1,512,3,0.0,1,2016-03-07T07:08:50,0.0
36026454,3047741.0,<java><sftp><dropwizard><jsch><microservices>,sftp channelsftp execution process upload copy source file,detail api struggle debug channelsftp method hang execution process check output upload code snippet myservice class sftpserver class problem proceed program execution debug execution code channel destinationprocessedfile channelsftp overwrite sftp server copy source destination file path help problem return copy file service,-1,828,5,1.0,1,2016-03-16T03:49:51,0.0
34767582,625348.0,<ruby-on-rails><sinatra><microservices>,microservice beneficial,build app entirely app trend day question beneficial build single app component well approach type app develop,-1,44,0,0.0,1,2016-01-13T13:08:53,0.0
46644740,4861032.0,<java><spring><rest><design-patterns><microservices>,microservice design call record,understand microservice design application microservice serve exact purpose database case list order finance microservice order customer crm microservice call getcustmersimpedetail order row,-1,42,0,1.0,1,2017-10-09T10:54:07,0.0
46724191,4601598.0,<php><symfony><architecture><acl><microservices>,microservice,learn microservice architecture bit unclear wrap piece functionality microservice well keep separate component instal component dependent microservice example symfony security acl component wrap microservice add layer abstraction form rest api top symfony security acl api apart service agent component instal dependent microservice provide access acl microservice point easy install separate database connection payment system case clear wrap microservice huge volume business logic separation basically question criterion consider decide piece software microservice module good idea wrap thin microservice good microservice thin,-1,360,0,0.0,1,2017-10-13T06:59:10,0.0
36920620,3700626.0,<json><rest><http><redis><microservices>,fast mechanism return large datum micro service,micro service micro service return large datum ballpark mb return data large array image small structured datum easily represent json client server machine option return data encode datum bytes array send post body encode image binary multi post json binary image binary imagen write datum server resource memory send url client client fetch datum command write datum redis db send client redis address datum key client fetch datum redi reading fast industry best method send result,-1,409,6,1.0,1,2016-04-28T16:38:11,0.0
41746212,7441877.0,<java><maven><microservices>,refactor java web project package structure conform microservice,mess java web project refactor confirm package structure maven project structure microservice hot design package structure conform microservice effort refactor project microservice second phase silver bullet,-1,122,1,0.0,1,2017-01-19T15:55:27,0.0
53127884,971531.0,<api><authentication><architecture><microservices><api-design>,request feedback multi step api authentication multiple endpoint,build api authenticate follow flow endpoint html frontend js ajax calls checks email password combo checks otp time password user set authentication session cookie assumption call ignore csrf attack xss attack frontend login malicious api work valid credential aware oauth jwt restful api question restful api log flow submit email password credential valid return stand multi factor authentication mfa enable mfa enable login call pass receive well otp otp valid return return valid call pass frontend save password otp data store localstorage indexeddb remove data store question secure flaw logic interesting thorough discussion,-1,39,0,0.0,1,2018-11-03T02:30:53,0.0
53099965,9332647.0,<web-applications><architecture><microservices><api-gateway>,create api gataway switch microservice architecture,team switch monolith web application commerce microservice architecture order identify small business functionality isolate single microservice start work face api gateway isolate web ui internal service structure question point easy implement api gateway good approach build scratch free solution solve problem step allow easely isolate client interface internal architecture general find basic step create sort api gateway allow start isolate business functionality microservice update downvote question feedback improve question clear specific,-1,45,0,0.0,1,2018-11-01T11:03:22,0.0
53100208,4532680.0,<design-patterns><microservices>,microservice archtecture data sharing management,aim develop enterprise application microservice approach press question share distribute datum microservice image customer order microservice customer detail order microservice customer infos stripe require field understand maintain consistency datum microservice event question model refer image practical scalable customer datum span microservice customer microservice datum good approach large dataset share microservice,-1,79,0,0.0,1,2018-11-01T11:17:40,0.0
50484505,9774735.0,<java><spring-mvc><spring-boot><asynchronous><microservices>,asynchronous microservices java,task create simple microservice movie management responsible movie review create function add review review add approve check review movie service call approve review service asynchronously time asynchronous method sure create simple method movie service add review approve algorithm simple check couple parameter code explain create method asynchronous appreciate send article refecator code sure proper exepect guess method movie service class add review method asynchronous approve method implementation correct idea method wait second send addreview complite,-1,301,0,0.0,1,2018-05-23T09:19:56,0.0
55328077,217648.0,<user-interface><microservices><cloudfoundry><pivotal-cloud-foundry>,cloud foundry composite ui,develop application consist microservice consider pivotal cloud foundry manage microservice easy platform deployment health check amoung microservice render html compose service ui client cloud foundry plugin solve ui issue microservice pcf generate composite ui,-1,27,0,0.0,1,2019-03-24T20:08:14,0.0
55453029,11152598.0,<spring-batch><microservices><spring-cloud-dataflow><spring-cloud-task>,orchestration batch job microservice architecture scdf,microservice embed batch job night outsource batch spring cloud dataflow question connect scdf actual microservice local deployment alternative scheduler scdf local deployment,-1,275,2,1.0,1,2019-04-01T10:31:13,0.0
49450592,6629704.0,<java><c#><rabbitmq><message-queue><microservices>,rabbitmq handle asynchronous message consume microservice,question search good approach solve problem currently work replace software monolith microservice architecture message queue communication microservice microservice mail service react receive message microservice message order provide info email content recipient second message provide link attachment email include mail service wait message receive currently plan store message database table message check second info exist email send feeling rabbitmq offer approach development avoid race condition message approach solve,-1,181,1,0.0,1,2018-03-23T13:18:39,0.0
43492974,4207462.0,<nginx><docker><docker-compose><microservices><jwilder-nginx-proxy>,multiple docker service listen host port,nginx sure normal behavior lib explain accomplish additional service service simple node js image api endpoint generate config file command visit localhost browser,-1,1002,0,0.0,1,2017-04-19T10:23:58,0.0
52208226,10302871.0,<java><amazon-web-services><spring-boot><aws-lambda><microservices>,aw lambda expose spring boot api,develop api spring boot enable aw lambda serverless expose api single lambda,-1,323,0,0.0,1,2018-09-06T16:08:34,0.0
44161386,103264.0,<c#><docker><architecture><microservices><software-design>,microservice sure service update micro service affect,example online checkout user add item shopping cart click checkout pay order credit card order create ordermicroservice order update complete status ordermicroservice payment process credit card log paymentmicroservice invoice create email user invoicemicroservice reason invoice microservice fail database storage full email fail send payment fail order mark complete roll database sure entire workflow execute correctly,-1,122,0,0.0,1,2017-05-24T14:29:45,0.0
51012725,4518540.0,<java><spring><spring-boot><microservices><spring-webflux>,merge spring boot micro services response wrapper class,spring boot microservice explore webflux framework merge response microservice wrapper class response proper json scenario detail micro service controller micro service return flux micro service controller second service return mono correct response create microservice combine result microservice wrapper class parent class entity product person class call mention micro service webclient concatinate response flux concat personresp productresp personresp type mono productresp type flux response microservice text json element send stream combine response wrapper class block method call service update currently call product microservice person service concatenate flux concat advance,-1,769,0,0.0,1,2018-06-24T18:18:22,0.0
56339371,10763994.0,<microservices>,learning train microservice,good learning pay training site good understanding microservice include ci cd deploy kubernates docker circuit breaker auto scale deploy cloud provider,-1,41,2,0.0,1,2019-05-28T09:45:47,0.0
56324466,8116599.0,<linux><docker><kubernetes><microservices><kubectl>,kubectl apply unable recognize service deployment match kind service version,kubernete ovh problem reinstall build server issue setup apply file horrable error error previous answe work correct wrong help instal kubectl config file execute command pod deploy yml file,-1,590,2,0.0,1,2019-05-27T10:41:00,0.0
39056199,1455043.0,<performance><service><microservices>,consideration development time choose server language,well understanding server language framework potential advantage disadvantage microservice environment development time personal project learn tool problem development time require build service elixir time reason twofold concurrency imply user hit service fail microservice process overhead hit database return json gain hit database fast language differentiable slow language database question determine speed data return server language database implementation write low language true elixir postgresql noticably slow postgresql ruby postgresql bottleneck postgresql language request assume true stand reason elixir time service future proofed traffic spike generally speed execution database retrieval rest api time service require processor speed image recognition service implement python library implement image recognition tensor flow correct specific language microservice development time consider,-1,37,1,0.0,1,2016-08-20T16:08:47,0.0
44521929,6062516.0,<aws-lambda><microservices>,setup amazon lambda micro service node js,forward work amazon lambda node js call server well host code traditional hosting server open suggestion advance,-1,69,0,0.0,1,2017-06-13T12:44:32,0.0
46321751,0.0,<javascript><rest><microservices><loopbackjs><tyk>,set access control microservice,loopback framework create service api gateway tyk manage set access control user access datum belong,-1,40,0,0.0,1,2017-09-20T12:11:05,0.0
46334096,936305.0,<microservices>,good practice implement api status endpoint,api api talk database approach build status endpoint consumer require access api perform business access api api status endpoint point check connectivity database fail return unhealthy healthy case api consumer access status endpoint consume case consume api access status point check health status case consumer access endpoint status api base database api api database status unhealthy api database api api healthy consumer individual status status api require single endpoint api internal status endpoint return healthy irrespective status database rely add status endpoint database check connectivity return healthy connect unhealthy good approach appreciate input,-1,106,0,0.0,1,2017-09-21T01:42:17,0.0
46377039,1553519.0,<asp.net><docker><microservices>,understand docker micro service,forgive newbie currently idea start experience hear work work help build host,-1,29,2,0.0,1,2017-09-23T07:11:42,0.0
46321680,4137300.0,<java><spring-boot><intellij-idea><microservices>,correctly project structure intellij idea spring boot microservice,work monolithic architecture experience microservice create project module microservice auth message intellij idea project explain good practice microservice project structure ide maven well add intellij idea project module,-1,997,2,0.0,1,2017-09-20T12:08:32,0.0
53897911,2929562.0,<spring><microservices><spring-cloud><netflix-eureka>,java lang illegalargumentexception invalid character find method http method token microservice,develop code enable secure communication client server code reference example create follow command detail follow detail launch error edit edit change error,-1,476,0,2.0,1,2018-12-22T17:33:31,0.0
48019661,1098606.0,<sql><amazon-web-services><docker><microservices>,avoid race condition update sql record insert update microservice container,work microservice architecture consul service discovery ecs maintain docker container develop micro service read record aws sqs validation insert sql problem scalability suppose launch container update record sql manage isolation avoid race condition solution sure token elasticache aws service appreciate share proven solution work kind case,-1,372,2,1.0,1,2017-12-29T08:26:53,0.0
57073353,11791127.0,<c#><asp.net><.net-core><rabbitmq><microservices>,internal server error publishasync rabbitmq,build message broker rabbitmq api gateway publish command message broker keep status code post method log rabbitmq server authenticate api microservice suppose command send attach image logs rabbitmq log program ps kind log post method postman send post request controller receive command base debug find send status code call send command message broker exception post command request expect code send accept code activity micro service base command send send create activity command activity microservice receive command create activity time work thing appreciate kind suggestion feedback,-1,62,0,0.0,1,2019-07-17T10:03:57,0.0
57055496,7290390.0,<c#><asp.net-core><.net-core><microservices><azure-service-fabric>,instance scope micro service api gateway,change scope service instance scope singleton transient create instance request service url compile time error work code service url singleton scope service url add scope transient service url singleton,-1,40,1,0.0,1,2019-07-16T10:45:57,0.0
45771097,7738040.0,<java><spring-boot><architecture><microservices>,microservice architectural design,read tutorial code microservice java microservice independent language confused design microservice example sale application follow resource product customer order create project resource product service customer service order service spring boot respective port number domain model class customer product order create project import three project enlighten add relevant topic,-1,93,0,0.0,1,2017-08-19T11:41:09,0.0
45682321,3457177.0,<architecture><microservices>,microservice architecture encourage copy paste,work middle size organisation year start refactor solution create microservice backend choose front node js imagine html form user datum front validation call three endpoint three microservice validate front datum validate three micro service separately rule copy paste lot example propose create validator service perform validation place answer microservice architecture create strong dependency question strong dependency bad stupid copy paste create unit test copy paste code copy paste change strong dependency bad example,-1,288,1,0.0,1,2017-08-14T20:10:35,0.0
45592666,8269045.0,<azure><deployment><virtual-machine><microservices><azure-application-gateway>,establish communication azure application gateway linux vm azure cloud,dear azure application gateway implement ssl front linux vm host node js microservice current configuration resource group application gateway linux vm virtual network subnet application gateway subnet application gateway access microservice issue regard establish communication application gateway microservice host linux vm,-1,269,2,0.0,1,2017-08-09T13:51:12,0.0
38855867,1216288.0,<java><amazon-web-services><architecture><microservices>,implement complex microservice,question microservice complex cenario example checkout work product detail update inventory user detail taxis accord user region calculate final price send product follow service productservice inventoryservice userservice taxesservice shippingservice checkoutservice question service checkoutservice logic calculate final price case service control transaction phase commit service database application amazon environment instance rds service,-1,372,0,0.0,1,2016-08-09T16:18:55,0.0
54893519,2746110.0,<java><microservices>,duration return request endpoint call,clear microservice sla second request round­trip return request,-1,14,1,0.0,1,2019-02-26T20:23:14,0.0
55039703,11106032.0,<docker><docker-compose><microservices><moleculer>,statically configure microservice specific machine,create micro service moleculer framework statically configure micro service specific machine,-1,67,7,0.0,1,2019-03-07T08:57:44,0.0
57607226,4384320.0,<c#><.net-core><event-handling><microservices><solace>,net core microservice event broker solace,create net core project multiple microservice implement broker solace communicate microservice reference online implement solace net core sample solution share github online share help,-1,65,0,0.0,1,2019-08-22T10:25:45,0.0
47318596,7949022.0,<scala><microservices><trace><zipkin><spring-cloud-sleuth>,spring sleuth scala,develop event drive microservice java scala spring sleuth zipkin request trace java service spring sleuth scala generate trace span scala send zipkin,-1,127,0,0.0,1,2017-11-15T22:43:04,0.0
47357038,980515.0,<mysql><node.js><database><microservices>,microservice share database,question discuss lot describe situation technique good practice solve shared database microservice architecture event source cqrs complex case explain build rest api nodejs api allow fetch request datum store mysql database import lot datum database create time table solution add endpoint post request exist microservice create table add datum create nodejs microservice import service import feature cpu time consuming nodejs single thread don user wait fetch datum import problem whit solution share database microservice typical approach event source cqrs good solution complex architecture project address data consistency problem solution create common lib access db lib microservice import microservice access database directly api rest service post datum ready import good solution address problem,-1,352,1,0.0,1,2017-11-17T18:27:35,0.0
49026008,8231671.0,<java><spring><microservices><spring-cloud><netflix-eureka>,eureka registry service service,micro service eureka service discovery split micro service code create separate jar registry service eureka address service,-1,157,1,0.0,1,2018-02-28T09:25:17,0.0
49004413,6224798.0,<twitter><streaming><microservices>,create microservice replicate load datum increase,iam work project big datum iam tweet twitter analyse tweet prediction follow tutorial tweet iam plan build microservice replicate increase number topic tweet code write gather tweet microservice keyword create instance code keyword gather tweet keyword instance create helpful inform tool application,-1,33,2,1.0,1,2018-02-27T08:40:32,0.0
43057349,4624968.0,<windows><service><microservices>,windows service appropriate microservice,windows service appropriate microservice hear allot asp net web api microservice write service listen queue windows service,-1,527,1,0.0,1,2017-03-27T22:14:08,0.0
59046301,2826532.0,<events><rabbitmq><domain-driven-design><microservices><bounded-contexts>,separate messaging system inside bound context,good practice separate messaging system internal domain event inside bound context well reuse common listen bound contexts check image understand question well option common rabbitmq contexts option separate rabbitmq bc,-1,25,0,0.0,1,2019-11-26T08:06:04,0.0
58972405,8220498.0,<php><rest><microservices><slim>,multiple php microservice talk,multiple rest api create slim api totally independent responsibility domain app build kind microservice approach api talk good class curl implement crud operation service library achieve edit currently read datum service achieve easily add database connection database separate create model create relation disrupt microservice approach achieve service note aware good thing add layer graphql currently require lot refactore,-1,34,2,0.0,1,2019-11-21T10:14:33,0.0
49922136,2366166.0,<.net><.net-core><nuget><microservices><nuget-package>,nuget package restore error,create rest client application push nuget version micro service update rest client application version update micro service nuget package restore late version restclient application dll project json file update late version build application error namespace find restclient check project json update version note net core reference late restclient dll microservice work work delete project json lock file restore luck,-1,57,6,0.0,1,2018-04-19T13:17:32,0.0
37405221,6339234.0,<spring-boot><microservices>,implement microservice spring boot rest service,project de service snmp diameterservice cli service create microservice arhitecture spring boot de snmp de de register eureka registry access service rest implementaion apart rest,-1,162,2,0.0,1,2016-05-24T05:39:59,0.0
51259786,2713255.0,<java><protocol-buffers><microservices><proto3>,send protobuf java file jsonformat string,background system client hit api resource api call microservice require datum job api finally send json string construct datum microservice client client legacy system expect application json api microservice talk application protobuf http question sense convert proto java file string microservice send api defeat purpose proto send proto java file wire string convert proto java file leverage speed protobuf,-1,125,0,0.0,1,2018-07-10T07:48:00,0.0
51220369,5646111.0,<c#><asp.net><.net><microservices>,standard develop microservice,microservice find version microservice internet talk microservice net currently error microsoft owin assembly load file assembly microsoft owin host version culture neutral publickeytoken bf ad dependency locate assembly manif definition match assembly reference exception hresult second talk abt code publish message original create microservice grasp concept,-1,190,2,0.0,1,2018-07-07T05:55:20,0.0
58092599,2652379.0,<spring-boot><microservices>,core project share common class property microservice good practice,simple java project utility class configuration directly import microservice spring boot case setting project structure microservice suppose independent project potential problem future example datasource property project microservice require datasource override property property file profile setting unnecessary complicate common class change core project share common class property microservice good practice,-1,26,0,0.0,1,2019-09-25T06:48:24,0.0
58067528,6017500.0,<.net-core><microservices><asp.net-core-webapi>,dotnet microservice http localhost api throw site reach localhost refuse connect,throw error localhost find web find web address search google localhost http error project create,-1,49,2,0.0,1,2019-09-23T17:36:15,0.0
58131422,11044391.0,<kubernetes><microservices><kubernetes-pod>,attach network interface single pod kubernetes,ethernet interface application pod achieve kubernetes,-1,71,2,0.0,1,2019-09-27T09:12:47,0.0
58012162,9139637.0,<docker><microservices><virtualization><docker-container>,install node js python docker container file os instal python node js,create docker file image file web application create basically web application write node js vue js order create docker container application documentation vue js create docker file step work file clear understanding link package node python instal os container container pick npm scripts execute python script dependent os software package well help understanding,-1,37,3,1.0,1,2019-09-19T13:27:35,0.0
41171413,1387080.0,<docker><docker-compose><microservices>,docker docker docker compose block port reason,set application deployment base docker image gitlab ci test service build service dockerize image create docker container integration test start docker compose start service special port integration test prod image image service issue start docker container integration test setup gitlab ci task task docker base runner mount host docker socket docker docker gradle docker image start gitlab runner docker instal image start docker compose microservice listen port docker compose file port map integration test connect port work attach image docker compose execute integration test manually call message connect wait response test connect service log message connection execute command host shell work public ip container connect port port service break connect docker docker instance docker compose work docker compose setup special default network weird set network host work experience docker compose setup work flawless docker mac server debian solution shell runner avoid docker docker issue work well docker docker combine docker compose ugly bug write sit subway hope describe issue sufficient talk experience sourcecode find bad configuration work docker docker mac,-1,163,0,0.0,1,2016-12-15T18:55:41,0.0
51734002,4530113.0,<spring-boot><microservices><keycloak>,keycloak spring boot microservice,java micro service deploy open shift protect api gateway application keycloak authentication authorization stream service log user perform action api gateway application property set zuul sensitiveheader empty zuul sensitiveheader bearer token downstream application principal user token downstream application keycloak dependency gradle add dependency reconfigure realm property add filter api gateway separately set user header override public void dofilter servletrequ request servletresponse response filterchain chain throw ioexception servletexception header downstream microservice null,-1,469,2,1.0,1,2018-08-07T19:21:17,0.0
58287470,6329390.0,<sql-server><design-patterns><domain-driven-design><microservices><ef-core-2.0>,list aggregate inside aggregate,model student attendance functionality ddd aggregate student class list attendance record ef core load student attendance associate student day attendance record register student attendance record update multiple time day create public method student class call createorupdateattendance attendancedetail attendance internally check attendance record create attendance instance update attendance record provide attendance detail add update list attendance associate student time attendance update create student student entity query data base attendance record student query base receive input check provide valid problem day attendance record associate student unnecessary pulling attendance record associate student lead poor query performance student proper root ef core support filter child object question deal case child entity update inside aggregate single entity list entity inside aggregate case treat attendance aggregate query attendance record independent student record call database check student load attendance fetch attendance record rethink design guidance helpful,-1,50,0,0.0,1,2019-10-08T13:35:08,0.0
49615519,5457533.0,<java><microservices><vert.x>,good communicate microservice vertx web client middleware,vert microservice doubt good communicate miscroservice vert middleware web client vert allow,-1,786,0,0.0,1,2018-04-02T17:08:45,0.0
58900860,12386679.0,<domain-driven-design><microservices><bounded-contexts>,identify bound contexts meal planning app,design meal planner app typical cookbook recipe recipe add cookbook user list ingredient thi amount serving amount calorie amount calculate base ingredient ingredient add shopping list recipe add meal plan recipe search filter cuisine type meal planner modifiable list recipe weekday ingredient catalog ingredient search filter ingredient calorie calculator measurement gram spoon flour shopping list list ingredient add recipe manuanly user remove quantity modify architecture microservice base app read book build microservice domain drive design bunch article tutorial figure slice domain identify bounded contexts microservice mind division point cookbook planner ingredient catalog shopping list sure good start model design app newbie advice idea design thing,-1,43,0,0.0,1,2019-11-17T13:21:47,0.0
58748141,2979350.0,<oauth-2.0><microservices>,difference resource client oauth,develop authentication authorization system node js microservice base application read article documentation oauth standard clarification case basically oauth actor resource owner user client app web application oauth grant flow authorization code implicit password authorization server resource server service access database store client web application client client secret suppose microservice access datum microservice espose rest api interaction user background case client credential flow follow oauth rule resource server time client app well register client db table collection client secret etcetera mistake,-1,24,1,0.0,1,2019-11-07T11:48:45,0.0
58826958,6443043.0,<rest><architecture><microservices>,manage ui requirement microservice architecture,client application build ui target sale channel capture order ultimately process factory decide offer single order microservice client application business rule execution datum storage microservice trigger backoffice process client profile update order analysis document storage electronic vault invoicing communication challenge face client application develop team external backoffice tema team responsible develop client application offer differt ux user allow save order incomplete state wil allow capture datum specific worflow text field listboxe diversity behavior client application issue microservice logic complex support ui requirement everytime change client application modify microservice case strong couple question good advice manage issue application capture data persist database call microservice order complete compliant api contract keep idea single order microservice force client application capture datum option reduce duplication datum business rule ecosystem time order microservice mess help,-1,26,3,0.0,1,2019-11-12T21:28:38,0.0
46936582,5707573.0,<spring-boot><microservices><netflix-eureka><spring-cloud-netflix>,microservice app well cluster monolithic app cluster load balancing,micro service app well cluster monolithic app cluster load balancer micro service easy develop help continuous delivery well,-1,115,0,0.0,1,2017-10-25T15:36:36,0.0
50736767,3113954.0,<amazon-web-services><docker><microservices>,micro service docker aw,deploy spring boot base micro service docker aws completely confused start link internet good start link provide good practice developer,-1,33,0,0.0,1,2018-06-07T08:44:04,0.0
50893043,4247860.0,<angular><spring-boot><microservices><spring-cloud><angular-universal>,bundle ui microservice,microservice spring cloud work expect big giant ui angular app consume service read well approach bundle ui service avoid dependency sound good pointer ui composition pattern connect help couple service ui system ship deploy worth point sample example combine html response service client side,-1,158,0,0.0,1,2018-06-17T01:44:21,0.0
50801690,9926077.0,<java><database><hibernate><microservices>,work microservice hibernate script,good approach database creation relationship management work microservice hibernate script feel responsibility microservice create database,-1,116,3,0.0,1,2018-06-11T15:52:24,0.0
50891382,1707312.0,<go><microservices><go-gin><go-toolchain>,unit test cover locally import package,golang understand scenario work structure gopath set user xyz project main file import calculator local package coverage main package calculator import main write test inside calculator trick coverage locally import package main big context reason micro service write gin framework spin service http call coverage component test easily spin write main test file start service coverage import package,-1,106,4,0.0,1,2018-06-16T20:08:02,0.0
39683166,6876610.0,<python><docker><containers><mean-stack><microservices>,stack python script backend python script container,process write web app full stack work front problem incorporate thing example python script algorithmic web app necessity specific library python script inside docker container optimal connect python code,-1,688,1,0.0,1,2016-09-25T03:41:57,0.0
37738759,522757.0,<python><scrapy><python-requests><microservices><grequests>,scrapy throttling request schedule microservice,currently python request download json bottleneck rate limiting server scrape lack asynchronous call schedule scrapy good solution hear feature combat problem associate scrape thing spidere parse orm doc unclear seperate component microservice scrapy flask scrapy django grequest help async route rate limiting retry fail request point direction,-1,153,0,0.0,1,2016-06-10T01:52:04,0.0
37944398,3802902.0,<java><caching><microservices><google-guava-cache>,pass pass parameter key google guava cache,create cache google guava cache implementation channelservice getdistributionchannelbyid method paas channelid apikey currently work fine apikey constant apikey modify contant timestamp example problem thing create key object actual key well apikey pass key channelservicecache kill purpose cache kill consider key timestamp apikey edit thing service output channelid api key authentication logging monitor request count guess sense serve request channelid cache apikey pass actual service actual logging monitoring place implement functionality kill purpose google guava,-1,465,2,0.0,1,2016-06-21T12:25:32,0.0
53771174,5568009.0,<java><python><web-services><web-applications><microservices>,python microservice java application,analyse tweet example count number tweet write hour tweepy library outcome java app write python microservice conduct analysis print result analysis java code simply system print book article video blog post recommendation teach python service computer call git integrate java call java environment topic second address issue step step walkthrough integration python microservice java app,-1,557,0,0.0,1,2018-12-13T22:48:50,0.0
53764328,10785759.0,<node.js><angular><spring-boot><rabbitmq><microservices>,microservice spring boot message queue node js angular,hey guy complex exercise hope point direction point relevant guide start awesome work angular node spring api extent help appreciate,-1,219,0,0.0,1,2018-12-13T14:41:35,0.0
56788855,6128717.0,<microservices>,micro service communication,javaee micro service maven technique architecture write service figure service communicate method clear pass simple string microservice microservice archive,-1,50,4,0.0,1,2019-06-27T10:16:31,0.0
55758691,8699578.0,<docker><kubernetes><containers><microservices>,connect minikube kubernete node flask application common database mysql docker container,moment docker container flask application container mysql database start mysql database container db start flask application follow command app docker image deploy application container kubernetes connect single database container db flag achieve kubernetes,-1,24,0,0.0,1,2019-04-19T08:12:29,0.0
55707715,9434021.0,<java><kubernetes><microservices><istio><envoyproxy>,envoy istio fit microservice application,understand full picture microservice architecture work java work spring boot application understanding spring good integration netflix module service discovery zuul api gateway hystrix module production application deploy container cloud provider kubernete orchestrated envoy istio resilience load balance task don understand istio envoy fit netflix oss module,-1,61,1,0.0,1,2019-04-16T12:03:31,0.0
48536106,9292879.0,<amazon-web-services><spring-boot><microservices>,configure microservice springboot aw help start,beginner create micro service springboot aw good start,-1,44,0,0.0,1,2018-01-31T06:48:44,0.0
58631091,7132744.0,<microservices><draw.io>,priori graphic tool build microservice,spend lot time search tool draw priori diagram microservice architecture create layer openapi specification infrastructure extenden directly throw json yaml original graphic output update consequently unable find tool help wonder mind tool othervise draw io advance,-1,48,0,0.0,1,2019-10-30T17:47:17,0.0
58643189,10882769.0,<node.js><microservices><moleculer>,access post parameter bodyparser moleculer js,dig moleculer js thing find difficult understand parameter inside action service code user service post parameter,-1,55,0,0.0,1,2019-10-31T12:17:06,0.0
45424413,6256287.0,<node.js><postgresql><orm><microservices><database-performance>,good option query postgre node js,scalable micro service user node js postgre good query db orm postgre store function,-1,1080,0,0.0,1,2017-07-31T20:04:28,0.0
45546510,5479655.0,<java><rest><web-services><amazon-web-services><microservices>,interact microservice cloud,day communicate microservice service invoke url correct parameter deploy service aw amazon service ip address assign service instance upload deploy service service service communicate service service exact ip service declare config file undertake aw amazon task second question authorization service service create token request library refer implement lot question hopefully help solve problem easly good practical example share,-1,32,2,0.0,1,2017-08-07T12:05:57,0.0
52843666,3650032.0,<.net><architecture><event-handling><rabbitmq><microservices>,microservice container scale event bus duplicate message,start move micro service architecture cookbook awesome book question instance container order micro service instance container payment api user click order send message orderevent order micro service handle message instance micro service handle message rabbit bus question wrong rabbit protect problem write complex logic code protect inside handle micro service magic setting inside bus question duplicate find internet english grammar work problem,-1,50,0,0.0,1,2018-10-16T20:34:02,0.0
52809823,4196726.0,<python><structure><microservices>,extract utility library python microservice applications,tl dr advice resource extract code reusable well structured maintainable library work python application microservice style architecture develop deploy bunch small application solve specific issue interact application external service start move microservice architecture bit code monolithic project add microservice obvious extract common code utility base class library avoid reimplementing copy pasting code maintain separately realize trivial complicated pretty spend time overthinke advice pointer resource good practice relate situation write well structured python library package distribute library share code microservice architecture avoid mistake problematic situation concrete problem challenge face best group separate code version control repository package number repository explode pretty,-1,54,4,0.0,1,2018-10-15T04:35:33,0.0
52814649,2674303.0,<java><database><spring-boot><microservices><database-table>,allowable table microservice,microservice service service database today find repository table service remember read design mistake reason google search successful explain problem mistake table microservice,-1,243,6,0.0,1,2018-10-15T10:27:14,0.0
47767993,1967868.0,<ruby-on-rails><go><microservices>,golang microservice communication exist app,wonder scale rail app golang today big application write ror lot processing computation ruby turn slow case wonder application write golang sake well performance hear good advice practice start split good regard,-1,214,0,1.0,1,2017-12-12T08:16:08,0.0
54055472,3620694.0,<java><spring-boot><soap><microservices><netflix-eureka>,soap web service communicate eureka direct,work poc manager create microservice springboot mvc soap simple spring boot eureka tutorial tutorial develop service completely design rest architecture read article tutorial help lot understand requirement create type application soap web service help create soap web service mvc simple spring boot application eureka service register eureka service eureka console communicate soap client perfectly application work perfectly demo manager completely satisfied google explore microservice architecture understand problem service design soap find relevant article tutorial help article rest design explore article help lot provide help link code help requirement application soap service communicate eureka,-1,197,0,0.0,1,2019-01-05T19:28:05,0.0
54079092,2757401.0,<caching><bigdata><microservices><batch-processing><in-memory>,kind big datum framework achieve datum transform millisecond,application postgre database table record table column app query datum table transform datum transformation currently scala script datum serve fronend microservice architecture microservice query transform datum time consume second solution big data framework reduce time millisecond communicate microservice database,-1,25,1,0.0,1,2019-01-07T17:30:37,0.0
54169316,8217808.0,<web-services><service><architecture><microservices>,micro service practice recommendation,good idea separate implementation http verb micro service example book micro service post book micro service appear overkill book api typical enterprise api resource verb lot hello work api,-1,31,1,0.0,1,2019-01-13T13:26:40,0.0
57278100,8340633.0,<java><microservices>,access micro service java application,access microservice java result find response thing work fine swagger ui appache httpclient microservice simple spring controller send file ftp accept json object field host user password work fine test swagger ui programmatically java concole application follow code controller code fragment test swagger ui file transfer ftp test java class code piece exception error response help problem,-1,47,2,0.0,1,2019-07-30T18:36:06,0.0
58521942,2323417.0,<microservices>,tool draw hexagon diagram design microservice,plantuml uml tool provide community version find,-1,30,1,0.0,1,2019-10-23T11:34:01,0.0
58526249,3711445.0,<rest><authentication><microservices><oauth2-server>,authentication server microservice service user functionality,authentication server oauth authentication service subscription change retrieve password resource server store retrieve user group manytomany relationship user group seperate second functionality app standalone service work resource server keep authentication authorization server horizontally scale service separately,-1,45,2,1.0,1,2019-10-23T15:23:17,0.0
58488616,15173.0,<apache><docker><microservices>,apache web server microservice docker,spring boot microservice docker apache web server docker static stuff microservice consume web browser problem reference microservice html javascript microservice port host browser complain link google problem point netflix eureka apache camel sure solution,-1,45,3,0.0,1,2019-10-21T14:36:40,0.0
54441237,10025667.0,<azure><.net-core><azure-devops><microservices>,set ci cd pipeline azure devop calculate estimate cost order update client,work software project online job portal naukri system break follow software module backend restful web api solution develop microservice base architecture asp net core ef core code ms sql server backend roughly consist microservice increase future ii front admin portal angular web application content management system portal administrative task perform admin iii front user portal angular web application employer job seeker login post search apply job decide azure devop tool project management ci cd azure cloud host service fairly devop ci cd concept client approximate cost incur host project azure assist understand setup ci cd pipeline microservice base project ii calculate approximate cost host project azure iii good option host large distributed application azure help greatly appreciate,-1,80,0,0.0,1,2019-01-30T13:01:11,0.0
45349101,7346240.0,<c#><azure><data-structures><messaging><microservices>,microservice messaging choice,microservice good handle communication solution opinion todo microservice host azure atm call rest service service call service facade api external app servicebus eventhubs rest wcf sql rabbitmq idea fast messaging service prefer speed stability high complexityis problem advice advance,-1,271,1,1.0,1,2017-07-27T11:09:41,0.0
45080886,989369.0,<ruby><microservices><acceptance-testing>,reset database program acceptance testing,system multiple ruby application full start system minute decide apps fault tolerant db drop database restore app fail normal pitfall,-1,62,1,0.0,1,2017-07-13T12:40:04,0.0
56194086,9582671.0,<spring-boot><microservices><netflix-eureka><netflix-zuul><spring-cloud-netflix>,microservice kill automatically,eureka server microservice deploy microservice vps server cento deploy microservice screen time microservice start kill automatically check log file error eureka server log file error troubleshoot day success set hikari connection timeout change eureka configuration eureka server log file eureka evictiontimer info abstractinstanceregistry evict task compensationtime ms eureka evictiontimer info abstractinstanceregistry evict task compensationtime ms eureka evictiontimer info abstractinstanceregistry evict task compensationtime ms eureka evictiontimer info abstractinstanceregistry evict task compensationtime ms taskbatchingworker target error replicationtaskprocessor socket read timeout exception retry continue happen eureka node occupy cpu time set property eureka server peer node read timeout ms big sun jersey api client clienthandlerexception java net sockettimeoutexception read time sun jersey client apache apachehttpclient handler handle apachehttpclient handler java jersey apache client jar netflix eureka cluster dynamicgzipcontentencodingfilter handle dynamicgzipcontentencodingfilter java eureka core jar netflix discovery eurekaidentityheaderfilter handle eurekaidentityheaderfilter java eureka client jar sun jersey api client client handle client java jersey client jar sun jersey api client webresource handle webresource java jersey client jar sun jersey api client webresource access webresource java jersey client jar sun jersey api client webresource builder post webresource java jersey client jar netflix eureka transport jerseyreplicationclient submitbatchupdate jerseyreplicationclient java eureka core jar netflix eureka cluster replicationtaskprocessor process replicationtaskprocessor java eureka core jar netflix eureka util batcher taskexecutor batchworkerrunnable taskexecutor java eureka core jar java lang thread thread java java net sockettimeoutexception read time java net socketinputstream socketread native method java net socketinputstream socketread socketinputstream java java net socketinputstream read socketinputstream java java net socketinputstream read socketinputstream java org apache http impl io abstractsessioninputbuffer fillbuffer abstractsessioninputbuffer java httpcore jar org apache http impl io socketinputbuffer fillbuffer socketinputbuffer java httpcore jar org apache http impl io abstractsessioninputbuffer readline abstractsessioninputbuffer java httpcore jar org apache http impl conn defaulthttpresponseparser parsehead defaulthttpresponseparser java httpclient jar org apache http impl conn defaulthttpresponseparser parsehead defaulthttpresponseparser java httpclient jar org apache http impl io abstractmessageparser parse abstractmessageparser java httpcore jar org apache http impl abstracthttpclientconnection receiveresponseheader abstracthttpclientconnection java httpcore jar org apache http impl conn defaultclientconnection receiveresponseheader defaultclientconnection java httpclient jar org apache http impl conn abstractclientconnadapter receiveresponseheader abstractclientconnadapter java httpclient jar org apache http protocol httprequestexecutor doreceiveresponse httprequestexecutor java httpcore jar org apache http protocol httprequestexecutor execute httprequestexecutor java httpcore jar org apache http impl client defaultrequestdirector tryexecute defaultrequestdirector java httpclient jar org apache http impl client defaultrequestdirector execute defaultrequestdirector java httpclient jar org apache http impl client abstracthttpclient doexecute abstracthttpclient java httpclient jar org apache http impl client closeablehttpclient execute closeablehttpclient java httpclient jar org apache http impl client closeablehttpclient execute closeablehttpclient java httpclient jar sun jersey client apache apachehttpclient handler handle apachehttpclient handler java jersey apache client jar common frame omit taskbatchingworker target error replicationtaskprocessor socket read timeout exception retry continue happen eureka node occupy cpu time set property eureka server peer node read timeout ms big sun jersey api client clienthandlerexception java net sockettimeoutexception read time sun jersey client apache apachehttpclient handler handle apachehttpclient handler java jersey apache client jar netflix eureka cluster dynamicgzipcontentencodingfilter handle dynamicgzipcontentencodingfilter java eureka core jar netflix discovery eurekaidentityheaderfilter handle eurekaidentityheaderfilter java eureka client jar sun jersey api client client handle client java jersey client jar sun jersey api client webresource handle webresource java jersey client jar sun jersey api client webresource access webresource java jersey client jar sun jersey api client webresource builder post webresource java jersey client jar netflix eureka transport jerseyreplicationclient submitbatchupdate jerseyreplicationclient java eureka core jar netflix eureka cluster replicationtaskprocessor process replicationtaskprocessor java eureka core jar netflix eureka util batcher taskexecutor batchworkerrunnable taskexecutor java eureka core jar java lang thread thread java java net sockettimeoutexception read time java net socketinputstream socketread native method java net socketinputstream socketread socketinputstream java java net socketinputstream read socketinputstream java java net socketinputstream read socketinputstream java org apache http impl io abstractsessioninputbuffer fillbuffer abstractsessioninputbuffer java httpcore jar org apache http impl io socketinputbuffer fillbuffer socketinputbuffer java httpcore jar org apache http impl io abstractsessioninputbuffer readline abstractsessioninputbuffer java httpcore jar org apache http impl conn defaulthttpresponseparser parsehead defaulthttpresponseparser java httpclient jar org apache http impl conn defaulthttpresponseparser parsehead defaulthttpresponseparser java httpclient jar org apache http impl io abstractmessageparser parse abstractmessageparser java httpcore jar org apache http impl abstracthttpclientconnection receiveresponseheader abstracthttpclientconnection java httpcore jar org apache http impl conn defaultclientconnection receiveresponseheader defaultclientconnection java httpclient jar org apache http impl conn abstractclientconnadapter receiveresponseheader abstractclientconnadapter java httpclient jar org apache http protocol httprequestexecutor doreceiveresponse httprequestexecutor java httpcore jar org apache http protocol httprequestexecutor execute httprequestexecutor java httpcore jar org apache http impl client defaultrequestdirector tryexecute defaultrequestdirector java httpclient jar org apache http impl client defaultrequestdirector execute defaultrequestdirector java httpclient jar org apache http impl client abstracthttpclient doexecute abstracthttpclient java httpclient jar org apache http impl client closeablehttpclient execute closeablehttpclient java httpclient jar org apache http impl client closeablehttpclient execute closeablehttpclient java httpclient jar sun jersey client apache apachehttpclient handler handle apachehttpclient handler java jersey apache client jar common frame omit taskbatchingworker target error replicationtaskprocessor socket read timeout exception retry continue happen eureka node occupy cpu time set property eureka server peer node read timeout ms big sun jersey api client clienthandlerexception java net sockettimeoutexception read time sun jersey client apache apachehttpclient handler handle apachehttpclient handler java jersey apache client jar netflix eureka cluster dynamicgzipcontentencodingfilter handle dynamicgzipcontentencodingfilter java eureka core jar netflix discovery eurekaidentityheaderfilter handle eurekaidentityheaderfilter java eureka client jar sun jersey api client client handle client java jersey client jar sun jersey api client webresource handle webresource java jersey client jar sun jersey api client webresource access webresource java jersey client jar sun jersey api client webresource builder post webresource java jersey client jar netflix eureka transport jerseyreplicationclient submitbatchupdate jerseyreplicationclient java eureka core jar netflix eureka cluster replicationtaskprocessor process replicationtaskprocessor java eureka core jar netflix eureka util batcher taskexecutor batchworkerrunnable taskexecutor java eureka core jar java lang thread thread java java net sockettimeoutexception read time java net socketinputstream socketread native method java net socketinputstream socketread socketinputstream java java net socketinputstream read socketinputstream java java net socketinputstream read socketinputstream java org apache http impl io abstractsessioninputbuffer fillbuffer abstractsessioninputbuffer java httpcore jar org apache http impl io socketinputbuffer fillbuffer socketinputbuffer java httpcore jar org apache http impl io abstractsessioninputbuffer readline abstractsessioninputbuffer java httpcore jar org apache http impl conn defaulthttpresponseparser parsehead defaulthttpresponseparser java httpclient jar org apache http impl conn defaulthttpresponseparser parsehead defaulthttpresponseparser java httpclient jar org apache http impl io abstractmessageparser parse abstractmessageparser java httpcore jar org apache http impl abstracthttpclientconnection receiveresponseheader abstracthttpclientconnection java httpcore jar org apache http impl conn defaultclientconnection receiveresponseheader defaultclientconnection java httpclient jar org apache http impl conn abstractclientconnadapter receiveresponseheader abstractclientconnadapter java httpclient jar org apache http protocol httprequestexecutor doreceiveresponse httprequestexecutor java httpcore jar org apache http protocol httprequestexecutor execute httprequestexecutor java httpcore jar org apache http impl client defaultrequestdirector tryexecute defaultrequestdirector java httpclient jar org apache http impl client defaultrequestdirector execute defaultrequestdirector java httpclient jar org apache http impl client abstracthttpclient doexecute abstracthttpclient java httpclient jar org apache http impl client closeablehttpclient execute closeablehttpclient java httpclient jar org apache http impl client closeablehttpclient execute closeablehttpclient java httpclient jar sun jersey client apache apachehttpclient handler handle apachehttpclient handler java jersey apache client jar common frame omit taskbatchingworker target error replicationtaskprocessor socket read timeout exception retry continue happen eureka node occupy cpu time set property eureka server peer node read timeout ms big sun jersey api client clienthandlerexception java net sockettimeoutexception read time sun jersey client apache apachehttpclient handler handle apachehttpclient handler java jersey apache client jar netflix eureka cluster dynamicgzipcontentencodingfilter handle dynamicgzipcontentencodingfilter java eureka core jar netflix discovery eurekaidentityheaderfilter handle eurekaidentityheaderfilter java eureka client jar sun jersey api client client handle client java jersey client jar sun jersey api client webresource handle webresource java jersey client jar sun jersey api client webresource access webresource java jersey client jar sun jersey api client webresource builder post webresource java jersey client jar netflix eureka transport jerseyreplicationclient submitbatchupdate jerseyreplicationclient java eureka core jar netflix eureka cluster replicationtaskprocessor process replicationtaskprocessor java eureka core jar netflix eureka util batcher taskexecutor batchworkerrunnable taskexecutor java eureka core jar java lang thread thread java java net sockettimeoutexception read time java net socketinputstream socketread native method java net socketinputstream socketread socketinputstream java java net socketinputstream read socketinputstream java java net socketinputstream read socketinputstream java org apache http impl io abstractsessioninputbuffer fillbuffer abstractsessioninputbuffer java httpcore jar org apache http impl io socketinputbuffer fillbuffer socketinputbuffer java httpcore jar,-1,109,4,0.0,1,2019-05-17T22:02:31,0.0
50314370,1606649.0,<rest><soap><microservices><soa>,implement rest api monolithic architecture,understand difference monolithic microservice soa service consumer provider architecture microservice subset soa restfull soap api communicate request rest soap api monolithic architecture client request api search link blog google video youtube clear understanding correct,-1,222,0,0.0,1,2018-05-13T08:50:27,0.0
50289509,7820032.0,<spring-boot><microservices>,microservice response service,microservice service response api help find exact handle,-1,36,2,0.0,1,2018-05-11T09:45:23,0.0
39364901,2248014.0,<ajax><microservices><graphql>,micro services graphql,create graphql server send datum client result react component relay datum source server db change resolve function code datum ajax example,-1,193,0,0.0,1,2016-09-07T08:29:59,0.0
57446455,2925962.0,<kubernetes><microservices>,calculate microservice cluster running cost,question bit topic suppose cluster microservice kind orchestration environment kubernetes calculate cost actual service consume client talk actual instance aws instance service model help calculate cost pricing,-1,39,2,0.0,1,2019-08-10T23:59:58,0.0
57339578,3579212.0,<authentication><flask><microservices><logout><coupling>,decouple auth service service microservice architecture,set microservice responsible authentication service share library share secret key validate incoming request decorator main endpoint authentication service userlogin userlogout thing service protect endpoint decorator simply validate token incoming request thing special course service share secret key logout operation ideally follow store access token database authentication service request block token blacklist question check block token service auth service introduce coupling service decouple service share library secret key edit add detail code snippet question hope better clarify justified,-1,66,4,0.0,1,2019-08-03T15:14:16,0.0
54586641,1347244.0,<java><spring><rest><architecture><microservices>,microservice architecture drill huge monolithic application sql db,huge monolithic backend application build java spring deal checkout functionality commerce retail client application expose multiple rest api deliver functionality sql db store datum type microservice design architecture break granular micro service code maintainability deployment easy good suitable option,-1,53,1,0.0,1,2019-02-08T05:46:12,0.0
54549295,3655413.0,<architecture><signalr><microservices><identityserver4>,microservice architecture good practise st spa frontend api backend service,goal application spa frontend update realtime incorporating microservice architecture spa angular frontend api spa expose api signalr hub backend service azure servicebus operation backend notification front api update case signal message push identityserver st asp net core identity store struggle good safe scalable architecture system unneccesary overhead create big monolith backend service hide rest internet frontend api access frontend api intelligent query specific spa listen event relevant spa notify signalr word dumb gateway feel free school start implementation feel backend sts overkill allow access frontend api insight thusfar,-1,145,3,0.0,1,2019-02-06T08:26:43,0.0
54512528,5358640.0,<spring-boot><foreign-keys><microservices><entity-relationship>,db relationship spring boot micro service,db relationship micro service architecture monolithic architecture create entity relationship easily belong project micro service architecture achieve example userdeatil service productdetail service third service call orderdetail order userid productid associate manage relationship user order order product search net fair idea thread query clear answer,-1,226,3,0.0,1,2019-02-04T08:36:21,0.0
51388064,3711445.0,<angularjs><reactjs><jsf><java-ee><microservices>,jsf application micro service,web application develop jsf primeface project freeze month advanced application inside container glassfish monolith application user interface purpose offer possibility organize url tutorial kind card tag classification folder user tree inside user tree create link file tree copy entire folder reorganize noweday hear lot microservice spring boot angular js react develop jsf great framework refactore application microservice jsf appropriate user tool example jsf facility create view component approach handle full cycle request example simple folder creation form choose parent folder bind component backing bean indirectly db dao app ejb jpa happen invoke application phase refresh form list ajax submit form bind converter component retrieve directly folder object converter dao retrieve object invoke application phase finish job validator control attribute folder declare inside entity class folder user annotation notnull save folder db check user write inside parent folder inside backing bean invoke application phase return face message happen wrong read micro service directly inside form json communication example micro service crud operation folder validator converter service stand service security check kind architecture mysterious ps english mother tongue indulgent,-1,863,0,0.0,1,2018-07-17T18:25:22,0.0
51454764,514329.0,<angular><dependency-injection><microservices><view-injection><micro-frontend>,view injection container angular,angular module backend microservice keep module independent clean component default service component component find container example scenario sale accounting module sale module component selector total price sale module accounting module main module sale accounting call total price tag sale main module find accounting display sale total price tag selector work abstraction oo interface implementation place account module main module ioc search find implementation inject sale return find view view unavailable kind null object pattern help handle authorization return proper view user permit component code sample sample code scenario compile question state orchestrating compose ui inject component sale reference accounting module directly,-1,60,3,1.0,1,2018-07-21T09:38:02,0.0
46240639,8614935.0,<spring-boot><cors><dockerfile><microservices>,cross origin issue access api docker container work fine local,spring boot microservice api dockerfile kindly help,-1,367,0,0.0,1,2017-09-15T13:22:10,0.0
46185971,1358817.0,<caching><microservices><hazelcast>,share cache server,implement share cache application server cache concerned response time response fast question method hazelcast implement single application expose access webservice microservice application,-1,507,2,0.0,1,2017-09-12T22:02:18,0.0
56523399,1197804.0,<microservices>,decide parallel network call event drive datum synche microservice,product image hide option base microservice response microservice call parallel latency issue microservice structure model varient menu power product microservice product image video view news road test power cms microservice product rating review power productreviews microservice notice individual thing network call respective microservice network call parallel microservice power content product question continue multiple parallel call latency issue reduce network call combine request microservice combine multiple service call cms microservice reduce number network call sync data product microservice event drive system optimise approach consider read throughput implement event drive system worth help decide approach case,-1,25,0,0.0,1,2019-06-10T09:05:10,0.0
31801057,4353754.0,<activiti><bpmn><microservices>,microservice business process monitoring,move micro service architecture handle business process management move monolith micro service base application challenge face monitor status user task jeopardy management micro service,0,615,0,0.0,2,2015-08-04T05:04:43,0.0
26800452,2824333.0,<node.js><nginx><routes><reverse-proxy><microservices>,proxy pass nginx find,develop server follow micro service arch node nginx redirect correctly route service pretty well add ghost subdirectory ghost work perfectly route break nginx answer find nginx server congiguration test micro service result close happen help great advance edit notice start micro service root route follow service nginx routing,0,567,1,0.0,2,2014-11-07T11:41:14,0.0
29821391,2509595.0,<java><spring><spring-mvc><spring-boot><microservices>,spring requestmapping redirect path additional info,unusual scenario redirect spring mvc controller attempt solution result redirect loop spring perform redirect repeatedly match browser html redirect url additional info match browser html path avail follow uri template regex pattern request mapping redirect loop idea appreciate spring springboot microservice context update investigation well understanding url fragment hal browser determine path request microservice solution lie redirect spring map controller method request fragment revert default context path application hal browser set default entry point find configure embed tomcat container respond sensible default context path app map path context redirect problem convenience path hal browser correct entry point fragment context path service work fine issue browser entry point button pull hardcode alternative ditch webjar copy static file browser update entry point,0,1061,3,0.0,2,2015-04-23T10:57:01,0.0
32248896,2375666.0,<architecture><soa><microservices>,archive microservice organize business function,create microservice responsible handle archive unarchiving zip tar file microservice focus business function bf business function archive unarchive bf archive separate unarchive bfs zip taring unzip untaring bfs reason prefer option rest,0,154,0,0.0,2,2015-08-27T12:04:40,0.0
29731394,3508607.0,<git><dependencies><microservices>,dependency management micro service architecture,build app base micro services architecture service common code conventional project modules refernece handle git repository,0,885,0,0.0,2,2015-04-19T14:46:29,0.0
33659658,3230694.0,<c#><azure><microservices><azure-service-fabric>,service fabric reliable service proccesse parallel request cpu bind method,azure service fabric reliable actor turn base concurrency describe official documentation reliable service serve multiple request simultaneously reliable service single cpu bound method method async expect service handle multiple request local cluster host core machine call service console app client cpu utilize expect reason handle request simultaneously limit move real cluster machine service host,0,2079,0,0.0,2,2015-11-11T20:56:00,0.0
35600997,3731014.0,<xmpp><ejabberd><microservices><mongoose-im>,ejabberd microservice network,ejabberd mongooseim microservice network xmpp chat protocol rest api network send message incoming xmpp server downstream worker service lead direction thought rabbitmq send incoming message worker,0,373,6,0.0,2,2016-02-24T11:31:54,0.0
33179127,1870400.0,<web-applications><oauth><oauth-2.0><google-oauth><microservices>,common architect verification process access token resource authentication server oauth,common architect verification process access token resource server authentication server oauth build web application break bunch micro service micro service resource server separate authentication server wonder approach well well idea greatly appreciate oauth tool explain user resource owner app landing username password field user enter field ajax call authentication server eventually access token legged oauth flow oauth access token resource server access resource resource server http call authentication server programmatically verify access token authentication server resource server serve request completion resource server totally isolated authentication process resource server verify access token talk share database common industry idea verify access token authentication server resource server,0,126,0,0.0,2,2015-10-16T20:34:28,0.0
33187526,2162144.0,<web-services><architecture><freemarker><dropwizard><microservices>,header footer service dropwizard,hypothetical web application split microservice architecture example client web application serve html service backend handle crud serve json client picture access frontend service native client android ios figure good serve common frontend content header footer css web client good create frontend service web client access pull common change common front reflect application update version recompile redeploy question good dropwizard serve web client service web client serve dropwizard view freemarker template jetty compose dropwizard view request header footer view frontend service wrap view return client completely wrong freemarker support template inheritance header footer live client pull common jar require updating version number recompile,0,231,0,0.0,2,2015-10-17T14:05:51,0.0
33869866,3947391.0,<architecture><domain-driven-design><crm><erp><microservices>,microservice architecture implementation crm hrm domain design problem,build enterprise platform consist crm hrm sale property work microservice architecture real question crm hrm deploy separate independent microservice microservice talk hrm user create company contact employee hrm microservice api save relate hrm inside hrm module hrm database employee detail surname address save crm database call crm microservice apis contact api save info contact type internal employee basically separate datum relate microservice domain design correct process store enter hrm permissione user inside hrm module hrm database care crm crm manage external contact future problem,0,1376,8,0.0,2,2015-11-23T11:22:57,0.0
36422243,6135767.0,<spring-security><spring-boot><spring-security-oauth2><microservices>,spring security oauth authorization server ui,implement spring security oauth authorization server spring boot microservice allow main java application migrate oauth service thing head set authorization server ui oauth authorize ui host main application accept proxie authorization approval ui serve directly authorization server,0,1258,0,0.0,2,2016-04-05T09:25:47,0.0
37150273,1807118.0,<java><spring><microservices><netflix-eureka><rancher>,spring cloud config netmask,deploy cluster microservice multiple amazon instance problem encounter docker container ip address local ip address define docker ip address route rancher bridge ip address define range unique container spring cloud config ip address find config interface subnet ip interface service register discovery service hope help relevant config eureka config spring cloud,0,153,0,0.0,2,2016-05-10T22:57:50,0.0
34402406,639172.0,<java><spring><microservices><netflix-eureka>,spring microservice response info microservice,service accountservice orderservice register eureka third service info eureka service call order call execute internally call account service account info fill order bean respond note database service account store order table well referece order service build time fetch account build order object info monolithic design entity single rdbms easy manage nest object hibernate sure handle microservice idea decouple completely,0,65,0,0.0,2,2015-12-21T18:49:57,0.0
34341322,4049525.0,<spring><spring-boot><spring-cloud><microservices>,spring cloud proxy service service call,currently frontend service call notification service frontend service depend response notification service frontend service call notification wait response notification service frontend service messaging service proxy call service,0,125,0,0.0,2,2015-12-17T18:03:18,0.0
38048683,4723795.0,<redirect><nginx><microservices>,permanent redirect example https example dir,software build microservice philosophy host useless user redirect service host popular solution follow code configuration file fail server server return stacktrace rule infinite rule code return well work solution issue carefully search day solution work,0,32,0,0.0,2,2016-06-27T08:01:15,0.0
37989803,4884486.0,<security><microservices>,security microservice layer,read lot microservice question remain security netflix general backend backend front example mobile device desktop app top plan firewall security layer problem authorize request layer microservice expose microservice internet trust source,0,500,1,0.0,2,2016-06-23T11:04:52,0.0
34502682,1044417.0,<node.js><microservices>,post request node js application,node js service api authenticate endpoint call service postman username password input body parameter call service node js server postman post api authenticate ms nodejs application successful request call body parameter username password reach authentication server api nodejs application empty body server help appreciate,0,695,0,0.0,2,2015-12-29T00:16:16,0.0
54823973,6432698.0,<domain-driven-design><microservices><micro-frontend>,difference beetween micro frontend microservice,micro frontend microservice approach frontend web development main difference beetween micro frontend microservice,0,73,0,1.0,2,2019-02-22T09:32:00,0.0
54804599,2826532.0,<rest><oop><domain-driven-design><microservices>,add datum ui microservice,imagine user registration form fill form age address prefer communication sms email radiobutton microservice usermanagement service communication service user register create aggregate service user usermanagementcontext usercommunicationsetting communication three achieve perform request ui fail datum user raise integration event datum catch communicationcontext fat event integration event domain datum aggreagate message queue contexts adapter info good option split datum save,0,92,0,0.0,2,2019-02-21T10:17:33,0.0
54866049,9736487.0,<spring><microservices><jhipster><netflix-zuul>,zuul route microservice,access microservice endpoint gateway jhipster point legacy system start modify gateway route request start microservice rest controller handle request map api work documentation gateway route url zuul configuration url directly jhipster registry approach problem understand write custom zuul filter zuul route configuration route request service problem access gateway rest route request microservice expect service route microservice restcontroller mapping service info approach highly appreciate edit add path webconfig securityconfiguration,0,148,0,0.0,2,2019-02-25T12:17:58,0.0
54697026,378457.0,<microservices><hexagonal-architecture>,hexagonal architecture microservice fit,wonder hexagonal architecture relate microservice microservice core hexagon microservice hexagonal architecture fractal,0,484,0,0.0,2,2019-02-14T18:37:00,0.0
54704425,1084174.0,<kubernetes><architecture><containers><microservices><serverless-architecture>,kubernetes deploy container serverless,architecte application constraint microservice architecture deploy kubernetes deploy serverless scalability availability main drive application serverless deployment purchase function service faas service provider manage internal deployment wonder kubernete control deployment deploy serverless newbie area guide,0,120,1,0.0,2,2019-02-15T07:24:30,0.0
54863616,889742.0,<java><spring-boot><controller><microservices>,handle custom validation spring controller,suppose validation function find userauthservice function orderservice controller ideally logic appropriate controller kind authentication logic orderservice call userauthservice directly prevent valid return return duplicate crud function service deleteorder updateorder,0,35,2,0.0,2,2019-02-25T09:59:50,0.0
54684600,3072490.0,<javascript><node.js><microservices>,nodejs object pass frontend,develop microservice nodejs request follow json distcd abcd,0,49,2,0.0,2,2019-02-14T06:46:29,0.0
54747132,408348.0,<docker><microservices>,docker container third party integration,newbie docker microservice breakdown current monolithic service small microservice docker container idea logically divide monolith small independent module microservice place separate docker container manage kubernete scale caveat service connect third party rest mission critical voluminous database local db local microservice db bound context figure good approach refactore approach place db connection code separate container call container place third party rest integration logic single container call container question microservice database attach containerize code mention qualified microservice microservice barely integration docker container qualify scenario,0,51,2,0.0,2,2019-02-18T12:17:43,0.0
54794513,10553991.0,<java><spring-boot><jdbc><microservices><c3p0>,build connection pool service service,micro service architecture build spring boot eureka service discovery build connection pool application separate single service return create connection pool individual application object connection object work example directly create datasource write datasource connection pool create micro service example github,0,237,4,0.0,2,2019-02-20T20:12:08,0.0
44893574,8250397.0,<microservices><openid-connect><identityserver4>,identity server multiple st,group api applications group api api group api api group od javascript applications group group api group domain instance identity server identity server domain business requirement user log application group app group app api group hood api api talk microservice achive microservice accessible access token issue identity server group group app achieve identity server useidentityserverbearertokenauthentication argument pass authority,0,560,0,0.0,2,2017-07-03T20:37:45,0.0
44810758,2976358.0,<database><security><passwords><microservices>,store username password separate database,currently early stage engineer system utilise microservice architecture point implement user login system idea service handle insensitive user username email age service handle passwords store encryption verification architecture user datum password store completely seperate database feasible approach improve security approach overkill salt hash password store completely seperately level security drawback approach,0,373,0,0.0,2,2017-06-28T19:12:59,0.0
44803729,476048.0,<spring><microservices><spring-cloud-dataflow><spring-rabbitmq>,scdf microservice source,work solution workflow user hit microservice upload image microservice de duplicate image queue process processing chain live spring cloud dataflow microservice exist extend fancy process initial cut http source sample starter pack create problem source register spring discovery server point gross assumption live dataflow server port xyz create queue endpoint send datum directly queue source receive event forwards scdf queue awesome dataflow connect start queue repackage microservice source major issue spring datum flow automatically start deploy stream server start reasonably sure microservice,0,158,0,0.0,2,2017-06-28T13:21:09,0.0
44781219,6016388.0,<database-design><cassandra><architecture><microservices><nosql>,atomic insert datum micro service architecture nosql database datum consistency micro service architecture,service service receive request client prepare data database service basically coo ordinator insert datum database success post request datum service insert datum db success post request datum service insert datum db fail step revert datum insert cassandra nosql db generic solution case happen suppose insert datum progress time read query database read insert datum millisec fail insert read false datum revert case change db design kind condition happen ii service data insert fail service application server downtime revert,0,194,3,0.0,2,2017-06-27T13:12:50,0.0
44692442,3585050.0,<https><routing><microservices><spring-cloud><netflix-zuul>,https config dosn work zuul routing,router application zuul service backend request client route service zuul work well http configure router service https error raise zuul yml file yml file service concept https zuul work properly secondly problem note eureka server registration,0,3473,4,0.0,2,2017-06-22T07:07:19,0.0
30583466,609440.0,<design-patterns><architecture><distributed><microservices>,good implement fast scalable statistic aggregation architecture,problem display user statistic commerce website sale shopping analytic … fan approach flow system trigger event rabbit worker aggregate statistic user mongodb calculation insert retrieve statistic display trivial lightweight event isn receive worker counter start drift true mysql count counter drift service outage bug multiple worker synchronisation worker update document update atomic mongo number user order message keep grow mysql count join calculate stat fly scalable choose fan approach good solution overcome drift robust scalable,0,180,0,0.0,2,2015-06-01T21:18:27,0.0
31468806,508957.0,<spring><spring-boot><single-sign-on><microservices><identity-management>,identity management multiple spring boot micro service,multiple spring boot application difference purpose example mobile client send gps coordinate spring boot micro service time mobile client access spring boot micro service crud operation face problem authenticate client authentication service identity management server kerberos produce sso token micro service proxy authenticate incoming request delegate relevant micro service search couple hour find solid secure micro service general design architecture correct good approach kind situation implement identity server proxy authentication technology identity mgmt server easily integrate spring design pattern question implement authentication layer service bad wrong stick spring highly appreciate direct correct path,0,1180,1,0.0,2,2015-07-17T05:17:05,0.0
34889229,511837.0,<docker><microservices>,recreate docker image reuse microservice,microservice stay docker container upgrade microservice example configuration change option exist image script container startup update microservice read config share volume update script microservice simply drop exist image container create image container updated configuration code solution robust update procedure single container creation bother creation image bad side lot dangle image imagine happen time user play app example developer play configuration microservice start configure change configuration config file user code,0,127,3,0.0,2,2016-01-20T00:02:48,0.0
42934172,2972221.0,<angularjs><docker><docker-compose><microservices><gateway>,api gateway address order call angular container docker compose,docker compose file container api gateway angularjs application website stack api gateway concern call correct api container compose file call api gateway website angular container good practice address api gateway container order call angular container browser moment work local localhost portofapigateway api work fine connect host work suggestion,0,806,0,0.0,2,2017-03-21T17:24:54,0.0
42958561,6268237.0,<java><android><node.js><microservices>,create nodejs microservice invokable android app,final year project uni decide micro service invoke android app create micro service query api grab datum change existing object store regard datum storage cache data server side feed client side store datum local db read display client app write java micro service write node environment bit reading lot people restful api gateway sort feedback greatly appreciate cheer,0,372,0,0.0,2,2017-03-22T17:19:27,0.0
42928059,744839.0,<spring><performance><rest><microservices>,request second performance limit spring rest backend,develop spring rest backend application tomcat expect active user user create request client android web ios backend request create simple db select calculate limit request second estimate performance limit microservice architecure monolithic,0,6391,0,0.0,2,2017-03-21T13:06:03,0.0
46583498,8034738.0,<asp.net><.net><docker><microservices>,create image push image docker hub,push microservice dockerhub push docker hub message error message full solution file create docker image,0,66,0,0.0,2,2017-10-05T10:31:55,0.0
46623194,3795212.0,<javascript><java><client><load-balancing><microservices>,spring boot microservice java front client,implement shell microservice bese rest api application simply follow guide pivotal spring dicumentation eureka ribbon load balance work discovery server hanful indepedant service register discovery server problem prefer write client side app java angular node js loadbalance connect discovery server java example follow javascript thing eureka client spring boot microservice constrain choice browser client technology advice aproache difficulty find article cover honest,0,372,2,0.0,2,2017-10-07T17:39:25,0.0
46744067,7357839.0,<spring-boot><intellij-idea><microservices>,recommendation microservice code module,microservice learn spring boot intellij ultimate wonder best structure microservice code system build microservice open intellij module spring boot microservice open multiple instance intellij spring boot microservice instance intellij tricky lot microservice intellij multiple spring boot microservice time instance intellij advice work microservice code project appreciate,0,667,2,0.0,2,2017-10-14T11:33:55,0.0
40436389,3498071.0,<jhipster><microservices>,entity jhipster microservice,problem entity microservice microservice team entity team entity microservice import teamrepository java microservice jhipster,0,1016,0,0.0,2,2016-11-05T08:53:23,0.0
36775802,795168.0,<microservices>,share huge datum microservice,design review analysis platform microservice architecture application work product review retrieve ecommerce site site excel file review uploaded system excel analysis agent list review edit delete approve analysis agent export review site automate regexp base check apply review upload edit microservice review responsible review crud operation operation approve reject validation responsible define apply validation rule review export import export service export huge file site site problem point validation service require review site apply validation rule generate error share database schema entities break micro services architecture solution validation service require review site request gateway gateway redirect request review service response drawback approach validation service gateway bring dependency case review site review rest request problem paginated request validation service gateway good practice share huge datum micro service share entity dublicating datum read lot messaging queue case good messaging queue share gigabyte datum edit share entity data store rest api solution assume mongodb share entity object microservice rest interface mongo query datum,0,3955,1,0.0,2,2016-04-21T16:42:08,0.0
36840448,6164690.0,<elasticsearch><solr><architecture><soa><microservices>,good idea write wrapper elastic search solr,migrate solr elastic search decision write wrapper custom query format convert elastic search query future change data store modify api application good decision architecture point view,0,134,0,0.0,2,2016-04-25T12:22:35,0.0
36988921,5962051.0,<events><soa><microservices><event-driven><event-stream>,good event store stream middleware service orient microservice architecture,build microservice architecture good stream event currently service publish event three service react reaction event happen moment rabbitmq service publish three message seperate queue subscribe service listen queue service instance message react approach add subscriber add queue publishing service basically kind middleware event stream multiple service listen event sure instance service react event find appreciate suggestion,0,238,4,0.0,2,2016-05-02T18:14:06,0.0
42237967,2697571.0,<node.js><reactjs><authentication><react-native><microservices>,authenticate service application api microservice,server express saas application application serve company land registering user authentication user password change build exprss authentication user log redirect dashboard application saas app build call api currently service api mobile app develop split service node module saas application handle company registering movement microservice architecture doubt handle user authentication single authentication mechanism allow user saas app serve mobile app user log web saas app api log mobile api mobile approach split server find recommend method solve authentication problem naturally split authentication service microservice interesting advance help,0,105,2,0.0,2,2017-02-14T23:13:50,0.0
42288374,3486720.0,<architecture><microservices>,dozen microservice single machine,core gig server node js microservice base architecture dozen microservice good fit deploy dozen microservice machine people debate rest messaging messaging win scenario appear unnecessary overhead microservice communicate node js jvm base process ideally good performance microservice bind core communicate cache superfast bind microservice process core forever microservice communicate cache,0,873,2,0.0,2,2017-02-17T02:31:45,0.0
41893566,2314721.0,<spring-boot><spring-aop><microservices>,spring aop microservice spring boot,analyze concept project decide architecture discussion query resolve cross cut concern address common concern microservice log transaction mgmt google topic extensively search luck help appreciate,0,976,1,0.0,2,2017-01-27T12:03:15,0.0
39990666,5099041.0,<database><cqrs><microservices><event-sourcing><datomic>,immutable database huge write volume,build application create immutable database datomic huge data volume application write second search find database issue application event sourcing microservice pattern suggestion database,0,164,0,0.0,2,2016-10-12T04:43:48,0.0
39941660,0.0,<spring-boot><microservices><netflix-eureka>,good communication micro service hard code,bunch microservice communicate communication microservice api gateway follow appear hard code approach good likewise method pass application eureka return full uri,0,186,0,2.0,2,2016-10-09T08:43:40,0.0
53171039,8186927.0,<configuration><microservices><spring-cloud><netflix-eureka><netflix-zuul>,load balancer server client solve,notice people question problem spring boot eureka zuul spring cloud version release eureka server application yml eureka server zuul server application yml zuul microservice file management application yml problem couple day help great appreciate,0,2799,0,1.0,2,2018-11-06T11:31:52,0.0
53056976,2695457.0,<java><microservices>,manage session stateless microservice,microservice stateless manage session jsp base project assume break age monolith microservice,0,333,2,1.0,2,2018-10-30T03:30:02,0.0
50627087,1736601.0,<mysql><sql><postgresql><microservices>,user store database duplicate service sql database,user store database build post sql database create table duplicate user sure stay sync database hand post table save space refer fk full stre time recommendation create table pass user query,0,46,5,0.0,2,2018-05-31T14:48:42,0.0
38297333,839733.0,<rest><design-patterns><enterprise><restful-architecture><microservices>,share datum microservices‏,seek answer design question find answer literature matter allow explain case solution opinion subject matter expert case microservice return form content business domain spring cloud netflix gateway service route traffic content service service require datum derive request immutable trivial example locale proprietary solution currently derive share datum gateway service persisting json nosql database unique key add key request header route request share library content service include build time include spring bean read key request header fetch store datum key initialize content service access share datum simply inject mention bean underlie mechanism content service invoke responsible add unique key request header debate debate colleague share datastore purpose appropriate contend bad service leak domain specific datum datum question domain specific wrong share database pass key alternative pass share datum consider redundant thought edit vote close question point reference discuss datum share microservice policing hindrance meaningful discussion question boolean answer require deep thought,0,1041,4,1.0,2,2016-07-10T23:27:59,0.0
38380827,2971116.0,<java><spring><maven><microservices>,microservice maven project structure,work project deploy full spring boot microservice architecture support service load balance service registry edge server centralized monitoring single project share core microservice daos dependency core microservice hope release mb jar spring boot core microservice lightweight mb runtime core microservice reference shared jar classpath set project separate project structure share project maven assembly plugin create big jar copy local repo ms ms pom maven jar plugin create jar dependency share project sure good handle create issue unit test imagine create issue parent pom file nest project inside directory wonder good practice regard keep spring boot project dependency share code centralize externalize maven project frequently roll keep lightweight decoupled bonus question fact jenkin teamcity ci automate testing affect answer share jar filesystem project reference classpath startup pose challenge depend demand flexibly spin instance microservice microservice edit good answer,0,3129,2,0.0,2,2016-07-14T17:43:39,0.0
49486062,148397.0,<java><microservices><distributed><ignite>,apache ignite cumpute service affinity,service compute jub ignite service job data client call compute service proxy service cache data notice service compute job deploy service node cluster compute cach directly call service proxy affinity avoid comupte reason service preduce cache datum avoid transfer large datum node client,0,291,0,0.0,2,2018-03-26T07:30:16,0.0
49482516,4187091.0,<architecture><uml><microservices><tool-uml>,visual uml tool draw micro service connectivity,good represent microservice connection uml diagram open source tool create uml visualize microservice connection,0,1080,2,1.0,2,2018-03-26T00:48:16,0.0
43340819,1278765.0,<javascript><node.js><ajax><reactjs><microservices>,load react component external service inside react app ajax,good practice associate loading insert react component external service exist react application ajax main react app load react component external service ajax feasible work webpack,0,1597,0,2.0,2,2017-04-11T08:39:50,0.0
43502357,1949796.0,<domain-driven-design><nservicebus><soa><microservices>,scale service boundary soa,learner soa service orient architecture question scenario company mycompany sale team technical authority business capability – sale business capability company decide create product mycompany photo mycompany grocery website sale capability order acceptance capability sale team work website website sale capability question sale team create database website endpoint example sale team initially queue mycompany sale endpoint receive createordercommand handle createordercommand create order sale db publish orderacceptedevent support website start support website endpoint sale differentiate weather order mycompany grocery mycompany photo split mycompany sale endpoint sale team aware photo website order grocery website order answer sale team create database mycompany grocery mycompany photo deploy business component bc website sale endpoint mycompany grocery sale endpoint mycompany grocery businesscomponent mycompany photo sale endpoint mycompanyphoto sale bound context business component bcs correct scale sale team support product sale capability long message find shortcut explain,0,86,0,1.0,2,2017-04-19T17:26:52,0.0
43378986,4664543.0,<security><cloud><microservices>,multi tenant microservice security,short implement cloud boss cloud angular base front application include mobile application cloud multi tenant support company monetize investment prefer reliant third party provider platform intend wso product ecosystem cloud find question wso identity server installation premise find micro service base security implement oauth pattern opaque token share front enterprise service bus translate inbound token identity token rbac provide stateless identity cloud unclear secure front application identity store web application prefer email password combination login openldap tend find username password combination technology best suited identity provider email password combination role base access control multitenancy basic understanding help appreciate,0,489,0,0.0,2,2017-04-12T20:23:09,0.0
43460615,7733281.0,<docker><docker-compose><dockerfile><microservices><consul>,execute docker command process start,write dockerfile service cmd point script start process command process start process background command process start work idea achieve example consider start database server script database process start edit specific case rabbitmq server service create user administrator delete default guest user service start container manually log docker container automate append shell script start rabbitmq service work help appreciate regard,0,229,5,0.0,2,2017-04-17T22:25:10,0.0
52198079,7780475.0,<rest><microservices><netflix-feign>,integrate external service microservice architecture,develop bookstore application base microservice architecture spring netflix oss shopping service stuff buy book integrate service service shipping service internal service connect feign client service inventory service external service connect external library problem difficult mock order connect service shopping service good idea service shopping adapter service connect service architecture test shopping service mock adapter service bit awkward solution good architecture connect external internal service,0,369,0,0.0,2,2018-09-06T06:50:23,0.0
52263389,8826568.0,<angularjs><reactjs><microservices><jhipster>,database option remove gateway microservice jhipster,create gateway microservice application database oidc upgrade jhipster version option longer option remove gateway microservice jhipster,0,155,0,0.0,2,2018-09-10T18:18:14,0.0
52231438,4271005.0,<c#><microservices>,deploy net core microservice,net core microservice architecture lot example docker host service absolutely deploy linux java create executable jar create start script linux,0,208,0,0.0,2,2018-09-08T02:24:05,0.0
52098061,6507405.0,<spring-boot><osgi><microservices><sdn><opendaylight>,osgi spring boot microservice detail,odl framework sdn development internally osgi framework karaf apart spring boot spring cloud achieve cloud service framework single unit achieve,0,756,0,0.0,2,2018-08-30T13:14:50,0.0
52125150,4469944.0,<java><microservices><shopping-cart>,item cart,learn microservice design commerce website figure big shopping site care item cart problem example select item amazon single item stock log account place item cart reach payment account site restrict item sure payment payment account progress amazon handle solution mind accept payment account cancel transaction pay good practice result bas customer experience keep item reserve case overbooke forget amazon implement quantity check order service item service rest call stage order check fail lot people order item flash sale share guy work problem solve limitation detail,0,117,1,0.0,2,2018-09-01T05:30:07,0.0
52104915,8042095.0,<amazon-web-services><architecture><aws-lambda><microservices>,governance methodology micro service explosion,microservice trend develop cloud situation decompose monolithic service domain level microservice problem domain handful service amazon cloud individual service realize multiple lambda function function specific kind activity deploy individual pipeline job volume function increase order future comparison monolithic app today group visualize account usage metric cost situation complex xml hell early version spring framework,0,43,2,0.0,2,2018-08-30T20:28:17,0.0
52116018,4796961.0,<spring><spring-boot><microservices>,single consolidated response multiple microservice,multiple microservice process input parallel response microservice consolidate single response bulk volume hazelcast understand good performant approach tool pointer suffice direction rest advance,0,101,7,0.0,2,2018-08-31T12:59:24,0.0
44129347,7527624.0,<cron><scalability><microservices>,microservice job cron task,example microservice send notification email sms push notification user time application lot user microservice doe manage email hour handle situation deploy instance microservice handle microservice process email user receive multiple email,0,2343,0,0.0,2,2017-05-23T08:14:47,0.0
44084744,3475488.0,<architecture><microservices><restful-architecture>,microservice architecture flaw,face performance relate issue microservice architecture microservice user account management api microservice track user activity list activity user login protal sale marketing team individual user activity user info account info base search criterion join table database slow create lot performance issue replicate user table microservice job sure api replicate table user break micro service architecture main fundamental support type filter criterion join table micro service,0,331,3,1.0,2,2017-05-20T10:25:34,0.0
35730116,438604.0,<amazon-ec2><docker><amazon-sqs><microservices>,connect microservice sqs sns,java microservice docker container ec instance notify file drop bucker sns sqs connect bucket connect microserice sns sqs well java microservice notify file drop bucket,0,518,0,0.0,2,2016-03-01T18:03:15,0.0
35772518,4834520.0,<spring-boot><spring-cloud><microservices>,spring cloud config server fault tolerance mode,project requirement instance spring cloud config server instance care config server responsibility,0,898,0,0.0,2,2016-03-03T12:42:50,0.0
50935415,6768051.0,<microservices><message><messagebroker>,microservice messaging pattern,solution base microservice describe literature front service lightweight layer example load balancer implement kind authentication authorization wonder type solution microservice communicate message message broker messaging implement directly level jms implement proper messaging solution message broker,0,59,1,0.0,2,2018-06-19T19:09:46,0.0
51120978,2444661.0,<rest><microservices><synchronous>,rest good fit microservice,explore micorservice architecture book blog people implement microservice rest contradictory microservice suppose decouple service achieve scalability rest communication protocol synchronous,0,280,3,0.0,2,2018-07-01T06:33:36,0.0
56391127,8398143.0,<java><spring-boot><microservices><swagger-ui><netflix-zuul>,increase swagger requesttimeout,help increase timeout swagger request issue restapi swagger roam internet disn find usefull add thing yml conf file write expect find spring boot application swagger order test webservice restcontroller treatement second thing swagger throw timeout error,0,230,0,0.0,2,2019-05-31T08:06:50,0.0
56471547,1168628.0,<javascript><microservices>,api return function,shortfall fetch constructor function api basically calculation base locale calculation microservice return actual constructor function tax calculator call var tax callservice tax locale return tax function pre configure specific locale,0,82,1,0.0,2,2019-06-06T05:49:34,0.0
56370507,9615156.0,<php><laravel><microservices><lumen>,guzzlehttp client throw clientexception network request laravel luman,currently build financial micro service application laravel lumen micro framework work perfectly expect problem network request internal service api call client problem request internal service throw exception clientexception network request internal service postman work fine reason fail work wrong assist appreciate httpclient php apigateway internalservicecontroller php,0,56,5,1.0,2,2019-05-30T01:24:53,0.0
56470938,9515201.0,<docker><logging><docker-compose><microservices><elastic-stack>,save log file linux sever send log elk syslog,docker elk stack log send log microservice syslog logback xml file log file server microservice create log file local computer eclipe ide docker compose file logstash elasticsearch kibana problem docker container previous log big issue problem save log file server send log elk stack permanently save log elk stack add docker compose file elk stack logstash config file logback xml microservice docker compose yml logstash config logback xml wrong help grateful advance,0,77,7,0.0,2,2019-06-06T04:34:41,0.0
44435017,6555593.0,<azure><visual-studio-2015><port><microservices><azure-service-fabric>,microservice listen port azure service fabric,create project microservice listen port separate servicemanif file define endpoint deploy locally remotely work deploy locally follow exception exception throw system reflection targetinvocationexception mscorlib dll,0,303,0,0.0,2,2017-06-08T11:51:04,0.0
44455242,6555593.0,<microservices><azure-service-fabric><stateless><stateful>,weth service stateless stateful azure service fabric,microservice basically read update datum azure storage table read update function implement rest call confused stateless stateful,0,629,0,0.0,2,2017-06-09T10:18:25,0.0
44503321,1897839.0,<kubernetes><microservices><kube-proxy>,access kubernete pod local cluster,set experimental local kubernete cluster master three slave node create deployment custom service listen port goal access exemplary endpoint stable ip hostname deploy deployment pod create fine accessible cluster ip understand solution cloud provider create load balancer service deployment service support local cluster set overkill purpose master node access actual pod question accept answer kubernetes sparse well sure approach conceptually straight forward solution good tutorial typical case lack clear path,0,654,0,0.0,2,2017-06-12T15:33:03,0.0
44502869,6884373.0,<java><url><servlets><microservices><embedded-jetty>,load zip file java servlet expose url,requirement load zip file file system java servlet expose url extract zip file example zip file locate temp example zip content zip file example html dependent file js js construct url server jetty help highly appreciate change server approach achieve solution earlier constraint extract,0,138,5,0.0,2,2017-06-12T15:11:58,0.0
41247817,2042097.0,<microservices><consul>,consul set docker production,poc consul support service discovery multiple microservice version consul client server cluster server set linux vms follow documentation set successful doubt set completely vms add service definition http api service node service correctly register node detail dns query expect result node host service ping service service resolve ping unknown host enter mapping host file ping vm ping vm lan wan default port dns consul dns interface listen docker dns forward consul dns query work docker dnsmasq iptable update clear result pe node configure round robin fashion bear question basic consul relate question extra set,0,731,0,0.0,2,2016-12-20T17:14:24,0.0
47196334,1348107.0,<java><rest><tomcat><servlets><microservices>,resteasy embed tomcat scan controller,resteasy embed tomcat export runnable jar file deploy rest api test springboot write code main entry point register httpservletdispatcher server start rest api access path localhost user hello error log resteasy signal scan component help scan resteasy component register resteasy web xml,0,563,0,0.0,2,2017-11-09T07:35:12,0.0
47143597,3945085.0,<spring><jsp><spring-mvc><spring-boot><microservices>,spring web mvc work spring boot spring cloud,microservice create microservice application spring spring cloud starter eureka server total modules microservicecldm account microservice webclient microservice server find main class application property follow entry accountcontroller class follow accountsummary jsp path maven pom xml follow dependency dependency inspite hit url error,0,341,0,0.0,2,2017-11-06T18:41:47,0.0
47133571,1224482.0,<php><laravel-5><microservices><guzzle><lumen>,guzzle serverexception result internal server error response,implement microservice architecture luman laravel laravel apigetway luman microservice thing guzzlehttp version laravel project hit microservice api internal server error localhost request error,0,2501,0,2.0,2,2017-11-06T09:25:47,0.0
47020319,5560606.0,<domain-driven-design><microservices><cqrs><event-sourcing>,microservice communication eda event sourcing,read microservice event source decouple service concept clear microservice architecture service develop independently account inter service communication dependency example service service communicate send event central bus listen create lot dependency develop service event service generate service add event service change order handle event create dependency nightmare develop service independently secondly request response type scenario handle api gateway process manager level top level request fire bunch cascading interdependent event handle return response caller scenario suit well microservice,0,222,0,1.0,2,2017-10-30T16:45:25,0.0
53929215,6838854.0,<javascript><node.js><microservices>,validate payload microrouter,code create microservice request validate payload body require field help module validate microservice post payload,0,68,0,0.0,2,2018-12-26T08:05:14,0.0
53986495,6175929.0,<apache-kafka><jms><microservices><event-driven>,kafka jms event publishing,scenario set micro service interact service send event message anticipate message day peak message target listener type requirement follow lost message ability dynamically register multiple listener specific type order increase throughput listener guarantee alive message dispatch consider option send message jms main queue listener queue route message specific queue accord message content target service listen specific queue send message kafka topic message type target service subscribe relevant topic consume message con pro jms kafka purpose,0,505,3,1.0,2,2018-12-31T10:43:10,0.0
53474298,5993480.0,<rest><architecture><microservices>,microservice best practise authentication,microservice application application involve authentication service user upload image authenticate service write review authenticate design microservice ensure user authenticate access service api gateway layer authentication api gateway talk service,0,385,0,0.0,2,2018-11-26T03:07:44,0.0
53544108,10723707.0,<database><design-patterns><service><architecture><microservices>,service rely datum service duplicate datum retrieve demand,microservice design question simplification real life problem solve service entity active inactive service job relate service entity entity active accord business rule option service store job job schedule check service api option service store job storage keep notification service argument favor option option argument storage cost datum duplicate job schedule active consistency deal complexity sync datum service example service rely datum imagine complexity service entity active option argument service independent chatty service network transfer cost complex complexity duplicate propagate datum force service share,0,31,1,0.0,2,2018-11-29T17:02:55,0.0
53536330,9585981.0,<authentication><oauth><microservices><vert.x>,well implement authentication microservice architecture vert,idea implement authentication autorization process vert microservice architecture api gateway service standalone user service custom auth provider share datum hazelcast map store user role token break mind,0,166,1,0.0,2,2018-11-29T10:01:03,0.0
53610704,5572863.0,<java><microservices>,executable jar permanently,executable jar command prompt command prompt close execution permanently microservice achieve goal,0,568,2,0.0,2,2018-12-04T10:21:34,0.0
48699765,3113910.0,<angular><web-services><web-applications><frontend><microservices>,ui microservice,fornt web application write jsf richface kind dashboard application move angular spring boot rest api write microservice functionality independent total functionality write rest service build process confuse fornt create separate artifact separate build ui well bundle respective rest api care front microservice,0,4179,0,1.0,2,2018-02-09T06:12:15,0.0
48808722,5047142.0,<java><spring-boot><oauth-2.0><microservices>,oauth spring boot separate resource server protect microservice,project create separate resource server spring boot resource server configure check legged legged access api validate jwt token resource server independent spring boot jar container create microservice spring boot executable jar deploy independently container resource server protect point expose microservice create restcontroller resource server point expose call microservice point request microservice java port resource server port resourceservercontroller java point microservice protect proxy point rest controller resource server sure correct approach approach create jar resource server deploy dependency microservice proxy point rest controller resource server good protect microservice separate resource server,0,766,0,0.0,2,2018-02-15T13:43:10,0.0
36719045,1100135.0,<java><apache-kafka><apache-storm><microservices>,kafka storm topology microservice,benefit storm topology microservice connect kafka directly microservice approach offer well solution tool library ioc container continuous deployment exist tool good practice storm topology plain java static function benefit storm topology microservice,0,958,1,1.0,2,2016-04-19T12:53:41,0.0
36760694,629222.0,<java><spring><spring-mvc><spring-boot><microservices>,work example spring watchservicedirectoryscanner,struggle implement scanner monitor file upload directory directory exist spring boot mvc microservice java prefer spring file integration style aop style register app config struggle figure poll scan directory call message endpoint file detect point direction conceptually find example implementation spring appconfig,0,1680,2,0.0,2,2016-04-21T05:50:13,0.0
42375333,4359284.0,<web-services><architecture><microservices><scalable>,architect authenticate authorise microservice jwt,stateless architecture design user loggedin json web token generate server return user user send request server purpose serve server user authenticate architecture highly scalable horizontally,0,30,0,0.0,2,2017-02-21T18:37:48,0.0
42546246,5565855.0,<docker><kubernetes><microservices>,network isolation application kubernetes docker cluster,build platform base microservice manage user build application base microservice isolation application avoid harm effective network isolation well solution,0,52,0,0.0,2,2017-03-02T03:23:58,0.0
42428045,6116328.0,<spring-cloud><spring-data-rest><microservices><spring-cloud-netflix>,hypermedia response microservice architecture,start journey learn architecture spring cloud netflix project general standpoint understand architecture code app horizon doubt appear minimal stuff big impact big approach architecture app base tutorial assume valid spring problem eureka microservice account consist spring datum rest persistence hateoas top client service consume endpoint resttemplate ribbon load balancer view work user frontend client service spring data rest endpoint microservice db nice endpoint response resttemplate hypermedia directly microservice se drive microservice ignore load balancer kill purpose microservice scale user focus broad microservice supposedly manage load balancer user knowledge api kinda kill structure add link service detect eureka delete current endpoint microservice link work chop hypermedia links approach kind proxy external load balancer dns clear misty summary question medium link edit base advice add zuul solution problem zuul filter app account microservice spring data rest account web service client resttemplate load balancer eureka register enabledzuulproxy inside microservice inside client current config currently enabledzuulproxy client microservice client client code consume sdr work filtering change microservice keep send direct microservice client request client loop error timeout load balancer full circuit break generally netflix zuul exception zuulexception forwarding error edit finally zuul work understand access gateway app forwards request microservice result hypermedia point gateway problem initially architectural turn code problem clear technologie cup tea understand zuul ryan baxter guideline article fundamental redact answer understand,0,338,0,0.0,2,2017-02-23T23:21:50,0.0
42458964,6244459.0,<java><spring><spring-boot><cloud><microservices>,logback setting spring config server,microservice write log graylog server microservice gelflogbackappender setting host post setting service store place spring config server gelf address config server update decide simple example imagine change log level microservice config server thing logback spring xml application yml config server work debug level write manualy logback spring xml level change central config serverer,0,2178,0,0.0,2,2017-02-25T17:03:42,0.0
42400613,7606926.0,<azure><com><microservices><azure-service-fabric>,azure service fabric register component,deploy asp net webapi service azure service fabric service mathematical component bit register regular machine regsvr solution work perfectly local service fabric cluster windows server manage dll component rewrite code question deploy service azure host service fabric,0,283,1,0.0,2,2017-02-22T19:31:20,0.0
42372431,1571996.0,<java-ee><queue><jms><messaging><microservices>,multiple cluster listen jms messaging queue,search jms solution surprisingly find easy answer search wrong thing hopefully community stackoverflow help work pretty basic jms event notification cluster microservice setup simple suppose cluster instance separate ee server instance machine central jms server queue listen microservice instance process request publish message happen cluster instance cluster pick message process cluster matter instance pick long process time cluster common default setup find queue work publish pick process cluster topic instance cluster message thought advance,0,390,1,0.0,2,2017-02-21T16:11:43,0.0
47934052,6203524.0,<java><cloud><microservices><spring-cloud-sleuth><google-cloud-stackdriver>,continue trace downstream microservice,add trace micro service view google stackdriver ui java springboot app deploy kubernetes container microservice communicate http ve sleuth zipkin move resttemplate bean work don deploy zipkin pod container create zipkin collector pod ideally working google cloud trace sdk sleuth zipkin play sdk datum stackdriver google cloud grpc library send datum directly application stackdriver problem send trace downstream micro service find create span trace create find documentation surely library build pointer help great add bit info supply actual code problem find explain bit code pseudo code assume scenario microservice hope sense,0,397,1,0.0,2,2017-12-21T23:25:24,0.0
47935575,1107694.0,<amazon-web-services><amazon-ec2><amazon-elastic-beanstalk><microservices><aws-api-gateway>,communicate application host aw elastic beanstalk,module loyalty wallet write java loyalty app host aws elastic beanstalk aws api gateway top build wallet functionality loyalty module loyalty sense server purpose wallet aws elastic beanstalk aws api gateway top wonder wallet call loyalty function sure good idea call api gateway top loyalty access function correct,0,162,0,0.0,2,2017-12-22T03:41:59,0.0
48143008,6698182.0,<apache-kafka><microservices>,consumer kafka loss message,microservice application layer spring service publish message kafka topic service consume message reprocess set order lose message main idea process message streaming,0,202,1,0.0,2,2018-01-08T00:50:54,0.0
47939451,1071515.0,<architecture><microservices><soa>,link datum microservice architecture,website java microservices user service report service website tie report user service unaware entity relate plan create link table website allow query datum service display meaningful question essentially add extra property service report service service aware service website php mysql persist relationship entity worry website persist relationship scaling issue add service website data useless structure datum service suggestion note early stage dependency currently,0,230,1,0.0,2,2017-12-22T09:57:31,0.0
57065964,1585701.0,<domain-driven-design><microservices>,slice monolith domain depend heavily domain,currently learn microservice company work split giant monolith microservice lot business logic application rule basically validate datum domain status data domain datum course dare depend datum domain domain kind aggregator create diagram illustrate domain domain lot business logic validate datum status domain validation appropriate action save result db feel hit dead read article break monolith good example explain situation guy suggestion,0,75,0,0.0,2,2019-07-16T21:57:13,0.0
57042114,1188867.0,<java><spring><spring-boot><microservices>,enableconfigserver work native location spring boot,configure configuration server property application enableconfigserver spring boot code pom xml application property copy property file user sankest starterproject microservice allconfiguration access url property file follow response,0,172,4,0.0,2,2019-07-15T14:40:47,0.0
45820257,1499748.0,<spring-boot><microservices><netflix-eureka>,spring eureka dynamic service lookup,spring eureka dumb question multiple service implement common interface dynamically runtime select correct implementation example front service multiple payroll system select correct payroll system base attribute define multiple endpoint start service additional system add endpoint locate correct service construct dynamically base desire payroll system interact interface sense obvious,0,145,0,0.0,2,2017-08-22T14:21:27,0.0
45766604,892628.0,<docker><networking><subdomain><microservices>,link docker container subdirectory,setup multiple docker container access main container example main container separate container separate container flag deprecate thing flag testing entry container link host file stick set scenario docker networking option usage case admin area member website separate container maintain easy container apache base refrain edit config file,0,967,0,1.0,2,2017-08-19T00:40:01,0.0
45757001,7200088.0,<java><spring><rest><spring-boot><microservices>,rest api autowire remote local implementation service automatically,rest api build spring boot consist seperate web service web service host machine remote local implementation service example local service implementation remote service implementation controller web service service local remote implementation spring type implementation choose service url property file intialization app check property url autowire service approprietly write logic service autowire good option autowire correct service implementation automatically,0,328,2,0.0,2,2017-08-18T12:44:05,0.0
45729342,2745288.0,<asynchronous><architecture><microservices><reactive><api-gateway>,microsevice apigateway pattern,work user web project maintain good response time request wonder microservice pattern read api gateway pattern gateway service orchestrator understand api call service synchronously order grantee logical flow business reduce advantage api gateway asynchronous state maintain request service reply receive map correct request continue flow search topic find article share thought point article discuss topic,0,66,3,0.0,2,2017-08-17T07:47:05,0.0
41942024,7488248.0,<java><spring><hibernate><microservices>,share entity table design microservice,middle break big monolithic commerce application microservice plan java spring hibernate concept fulfillment item persistent item monolithic application plan break fulfillment item crud operation persistent item crud operation separate api common entity table api good handle scenario currently option open table microservice entity table read object reference microservice drawback,0,671,0,0.0,2,2017-01-30T17:36:53,0.0
55021051,2609817.0,<web-applications><azure-devops><microservices><azure-web-app-service>,deploy project single app service azure devop,follow error,0,226,0,0.0,2,2019-03-06T10:38:53,0.0
55034666,7359170.0,<jwt><microservices><single-page-application><identityserver4><identity>,authenticate internal microservice,spa app three api public microservice internal microservice good spa app token spaclient identity provider call api api spa app token api call api token second spa app token spaclient identity provider call api api api call additional identity provider fetch token cclient call api token cclient case identity provider generate token request order call api api third spa app token spaclient identity provider call api api spa app token api call api token authentication api authenticate internal microservice,0,208,1,0.0,2,2019-03-07T01:26:04,0.0
55019802,6947687.0,<c#><microservices><masstransit>,handle domain error masstransit,wonder handle domain exception proper consumer code wrap catch block thrown exception handle apropriate faultconsumer consider sample example operation wrap catch block example masstransit handle domainexception push message createorder error queue service subscribe event event publish queue process approach well request response error case message broker,0,76,2,0.0,2,2019-03-06T09:37:51,0.0
57553372,38940.0,<rest><api><microservices>,api endpoint receive parameter editable,object car backend database field api elevate add edit car user api provide age vinnumber create car post body update car user edit age vinnumber enable edit create car retailerid editable system backend database field edit api vinnumber retailerid account rest idempotency request require user api vinnumber retailerid provide receive earlier request spite parameter editable,0,24,0,0.0,2,2019-08-19T08:53:50,0.0
57636050,1839104.0,<microservices>,task distribution microservice,build microservice architecture spring boot kubernetes general question scale microservice process rss feed currently feed instance microservice process feed source store database feed process write central kafka queue increase number feed number instance microservice process feed design pattern follow distribute rss feed number instance dynamically allocate microservice instance process set feed recommendation good practice advice appreciate,0,30,0,0.0,2,2019-08-24T07:43:08,0.0
57577396,8845557.0,<javascript><java><database><spring><microservices>,guarantee database data accurately reflect webpage,specific instance datum web modify admin computer user acceptance test datum unintentionally overwrite admin guarantee data accurately reflect web browser datum example admin log web table crud create read update delete functionality admin log web pull datum moment web correct datum data modify minute admin modifies record crud operation moment admin datum web admin modifies record overwrite admin change datum datum web post request send datum row entire row update datum point database admin specific change admin modify datum database situation occur fairly technology exist alert admin data admin log data alert data longer accurately reflect write application foresee issue future admin web assure datum accurate data business accurate easily modifiable user sql spring boot vuejs backend frontend application deploy openshift microsoft azure devop database oracle issue solve problem,0,39,0,0.0,2,2019-08-20T15:52:39,0.0
57559182,9269402.0,<javascript><webpack><microservices>,single spa project splitting,wanna build micro ui app single spa fraemwork wanna separate folder kind ui app build separetly react app single spa app wich import application package json webpack config babel file wanna separate application local disk example wanna rebuild application whithout rebuild app change,0,75,0,0.0,2,2019-08-19T14:52:05,0.0
57643351,4915070.0,<python><google-app-engine><microservices><app-engine-modules>,service account authentication micro services app engine standard environment,implement micro service google app engine standard environment call micro service urlfetch authentication mechanism place micro service project call api achieve task queue scenario follow link verify appengine inbound appid header achieve curious secure service account link reference find clear instruction achieve approach authentication,0,94,0,0.0,2,2019-08-25T04:56:00,0.0
57719427,1048185.0,<elasticsearch><microservices>,elasticsearch microservice architecture design question,design system microservice communicate middleware blueprint microservice underline microservice autonomous handle datum currently microservice system store datum relational database requirement implement full text search microservice store searchable entity elasticsearch cluster serve boundary separate datum micro service underscore fact plan es search engine system record dilemma allow microservice handle es interaction directly caching persistence create separate microservice call search interact es cluster lean microservice autonomous persistence cache handle full text search interesting hear opinion update microservice handle search individually full text search capability persistence caching layer micro service better business model responsible implement layer individually introduce microservice search extra point failure pubsub middleman direct interaction microservice rest pack contrary es directly highly saas eliminate single point failure write request fast lag searchable guarantee seamless user experience search business process understanding flawed nice feature core functionality implement provide great user experience model individual microservice remind cqrs command query responsibility segregation architectural pattern push datum db microservice publish messaging broker command message pick queue consumer push es frontend read path query directly microservice pattern implement search sense big data microservice ingest datum worker process aggregate analytic push aggregated data table separate data store data queryable separate micro service enable fetch analytic datum publication successful implementation cqrs pattern es consideration es primary system record full text search engine,0,98,0,0.0,2,2019-08-30T01:27:42,0.0
57690175,1219317.0,<java><spring><eclipse><spring-boot><microservices>,demonstrate microservice spring eclipse work,build proof concept microservice java eclipse spring library follow tutorial restriction maven download follow jar file manually import java project java code simple follow problem code server start error follow output application shut instantly code message hello display web update follow answer set context application webapplicationtype servlet follow error,0,58,2,0.0,2,2019-08-28T10:20:47,0.0
57708621,2725357.0,<domain-driven-design><microservices>,break entity microservice domain,face case microservice application entity user single table role consider role manager reader entity book manager assign book reader microservice userm bookms reader book api bookms user detail userm combine search worried pagination search reader reader book keep increase expect role future,0,74,5,0.0,2,2019-08-29T10:53:34,0.0
47379427,7574116.0,<java><rest><spring-mvc><microservices>,consume response rest api rest api java microservice,micro service rest api order micro service consume micro user micro service aware communicate micros advance,0,3489,0,0.0,2,2017-11-19T16:54:09,0.0
47258026,2044343.0,<javascript><python><node.js><microservices><financial>,implement financial microservice node js python,develop tourist web app node js microservics develop service calculation guest price night taxis vat discount calculation easy dynamically change control experience calcs common web programming language store math formula db mess alternative solution read language fit job specific library aim pricing,0,114,2,0.0,2,2017-11-13T06:07:00,0.0
55501971,711674.0,<git><.net-core><azure-devops><microservices>,multiple microservice single dotnet core solution git repo,option architecture solution api layer decide dotnet core app functionality break microservice azure devop handle build test release ci cd workflow base broad analysis estimate current solution break seperate microservice dependency break apart isolate unit testing small ci cd footprint project start solid separation concern time avoid git repos solutions ci flow facilitate workflow bit nightmare ease development dev regularly change workspace open list ide completely overflow maintain syncing ci cd ideal result eye single solution git repo build process microservice separate project solution code committed fire process azure devop build test deploy service change commit dream luck google enter phrase advance,0,328,0,0.0,2,2019-04-03T18:29:59,0.0
55609096,10695281.0,<java><spring-boot><microservices>,create object pojo integer,inside create private object integer add dependency map,0,46,3,0.0,2,2019-04-10T09:24:54,0.0
48962157,6508244.0,<database><postgresql><spring-boot><microservices><netflix-eureka>,register postgre eureka docker image,register database server postgresql sql database eureka server spring boot micro service,0,282,0,0.0,2,2018-02-24T11:08:44,0.0
49062631,202485.0,<asynchronous><microservices><amqp><servicebus>,microservice async communication amqp multiple receiver scenario,micro services approach service instance communicate service instance amqp message base async communication example azure service bus queue service action implementation step care step reach service info proceed multi receiver approach instance service handle response service actual request instance kind scenario handle multi sender multi receiver approach micro service,0,48,0,0.0,2,2018-03-02T04:02:35,0.0
49000291,5701606.0,<java><excel><responsive-design><microservices>,separate microservice excel generation,application microservice query db result row generate excel apache poi couple service process db row generate excel excel generation process common design separate excel generation process separate micorservice service challenge pass datum row microservice http achieve,0,436,0,0.0,2,2018-02-27T02:43:33,0.0
48925813,7431823.0,<java><oop><domain-driven-design><microservices><soa>,object build micro service,three micro service msa msb msc micro service msa create partial object send msb dedicated message topic receive partial object msa msb populate attribute share common message bus msc consume object question good approach object building share multiple micro service,0,64,1,1.0,2,2018-02-22T11:03:48,0.0
49019203,199684.0,<java><microservices><orchestration>,coordinate dependent microservice java,coordinate separate microservice create coordinator monitor queue job complete rest request send happy path call fail reason point credential insufficient flow fail stage create check status fail job rerun work flow continue advice pattern framework fairly simple complex netflix conductor camunda ideally bit complex,0,111,1,0.0,2,2018-02-27T22:47:03,0.0
48863771,6242317.0,<java><microservices><netflix-ribbon>,failure call microservice ribbon enable client eureka service discovery,call microservice microservice producer ribbon enable client ribbon client error follow official spring io link client side load balancing follow specification link code github address sure wrong help,0,606,2,0.0,2,2018-02-19T10:11:34,0.0
43104831,7195037.0,<nginx><docker><kubernetes><microservices><kong>,microservice api gateway pattern work auto horizontal scaling,high solution api gateway datum center api gateway connect three microservice bill user account service three replica true copy microservice work,0,326,1,0.0,2,2017-03-29T21:52:49,0.0
43187101,5427709.0,<performance><amazon-web-services><architecture><scalability><microservices>,datum communication scalable microservice architecture,work project gain knowledge microservice automatically scalable architecture project build small game user fly plane shoot player online host amazon web service duration game minute game theoretically play time player play single game application scalable hit hard architecture server calculate position player server key input request recalculate position problem application scalable server calculation hold datum input event location expect constantly write position database read client slow scalable dedicated server single game waist computation power money search implementation game architecture messaging avail find method seam fit kind pattern kind implementation work sense direction pattern,0,108,1,0.0,2,2017-04-03T14:19:01,0.0
40092551,1589549.0,<vagrant><openshift><redhat><microservices><fabric8>,resolve host cdk build usersys redhat,instal vagrant follow error follow installation idea,0,94,0,0.0,2,2016-10-17T17:43:03,0.0
58973682,618485.0,<spring><microservices><jhipster><api-gateway>,create gateway jhipster microservice arhitecture database,jhipster base supported microservice architecture create registry gateway microservice base jwt authentication describe documentation work sure gateway jhispter database question unanswered gateway database scenario create gateway database gateway microservice database separate database instance,0,24,0,0.0,2,2019-11-21T11:16:07,0.0
59109858,4183044.0,<java><spring><rabbitmq><microservices><spring-cloud-stream>,method handler receive message inbound channel spring cloud stream,assume definition interface follow controller bind rabbitmq set correctly accord spring cloud stream binder rabbit work bad code duplicate habe handler controller listen word subscribe channel interface handle base condition example figure standard annotation accept array stre channel goal sth appreciate idea solve clean explanation spring cloud stream api,0,42,0,0.0,2,2019-11-29T18:59:59,0.0
58952541,1348562.0,<performance><asynchronous><microservices><synchronous>,communication performance microservice,microsoft read add synchronous dependency microservice query request bad response time client app true synchronous communication feed immediatly asynchronous communication example imagine user send http request microservice turn send request asynchronously microservice wait reply asynchronously microservice user wait time response synchronous communication immediatly response,0,28,2,0.0,2,2019-11-20T10:49:30,0.0
58973848,7919950.0,<java><spring><spring-boot><microservices><jhipster>,user entity additional datum jhipster microservice,currently work jhipster project jhipster uaa set register user default implementation create userservice jhipster microservice api user profile create userprofile entity extend default user entity assign user userprofile gateway shure work properly problem thing understand create userprofile entity microservice gateway follow instruction jhipster doc error code shure example microservice usecase happen delete annotation seperate userservice fetch extended user entity userprofile userservice api return userprofile share user user entity add additional field user registration form username adress postalcode city create default user entity well extended userprofile handle microservice appreciate help pretty project jhipster microservice mechanic wrong note beginn level spring development obvious,0,34,2,0.0,2,2019-11-21T11:24:40,0.0
49931495,3836941.0,<java><microservices><grpc><grpc-java>,grpc capacity adjustment,micro service grpc onerror call client side server printstacktrace exception shut connection test client wonder limitation server side max number instance adjust enlarge help appreciate,0,321,0,0.0,2,2018-04-19T23:02:04,0.0
49880941,3253853.0,<java><docker><kubernetes><microservices><spring-cloud>,microservice docker container,spring cloud create microservice architecture feature spring cloud zuul – api gateway service provide dynamic route monitor resiliency security ribbon – client side load balancer feign – declarative rest client eureka – service registration discovery sleuth – distribute trace logs zipkin – distribute trace system request visualization hystrix circuit breaker fault tolerance hystrix dashboard api microservice server maintain microservice kubernete solve issue deploy microservice separate docker container kubernetes care microserivice health check autoscale load balance ribbon eureka zuul help,0,623,0,0.0,2,2018-04-17T14:36:09,0.0
37336871,575085.0,<python><google-app-engine><webapp2><microservices>,url sible module app engine,app engine application multiple independent module module test locally module project good assume talk url dynamically,0,72,0,0.0,2,2016-05-20T02:10:01,0.0
37445823,4289365.0,<javascript><asynchronous><reactjs><microservices>,force asynchronous call behave synchronously,react app calculate base three calculation logic microservice asynchronous call function asynchronously calculate middle synchronous hook ui layer call function return result return asynchronously call function call function call function return promise code impression serverlayer js layer return dateclass js layer call complete response resolve reject currently happen code dateui js layer continue call resolve ms proper datum force planlineaction calculateflightenddate dateui js layer complete response continue selectdate,0,652,3,0.0,2,2016-05-25T19:16:46,0.0
37461203,6386236.0,<c#><microservices><azure-service-fabric>,wcf service consume client azure fabric service,expose wcf endpoint map external client dotnet consume customize listener allow mappable external port wcf call party,0,424,0,0.0,2,2016-05-26T12:42:35,0.0
51312350,1633190.0,<microservices>,microservice seggregation,bit confused company lot integration moment application decide micro service architecture integration separate service situation integration payment integration communicate payment provider async response open couple url integration receive answer payment gateway relate,0,24,0,0.0,2,2018-07-12T18:33:44,0.0
51173039,1326367.0,<asp.net-mvc><microservices><publish-subscribe><azureservicebus><servicebus>,call api service bus,learn build microservice base app microservice communicate service bus case azure service bus refer link initial system set message reach queue step mimic real app orderapi handle order workerrole class sure call ordersapi service bus place guess guess call orderapi host,0,695,0,0.0,2,2018-07-04T11:52:21,0.0
51292640,7796182.0,<java><spring-boot><microservices><rdbms>,design microservice base application microservice datasource,design microservice base application service mysql db service book service payment service payment service book service design mysql keep separate db service enforce relational constraint table separate database spring boot design web service,0,103,2,0.0,2,2018-07-11T19:09:48,0.0
51224374,7448017.0,<microservices>,microservice request,start microservice application bit stuck technicality build issue tracker application example database table issue comment separate microservice sake example separate api consume multiple type client mobile web monolitic approach codebase couple request rest api handle example issue request fetch issue correspond comment follow pseudocode sure approach microservice microservice issue microservice comment client send request issue comment byissueid work nice point view multiple thing send alot request request microservice issue request microservice comment bad read microservice couple couple pretty hard read api gateway receive request fan microservice figure api gateway write code example catch issue request fan microservice issue microservice commetns assemble stuff return case feel work double api gateway monolith time,0,83,3,0.0,2,2018-07-07T15:04:26,0.0
51300620,6250170.0,<docker><docker-compose><microservices><jhipster>,strange error jhipster app microservice architecture docker,generate app jhipster version app components uaa app user accounting authorize jhipster registry app gateway app simple microservice follow step documentation include step create docker compose file docker compose error pull permision custom component log docker service create repository docker hub understand error edit docker compose yml,0,398,4,0.0,2,2018-07-12T08:22:11,0.0
58058056,11522914.0,<rest><spring-boot><microservices>,rest http method suitable migrate user detail db,expose rest point move user datum mongodb sqldb input consumer api output consumer response send successful completion consumer invoke api work api fetch user detail mongodb find move sqldb bit confused http method analysis method idempotent confuse,0,25,0,0.0,2,2019-09-23T08:04:12,0.0
58082535,10415734.0,<express><socket.io><cors><microservices><api-gateway>,express proxy socket io,microservice architecture forward socket io traffic gateway socket io microservice gateway express current implementation strange request service socket connection emit event socket io client post request request time express server log morgan case front displays cor error connect directly socket io server work perfectly issue,0,33,0,0.0,2,2019-09-24T14:25:57,0.0
58038979,2527958.0,<events><microservices><publish-subscribe>,handle event processing time service,service relation exist entity service publish event time entity create update service subscribe event publish entity exist service problem client ui micro service create entity create entity reference delay happen service receive handle event create request reference handle service fail client handle retry service accept entity time expect relation fulfil expect event receive service provide state entity ensure trust relation verify poor design client call transaction design event platform kafka ensure fast event transmittance delay asynchronous process kind race condition,0,35,0,0.0,2,2019-09-21T09:31:24,0.0
58127135,4241974.0,<amazon-web-services><microservices><amazon-sqs><messagebroker>,sqs communication service,learn microservice specific aws sqs sure picture architecture correct wonder help sqs work term communication service client application call userservice datum productservice send response client side sqs work case userservice send message start listen response block concern approach suggestion case,0,36,0,0.0,2,2019-09-27T02:50:49,0.0
57989157,1958260.0,<java><http><microservices><load-testing><stress-testing>,simulate real stress test scenario,difficult simulate real stress scenario micro service stress generally load test micro service stress micro service increase response time outgoing call service easy estimate actual response time service load test implement clue,0,40,0,1.0,2,2019-09-18T09:13:43,0.0
57944559,7273447.0,<rest><google-cloud-platform><microservices><google-cloud-pubsub><event-based-programming>,wrap event base system rest api,design system microservice architecture event base communication google cloud pub service listen publish message service excellent top provide rest api user break event base approach endpoint trigger event send response user sense create subscriber processxcomplete event return example follow microservice service service frontend service rest endpoint send request post post request send frontend service frontend service trigger newpostevent service service listen event good thing start messy return user request valid response operation complete service finish task create handler return response sense well design implement event base communication service provide rest api,0,58,0,0.0,2,2019-09-15T13:27:55,0.0
58088849,1993552.0,<kubernetes><microservices><kubernetes-pod>,pod exit main container exit,sidecard pattern pod container main container sidecar container pod status depend main container main container fail complete pod status discard sidecard container elegant,0,55,2,0.0,2,2019-09-24T22:22:36,0.0
58013061,2634784.0,<spring-boot><tomcat><kubernetes><microservices>,deploy spring boot micro service production,setup good deploy service production guide direction,0,66,2,0.0,2,2019-09-19T14:15:48,0.0
58057114,6458371.0,<spring-boot><microservices>,common logic microservice,develop microservice independent database microservice principle refactore service follow dilemma microservice send receive message activemq configuration detail activemq jmslistenercontainerfactory handler boiler plate code repeat service microservice audit functionality audit order creation update delete aop logic relate configuration repeat microservice good practice move common logic library common service,0,50,3,0.0,2,2019-09-23T06:57:06,0.0
58132135,8208331.0,<java><eclipse><spring-boot><microservices><spring-tool-suite>,whitelabel error error spring boot application,whitelabel error spring boot application map url mention application property file controller file attach image error project remove error,0,62,4,0.0,2,2019-09-27T09:52:14,0.0
41188108,6172009.0,<java><spring-boot><microservices><netflix-zuul><netflix-eureka>,enable automatic routing netflix zuul netflix ribbon discovery netflix eureka service,thing netflix cloud microservice architecture three microservice network zuul ribbon service localhost eureka service localhost rentcarservice localhost request localhost rentcarservice getallavailablecar request automatically route forward microservice rentcarservice port localhost getallavailablecar tutorial forward request programmatically tutorial code forwarding automatically ribbon beste regard lar,0,1213,0,0.0,2,2016-12-16T15:58:41,0.0
51786390,9093646.0,<web-services><docker><microservices>,microservice app low load,situation follow complex app break multiple development team work parallel microservice concept handle well app high load overkill host microservice question microservie involve extra cost infrastructure microservice machine separate process docker microserivce provide web service rest bind iis docker option resolve main app api gateway microservice avoid large monolithic application btw microservice share datum db,0,37,0,0.0,2,2018-08-10T12:19:28,0.0
51808975,4672397.0,<amazon-web-services><microservices><aws-ecr>,amazon ecr cluster microservice microservice reside service,aw ecr cluster microservice project deploy microservice infrastructure build deploy microservice demand deploy microservice ecr registry create task definition image ecr good practice create cluster microservice cluster microservice service microserivce love hear good practice,0,135,0,0.0,2,2018-08-12T12:47:01,0.0
51799330,7831388.0,<spring-mvc><microservices>,communication microservice,small micro service develop spring boot communication service api gateway messaging layer plan call service url http rest template disadvantage api gateway communication service,0,320,2,0.0,2,2018-08-11T11:46:22,0.0
53244055,5739514.0,<kubernetes><microservices>,kubernetes deployment service,finished read nigel poulton kubernetes book puzzle service service add deployment manifest service post purpose deployment app,0,67,0,0.0,2,2018-11-10T22:28:45,0.0
53279239,9551714.0,<json><docker><microservices><cumulocity>,microservice host cumulocity,host microservice cumulocity follow article create start container locally dockerfile problem docker dockerfile docker file directory include docker build cumulocity json content cumulocity json pack container microservice pack hello error error cumulocity json work directory user myuser document helloworld directory helloworld mention datum structure file cumulocity json file locate correct file execute microservice script inside folder structure mistake,0,89,0,0.0,2,2018-11-13T10:44:08,0.0
53276677,1532018.0,<microservices><azure-service-fabric><asp.net-core-webapi>,micro services service fabric place controller,micro service project multiple service net core place controller approach place controller respective micro service micro service place controller separate project call individual service st approach involve coding effort separate controller actual service interface difference term create manage fabric approach,0,50,1,0.0,2,2018-11-13T08:22:48,0.0
53244033,5739514.0,<kubernetes><containers><microservices>,kubernetes deployment multiple replicaset,finished read nigel poulton kubernetes book leave question deployment multiple replicaset deployment traditional sense entire application deploy deployment microservice,0,884,1,1.0,2,2018-11-10T22:26:06,0.0
53407350,4458056.0,<microservices><haproxy><monitor>,monitor connection local network,ton service node mysql redis elastic monitor connect connection rate number alive connection node create connection node mysql redi second haproxy stat image attach currently option haproxy proxy single service haproxy archive hard alc detect connection forward service elk log center create log file service node mysql redi log center ton work build feature haproxy stat log center good case,0,64,2,1.0,2,2018-11-21T07:44:50,0.0
58300123,8715436.0,<c#><asp.net-core><architecture><microservices><job-scheduling>,job scheduling service design,idea create system build multiple domain micro service service additional stuff job scheduling service idea schedule job micro service big deal schedule job micro service add system worry ability create service independent domain micro service thing abstract service client service implement job scheduling library afraid impossible implement instance micro service send email specific content friday micro service schedule job communicate job scheduling service implement architecture solution achieve abstract describe problem understand hope hint thought help find good approach functionality library provide functionality box,0,61,0,0.0,2,2019-10-09T08:36:16,0.0
58264643,2302047.0,<architecture><microservices><biztalk><messagebroker>,biztalk message broker microservice architrecture,speak microservice architecture find message broker rabbitmq kafka current environment biztalk understanding biztalk job question good practice point view easy find comparison rabbitmq kafka biztalk,0,73,0,0.0,2,2019-10-07T06:49:09,0.0
58236692,8504091.0,<java><maven><spring-boot><testing><microservices>,test microservice spring boot maven,spring boot maven framework set microservice test sure work properly sure invoke test test micro service correct advance invoke micro service test java file fail interface class handle mapping invoke fail database update,0,74,3,0.0,2,2019-10-04T12:43:11,0.0
58267056,4671382.0,<go><github><microservices>,keep microservice repository github,work micro service project package service include parent package project structure allow comply convention package path consequence microservice repository github repository depth url issue future codebase large add complexity ci cd pipeline example change service trigger build service code clone unnecessarily large avoid conflict convention github work problem solve ci cd work,0,150,11,0.0,2,2019-10-07T09:44:48,0.0
49588249,2224344.0,<spring-boot><microservices><netflix-eureka><spring-cloud-netflix><pivotal-cloud-foundry>,discovery service work polyglot micro services architecture,build micro service spring boot micro service enableeurekaclient discoverable eureka server enableeurekaserver micro service build technology discovery load balance reverse proxye gateway cloud pcf aws read blog web relate micro service proper info,0,352,0,1.0,2,2018-03-31T13:23:29,0.0
49584617,8735568.0,<microservices><distributed-database>,distribute database design architecture case user authentication,design database micro service orient application distribute application relate management university university university separate user business datum plan design separate database separate university store user datum university database user additional database manage application table university user detail db db application table confusion search database design approach keep common database store user db user university user mix database follow separate database university support distribute db architecture pattern micro service orient standard keep db user find method appropriate microservice distribute database design pattern,0,207,0,0.0,2,2018-03-31T05:36:38,0.0
49536369,8180257.0,<events><microservices><cqrs><event-sourcing>,event application event source,lot link event sourcing cqrs well understand proper deduce definitely bring complexity scalability issue,0,50,1,0.0,2,2018-03-28T13:50:16,0.0
47552159,5381825.0,<java><spring><exception><spring-boot><microservices>,post body request http exception handling,microservice send request microservice throw exception add addition field error response datum microservice global exception handler send client problem file error httpservletrequest getreader method throw exception result client,0,338,0,0.0,2,2017-11-29T11:50:38,0.0
47474453,8918241.0,<angular><rest><spring-boot><microservices>,rest communication microservice abstract host port rest call,start dive microservice topic excuse stupid question microservice provide rest api angular microservice nice frontend angular microservice expect communicate microservice example implement basically big deal well aware example angular microservice happy wonder implementation tightly couple service http url host port work well case microservice choose port dynamically problem define port microservice hold host microservice host define host statically correct wrong abstract detail host port find dynamically good alternative communication microservice imply problem example service service registry abstract bit possibility sure relevant spring boot implement microservice,0,353,0,1.0,2,2017-11-24T13:36:01,0.0
58741807,1594992.0,<kubernetes><microservices>,pod microservice,separate microservice application deploy cluster application interact lot recommend pod individual pod microservcie,0,43,0,0.0,2,2019-11-07T04:00:21,0.0
58755924,6860417.0,<java><rest><api><spring-boot><microservices>,well java library return request field rest api,reputed java library spring boot application api return list resource huge size reduce size response convention field request response example light version response field pass query parameter learn mention practice linkedin facebook twilio shoot team open source licensed project organization java spring microservice implement feature,0,54,0,0.0,2,2019-11-07T19:44:44,0.0
58775644,6665561.0,<java><python><model><artificial-intelligence><microservices>,java microservice train ai model problem,build server spring boot microservice write python script train ai model build service server check datum specific time day python script train model good design service call python script java well library recommend lot,0,21,1,0.0,2,2019-11-09T01:37:38,0.0
58902946,7277293.0,<redis><microservices><shared-memory><hazelcast><stream-processing>,microservice architecture highly frequent data access memory solution,define follow case simulation task fulfil involve iteration simulation day day dayn step iteration depend prior step order predefine task state represent object object change step iteration step iteration involve task task task fulfill task datum database require task fulfil external datum database database task finish task apply task task access object task state object change iteration step finish iteration simulation task involve average iteration step average iteration simulation task perform concurrently start enduser discuss microservice architecture problem scalability application production development purpose crucial task task add feature parameter scale differently development answer valuable input question inter service communication messaging rest http pub req resp apply highly network load task,0,48,1,1.0,2,2019-11-17T17:03:49,0.0
58755259,6767856.0,<microservices><cqrs><event-sourcing>,datum management cqrs microservice,microservice architecture learn lot basic cqrs event sourcing follow documentation question unclear database server cqrs read model database table database suppose join table database microservice tightly couple defeat purpose architecture,0,55,1,0.0,2,2019-11-07T18:53:31,0.0
58933118,3639530.0,<azure><azure-functions><microservices><azure-logic-apps><azure-function-app>,design microservice system azure workflow call order,create microservice net core mongodb deploy azure kubernete hard time understand manage server service independent call order processing confuse good solution design workflow kind architecture execute service azure logic app function app suggestion,0,33,2,0.0,2,2019-11-19T11:31:59,0.0
58908903,12106875.0,<spring-boot><docker><gradle><microservices>,dockerfile create image spring boot,create docker image spring boot application gardle build tool bitbucket repository file place dockerfile content create image dockerfile error query gradle build step docker file target dependency create,0,61,9,0.0,2,2019-11-18T06:16:11,0.0
46783912,56050.0,<scala><jetty><microservices><embedded-jetty><ignite>,embed jetty server apache ignite service,embed jetty server apache ignite service http endpoint entry point data pipeline basic test main scala testservice scala follow error configure differently ignite jetty work,0,183,0,0.0,2,2017-10-17T06:37:37,0.0
50771405,4993125.0,<architecture><microservices><api-design><decoupling><decouple>,decouple backend service associate database separate service,big mysql database big bunch datum service api read write database example api database write row database small secondary database small read write leave small secondary database change data access big mysql database big access big mysql database api call second service access big database datum big call api return datum big remove direct dependency big good advice straightforward replace single api call access big directly api corresponding api perform exact database access perform directly example imagine api api return columns foo bar baz table big api write foo table big api return column table big replace api call correspond api return column foo bar baz table big api call correspond api api write foo table big api call correspond api api return column table big case ideal mapping combine api api call api datum api call api parameter good interface decouple service share data source big assume java xml spring base system transfer datum api call,0,133,0,0.0,2,2018-06-09T06:05:23,0.0
50725904,9706058.0,<kubernetes><microservices><minikube>,minikube kubernete pod service,simple spring microservice project minikube project lucky word client port lucky word server port communicate client server infact lucky word client communicate lucky word server result word evviva word default terminal minikube service lucky client output default evviva communicate client server dns guide success modify service pod link client server pod lucky word client pod lucky word server service lucky word client communicate lucky word server,0,113,1,0.0,2,2018-06-06T17:08:06,0.0
50697247,9706058.0,<kubernetes><microservices><minikube>,kubernetes minikube link client server,simple spring microservice project minikube project lucky word client port lucky word server port communicate client server infact lucky word client communicate lucky word server result word evviva word default terminal output default evviva file dockerfile lucky word server file dockerfile lucky word client deployment lucky word server service lucky word server deployment lucky word client service lucky word client,0,131,1,0.0,2,2018-06-05T09:56:32,0.0
50845313,4247860.0,<cron><microservices><cron-task><spring-cloud-dataflow><spring-cloud-task>,cron job microservice,spring cloud microservice online shopping vendor work expect requirement cron job customer record customer statement match current calculate rate interest pay day confused accommodate cron job ms architecture server cron job,0,1048,2,0.0,2,2018-06-13T19:59:50,0.0
50814965,3016392.0,<spring><spring-boot><postman><microservices>,connection time error java microservice,build microservice java springboot microservice consume rest api service follow error chrome consume service postman microservice assist advise,0,415,5,1.0,2,2018-06-12T10:29:31,0.0
52534948,3484149.0,<microservices>,database architecture micro service,hear time micro service architecture single micro service create individual database maintain foreign key constraint database user table authentication micro service catalog service userid column user table resolve advance,0,54,0,0.0,2,2018-09-27T10:30:30,0.0
52566928,5705247.0,<rest><soap><integration><microservices><soa>,microservice bad integration solution,bad idea base business business type integration project microservice architecture microservice autonomous service directly interface loosely couple interface typically rest dump pipe smart endpoint lightweight principle work large scale integration heavyweight soa solution justified consider national service portal estonia example microservice approach adapt integration project scale ignore juristic requirement centrally manage gateway unmanageable central integration provider well define wsdl contract thing consider identity management access control autonomous system,0,185,0,0.0,2,2018-09-29T09:18:02,0.0
39690572,3148054.0,<spring><spring-mvc><spring-security><microservices>,microservice spring cloud security oauth netflix oss enableoauth resource exist spring security,tutorial create organized webservice project base netflix oss follow technology spring cloud boot security oauth spring security annotation enableoauth resource exist spring security maven dependency,0,633,2,0.0,2,2016-09-25T18:51:51,0.0
39721025,6886846.0,<api><web-applications><architecture><microservices>,microservice small enterprise,presently work web developper small company charge create web software manage business hire developper deliver version posible context microservice architecture spend time resource start project kind architecture experience subject,0,1223,2,0.0,2,2016-09-27T09:28:42,0.0
38576865,2272439.0,<ruby-on-rails><microservices>,render remote view local layout,organization consider implement exist rail monolith collection rail service content layer thought api gateway layout app request individual view http individual service render template send http render html question mechanism rail request remote content http render received html erb haml layout template serve fully render html,0,84,0,1.0,2,2016-07-25T20:27:52,0.0
38614201,1572028.0,<architecture><microservices>,microservice service entity store database deal,understand microservice understand separate service invoke client productservice userservice system allow people comment product well user store comment system comment table separate comment table service database store place,0,173,0,0.0,2,2016-07-27T13:20:51,0.0
38615132,737629.0,<triggers><alert><soa><monitor><microservices>,monitor micro service,set service service component stateless stateful synchronous asynchronous approach monitor alert log base alerting metric gather relic base bicycle basically atm generalize aggregate metric service single place thing monitor product separate service result single dashboard small amount widget widget sure service usable customer recommend approach methodology reference good practice,0,217,1,0.0,2,2016-07-27T14:00:08,0.0
43636544,4531977.0,<azure><microservices><azure-service-fabric>,endpoint port number,expose microservice endpoint port number azure service fabric port number define servicemanif xml dynamically assign service fabric cluster call service port number,0,291,0,0.0,2,2017-04-26T14:05:59,0.0
43689879,3022645.0,<rest><microservices><azure-service-fabric>,pass user context api microservice,setup audit log log event happen close action user perform action pipe user info good practice,0,702,3,1.0,2,2017-04-28T22:50:00,0.0
43674924,2926377.0,<git><microservices><issue-tracking>,good manage microservice issue bug git,micro service project git repository good manage issue bug code multiple service,0,342,4,0.0,2,2017-04-28T07:51:48,0.0
50006750,2540256.0,<java><microservices><snapshot><event-sourcing>,snapshot event sourcing,devil detail implement event source exist catering application invoice associate company dept company employee company setup case company sponsor event pay food client visit company dept order food cafeteria employee order food company pay bill employee domain model companyid populated bill company companyid deptid bill dept companyud deptid employeeid bill person relation table assume dept employee table relate company table event source table domain model invoice event store table rest service pass employee dept employee apply update invoice question event store handle scenario query relation table retrieve invoice invoice apply event initially lean snapshot domain model problem remain dept companyid json retrieve event base matter call retrieve invoice invoice apply event help rid relational table dream fool side question snapshot save table event store correct event type snapshot correct wrong,0,407,0,0.0,2,2018-04-24T16:32:44,0.0
50064156,2642628.0,<docker><jenkins><microservices><continuous-delivery><kubernetes-helm>,continuous delivery microservice release versioning,develop microservice spring boot package helm chart deploy kubernetes cluster service jenkinsfile release service individually service build package qa staging production service build package qa staging production service build package qa staging production approach fairly straight forward shippable artifact inconsistency group release umbrella helm chart parent parent build package qa staging production service service service struggle manually release service update version parent chart automate,0,497,0,0.0,2,2018-04-27T14:06:38,0.0
53696994,4541597.0,<akka><microservices>,akka understand actor model,learn akka day simple question understand well application architecture create rest service actor actor simple component example service layer dao controller actor buisness logic element example business logic spearate task actor actor microservice high level layer microservice application work separate actor understand actor correct create rest service layer controllers service dao database separate actor akka application,0,54,0,0.0,2,2018-12-09T21:45:54,0.0
53656735,611446.0,<java><spring><spring-data-jpa><microservices><application-design>,spring boot jpa map multiple entity class database table,micro service spring boot restful service authentication service app main service app entity authentication service display username ui userid ui main service app rest call user firstname case user entity service point database user table full access user table add user login delete user fetch user firstname userid confuse design user entity main service app field user entity main service app field feel require,0,489,1,0.0,2,2018-12-06T17:26:54,0.0
53808759,25868.0,<docker><kubernetes><microservices><terraform>,roll version container pod kubernetes terraform,learn kubernete terraform build node js microservice example well command provision kubernetes cluster deploy couple node js microservice full example github full setup cluster pod file example pod define work great initial roll unable system update change code build version docker image update variable version previous snippet code subsequently error pod exist question kubernete terraform roll code update update docker image pod deploy cluster time pod clean,0,264,3,0.0,2,2018-12-17T03:54:47,0.0
53779760,10786475.0,<mysql><spring><spring-boot><jpa><microservices>,spring boot jpa mysql unable retrieve result set,spring boot basic knowledge java build micro service retrieve datum mysql database code detail retrieve datum table standalone jdbc class request help entity class repository class controller class property file pom xml main application mysql table detail schema test schema table student error detail,0,307,5,0.0,2,2018-12-14T12:26:48,0.0
56849340,1026271.0,<docker><kubernetes><microservices>,understand usability volume,monolithic application write datum database file file store directory app directory app datum docker concept volume understand volume store file volume directory app directory app datum change app code order write volume app datum app host docker relative path file save mounted volume automatically,0,52,0,0.0,2,2019-07-02T09:30:08,0.0
56871896,4811392.0,<asp.net-core><microservices>,micro service architecture net core pattern library service call,implement time service net core web api communicate http request purpose inject wrapper suspect reinvent wheel micro service practitioner pattern third party library solve problem,0,106,0,0.0,2,2019-07-03T14:03:05,0.0
56879373,1643711.0,<api><microservices>,microservice httpstatus code,question relate good practice signal communication api microservice architecture face follow event microservice physically microservice call wrong url microservice call correct url wrong argument query param example post body fail validation microservice resource resource find db findbyid type find well signal http status code payload explain detail example case find payload api case bad request case bad request validation payload message case find resource find message internal server error uncaught exception good stuff thought happy interim solution well understand fact animal client server signal second relate data payload,0,118,0,0.0,2,2019-07-04T00:35:03,0.0
56747239,4908657.0,<java><rest><architecture><microservices><database-migration>,migration monolith microservice,brownfield migration strategy pluralsight course create api monolith table currently team migrate monolith microservice architecture live aw issue doubt table join oracle store procedure create object table course oracle efficient table separate rest api create result object involve fetch datum table fetching datum table java construct result dataset record hear response issue worry unlimited compute power cloud ec instance microservice api service heavy lifting fetch processing record ec instance lot power cpus memory storage move table api sure answer multiple table involve solution issue manifest fetch multiple record advice,0,92,1,0.0,2,2019-06-25T05:17:17,0.0
56895592,2522221.0,<microservices><cqrs><event-store>,event source system bad,learn proper microservice architecture cqrs masstransit type storage read side thing cqrs event source understand mandatory system anti pattern store event single source truth help build rebuild read store fly lock vendor event store question easy start event sourcing separate datum storage depend microservice elasticsearch mongodb migrate provision hand start event source deal migration,0,119,1,0.0,2,2019-07-05T01:41:16,0.0
56748630,1183979.0,<sql-server><microservices><cqrs><data-synchronization>,synch database microservice architecture cqrs separate read write,question interview synch database datum time delay handle background mention microservice architecture cqrs performance separate read query database separate write command database customer enter modifie datum replicate synched read database talk stuff cosmos db options prevent dirty read mention cache variousoption synch interviewer sql db level synch dbs,0,158,16,1.0,2,2019-06-25T07:12:00,0.0
57908867,3941423.0,<spring-boot><microservices><spring-cloud><netflix-zuul>,js access spring rest service zuul block cor policy,small service base platform spring cloud framework individual component follow eureka discovery server spring config server authentication server zuul gateway server rest service postgresql server simple jquery base client browser base design manning spring microservice action work fine development deploy server side stuff external server docker compose longer access service endpoint call service endpoint jquery follow error access xmlhttprequ origin block cor policy response preflight request pass access control check access control allow origin header request resource add zuul server enablezuulproxy spring boot application class yield error idea,0,34,0,1.0,2,2019-09-12T14:25:00,0.0
57823831,3356376.0,<apache-kafka><architecture><microservices>,mix communication method microservice,work project well version project scalable deal high load decide microservice monolithic start microservice communicate common design pattern thing service scalable event base communication sense decide kafka purpose service system simplify question type service work node master node scalable communicate kafka question case publish event produce message topic master node event consume topic work node case send message specific work node cover case work node group kafka message publish topic message send message specific consumer kafka node scalable number increase decrease depend load create topic node good idea solution add work node message work node ignore message well work good solution second solution send http request send message specific node mix communication method good solution guy problem well solution design wrong,0,40,0,0.0,2,2019-09-06T14:20:52,0.0
57833214,5600195.0,<amazon-web-services><microservices><netflix-eureka>,mid tier load balancing,article eureka term confused paragraph ec classic aws security group completely microservice architecture read article source find help helpful,0,97,0,0.0,2,2019-09-07T11:23:12,0.0
57840104,4774816.0,<kubernetes><microservices><istio><amazon-eks>,istio envoy gateway timeout second outbound connection,background istio deploy istio helm default profile istio documentation enable trace kiali loglevel debug pod service istio system namespace egress gateway outboundtrafficpolicy mode allow assume service entry nginx ingress controller entrypoint cluster start istio ingress gateway issue micro service cluster hit reach external url cluster legacy system http post query system respond microservice second hard timeout second istio sidecar microservice respond deploy istio sidecar gateway everytime second log microservice well istio proxy microservice log istio search response second logs microservice log istio response second logs envoy sidecar proxy log mask create virtual service ms timeout second luck sure help crux internet pod console micro service micro service call legacy url internally code timeout exact second time edit add detail add delay second microservice pod istio proxy sidecar timeout second sure change second envoy setting,0,417,0,1.0,2,2019-09-08T07:54:06,0.0
57803254,5106503.0,<asp.net-core><docker-compose><microservices><ocelot><steeltoe>,service discovery eureka work docker container,api gateway docker container find service register eureka api gateway ocelot json appsetting json api gateway service configuration appsetting json docker compose yml command docker compose check find service registre eureka server return check console window api gateway discover service log,0,113,3,0.0,2,2019-09-05T10:16:04,0.0
55835769,6436191.0,<json><encoding><microservices>,discover encoding json message,essentially json message three encoding guess receive message multiple source queue browser database file system ignore byte order mask bom remember xml doc prolog encoding find json message idea,0,36,0,0.0,2,2019-04-24T17:42:49,0.0
55854148,1996230.0,<microservices><distributed-transactions>,guidance pattern recommendation achieve database atomicity distribute architecture microservice,folk evaluate option pattern practice key challenge maintain db atomicity multiple table face distributed microservice architecture atomicity reliability scale critical business common business read artical achieve cost trade ready read couple question concept saga interesting don legacy database handle expert personal opinion guidance experience save time effort learn bunch option appreciate time effort,0,44,0,0.0,2,2019-04-25T16:48:41,0.0
55812609,10763994.0,<docker><kubernetes><microservices>,understand kubernetes layout,kubernetes layout create cluster node consider physical pc inside pc multiple pod inside pod multiple container container hold multiple application ideally restrict statement true cluster node inside node application scale healing increase node pod,0,57,0,0.0,2,2019-04-23T13:40:17,0.0
55788207,8111793.0,<spring-boot><docker><microservices><netflix-zuul><proxy-server>,netflix zuul route spring boot microservice api docker,error deploy zuul gateway service docker container test window application eclipse work fine reach service zuul gateway port mapping postman gateway work docker container zuulgatewayserverapplication java application property file zuul gateway service add code application property file zuul gateway service docker zuul gateway service dockerfile start docker image port work expect docker container process docker ps link zuul gateway service container link work code work fine window docker container expect connect gateway service docker container hit,0,336,0,0.0,2,2019-04-22T01:34:53,0.0
55808266,3585050.0,<spring-boot><oauth-2.0><microservices><spring-security-oauth2>,log work correctly spring security oauth,zuul gateway spring security oauth client authorization server locate zuul config ssologouthandler class zuul application spring security oauth client config class authorization server order configuration client call resttemplate authorzation server log token refresh token remove client request uaa authorize access token log happen wrong log remove token refresh token access token hand redirect login remove token update deep client request remove token client request attribute response code client redirect login,0,160,0,0.0,2,2019-04-23T09:35:14,0.0
49216360,5084982.0,<node.js><ecmascript-6><microservices>,watch script start script node js project,write app compose microservice development process easy problem script compile code restart server achieve follow script code compile start server change code manually server change build script case command execute script watch change block execution goal script watch change restart server change occur compile code,0,35,0,0.0,2,2018-03-11T03:31:27,0.0
49081095,3959697.0,<azure><microservices><azure-service-fabric><azureservicebus>,single micro service listen single azure bus topic queue,azure service fabric micro service listen multiple azure service bus topic topic topic topic time message traffic topic handle scale ability service create multiple instance service question service instance message topic topic traffic waste resource well create micro service topic topic listener create instance micro service listen topic instance topic listener service create message listener azure service bus keep pull message time continuously check message message guy support,0,370,0,1.0,2,2018-03-03T05:43:35,0.0
49080999,1116654.0,<microservices>,handle duplicate datum micro service architecture,work job site break job match micro service monolith microservice separate database microservice separate copy job monolith handle job crud functionality normal multiple copy datum spread microservice idea database data scare bit create potential thing sync,0,1083,1,0.0,2,2018-03-03T05:28:51,0.0
48473966,3649767.0,<authentication><authorization><microservices>,authentication authorization mechanism microservice,project micro service job responsible authentication authorization clear service check user permission mechanism deal task,0,2345,0,0.0,2,2018-01-27T08:21:12,0.0
48549944,9296335.0,<google-cloud-platform><microservices><google-cloud-functions>,google cloud functions api service discovery,work develop microservice base architecture employing google cloud function develop function implement discovery service discovery service determine specific function exist operational service discovery cloud function rest request api succeed local development function emulator default application credential google provide api deploy production receive code message request require authentication credential expect oauth access token login cookie valid authentication credential status unauthenticated cloud function stateless option service account authenticate cloud function call function api determine function accomplish local dev environment,0,500,0,0.0,2,2018-01-31T19:24:14,0.0
48464383,3572733.0,<java><spring-mvc><spring-data-jpa><microservices><spring-data-mongodb>,mix repo level object controller service level object,work microservice mix repo level object mogo document entity service controller level request response pojo entity document behave reason help understanding reason,0,37,2,0.0,2,2018-01-26T15:27:08,0.0
58648098,889873.0,<c#><node.js><rabbitmq><microservices>,rabbitmq microservice deal scale service,rabbitmq integration event service kind route message microservice replicate service scale replicated service receive message example service message service push message service receive message replicate service message combination routing work queue correctly node js example,0,58,0,0.0,2,2019-10-31T16:59:42,0.0
58593469,11985089.0,<domain-driven-design><microservices><cqrs><event-sourcing>,event base communication microservice shared event libary,learn microservice hand literature recommend asynchronous event publishing microservice collaborate sagas action event publish service hand literature recommend share library define common event couple microservice event library crazy pill microservice couple event rely advantage code exact event definition place total violation dry principle start smell code smell start initial bs help drink rest koolaid emperor clothe second,0,61,0,0.0,2,2019-10-28T15:09:10,0.0
58684820,5040488.0,<kubernetes><microservices><kubectl><kubeadm>,kubernetes cluster master node nee cluster node,aware enable master node execute pod concern default configuration allow master pod change reason default configuration change perform situation cluster three node exactly hardware node add foreseeable future opinion three equal node waste resource cluster computational power kubernetes master edit find follow reason kubernets documentation security reason,0,40,1,0.0,2,2019-11-03T21:34:32,0.0
58669634,189673.0,<rest><api><websocket><microservices>,establish practice implement coordinated operation multiple api,write service talk multiple api transaction db sequence async call fail guess rollback step complete case db obvious solution task transaction step fail transaction simply roll thing happen hybrid distribute environment good practice,0,27,3,0.0,2,2019-11-02T09:01:07,0.0
56015249,7218740.0,<docker><jenkins><microservices>,include jenkins build number docker image build ci,create jenkins pipeline build multiple microservice create docker image push private docker registry docker image create gradle build docker plugin push image help follow question image build jenkin tag image specific jenkin build word maintain docker image build deliver docker image belong specific build qa base build multiple image maintain conditionally prune obsolete image clean image build keep image build tag release milestone,0,213,0,0.0,2,2019-05-07T03:44:41,0.0
45554704,6586594.0,<authentication><loopbackjs><microservices><loopback>,auth microservice loopback,example authenticate microservice loopback user model loopback,0,261,0,0.0,2,2017-08-07T19:52:33,0.0
45498517,8024812.0,<amazon-web-services><aws-lambda><microservices><aws-api-gateway><api-gateway>,aws api gateway lambda proxy microservice,project deploy aw start aws api gateway main entry point microservice frankly speak reason security play api gateway rest api feel bit incovinient register rest service find good option aws api gateway lambda function proxy describe opinion approach share approach simplify api gateway configuration rest api,0,590,1,0.0,2,2017-08-04T04:55:03,0.0
45398103,3022127.0,<microservices>,microservice architecture project low budget traffic,implement microservice architecture keep service small service simplicity deploy service aws nano instance cost month hefty sum small project hobby developer option reduce price service multiple service nano instance dockerize comfortably fit service nano instance price time low problem manage lot thing scale well well alternatively web service,0,475,1,0.0,2,2017-07-30T08:58:23,0.0
52754190,5621869.0,<java><spring><servlets><routing><microservices>,forward http request base datum request body,service controller method task split service microservice microservice deploy machine nginx redirect location main problem location receive type request logic call base field request body example request request forward second question library purpose upd write simple jar base routelocator spring cloud spring cloud stack familiar,0,75,0,0.0,2,2018-10-11T07:05:08,0.0
52903883,10532291.0,<architecture><microservices><messaging><publish-subscribe>,sync de sync microservice pub messaging system,contrived example suppose service blog web application blog post exist service service communicate pub base message broker service allow user post maintain list active user enforce consistency subscribe message service user create delete update work well suppose add service service place current user create receive current user user event service sync service current user list initial thought service periodically publish list current user object publish event topic sync rare export response event service full sync solution message topic service subscribe export service idea,0,77,0,0.0,2,2018-10-20T08:39:15,0.0
52931881,562073.0,<api><design-patterns><architecture><microservices>,inter service communication microservice,understand event drive architecture service subscribe event inter service communication event trigger entity create update delete inter service communication achieve case request instance notification microservice return list product notification user read user notification preference product notification basic product product price notification service notification data easily achieve orchestrate service preference service product service inside notification service result tight coupling proper implement inter service communication microservice data fetch multiple service,0,88,0,1.0,2,2018-10-22T14:35:49,0.0
47885225,1108064.0,<spring><spring-mvc><spring-boot><active-directory><microservices>,create entry point web app manage web app,spring web app database create web app work enter point app web app pass enter point web app login inside app sign user access app permission inside app role kin solution adopt read sure correct idea edit microservice good scenario,0,59,0,0.0,2,2017-12-19T10:48:12,0.0
47774291,4677485.0,<spring><angular><asynchronous><microservices><event-driven>,asynchronous microservice communication perform better perspective ui,angular ui call endpoint api gateway accord good practise microservice handler publish event consume microservice call synchronous rest write follow handler perspective ui user order endpoint return order feel ui synchronous backend asynchronous good practice improve ui case,0,447,0,1.0,2,2017-12-12T13:51:03,0.0
54093008,5575068.0,<microservices><amazon-elb><netflix-eureka><service-discovery><istio>,aws elb service registry,microservice architecture good practice hardcode url service code config change achieve service discovery pattern achieve aws elb register service elb hardcode url regression change ip service elb url remain difference hardcode aws elb url code config service registry tool eureka istio,0,458,0,1.0,2,2019-01-08T13:35:29,0.0
54060028,1909812.0,<azure><microservices><azure-service-fabric><azure-kubernetes>,rest service registry pattern ak asf,build micro service service registry service discovery azure kubernete azure service fabric reference service registry compatible azure environment lead dynamically discover container base micro service deploy ak asf single node azure api management https call good option inter service communication inside single node good option external client,0,233,0,0.0,2,2019-01-06T08:57:11,0.0
54179638,679340.0,<docker><kubernetes><.net-core><microservices><docker-swarm>,microservice transformation microservice transformation,service transform xml document receive message queue depend queue message transformation refactore microservice docker container well practice container net core docker swarm kubernete production leave code container appsetting config setting queue transformation pair pro code change simple docker compose service config file con high demand transformation high priority scale container replicas pull message queue scale refactor code build container image listen queue transformation refactor difference code startup register service base configuration register ixmltransformer pro scale queue transformation problem transformation container restart transformation work clean image transformation single responsibility rule con environment transformation lot configuration file add container volume docker compose long well well option edit clear question explain better option container image difference runtime configuration transform xml csv xml xml xslt csv format xslt configuration csv format configuration xslt configuration itransformer implementations csv xslt read configuration transformation question well container instance config config container monitor queue monitor queue read kind metadata decide transformation,0,63,3,0.0,2,2019-01-14T10:26:06,0.0
57146576,1161594.0,<node.js><microservices>,add schedule job nodejs microservicse good practice,microservicse approach backend nodejs service provide rest endpoint grap datum mongodb apply business logic add schedule job min sync mongodb datum party datum source question dose add microservicse schedule job consider anti pattern point service sync job create engineering simple thing repo build cycle deployment hardware complicate maintenance love hear thought,0,40,0,0.0,2,2019-07-22T12:57:47,0.0
57230574,9091039.0,<.net><docker><asp.net-core><microservices><appsettings>,avoid multiple time url appsetting,microservice solution three appsetting project problem url time difficult change time wonder replace url environment variable change url example configuration,0,47,0,1.0,2,2019-07-27T08:42:27,0.0
57219775,11169740.0,<java><spring-boot><microservices>,create pojo springboot microservice,develop microservice application spring boot create service call user service recipe service question user multiple recipe determine type recipe field microservice independent idea determine send request postman request work,0,67,1,0.0,2,2019-07-26T12:08:46,0.0
57239094,11732787.0,<java><spring-boot><microservices><hazelcast>,decrease ram programmatically hazelcast configuration,ubuntu server gb ram microservice include hazelcast service include imap hazelcast problem jar server easily include hazelcast max service apprx jar drunk test find hazelcast drink ram,0,75,12,0.0,2,2019-07-28T08:16:54,0.0
58533277,12266299.0,<microservices>,transaction management microservice,microservice explain transactional management microservice work foreign key database example client order service sevice database single database order table foreign key client database foreignkey table transaction management service,0,33,0,0.0,2,2019-10-24T02:25:49,0.0
58491622,8836068.0,<security><design-patterns><architecture><authorization><microservices>,authorization api gateway microservice endpoint,build microservice architecture learn benefit api gateway load balance invoke multiple microservice aggregate result cache management decide include system question implement authorization gateway layer separately microservice endpoint example authenticate user gateway pass user claim decrypt form authorization logic service call sense save processing time authorize aggregate call service authorization logic concern individual service advice,0,53,0,0.0,2,2019-10-21T17:45:53,0.0
58500868,11966847.0,<kubernetes><microservices><health-monitoring><kubernetes-health-check><probe>,good practive health check api probes micro service kubernetes environment,develop ton micro service kubernetes op define probe micro service create health check api micro service good practice api good practice probe check service health database connection redundant database kubernetes probe version api probe feedback documentation,0,62,0,0.0,2,2019-10-22T09:13:53,0.0
58377019,1256063.0,<google-cloud-platform><microservices><google-cloud-endpoints><google-cloud-run>,create combine response multiple microservice cloud container single api endpoint google cloud endpoints gateway,familiar firebase platform user google cloud platform work project build microservice structure question find answer well find example example find simple extrapolate viable answer issue adopt cloud offer decide play full manage version kubernete build microservice service build express node flask python depend service microservice expose endpoint api call method service account allow application perform internal call expose application external client build vuejs technology leverage google product create expose api google endpoint question refer cloud structure relate create api endpoint communicate client app internally call multiple service combine response clear example cloud service crud user api cloud service crud product api cloud endpoint external visible api user service product service return combine response green product user jane doe aggregate response directly endpoint gateway check failure smooth send aggregate response client build aggregate endpoint cloud function example directly google endpoints gateway note cloud google endpoints cloud container guy help pretty option,0,117,0,0.0,2,2019-10-14T12:37:35,0.0
58468968,8103520.0,<java><spring-boot><spring-mvc><microservices><feign>,feign client request throw method allow request method post support microservice,vue js app spring backend call feign client order microservice request work fine pathvariable request number url param pass define orderlistitemparameter class add request pass param microservice request microservice deny org zalando problem spring common advicetrait method allow request method post support error sure orderlistitemparameter send feign client match orderlistitemparameter expect microservice mention post feign client microservice endpoint java backend frontend code orderlistitemparameter class pass url param identical microservice microservice controller pic log clearly state request help figure controller post request awesome,0,154,4,0.0,2,2019-10-19T23:53:07,0.0
58353210,11385474.0,<java><json><mongodb><spring-boot><microservices>,datum collection springboot,create springboot project mongodb database collection user collection document user collection product collection document product collection result method user collection result product product ps insert data insert datum table product stre product object product ps english well question,0,41,5,0.0,2,2019-10-12T10:32:13,0.0
58436238,6515166.0,<java><spring-boot><microservices><spring-cloud><spring-cloud-config>,spring cloud microservice server port cast exception,spring boot microservice architecture build simple app spring boot cloud starter order externalize config file property spring cloud config bring property file git repository microservice reach config microservice work fine property throw inside microservice config file code st microservice code microservice,0,53,5,0.0,2,2019-10-17T15:38:09,0.0
54264506,10936405.0,<java><rest><web-services><design-patterns><microservices>,design pattern multiple call webservice,develop microservice call soap webservice response soap service feed input request subsequent soap webservice scenario explain design pattern scenario multiple write advance,0,136,0,0.0,2,2019-01-19T06:03:33,0.0
54411099,2450439.0,<database><architecture><microservices><scalability><distributed-computing>,point scale business logic,dig microservice understand scale code database actual bottleneck well high load point rest learn orchestrate multiple dbs multiple schema upd guess question clear cool replay clarify subject understand high load architecture require scale business logic mid level project response fast microservice answer scale code option project active user daily apply approach db layer divide small logical schema write bl easy develop maintain sagas mq,0,77,3,1.0,2,2019-01-28T22:18:07,0.0
45174891,1421549.0,<apache-camel><messaging><microservices><spring-cloud-stream><event-driven-design>,spring cloud stream config channel event type,work project springboot spring cloud netflix build microservice async communication spring cloud stream produce consume event business contract draft contract service service publish contract create event consume audit service init auditing process user service consume event create notification party scenario event consumer subscribe interested event base event type problem event type configuration file flood channel configuration wrong consider alternative example selectively consume event type good solution spring cloud stream native solution apache camel spring integration complicate routing rule framework overkill newbie messaging hope folk point direction,0,550,0,1.0,2,2017-07-18T18:52:19,0.0
45212821,8018779.0,<spring><spring-boot><microservices>,project structure configuration microservice,ignore english grammar learn purpose create microservice project spring download sample project basic idea microservice confuse start project implement follow simple case database three table product productstock order write microservice table product microservice point crud operation productstock microservice update stock check stock point order microservice post order operation create multi module maven project follow question create multi module maven project create microservice project hibernate module microservice create model class model class module microservice model class product productstock order set hibernate confiuration,0,692,0,0.0,2,2017-07-20T11:01:47,0.0
51827636,2261925.0,<microservices>,register ip address micro service,example list micro service micro service call ip adress micro service register store host ipdaress service ip register micro service,0,91,0,0.0,2,2018-08-13T17:26:30,0.0
51934410,6872018.0,<spring><spring-boot><microservices><zipkin>,project build error dependencie dependency version io zipkin java zipkin autoconfigure ui jar,develop microservice reference link guide issue add dependency error pom xml zipkinserviceapplication java,0,1158,0,1.0,2,2018-08-20T15:53:22,0.0
51861095,4229580.0,<architecture><apache-kafka><microservices><cqrs>,kafka cqrs microservice approach,kafka cqrs microservice approach kafka cqrs separate term describe pattern architecture,0,168,0,0.0,2,2018-08-15T14:51:46,0.0
51868586,3105954.0,<amazon-dynamodb><microservices><aws-api-gateway>,multiple micro service dynamodb table,anti pattern multiple micro service read write dynamodb table note schema change read write rest service api gateway lambda micro service deploy kubernete lambda,0,216,0,0.0,2,2018-08-16T01:52:09,0.0
51999232,8655052.0,<spring-boot><postman><microservices>,rest point json datum postman application,implement sample spring boot project retrieve result postman application postman response request browser properly postman return expect result result properly browser controller code follow help find result postman application,0,1098,1,0.0,2,2018-08-24T07:11:48,0.0
51996128,5207332.0,<domain-driven-design><microservices>,anaemic model transaction script good micro service,talk anaemic model anti pattern good microservice mention anaemic model transaction script martin fowler call good small application monolithic architecture understandable sophisticated structure handle complexity microservice pack logic single service service relate logic single domain easy understand work case totally fine transaction script model inside microservice,0,192,2,0.0,2,2018-08-24T01:00:59,0.0
55253214,9294564.0,<java><web-services><java-ee><wildfly><microservices>,communication database java ee,costumer store database store wildfly webservice communicate json request row spend second average wildfly gb ram memory problem java economic microframework javalin microservice java ee app server node js option well performance,0,53,0,0.0,2,2019-03-20T03:39:11,0.0
55235243,10633596.0,<java><amazon-web-services><spring-boot><amazon-dynamodb><microservices>,connect dynamodb aw spring boot application local system,work spring boot microservice rest base application backedn database currently local dynamodb database rest call postman application locally perform crud operation local dynamodb database change configuration crud operation application locally datum save update actual dynamodb aw local basically point application remote dynamodb endpoint sample reference guide configuration change currently configuration class property file assist,0,636,0,1.0,2,2019-03-19T06:59:40,0.0
55106296,11159343.0,<spring-boot><authentication><spring-security><jwt><microservices>,authentication microservice spring,wanna refactor monolithic spring boot application basically web app login functionality customer security implementation work session store cookie knowledge completetly topic jwt well solution microservice independent authentication service question alot work create jwt authentication service exchange session implemenation bachelor thesis clear deadline stay session microservice implement authentication,0,502,0,0.0,2,2019-03-11T16:25:59,0.0
55199503,10565873.0,<spring><kubernetes><microservices><devops><netflix-eureka>,kubernetes secure service endpoint,small micro service architecture build eureka service discovery problem face service endpoint accept request api gateway request straight service hit service endpoint problem kubernete solve practical,0,85,7,0.0,2,2019-03-16T17:22:39,0.0
52408743,217648.0,<architecture><containers><microservices>,migrate monolith microservice touch database,big monolithic application huge oracle db move application microservice architecture container database level change db good approach isolate service painful change database phase problem db level multiple process service,0,148,1,0.0,2,2018-09-19T14:55:11,0.0
52453455,774907.0,<api><graphql><microservices><aws-appsync>,graphql field resolver contextual,terminology accurate aw appsync schema resolver return object shape return resolver field receive fetch object data store proper data store table column separate store table list author primary key column service join sql query,0,155,1,0.0,2,2018-09-22T04:21:25,0.0
52329333,9528951.0,<java><eclipse><microservices><lombok>,lombok import xxx work java eclipse,eclipse error thing relate lombok add lombok ordinary eclipse follow statement error lombok annotation error grateful kind help,0,738,1,0.0,2,2018-09-14T09:47:04,0.0
52369847,4919607.0,<node.js><express><microservices>,manage node js microservices development enviornment,work project node js microservice question setup development environment start service manually terminal start development modify code reflect change nodemon expressjs microservice guide,0,245,1,0.0,2,2018-09-17T14:17:38,0.0
44977364,6293214.0,<web><architecture><microservices>,microservice practice work,theory understand microservice work helpful case don work practice online shop base cms monolith application online shop microservice architecture microservice architecture differ technically current monolith architecture example pick productsearch php scale function set server copy cms ressource folder loadbalance microservice productsearch php single microservice guess copy php file scale copy ressource,0,287,2,2.0,2,2017-07-07T18:20:26,0.0
45023334,1923467.0,<java><spring><spring-boot><dns><microservices>,efficiently handle spring boot microservice,bunch spring boot microservice unique port handle microservice production production dns handle dns mapping example microservice port example microservice port example microservice port example microservice port example microservice port myprod example microservice myprod example microservice myprod example microservice myprod example microservice remove https http reputation microservice exist codebase build create individual runnable jar,0,269,4,1.0,2,2017-07-10T23:55:58,0.0
56120753,5410011.0,<c#><api><jwt><microservices><ocelot>,bypass ocelot api gateway,api gateway instance call gateway api class define authentication scheme follow configuration file access gateway api port token response prove configuration file well authentication work well customer microservice identity microservice allow user authenticate valid username password issue token token call customer service successful response reason access customer service directly gateway successful response token customer microservice add authentication scheme microservice class overkill attribute action customer microservice throw exception default authentication scheme,0,265,0,1.0,2,2019-05-13T22:44:42,0.0
56169607,3507298.0,<angular><rest><.net-core><architecture><microservices>,handle child datum microservice,figure good organize code project microservice approach net core api angular ui wrap head follow example parent level entity invoice invoice table database build invoice service api handle crud invoice relationship invoicedetail provide deep level info invoice plan keep invoicedetail crud invoicesservice list head roll service straight forward tear ui side thing create invoice create invoicedetail call api create invoice return create invoicedetail handle call well separate concern api controller invoice handle crud separate controller invoicedetail,0,40,0,0.0,2,2019-05-16T13:20:14,0.0
56166646,2210442.0,<node.js><express><rabbitmq><microservices><load-balancing>,rabbitmq node rest api,develop node sdk rest api api interact blockhchain framework read write operation situation request node sdk load balacing replica sdk instance work well load balance well api straightforward read write operation api heavy processing read rabbitmq purpose integrate multiple microservice execute heavy task image processing image uploading rabbitmq,0,75,0,0.0,2,2019-05-16T10:39:37,0.0
56295181,9625776.0,<spring><microservices><spring-cloud><netflix-eureka>,spring boot microservice connect eureka server,connect service auth service eureka server service registry eureka server connect auth service happen add configuration application yaml application property help application yaml auth service url eureka server ds replicas localhost message start auth service eureka server annotate enableeurekaserver client annotate enablediscoveryclient auth service pom discovery service pom,0,638,4,0.0,2,2019-05-24T14:59:59,0.0
50261052,9627901.0,<node.js><service><redis><architecture><microservices>,server constantly function update cache block server function,minute cache orderbook cryptocurrency exchange orderbook update function question server constantly orderbook update function block server functionality user interact server create separate service perform updating node prioritize api request pause caching function,0,54,0,0.0,2,2018-05-09T19:51:54,0.0
50338845,5072383.0,<microservices>,microservice care api gateway,build microservice architecture kinda confuse kafka message broker system communicate service perfect example return duration distance price assume microservice service pricing service duration distance service driver question hit endpoint request microservice rest call microservice retrieve datum duration distance api gateway care,0,91,1,0.0,2,2018-05-14T20:53:37,0.0
50239555,7492327.0,<domain-driven-design><microservices><soa><solid-principles>,microservice share domain layer,doubt microservice architecture develop erp microservice human resource identity order implement share domain layer entity common layer include abstraction interface company location object question boundary share item microservice bad case share entity microservice help write code time create small level coupling,0,989,1,0.0,2,2018-05-08T17:52:36,0.0
50430808,0.0,<amazon-web-services><spring-boot><aws-lambda><microservices><aws-cognito>,option follow microservice spring boot aws lamba,java java ee background microservice aw lot read microservice spring boot impressed spring boot aw month bite familiar work big application thinking design complete api micro service microservice manage user three business logic handle authentication base work consider option option aws cognito social medium login support aws api gateway multiple aws lambdas java code dynamodb preferably rds mysql concern write complex business logic handle complex table relation eager lazy fetch aws lambdas neatly spring boot spring data jpa option start write business logic spring boot spring boot application mysql dynamodb backend deploy aws ec implement sprint boot application jwt authentication concern manage authentication entry point api multiple spring boot application face challenge integrate aws api gateway centralized management authentication authorization face challenge integrate aw cognito social medium login face lot complication stage help decide,0,596,2,1.0,2,2018-05-20T00:58:59,0.0
50289914,4343294.0,<architecture><microservices><enumeration>,deal enumeration microservice architecture,face problem design microservice architecture system context suppose service service responsible payment service responsible keep track order case update order state service state enumeration list inside service avoid sharing enumeration service decouple service feel free clarification,0,274,3,1.0,2,2018-05-11T10:06:16,0.0
39425569,1009686.0,<spring-boot><java-8><jms><microservices>,spring boot java microservice simple message subscription service,microservice jms create subscription read subscription spring boot jms,0,835,0,0.0,2,2016-09-10T11:27:38,0.0
57345012,1641352.0,<java><spring-boot><junit><microservices>,api endpoint spring boot entry point error junit test case,application main class follow api endpoint write junit test case controller class follow define junit test class controller testsavetype,0,33,0,0.0,2,2019-08-04T08:18:43,0.0
57323473,6261801.0,<jar><microservices>,send request microservice,service monolith application create microservice monolith application microservice ms problem statement communicate microservice rest api monolith divert specific api call microservice communication map param microservice monolith create jar bad idea violate fundamental principle microservice independently deployable suppose create user api send ms address param ms side param nm prm map ms param monolith create service care send param map ms parse filter param request,0,45,0,0.0,2,2019-08-02T09:19:22,0.0
57512807,290036.0,<web><events><queue><microservices>,web apps integration event base service,good practise connect web application react single app example pure event base backend microservice activemq example call react request response response consider backend service event base thought execute command rest controller service backend request response fire event return response client side signal catch happen keep load event process backend fire response event stickiness approach rest controller listen controller send actual response browser websocket browser response display result workaround good event base solution,0,56,0,0.0,2,2019-08-15T16:17:03,0.0
57514163,5072496.0,<kubernetes><backup><microservices><snapshot><disaster-recovery>,kubernetes object detail,implement snapshot solution cluster consistent snapshot service persistent volume snapshot persistent volume matter config time snapshot good config detail include yamls service configmap secret read velero velero disaster recovery solution snapshot cluster cluster velero mention config interesting snapshot solution service kubernete solution work pod help greatly appeciate,0,63,0,0.0,2,2019-08-15T18:06:02,0.0
57474823,716027.0,<microservices><consul>,consul dev environment,suppose service deploy server connect consul start service local machine read datum consul interact service deploy server service interact service local machine local consul instance proxy request configuration service discovery test server consul find info configure local environment consul,0,82,0,0.0,2,2019-08-13T09:27:53,0.0
57338181,2571957.0,<apache-camel><microservices><netflix-eureka><service-discovery>,configure apache camel servicecall service eureka service discovery,work project force spring boot eureka server localhost service register force apache camel servicecall service eureka server work consul service discovery follow work eureka server localhost,0,130,0,0.0,2,2019-08-03T12:09:38,0.0
57421950,4109326.0,<microservices>,microservice database,traditional microservice architecture service database understanding datum describe consider permissible database duplicate datum instance user service essentially user post service store primary key username author post display instance talk eventual consistency source truth concept datum duplicate understand microservice architecture include shared database place rare strategy service typically database service resource convince service layer persisted resource access database service resource require access subset master resource shared database justification service microservice architecture database,0,152,0,0.0,2,2019-08-08T23:49:11,0.0
57394383,11094258.0,<rest><jmeter><microservices>,configure jmeter http post method set dynamic datum jmeter payload avoid database duplicate constraint error,jmeter performance testing microservice method jmeter thread maximum ramp time payload csv file problem script process follow st thread insert companyid xx detail duplicate db thread insert companyid detail reason insert detail insert st thread error question payload datum dynamic thread unique datum approach wrong thread choose unique csv file insert unique record csv file thread perform application time set datum performance testing advance,0,46,3,0.0,2,2019-08-07T12:20:21,0.0
54525941,9050126.0,<javascript><node.js><apache-kafka><microservices><backend>,send http response consume kafka topic,currently write web application bunch microservice currently explore properly communicate service ve decide stick message bus apache kafka question sure conceptually api gateway service main entry application main proxy forward operation applicable microservice consider follow scenario user send post request api gateway gateway produce message publish kafka topic subscribed microservice pick message topic process datum suppose respond client gateway datum microservice feel http request timeout stick websocket client api gateway client send request fetch datum suppose approach kafka,0,516,0,0.0,2,2019-02-04T23:41:51,0.0
54533643,7826854.0,<asp.net><mongodb><microservices><crud><cqrs>,crud operation microservice dotnet core cqrs mongodb,poc dotnet core microservice cqrs pattern mongodb nosql database start help,0,280,0,0.0,2,2019-02-05T11:42:41,0.0
54473685,10999411.0,<cluster-computing><microservices><hazelcast><vert.x><vertx-verticle>,implement keep alive hazelcast cluster verticle,verticle belong cluster send hello message event bus message basically send verticle receiver verticle store message map implement keep alive method kill sender message send receiver delete receiver map hazelcast website find easy implement feature expect result sender record delete receiver map sender verticle kill,0,40,0,0.0,2,2019-02-01T05:59:28,0.0
54593096,5501401.0,<spring-boot><microservices><message-queue><spring-jms><spring-amqp>,springboot microservice api call server amqp queue response service queue send response,write micro services platform server write spring boot expose api spring boot microservice call example endpoint createorder service call controller call send message server amqp jms integration receive queue process controller send message server response send api request create order createorder server send message queue server server process send message respond request process hold request server wait response server,0,73,0,0.0,2,2019-02-08T13:06:06,0.0
54571222,1401631.0,<spring><spring-boot><docker><docker-compose><microservices>,image docker compose work expect docker command,micro service build spring boot service discovery gateway server zuul proxy server backend application serve rest api docker compose yml file entire stack work perfect docker image microservice stuff individual image micro service connect service registry connection refuse guy lead advance,0,187,0,1.0,2,2019-02-07T10:28:22,0.0
54673313,5331196.0,<architecture><microservices>,microservice – good practice retrieve relate datum specific user micro service minimal memory time loss,create microservice architecture lumen laravel passport multiple dockerize service separate luman app container vms api gateway service integrate laravel passport authentication request validation proceed chat service service message chat room news service … service service separated redi mysql database monolithic application example user table database relation table join query retrieve datum accord logical selection current user general mobile web app example multiple service current visible receive data send multiple request service question good correct practice store user microservice architecture correct retrieve relate datum user micro service minimal memory time loss store user phones avoid datum dublication dublicate understand,0,959,0,1.0,2,2019-02-13T15:06:35,0.0
54662097,7224145.0,<azure><microservices><azure-service-fabric>,service fabric explorer accessible,error mac computer access url chrome certificate pfx translate pem,0,216,3,0.0,2,2019-02-13T03:33:49,0.0
51505849,6676444.0,<spring-boot><spring-security><microservices><spring-boot-admin>,spring boot admin full authentication require access resource,netflix oss reverse proxying security microservice follow jhipster pattern mention request ui application gateway api gateway proxie request backend microservice jwt authentication dashboard monitor microservice api gateway register eureka server start separate spring boot admin server register eureka server poll microservice gateway metric endpoint exception throw filter filter jwt api gateway microservice level disabled luck help guide change enable spring boot admin poll microservice api gateway follow approach firstly enable web ignore antmatcher actuator actuator endpoint ignore spring security approach risk api second idea enable filter spring security filter spring boot admin basic authentication actuator endpoint second filter jwt authentication rest api downstream api sure feasible enable filter filter actuator point filter api filter work perfectly connect sba,0,796,0,0.0,2,2018-07-24T19:03:17,0.0
51433860,872487.0,<architecture><microservices><hystrix>,hystrix circuit close,understand hystrix understand service call party service service respond threshold exceed configuration circuit open onward call short circuit understand circuit close suppose service call party service service work fine circuit open minute service start work fine circuit close call service party service start behave fine circuit close,0,817,0,0.0,2,2018-07-20T01:30:03,0.0
51578263,7657943.0,<rabbitmq><microservices><spring-cloud><zipkin>,spring initializer zipkin dependency,spring initializer find follow dependency zipkin ui zipkin stream stream rabbit deprecate dependency alternative dependencies spring initializer provide,0,176,0,1.0,2,2018-07-29T07:36:23,0.0
51579626,6050113.0,<spring-boot><rabbitmq><microservices><spring-rabbitmq><rabbitmq-exchange>,delay feauture rabbitmq work,rabbitmq spring boot send message microservice set delay option message case messagepropertie file message empty header message beae delay wrong solution basic aim delay message specific time,0,248,0,0.0,2,2018-07-29T11:02:39,0.0
51511923,4989264.0,<java><debugging><openshift><microservices>,debug java microservice openshift cluster,java microservice mesh deploy openshift cluster debug buggy microservice locally squash debugger telepresence work squash provide support java intellij eclipse pay intellij telepresence find pod exist openshift cluster,0,310,1,0.0,2,2018-07-25T06:10:12,0.0
51425111,397830.0,<c#><design-patterns><architecture><microservices>,service event micro service architecture,kind good practice application lot service lot interaction service notify change intuitive developer approach event register feeling kind dirty service offer request aware lifecycle service service garbage collection service prevent register alternative service object register event find clean provide service object implement callback interface service call callback notify event good practice clean approach,0,63,2,1.0,2,2018-07-19T14:22:01,0.0
51498267,3146344.0,<.net><api><.net-core><microservices>,authentication api api microservice,plan build separated webapi backend app net core big front application build angular call microservice frontend app module login microsrv microsrv login gui loginapi log microsrv gui connect microsrv api microsrv microsrv api idea open logingui click log call loginapi authenticate azure ad jwt download user datum role user return logingui authenthication panel microsrv gui microsrv gui call microsrv api microsrv api authorize send token store cookie good practice separate microservice authentication microservice build share authentication token microservice login api app provide example,0,127,2,0.0,2,2018-07-24T12:09:12,0.0
42810364,6752498.0,<node.js><logging><monitoring><microservices><winston>,track datum nodejs microservice,deal application multiple microservice application receieve datum process monitor receive datum microservice platform deal asynchronous processing log write data aמ log filter convenient track datum moment enter application till move microservice pass generate method pass microserive keep code clean log fit advance suggestion highly appreciate,0,486,0,0.0,2,2017-03-15T12:52:26,0.0
46178051,5351746.0,<java><spring><logging><microservices><spring-cloud-sleuth>,dynamic user case base logging,log framework help change logging level dynamically base request parameter receive request parameter debug enable true log spring sleuth provide feature cloud environment,0,26,1,0.0,2,2017-09-12T13:42:36,0.0
46180957,7728822.0,<microservices><pact><pact-jvm>,pact verify work annotate method find message provider test,project message provider involve apache kafka base messaging consumer side maven goal work fine local well jenkins provider side pact verify fail jenkin annotate method find interaction pom xml config,0,653,0,0.0,2,2017-09-12T16:00:30,0.0
46092604,8573529.0,<java><microservices>,event drive microservice generation,newbie microservice create microservice architecture api gateway receive request create event event intercept microservice store datum database mistake design expect client call api gateway request proceed asynchronously data consistency guarantee client resource create client listen event well architecture wrong path advance comment note structured framework experiment keep simple open suggestion involve spring java framework edit interesting point api response asynchronous client insert aggregated datum resource identify achieve event drive architecture,0,505,3,0.0,2,2017-09-07T09:21:30,0.0
56629810,3794118.0,<.net><jwt><microservices><identityserver4>,restriction refresh token lifetime span identity server,microservice currently jwt access token access access token epire time overcome scenario implement refresh token renew expire access token implement restriction refresh token lifetime span achieve note identity server jwt token generation,0,137,0,0.0,2,2019-06-17T10:52:26,0.0
56660397,1258319.0,<amazon-web-services><microservices><terraform>,terraform postgresql database setup,teraform script system aw single database server instance access multiple micro service micro service persist datum point database schema database server prefer service schema service totally decouple create separate database instance achieve bit service persist close waste create postgresql resource service tf script common microservice service service create corespondent database correct add idea achieve service tf service tf question service tf service tf advance input,0,52,2,0.0,2,2019-06-19T05:09:15,0.0
56680066,460293.0,<spring-security><jwt><microservices><spring-security-oauth2><spring-security-rest>,authorize micro service internal communication,multiple micro service call client api gateway micro service communicate ideally request api gateway user permission assign require role user example user browser datum micro service role user internally micro service datum rest call role assign user requirement restrict authorize internal communication micro service authorize micro service call option assign role user internal communication pass token communication assign user face micro service role user internal communication require micro service user micro service generate token call allow micro service communicate internally fetch datum micro service process client option best,0,1020,2,1.0,2,2019-06-20T06:19:51,0.0
28112290,1585082.0,<configuration><cloudfoundry><microservices>,parametrize cloud foundry service instance,problem reduce case service single rest entrypoint return message instance return message course service instance bind app wonder accomplish good pass parameter create call broker impossible create multiple instance service differ parameter pass startup full cf instance management crash restart avoid create app parameter pass environment variable update amount message instance big content unknown advance disqualifie service broker plan plan message,1,358,0,1.0,2,2015-01-23T14:41:20,0.0
27470721,43365.0,<java><batch-processing><spring-batch><microservices>,avoid duplication business logic batch processing,web application dedicate batch processing batch service api drive main web application dedicated struggle decision good avoid duplication business logic batch service application cluster separation batch processing simple job complex job chaos business logic duplicate case purpose question customer schedule cron job user update batch service csv file user record batch service rip file perform validation record basically dry batch service check allowable change error threshold percentage count validation threshold pass batch service create updating user user create update number module feature event job progress track customer view progress log status job solution jar business logic share application easy main application grail application gorm litter batch service hit api main application create update complex validation scenario worry toll tomcat call load balancer distribute batch service hit api main application validation queue create update request main application retrieve queue help reduce http call queue report status batch service duplicate logic batch service validation insert update fire user create event user update event module feature main app deal change embe batch processing service main application detail batch service web application cluster aw tool sqs sns easily accessible java application tomcat container main application grail batch service spring batch quartz core question accept avoid duplication business logic base detail architecture change better accommodate idea consider microservice architecture word toss number time office consider idea break main web application service example service user management,1,769,0,0.0,2,2014-12-14T15:19:48,0.0
30908725,2968101.0,<rest><amqp><hateoas><microservices>,add item microservice reference,context microservice user manage user crud operation billing manage billing reference user wrong good idea store user billing datum hateoas walk hyperlink response api question create billing fact post billing microservice send user userentity billing service user service billing service marshall request meaning code duplication service role front api consumer request billing user relate billing ressource billingservice user respond front article good thing amqp bus deal microservice ressource exist check exist service container registry dynamically discover service case zookeeper zookeeper location service relate ressource hateoas link hateoas schema,1,651,0,0.0,2,2015-06-18T07:11:48,0.0
29924248,399113.0,<performance><cloud><load-balancing><microservices>,microservice base system network,web application separate component reason price consider deploy future component cloud reference experience definitely good component network decrease performance time idea lose power choice component microservice base system network handle problem,1,67,0,0.0,2,2015-04-28T15:57:59,0.0
29831699,3666413.0,<ibm-cloud><microservices>,share url application application bluemix,application bluemix url application hard code url source code bad idea url change,1,354,0,0.0,2,2015-04-23T18:36:16,0.0
26611387,1702313.0,<java><jpa><domain-driven-design><microservices>,ddd explain diffrence dto aggregate root detach entity,bit puzzled figure difference three presume customer address relation jpa detach entity well eager loading presume additional aggregate root dto reason jpa compliant entity info client simply interested convert easily json xml jax ws client deal,1,960,3,0.0,2,2014-10-28T14:51:52,0.0
25824957,683077.0,<rest><design-patterns><soa><microservices>,group datum microservice,rest base microservice architecture correct group relate datum single entity example user service responsible manage user additionally service responsible manage kind datum store user assume example talk user item inventory separate inventory management service create inventory ideally inventory management system require user order function typical pattern provide grouping multiple inventory item single owner rest endpoint support architecture,1,604,0,1.0,2,2014-09-13T15:55:18,0.0
35555602,4226056.0,<java><compiler-errors><microservices><netflix-eureka>,eureka client jdk,follow error eureka client discovery sample code guess fact eureka compile java jdk project jdk eureka jdk,1,652,0,0.0,2,2016-02-22T14:01:40,0.0
32369075,2080079.0,<data-modeling><domain-model><microservices>,universal data model microservice integration,native cloud application microservice architecture require decentralize data model microservice database centralize data model microservice architecture universal data model pattern reference implementation universal data model microservice,1,622,2,1.0,2,2015-09-03T07:07:00,0.0
32838312,589620.0,<node.js><express><microservices>,architecture microservice,start work node js build architecture multiple express js service service locate server server machine build base service api gateway proper communicate gateway microservice microservice currently work solution base strong feeling approach proper build communication logic api gateway microservice,1,2827,0,0.0,2,2015-09-29T07:37:32,0.0
35875489,673680.0,<microservices>,api gateway microservice style architecture,example net api gateway entry point client request api gateway microservice style architecture,1,520,0,1.0,2,2016-03-08T18:46:19,0.0
33798965,260511.0,<java><redis><datasource><microservices>,microservice advice concern share state service,follow microservice architecture independed service userservice otherservice userservice write datasource mysql redis client write update userservice hand client datum otherservice user state userservice latency throughput otherservice option userservice update otherservice state change break domain responsibility otherservice maintenance user state otherservice userservice api user state add lot latency critical cache sure share datastore userservice write otherservice read break microservice principle share datasource guy ray,1,285,4,0.0,2,2015-11-19T08:45:43,0.0
28727632,1419760.0,<json><serialization><thrift><microservices><data-interchange>,practical disadvantage type datum interchange format thrift capn proto microservice context,introduce type read predefined schema datum interchange format communication internal service example guess thrift cap proto obvious advantage json exact format datum service expect leave room ambiguity error communicate implementation generally deserialize raw message provide method access object practical disadvantage route versus json context system consist service write python java language future communicate http endpoint service message broker rabbitmq,1,690,0,0.0,2,2015-02-25T19:12:15,0.0
37180556,2394816.0,<c#><testing><microservices><pact><pact-net>,validate type pactnet,test micro services create validate pact find test brittle verifier check exact verify type example test github api test work repo add increase test fail check type concrete verification code pact file,1,1066,0,1.0,2,2016-05-12T07:50:44,0.0
34077752,3230694.0,<azure><reference><package><microservices><azure-service-fabric>,service fabric packaging code error require reference,update sf issue prevent sf totally problem word code service fabric application consist reference class library call case reference package perform package code folder deployment perform case reference package perform bad reference error deploy application cluster issue appear sf update preview,1,594,0,1.0,2,2015-12-03T22:50:52,0.0
38121112,5085485.0,<asp.net-web-api><authorization><asp.net-core><jwt><microservices>,net core authorize attribute external jwt authentication microservice,bit trouble head round net core authorize attribute authentication service provide valid authentication detail return jwt jwt validate jwt return message indicate build webapi require authorization action controller idea jwt pass header request pass validate add policy convolute quick write default authorization hit jwt header pass standard behaviour bear mind jwt authentication handle,1,2037,0,1.0,2,2016-06-30T10:57:14,0.0
37985551,2799226.0,<iframe><microservices>,alternative iframe microservice ui composition,currently integrate multiple microservice ui web portal navigation sidebar link microservice load iframe central area lot issue iframe security frame option header window sizing well alternative iframe,1,1702,2,0.0,2,2016-06-23T08:01:54,0.0
34586306,1862487.0,<c#><.net><architecture><odata><microservices>,implement microservice odata net,read limited valuable internet fair understanding theory point view understand high level architecture move small independent service example internet write loosely couple window service daemon case ms implementation connect understand write small loosely couple web service adhere fit bill micro service odata net service odata controllers micro service deploy monolith clear violation microservice architecure pattern correct statement odata net design work micro service answer explain help example help understand api gateway pattern mix,1,1285,0,1.0,2,2016-01-04T07:14:16,0.0
34652782,394278.0,<soa><microservices>,microservice environment service longer active development,typical development environment sizeable team typically align largish project feature shoe horn exist monolith team monolith despite monolith longer develop release associate team clearly team perform microservice small service build typical small team build longer require change developer move service dependency number application specific team associate service change require service assign ownership,1,55,0,0.0,2,2016-01-07T10:28:34,0.0
54853521,2135483.0,<java><microservices><session-management>,application upgrade monolithic microservice,year monolithic java application strut handle ui call jdbc spring jdbc template db calls spring di tile jsp jquery ui deployable create single source code war online application jar job current ui pretty goal redesign application microservice identify module separate microservice follow question mind ui framework angular react grow angular slow well performance loading concern ui javascript call backend web service directly spring controller proxy deploy war kind forwards ui call api help single ui call require update datum microservice cover microservice security aspect load balancer multiple instance microservice banking application organization allow elastic search lucene search suggestion report oracle backend job main payment microservice create payment payment volume huge require multiple instance manage user log session memory distribute session store memcache,1,84,1,0.0,2,2019-02-24T15:36:18,0.0
44785105,8081281.0,<java><swagger><microservices><spark-java>,swagger datatype generate doc,code swagger code suppose automatically generate default json request depend datatype case generate contrary change org pkg somerequ default json generate help consider class somerequ someresponse code image datatype image datatype,1,1233,2,0.0,2,2017-06-27T16:10:35,0.0
42899966,7738919.0,<java><security><spring-boot><authorization><microservices>,schedule communication resource microservice,scenario resource micro service secure spring security assume collect datum schedule call endpoint hour collect datum catch resource service communicate valid access token user log schedule job continuously independent log user correct call configuration super default user schedule job authenticate implicitly note scheduled job independent user intervention,1,268,0,0.0,2,2017-03-20T09:30:24,0.0
40447582,3639893.0,<web-services><rest><architecture><microservices>,api gateway handle webservice microservice architecture,architectural question transform monolith microservice architecture plan identify bound contexts microservice keep public api api gateway route stuff properly internal communication rest shot unfortunatelly exist public api webservice time transformation webservice rest communication stuff domain object violation microservice design add field microservice imply touch api gateway wrong opinion,1,414,0,2.0,2,2016-11-06T08:58:30,0.0
42331661,1028270.0,<google-app-engine><cloud><google-cloud-platform><development-environment><microservices>,google cloud project suppose work organizational unit,google cloud structure relate project confused hand gcp service encapsulate project create test stage prod project application test test eventually move prod ready live sql bigquery bigtable test project developer hack worry production app engine app project work app engine version project app engine app test staging mechanism app project gcp service bigtable bigquery storage multiple app access project stuff test stage prod project service dbs storage live create separate project app engine app multiple app access live app project sense edit google good doc project service organize,1,316,0,0.0,2,2017-02-19T19:14:15,0.0
42216713,7250483.0,<url><docker><microservices><docker-swarm><docker-image>,hardcode url path docker image call backend service,docker describe scenario docker image web application image front web layer presentation layer supply rest service container image front call service write url front code build image micro service laptop ip change image service url variable front image rebuild thx,1,587,0,0.0,2,2017-02-14T02:11:50,0.0
42311050,1076011.0,<spring-boot><microservices><netflix-eureka><spring-cloud-netflix>,register spring boot microservice spring cloud netflix eureka,plan spring cloud netflix oss component small sample project develop spring microservice service well write sample spring cloud etflix eureka maven project well annotation eurekadiscoveryclient springbootapplication spring boot microservice main class annotation enableeurekaserver springbootapplication face problem register service eureka server refer sample understand change application yml file microsvc microsvc application yml file eureka server empty change require missing correct configuration service register eureka question create separate project enableconfigserver springbootapplication annotation microservice eureka server project module register service eureka example link,1,1373,1,0.0,2,2017-02-18T04:28:10,0.0
41672971,7424615.0,<spring><spring-security><microservices><netflix-zuul>,append request header post spring security authentication,add header request post spring security authentication happen header append zuul filter spring security filter,1,984,0,0.0,2,2017-01-16T09:21:11,0.0
40036030,1662570.0,<spring-cloud><microservices><netflix-eureka><spring-cloud-netflix>,eurekahealthindicator issue netflix eureka client,write eureka client spring cloud netflix release face mention issue pfb code configuration eurekaclient java application yml bootstrap yml client fail start follow error screenshot detail error stack set healthcheck enable false application yml work help appreciate regard,1,594,2,0.0,2,2016-10-14T06:07:19,0.0
50563413,649605.0,<microservices><jhipster><jhipster-registry>,purpose generate entity jhipster gateway,tutorial gateway generate entity generate microservice application entity explain architectural benefit goal generate entity gateway,1,135,0,0.0,2,2018-05-28T09:42:52,0.0
50672490,3184308.0,<node.js><architecture><microservices>,gather datum microservice,problem understand basic communication microservice find good solution standard question basic example invoice service return invoice invoice user product view render invoice specific user simple request specific view request detail product invoice code example perfect generate huge number request product service user imagine user kind request product number request order avoid performance issue find workaround kind scenario create api endpoint accept list order single request duplicate product service invoice service find keep sync microservice architecture deal kind issue simple workaround edit base remus rusanu response remus recommendation decide isolate service describe bit better image microservice isolate specific billing service owner datum structure ensure billing service work async job service create invoice call microservice user inventory synchronously update datum cache table user inventory billing service good assume cache table read assume user inventory service modify preserve isolation authority,1,300,1,2.0,2,2018-06-04T01:37:39,0.0
50562495,2077788.0,<spring-boot><microservices>,handle microservice interaction microservice,microservice architecture currently spring boot microservice case microservice fail mechanism work microservice interact interact case microservice cluster handle situation,1,2178,1,0.0,2,2018-05-28T08:52:46,0.0
50552293,3903417.0,<spring-boot><java-ee><microservices><wildfly-swarm><payara-micro>,maven archetype payara micro,start microservice project base jee payara micro wildfly swarm maven archetype create microservice structure exist spring boot complete structure dao model controller view configuration file,1,201,1,0.0,2,2018-05-27T12:46:31,0.0
50647223,850771.0,<java><maven-3><microservices><maven-enforcer-plugin><maven-reactor>,maven enforcer issue reactor level,maven version fail work fine mvn clean package module level warning message trace enforcer fail package build,1,295,2,0.0,2,2018-06-01T15:58:46,0.0
55470527,8486341.0,<spring><cloud><microservices>,deploy code change microservice,instance microservice identify eureka service discovery call route gateway deploy code change instance code change atomic meaning point time instance code simple strategy bring instance deploy change bring bring remain instance deployment change bring ideal strategy follow production environment specific pattern follow answer blog discuss microservice pattern talk scenario instance code version update,1,66,0,0.0,2,2019-04-02T08:47:59,0.0
55355922,11259920.0,<database><transactions><microservices><data-consistency>,datum consistency multiple microservice duplicate datum,currently microservice architecture datum consistency issue read duplicate datum microservice consider good idea service independent figure follow case provide consistency customer service registercustomer method register customer send message rabbitmq service pick store db code handle case application send message unable save datum course swap dbcontextsave publishmessage method trouble wrong datum store approach,1,167,0,0.0,2,2019-03-26T11:21:13,0.0
49488573,4596645.0,<design-patterns><microservices>,communication microservice responsibility,microservice read documentation doubt thing example achieve scenario microservice architecture fileserver store file source microservice database templateservice database templateid pk guid fileid fk guid templatename fileservice database fileid pk guid filename path case user upload template application question idea create guid fileid ui create guid call template service file service ui call template service service create guid call file service deal file server ui send file directly fileserver service filemanager ui send file fileservice service store fileserver update design userinput savetemplate,1,152,2,0.0,2,2018-03-26T09:52:27,0.0
43870576,5113666.0,<rest><get><microservices>,batch request microservice,divide monolithic service microservice architecture separate service rest call distribute problem call return instance dependent call instance call datum convert single call additional call call alot time multiple request single request search batch request post instance recommend create update multiple instance well edit case service service detail student detail teacher teacher table student teach foreign key simple key ui teacher teacher detail student student class belong student class detail call student service student,1,728,3,0.0,2,2017-05-09T13:01:35,0.0
43378165,3154653.0,<design-patterns><architecture><message-queue><microservices>,microservice architecture dependency,read lot microservice architecture thing understand achieve hope help web api endpoint recieve order ordermicroservice responsible handle order inventory update orderm publish event subscriber pub example nat inventoryms update inventory subscribe current event message loose couple architecture asynch call modules mss interested info scenario work perfectly fine instance inventoryms happen scale inventoryms horizontally instance inventoryms subscribe inventory change event update inventory kind architecture message pattern scenario horizonatally scalle ms loose couple architecture mss dependent communication internally rest call circuit breaker pattern feel build monolite mss smartness circuit breaker help,1,443,0,1.0,2,2017-04-12T19:34:55,0.0
43379048,7733281.0,<docker><dockerfile><microservices><consul>,microservice aware ip address consul service registry,currently dockerize micro service application consul service discovery service register consul environmental variable consul start script undockerized micro service application consul ip port user forwards microservice good replicate dockerize microservice application container independent service register consul consul ip hardcode consul ip port required microservice application don elegant idea service aware consul ip help appreciate,1,444,0,1.0,2,2017-04-12T20:27:28,0.0
43350278,247216.0,<architecture><microservices><semantic-versioning>,semver microservice,good practice pattern apply semver microservice product semver microservice semver product example product call microservice call initial release minor update report product patch search product versioning change product version completely independent microservice semver versioning,1,743,3,0.0,2,2017-04-11T15:29:38,0.0
52070247,4658678.0,<java><spring-boot><microservices><netflix-eureka><netflix-ribbon>,eureka client work communicate register server,create eureka server register client client communicate smoothly eureka server client communicate smoothly follow code st client communicate client hardcode url registered client eureka server expect work server explain happen,1,301,0,1.0,2,2018-08-29T05:47:08,0.0
52081388,168048.0,<oauth><oauth-2.0><openid><microservices><openid-connect>,secure communication backend microservice jwt,lot microservice backend gateway api service authorize user execute action ui microservice microbackend call microservice microbackend call jwt pass authorize microbackend microbackend approach jwt ui user pass microbackend pass jwt microbackend context context user execute action ui microbackend microbackend actas token request sts pass jwt microbackend user context microbackend microbackend directly pass jwt ui microbackend user context pro con solution choose,1,317,0,0.0,2,2018-08-29T15:41:19,0.0
52190094,4811392.0,<windows-services><microservices>,windows service consider micro service,windows service listen queue message parse store storage uni directional sense listen queue expose endpoint interact service consider micro service,1,586,0,0.0,2,2018-09-05T16:53:52,0.0
52207383,2741534.0,<spring><spring-boot><microservices>,exception propagation spring boot microservice,propagate exception microservice spring boot application rest call expect valid response expect response type long thete anh exception throw microservice catch handle call microservice currently deserializatiin issue token object,1,587,0,0.0,2,2018-09-06T15:20:24,0.0
52143360,5313984.0,<asp.net-mvc><model-view-controller><microservices>,separate exist project micro service architecture,create project asp net mvc banking sector time development scale kind modular architecture face lot problem regard deployment development feature develop feature currently release entire project namespeace projectmain dll separate controller seperate project deploy seperatly microservice architecture main project note view tightly couple controller migrate entire controller microservice architecture,1,359,0,0.0,2,2018-09-03T04:58:04,0.0
52154587,6492999.0,<docker><microservices><amazon-cloudformation><amazon-ecs>,codepipeline ecs,prepare aws codepipeline codebuild configuration java maven project work charm doubt project consist module module microservice pack docker image pipeline project pipeline microservice configuring codepipeline cloudformation find deploy cluster service deploy action ecs deploy service pipeline good idea good regard maciej,1,136,0,0.0,2,2018-09-03T18:14:15,0.0
52134823,6872018.0,<spring><spring-boot><single-sign-on><microservices><spring-cloud>,multiple marker type nooppasswordencoder deprecate method getinstance type nooppasswordencoder deprecate,work spring cloud boot example example sso application response fine application property serviceconfig java mainmethod sts error replacement deprecate method output,1,1741,0,1.0,2,2018-09-02T07:18:55,0.0
52257903,2170157.0,<spring-boot><osgi><microservices>,design database work multiple version service,mricro service base product provide backward compatibility multiple version service time problem version create change database table column add alter case database service impact service good handle database table version database service avoid,1,59,1,0.0,2,2018-09-10T12:33:09,0.0
52219598,5901797.0,<spring-boot><configuration><microservices><component-scan>,exclude component microservice,bee microservice spring boot spring cloud resource file microservice scan module componentscan admin module autowired main resource main module adminapplication file main module controller admin google apply main module controller admin module exclude help,1,42,8,0.0,2,2018-09-07T09:32:11,0.0
39118038,2254364.0,<docker><continuous-integration><docker-compose><microservices>,program completely start inside docker compose,ci chain execute test docker compose test fail container properly start program container elegant verify setup completely start test,1,66,2,1.0,2,2016-08-24T08:21:12,0.0
39306577,450602.0,<database><microservices><nosql>,microservice good practice deal ghost record transactionless system,develop system base nosql microservice architecture general architectural question le three type document country city street street hold cityid city hold countyid country service develop deletecountry method delete country request city service delete city countryid city service turn request street service delete street cityid problem process fail country deletion transaction leave ghost document manage failure orchestration clean scalable code wise solution work choreography pattern solve periodical sweeping process clean document hard manage leave time hole problem exist good practice remove ghost record nosql db,1,216,1,0.0,2,2016-09-03T11:50:43,0.0
44113228,7949022.0,<microservices><spring-cloud><netflix-zuul><netflix-feign><api-gateway>,api gateway correctly microservice,suppose backend service product service product info inventory service quantity additionally frontend web application display product detail example internet frontend api gateway application zuul reverse proxy understanding api gateway separate application layer frontend application call backend service case benefit zuul feign create client service provide endpoint frontend application,1,783,0,1.0,2,2017-05-22T12:45:52,0.0
56320463,7716619.0,<node.js><docker><microservices>,docker service registry microservice,follow tutorial walk set microservice app product feedback service registry work docker feel service registry redundant docker kick instance inject hostname port environment variable instance follow docker compose file pass db credential mysql microservice node js microservice node js microservices wire code program registry service node js,1,60,0,0.0,2,2019-05-27T06:06:49,0.0
44360649,1493808.0,<validation><domain-driven-design><microservices><cqrs>,validate command cqrs relate domain,learn develop microservice ddd cqrs es http restful service microservice online shop domain product order supplier customer domain build separate service validation command payload relate domain example addorderitemcommand payload order service command side validate command customer exist database query side customer service active product exist database status product publish customer eligible promo price product call api directly point point ajax request promise validate payload order command side service performance bad api call directly validation develop event processor command service listen event apply event materalized view,1,855,2,1.0,2,2017-06-05T01:47:28,0.0
40840470,701829.0,<mysql><microservices>,mysql primary key strategy microservice architecture,currently auto generate primary key switch approach suitable microservice base application business define primary key tax code person global unique identifier mysql performance issue alphanumeric primary key autoincrement case uuid approach strong uuid generator guarantee uuid unique server,1,301,5,0.0,2,2016-11-28T09:02:37,0.0
38889466,5985566.0,<spring><spring-security><spring-boot><microservices>,multiple spring boot application share context,multiple micro service app share context custom security filter multiple spring boot micro services app example user service product service comment service common filter custom security filter micro service,1,2051,0,1.0,2,2016-08-11T07:04:23,0.0
44625192,5904022.0,<events><logging><apache-kafka><microservices><api-design>,apache kafka inter microservice communication level map topic event,work medium sized web application separate microservice currently service communicate unsustainable mess solution approach appealing message broker service send listen message apache kafka catch attention promising choice software purpose sure kafka topic level map event topic identify three major level granularity describe demonstration purpose consider hypothetical online store consist number service shoppingcart bill ship application topic single topic channel event send receive service event microservice topic separate topic event topic event type topic message topic suppose sense include producer event topic topic call case message content simply payload hope difference clear three approach kafka message broker advantage pitfall solution,1,498,0,0.0,2,2017-06-19T08:03:23,0.0
44655441,5403074.0,<design-patterns><asp.net-core><rabbitmq><microservices>,design pattern handle microservice request,application base microservice broker gateway api receive http request service service service broker api receive message rabbitmq send service handle process differently depend message execute action handle message currently sense switch statement message type app write big conditional statement ugly maintain design pattern remove problem application idea state pattern,1,269,1,1.0,2,2017-06-20T14:11:04,0.0
48327939,8261742.0,<rest><web-services><wcf><soap><microservices>,wcf windows communication foundation micro web service feature support rest,question wcf windows communication foundation micro web service feature support rest,1,25,0,0.0,2,2018-01-18T18:24:08,0.0
48341375,1755373.0,<spring-boot><spring-security><microservices><spring-cloud>,add registration logic microservice architecture,microservice architecture project oauth service authenticate user gateway work front api question write register logic oauth service gateway finally solution user service call gateway work fine ！,1,172,0,0.0,2,2018-01-19T12:40:56,0.0
48153334,2779323.0,<amazon-web-services><microservices>,microservice monitor status code,amazon ecs micro service base architecture alb service monitor target group associate service ecs cluster face difficulty monitor microservice host route private host zone monitor route health monitoring route allow monitor health endpoint simple route policy monitor status code microservice interval time setup health check microservice example service domain pe status represent health service add status code add monitor application load balancer target group good monitor microservice,1,81,3,0.0,2,2018-01-08T15:30:31,0.0
46464455,2149414.0,<rest><api><microservices>,private call api,microservice responsible register user hold user database user register call api chech email assign profile hide access point public doc accessible good allow private ip request api,1,35,0,0.0,2,2017-09-28T08:30:02,0.0
46370014,7926795.0,<c#><docker><microservices><docker-for-windows>,call microservice microservice docker,create microservice docker window call microservice microservice call ip composed file follow problem deploy project vm work ip,1,698,2,1.0,2,2017-09-22T17:18:05,0.0
53981444,1277496.0,<authentication><architecture><microservices>,microservice authentication architecture,start write microservice independent web client centralized authentication authorization service organization service organization service keep track belong organization organization pay access web client individual microservice develop authentication devise single rail monolith explore multi microservice web client ecosystem web client request microservice deny lack session send request web client login request authentication service authentication request organization service organization user well service pay session info store web client future request web client request microservice microservice validate session authentication service turn reach organization user organization organization service response authentication store microservice response web client grant set session match web client request microservice include session info microservice validate session info stored session info response web client grant set session match proper authenticate well small tweak additionally treat authentication web client microservice differently authentication microservice,1,325,0,0.0,2,2018-12-30T21:07:35,0.0
54021131,177691.0,<microservices><api-gateway><kong>,api gateway web application embed ui,application ui embed django ror app application api monolithic web application ui backend single module example talk api gateway http api add django ror app api gateway kong api gateway sure kong work app documentation kong talk configuring service pure api application api gateway create mixed approach application api gateway definitely avoid situation configuration complex suggestion helpful,1,402,0,0.0,2,2019-01-03T11:09:08,0.0
53883736,6922320.0,<maven><java-ee><jax-rs><microservices><payara>,generate restful webservice entity class netbeans maven webapp app fail display payara server deploy null false,persistence microservice application jee resource endpoint work well simple persistenceresource class generate entity mysql database app work fine moment generate restful webservice entity class payara server fail message server log error display generate session bean entity class problem search internet hour app traditional maven archetype webapp netbeans ide payara server java ee open jdk ubuntu lts problem window pom xml http maven apache org xsd maven xsd structure app seriously help app generate webservice session remedy advance,1,113,7,0.0,2,2018-12-21T11:07:56,0.0
40719381,411632.0,<rabbitmq><messaging><soa><microservices>,service request response route key store message rabbitmq queue,example implement search indexing service receive search request produce response message currently define queue enqueue search request enqueue search result refactor enqueue unique queue message request response route key overuse rabbitmq case,1,75,0,0.0,2,2016-11-21T11:45:31,0.0
40733857,913622.0,<node.js><nginx><docker><kubernetes><microservices>,nginx micro service api gateway,split monolith api micro service rate limit auth caching gateway ability valid approach simple stateless nginx container route underlie service,1,947,7,0.0,2,2016-11-22T04:37:08,0.0
40735590,5409999.0,<jhipster><microservices><netflix-eureka>,switch request traffic server instance dynamically jhipster registry,jhipster registry registry manage microservice base spring cloud netflix eureka spring cloud config add api publish version micro service start service instance switch request traffic instance remove shut restart gateway step runtime dynamic routing method,1,221,0,2.0,2,2016-11-22T06:57:48,0.0
53481459,10030356.0,<java><microservices><lagom>,configure lagom framework work cor,configure lagom framework work cor request method request option,1,184,0,0.0,2,2018-11-26T12:48:05,0.0
53562377,5575068.0,<rest><web-services><microservices><loose-coupling>,rest api call microservice,service service service service datum service process request avoid tight coupling rest api call service directly query service database http call service request reduce response time solution cache datum service follow question data rapidly change data critically user account balance detail strong consistency datum duplication datum consistency introduce rest call introduce point failure service increase request service api service load increase help,1,467,0,1.0,2,2018-11-30T17:42:10,0.0
53500531,3917754.0,<c#><.net><azure><microservices><azure-service-fabric>,instance count service fabric microservice,service request party api api set amount request second set limit request configuration max amount wrong amount instance myservice count amount partition real amount instanse,1,412,2,0.0,2,2018-11-27T13:11:56,0.0
53570777,5524954.0,<java><rest><spring-boot><architecture><microservices>,difference microservice monolythical approach provide case,start read thing software architecture inevitably microservice architecture wonder achitecture differ monolythical approach modify layer pack application deploy common set simple application understand microservice seperate service independently service deploy basically running lot file difference monolythical application set common example frontend backend communicate service follow step build frontend application include js file spring application create file project result single file deploy service include backend frontend call monolythical approach include application tomcat deploy file application integrate frontend deploy service server interact replace touch definition call monolythical approach code deployment microservice architecture case literally article read advantage disadvantage architecture difference possibility exchange frontend backend case redeploy full application case,1,79,7,0.0,2,2018-12-01T12:29:53,0.0
48833778,2403526.0,<database><microservices>,structure model microservice,example microservice api figure service require user store row datum associate user example separate post service store post author user return datum endpoint network call user service time copy user service current service exclude saving memory database redi,1,65,0,0.0,2,2018-02-16T19:42:19,0.0
48660912,5316642.0,<tomcat><grails><microservices><aws-api-gateway>,secure micro service accessible amazon api gateway authenticated app,manage user authentication authorization process aws server cognito api gateway iam feature write micro service grails app host server service public aws cognito authentication authorization access micro service aws api gateway read client certificate appropriate doc find help appreciate,1,485,0,0.0,2,2018-02-07T10:02:51,0.0
48802787,5277471.0,<open-source><microservices>,open source project migrate microservice,aware open source project migrate micro service conduct work analyse architectural pattern microservice base oss find toy project student prototype,1,782,2,0.0,2,2018-02-15T08:24:11,0.0
36744042,3455033.0,<rest><architecture><pagination><microservices>,rest pagination filter dependent external system sql,rest web service expect expose paginate call list student age class sql table expose paginate api student class good typical rest api job pagination achieve sql query suppose requirement send student state host web service api list student state return student belong state find difficult support pagination request size class state result student class db call student state return result include student student number student state support pagination case brute force db call call till size meet reply approach common practice follow general rule thumb architecture bad service design edit manage offset approach result set manage offset request reading,1,342,7,0.0,2,2016-04-20T12:37:23,0.0
36188740,672246.0,<java><microservices><typesafe><lagom>,start lagom runtime exception,instal activator create project change directory project jdk version,1,303,0,0.0,2,2016-03-23T21:09:58,0.0
42549749,6514731.0,<microservices>,micro services client side discovery,microservice read understand paragraph talk load balance client client‑side discovery client responsible determine network location service instance load balance request,1,1267,0,0.0,2,2017-03-02T08:00:04,0.0
42397788,1028270.0,<python><google-app-engine><google-cloud-platform><microservices>,default app deploy appspot,question default app relate microservice app engine great response question relate default app accessible appspot deploy command accessible semi empty hello sized app satisfy default app requirement google shoehorn multi app microservice environment originally setup serve single web face app module ungraceful hacky,1,196,1,0.0,2,2017-02-22T17:00:33,0.0
42457900,1790300.0,<node.js><microservices><bounded-contexts>,microservice handle scenario data bound contexts,move node js project microservice approach datum share example suppose follow bound contexts account manage user account permission login logout profiles image manage file upload profile pic image gallery associate account video manage video uploading transcode format associate user example image video natural dependency account bound context microservice assume copy account table image video database store account datum nightmare term maintain consistency account update frequently mention microservice dependency three microservice database violate recommendation microservice tie database recommend approach handle scenario planning phase sure,1,175,2,0.0,2,2017-02-25T15:27:22,0.0
42539505,1759614.0,<microservices><api-design>,sorted datum service http,service orient architecture couple service product store list product category store category list product ids assume category instance product category sort product price category service process request price request product service work well category lot product recipe case,1,458,6,1.0,2,2017-03-01T18:42:22,0.0
37632735,1390902.0,<spring-security><spring-boot><redis><microservices><infinispan>,spring session redis infinispan cache session scope fail,infinispan caching session scope bean cache user relate datum object spring mvc application migrate spring boot enableredishttpsession face problem infinispan cachemanager attach session serializable produce follow exception typically balance user request multiple node cache share node redis store help,1,672,0,0.0,2,2016-06-04T16:50:53,0.0
37679132,628714.0,<spring-boot><spring-cloud><microservices><netflix-eureka><netflix-ribbon>,load balance spring cloud netflix oss,spring boot cloud netflix fws eureka ribbon work example basically small spring boot microservice eureka service registry start instance service example accountservice port read article instance register eureka redundantly call service client side load balancing apply service call dynamically choose happen start service instance registered eureka dashboard start service port register replace previous service instance eureka dashboard instance availability zone call service handle second instance query registry instance apply second instance time eureka switch work keep instance instance register late instance simultaneously application property practically unchanged example spring site eurekaserver accountsserver,1,947,1,0.0,2,2016-06-07T12:15:56,0.0
37509121,278984.0,<microservices><event-driven-design>,listen multiple event,deal correlated event event drive architecture concretely multiple event trigger order action perform example microservice listen event perform action event arrive correlation keep internal data structure inside microservice book keep satisfied appropriate action trigger problem approach microservice immutable well approach,1,228,2,0.0,2,2016-05-29T11:07:15,0.0
45771237,7652010.0,<spring><http><microservices><rate-limiting>,limit rate http call scale microservice,scenario microservice scale instance service http call third party service third party service rate limit accept request second instance service hard keep track count solution help implement,1,208,0,1.0,2,2017-08-19T11:56:17,0.0
45667346,1079877.0,<messaging><microservices><broadcast><jgroups>,broadcast message microservice multiple instance,micro service suppose service connect jgroup udp channel jgroup broadcast message instance service fine example instance service receive event procedure result duplicate database sum time manage,1,508,0,0.0,2,2017-08-14T04:09:51,0.0
45673863,5479655.0,<java><spring><api><spring-mvc><microservices>,communication spring microservice,learn microservice secure rest point famous framework spring boot extend spring good pattern secure endpoint rest api spring security oauth send credential body request approach credential easy implement api token prefer practical tutorial,1,900,4,0.0,2,2017-08-14T11:49:01,0.0
45751211,543814.0,<c#><api><integration-testing><microservices><contract>,automate test contract microservice,creditcardservice microservice depend threedsecureservice microservice communicate json minor change api implementation threedsecureservice silently break creditcardservice potential client automated test flawed approach wonder improve integration test threedsecureservice test accompany test project threedsecureservice integration test json input fake dependency complete call input confirm service swallow input problem fail realize change break client test match change integration testing creditcardservice test client test assertion threedsecureservice expect input require client solution include threedsecureservice project well project depend negate advantage microservice assertion client safeguard dependency break loose coupling microservice,1,404,4,0.0,2,2017-08-18T07:45:16,0.0
45642575,3837778.0,<architecture><soa><microservices>,microservice soa respond specific request,interested microservice soa read tutorial understanding soa api gateway receive lot request requesta requestb request message queue micro service consume event messaging queue processing question process response return request responsea requesta responseb requestb sure understanding wrong messaging architecture detail example decouple connect api gateway microservice respond request connection api gateway client keep alive question clear confused idea understand concept comment,1,188,5,0.0,2,2017-08-11T19:32:36,0.0
42073576,4423889.0,<node.js><docker><microservices><consul>,consul sd architecture access microservice front side,microservice manage consul datum service service discovery feature consul healthy server server address port retrieve entry front side call microserver actual ip call namespace docker container helpful response better stick bit,1,469,0,0.0,2,2017-02-06T17:18:28,0.0
42002512,2318227.0,<spring><spring-boot><microservices><spring-cloud-config>,multiple instance microservice spring cloud config,develop microservice expose rest endpoint meet scalability constrain multiple instance service deploy basically scale scale supply configuration port bound configuration service service expose rest api configure config server supply unique port instance microservice solution service individual machine vm create docker container deploy service solution supply random port service cloud config server,1,1982,2,0.0,2,2017-02-02T12:39:10,0.0
57635246,6714426.0,<rest><authentication><oauth-2.0><jwt><microservices>,opaque access token server stateful,understand statelessness restful api context authentication scenario user log server verify username password generate opaque access token cache relate token example expiration time userid token explicitly invalidate expire token send client client send future request list item fielding dissertation define statelessness request client server understand request advantage stored context server session state keep entirely client example client send token request condition satisfied server context associate session store session cache application stateful true statelessness achieve jwt ponder jwt architect build stateless service invent,1,67,0,0.0,2,2019-08-24T05:01:10,0.0
57564493,2048604.0,<azure><asp.net-core><https><microservices><kestrel>,set microservice https port,microservice asp net core stateless service service fine access servicemanif xml myservice cs work fine create microservice error bind service url thing include append url exception bind override usekestrel endpoint preferhostingurls true error usepathbase error valid certificate https work microservice microservice work time separate note curiosity wonder dynamic port service select port url client help,1,120,1,1.0,2,2019-08-19T22:10:00,0.0
47304927,7364015.0,<mysql><microservices>,microservice architecture design,doubt microservice architecture microservice maintain context job apart thing work fulfill job respective task job question db design talk sql usage foreign key simplifie lot thing understand microservice architecture microservice maintaine datum datum query service require foreign key refer table microservice datum flow query jobid maintain uniquely microservice job client request directly individual service task summary job client query individual microservice collect datum pass user coordinate microservice client request service tern service gather info microservice jobid pass user follow,1,624,0,0.0,2,2017-11-15T10:26:12,0.0
55567313,10021456.0,<node.js><http><microservices>,rest messaging layer micro service fast,micro service learning phase sure multiple nodejs micro services auth service user service vehicle service good share datum http call good easy call http call pointsman service nodejs service machine fast speed http call async control service wait easily basic call test super fast hard big piece datum work reason people talk messaging layer message lie place service watch service place pick message assign feel http call good,1,47,0,0.0,2,2019-04-08T06:22:54,0.0
55669208,8779719.0,<java><node.js><docker><docker-compose><microservices>,docker compose link microservice discoverable,docker compose service communicate idea node js service talk java spring service link network send request return err resolve node js service axio http module work err resolve localhost work err connection refuse spring service literally expose rest endpoint work access directly pass reference service environment variable inside docker compose yml env variable inside node js project undefined call window docker toolbox project ubuntu vm expect console log statement node js service respond result serviceb rest call error message docker compose expect obvious find solve problem online question edit add entire yaml file error well understanding,1,83,0,0.0,2,2019-04-13T19:41:30,0.0
55675752,9993913.0,<java><spring-boot><microservices><spring-cloud><netflix-eureka>,eureka server register service application,start application eureka server register service application spring boot release version ther dependency service application application yml file eureka server application dependencie url correct idea work help problem,1,209,2,1.0,2,2019-04-14T13:21:23,0.0
55692773,2639188.0,<microservices><grpc><trace><opentracing><grpc-go>,propagate traceid grpc inter service communication,work grpc micro service context pass header metadata opentrace trace purpose grpc service call grpc service point issue propagate context retain metadata traceid code code call service recreate context metadata sure propagate tracid service,1,160,4,0.0,2,2019-04-15T15:41:34,0.0
48869041,117700.0,<c#><.net><visual-studio-2017><microservices><azure-service-fabric>,encapsulate workflow series action,simple crud repository service execute operation remote repository create update datum orchestrate series action update database update crm records update database trouble design orchestration perspective maintainable understandable assume step responsibility microservice kind pattern architecture workflow,1,92,0,0.0,2,2018-02-19T15:13:52,0.0
48984289,1885419.0,<python><docker><nginx><docker-compose><microservices>,access multiple service single url docker compose,docker compose deploy multiple microservice flask compose code access service single url unable figure service port nginx configure access sure help doc read understand routing service health report result health check access health check service,1,405,0,0.0,2,2018-02-26T08:32:58,0.0
43238799,1682401.0,<.net><monitoring><microservices><restful-architecture>,tool monitor restful service,monitor synchronous restful api initially develop net core best recommend tool performance monitoring service health check log tracing dashboard interested open source platform tool monitor api containerized environment,1,165,0,0.0,2,2017-04-05T18:19:19,0.0
58976883,8551679.0,<python><microservices><soa>,securely store pass password third party service service,work app manage user document feature implement work user email user input tab credentials login password imapprovider pass data service responsible retrieve email problem store pass plain password mechanism encrypt password side decrypt side idea implement advance,1,40,4,0.0,2,2019-11-21T14:09:48,0.0
37257673,6244459.0,<java><spring><spring-cloud><microservices><netflix-eureka>,hystrix list service eureka circuit breaker,exploit spring cloud understand client eureka list service eureka server ribbon load balancing client hystrix list service eureka circuit breaker,1,524,0,1.0,2,2016-05-16T15:33:26,0.0
37427976,2671856.0,<rest><communication><cloudfoundry><microservices><predix>,micro service cloud foundry communicate,newbie cloud foundry follow reference application provide predix application consist module module implement micro service question micro service talk understand sort rest call problem service registry service component discover rest url component component url service push cloud foundry cloud foundry control component dependency service startup service shutdown start start shutdown shutdown,1,1478,0,0.0,2,2016-05-25T04:41:47,0.0
51242037,813102.0,<java><sql><hibernate><microservices><hibernate-mapping>,hibernate join table microservice architecture,micro service user service product service database product service db table user product user product product user service db table user product relation user product join table product service sure create hibernate model object product service table list product belong user list owner product sure define manytomany relationship table,1,516,0,0.0,2,2018-07-09T09:18:52,0.0
51304242,9779490.0,<java><spring-mvc><spring-boot><microservices><restful-url>,avoid ambigous getmapping spring boot rest,request url getalllimit requestparam map limitfilter correct getlimitbypid correct getlimitbyid correct note optional route method achive help highly appreciate,1,99,0,0.0,2,2018-07-12T11:16:23,0.0
51317424,186820.0,<docker><docker-compose><microservices>,microservice eshop ocelot volume spec docker compose file,code eshoponcontainer docker compose override yml volume eshop ocelot volume spec create volume eshop ocelot volume spec … define project inside env file inside docker compose override prod eshop ocelot volume currently exception sample code follow code eshoponcontainer code simple version easily follow start apigateway build question eligible people fuzzy question,1,94,1,1.0,2,2018-07-13T03:55:51,0.0
57986887,5634288.0,<kubernetes><microservices><load-balancing><docker-for-windows><docker-desktop>,kubernetes pod busy,micro service kubernetes load balancer pod busy behaviour currently example pod pod process request time request cpu core allocate pod send request application kubernete dispatch request pod block threadpool replica app thread time course request queue pod question kubernete pod busy load balancer dispatch request pod note dev test purpose docker desktop docker window window kubectl,1,90,0,0.0,2,2019-09-18T07:05:31,0.0
40988204,5561773.0,<architecture><microservices>,scale server side client side rendering,lot post ssr csr touch speed change small application large serve user speed concern compare factor enterprise integration multiple client type native mobile desktop app change api update add point server ssr render webapp light situation clement,1,566,0,0.0,2,2016-12-06T05:06:52,0.0
41086281,2455862.0,<java><rest><microservices>,microservice communication,question concern microservice architecture design system base microservice read article understand idea microservice communicate separate business responsibility system book train ticket divide backend application modules client login logout registration reservation book train seat user reservation user connectionsdetail search connection connection detail train train seat number class user search connection module connectionsdetail communicate train module train detail microservice communicate user login directly client module reservation reservation module directly question modules communicate thing question trivial stupid start microservice edit tool communication question logic example microservice microservice sth client directly earlier communicate exactly separate thing,1,1107,4,0.0,2,2016-12-11T12:41:57,0.0
51623293,9851955.0,<spring><microservices><stateful>,good approach practice create stateful microservice,create food order service microservice scalable cluster step order store user datum step request approach keep state user datum store db cache share memory tutorial good practice spring springboot module,1,193,2,0.0,2,2018-07-31T23:07:41,0.0
53377757,796295.0,<spring><spring-boot><tomcat><microservices>,tomcat production spring boot app,novice spring boot find google result straight forward manner application server deploy spring boot application real life tomcat company achieve cluster,1,107,0,1.0,2,2018-11-19T15:24:19,0.0
53351154,8877698.0,<java><authentication><jwt><microservices>,authorization header,eureka connect service zuul authservice port send login request zuul send authsercice authserice header jwt authentication request postman jwt monolith problem authorization token add authorization header,1,639,0,0.0,2,2018-11-17T12:15:17,0.0
53197563,7330758.0,<rest><microservices>,microservice rest store reference resource service,assume resource rest service hold reference second resource rest service persist reference currently store uri string persistence layer service common valid approach wrong extract uri implement assumption uri structure service service correct solve problem thx,1,160,0,1.0,2,2018-11-07T20:47:04,0.0
53270770,10335281.0,<microservices><distributed-computing><cqrs><event-sourcing>,cqrs order message,suppose service produce event publish event store service consume producer service event service process service event create projection service multiple instance straight forward front es pick event publishing pub queue service perfect service subscribe topic event publisher job service unavailable event deliver guarantee high scalability availability problem queue easily scalable queue guarantee order message guarantee order delivery clear aws sqs ordering problem order guarantee event event stream order guarantee event es order guarantee event es service solve problem keep track sequence number event es track sequence number topic consume event easy react event build projection pop event queue renqueue invisible time turn solution destroy performance event produce high rate visibility timeout stuff result expect event ignore event moment ignore event es sequence number event event effectively process difficulty keep track event sequence number build projection keep track event sequence number build projection apple consistent third problem scenario projection user keep track product cart cart projection user info event publish normal flow require throw exception user exist,1,410,2,2.0,2,2018-11-12T22:04:41,0.0
58205669,1021294.0,<proxy><architecture><microservices><http-proxy>,cache service outbound request,service application external request web scrape datum service request imdb query service reddit query add service service web outgoing request service cache response configurable caching period service inspectable log request response time metadata relate request option choose cache backend memory db rdbms file service care schema request outbound http https request client interface change target send request centralize caching log find search despite feel common scenario forward proxy place easy painful setup extend wrong sure well term scenario title tool saas oss fulfill problem completely wrong perspective,1,48,0,0.0,2,2019-10-02T16:32:40,0.0
58196528,12151973.0,<database><microservices><saas>,saas application microservice database tenant,design web application multi tenant saas model regulation decide database tenant consider microservice middleware confuse bit microservice architecture talk microservice database question share database microservice violate concept purpose microservice design isolate change limit microservice layer mimic database table dto microservice communicate database layer correct wrong microservice database impossible database tenant microservice number database approach design middleware database tenant well approach feel free share high level design start,1,138,0,0.0,2,2019-10-02T06:53:57,0.0
58196382,9107502.0,<java><spring><spring-boot><jpa><microservices>,create cross service domain model mapping,micro service spring boot micro service architecture hotspot service attachment service service domain model course separate jar hotspot domain model hotspot service attachment domain model attachment service create hot spot add additional attachment describe image exist kind association mapping hot spot entity attachment monolithic application implement annotate jpa annotation achieve micro service architecture class separate jar project store identifier independently jpa well idea,1,49,3,1.0,2,2019-10-02T06:42:38,0.0
49638004,2133381.0,<java><spring-security><microservices><spring-cloud>,ui microservice security implication,super dumb implication microservice simply serve ui security security gateway level ui microservice simply serve web app app protect ensure gateway call directly origin allow access spring security class path disable application yml configuration change security config example service class extend service call serve angular application,1,92,0,0.0,2,2018-04-03T19:44:23,0.0
47630168,4446877.0,<spring><oauth-2.0><microservices>,inter service communication spring boot oauth,work micro service architecture spring boot implement oauth auth server question microservice communicate good discover option microservice verify token pass token problem token expire client credential grant issue send username microservice request time access token actual call token verification api gateway microservice api gateway send username microservice microservice implementation change accept param header option pick well option advance,1,1480,0,1.0,2,2017-12-04T09:30:19,0.0
46949073,1920999.0,<node.js><web-services><domain-driven-design><microservices>,move microservice base architecture,work monolith system code repository web api background worker system write nodejs mongodb mongoose data store goal set path project evolve wonder move microservice base architecture monolith architecture create problem background worker scale deploy project server despite small fraction system redeploy code change payment processor call webhook system redeploy microsevice advantage obvious small code base individual microservice easy reason ability select programming tool best case easy scale current code notice mongoose odm object document mapper model project create query update model database principle good programming interaction database abstract business logic leak system layer introduce repository pattern domain drive design code share web api background worker hard task decide extract repository standalone microservice bunch problem sort query language introduce accommodate complex search query interface provide iterate search result cursor base navigation return database document network project early stage developer microservice base architecture overkill approach consider extract business logic interaction database separate repository share service avoid complex communication protocol service,1,176,0,1.0,2,2017-10-26T08:15:55,0.0
46947956,2182226.0,<transactions><zeromq><microservices><mq><2phase-commit>,mq guarantee message delivery transacted lightweight environment,guarantee message delivery transacted lightweight environment example normal situation write database commit send message zeromq redi othermq consumer pull message continue process situation write database commit application die message send consumer pull message incomplete process loose message avoid send message situation edit message delivery exactly,1,194,11,0.0,2,2017-10-26T07:14:35,0.0
50796780,4517576.0,<rest><reference><foreign-keys><microservices>,ensure consistence foreignkey ownership microservice,bound contexts lead micro service personalmanagement documentstorage keep entity model simple personalmanagement documentstorage application start company tenant choosen define company context store document rest json post tenant person document backend side validate input body validation person exist belong tenant info store personalmanagement microservice provide operation personalmanagement ensure consistence caller evil general good practise check ownership entity cross database micro service option person create tenantid personid store additionally documentstorage wanna avoid redundancy,1,23,0,0.0,2,2018-06-11T11:34:55,0.0
50820762,2901129.0,<java><microservices><vert.x>,vertx bind router,well feel lose vertx structure lambda expression follow tutorial exactly order well structure application register router idea pleasefind bellow serviceendpoint tutorial subscriptionservice finally server vertical note application warning size help,1,98,0,0.0,2,2018-06-12T15:26:34,0.0
50889657,1839104.0,<spring><spring-boot><apache-kafka><microservices>,microservice synchronous communication service service message broker,develop series microservice spring boot kafka asynchronous communication kafka work well case require synchronous communication microservice user register profile user profile service create auth account auth microservice call auth service directly service service communication kafka example good practise advice appreciate,1,173,0,3.0,2,2018-06-16T16:26:32,0.0
50856401,5666309.0,<azure><microservices><azure-service-fabric>,reach service fabric internet,play microsoft azure service fabric problem reach service internet situation create service fabric cluster windows server datacenter node type count custom endpoint empty enable reverse proxy flag service develop base net core rest api web browser service work fine locally service fabric local cluster azure storage emulator azure storage publish application azure cluster reach service internet question setup environment reach service internet read doc service servicemnif xml file follow configuration add follow configuration load balancer health probe add configuration port load balancing rule add configuration tcp passthrough previous health probe configuration reach browser timeout suggestion appreciate regard attilio,1,66,1,0.0,2,2018-06-14T11:24:25,0.0
50779254,3658166.0,<design-patterns><microservices><scalability>,determine microservice,build scalable application follow microservice architecture decide component application service example website facebook split broad service newsfeed messenger search split small service correct split application service ensure scalability efficiency,1,91,1,0.0,2,2018-06-09T23:05:39,0.0
52656779,4114362.0,<kubernetes><microservices><kubernetes-helm>,helm chart microservice,imagine develop application microservice base deploy kubernetes helm package manager microservice pretty yaml file configuration term yaml configuration good practice option generic chart pass configuration env yaml microservice deploy release create chart single microservice matter term configuration,1,386,0,0.0,2,2018-10-05T00:30:28,0.0
52507441,678833.0,<node.js><sequelize.js><microservices>,sequelize table microservice,microservice microservice database user table microservice database group table belong group database join table column sequelize group microservice model user microservice scenario good handle,1,400,0,0.0,2,2018-09-25T22:26:12,0.0
52704616,3405805.0,<java><spring><docker><spring-boot><microservices>,spring boot eureka microservice discovery registration fail docker,create eureka server microservice normal microservice service separately sts tool service discovery registration work fine launch docker time registration fail code eureka server application property dockerfile normal microservice application property dockerfile,1,147,0,0.0,2,2018-10-08T14:36:15,0.0
52500327,10270106.0,<java><spring-boot><google-cloud-platform><microservices>,google cloud access control allow origin header request resource,create rest api upload google cloud access domain follow error cross origin request block origin policy disallow read remote resource reason cor request succeed add follow class error continue help add working,1,183,1,1.0,2,2018-09-25T14:13:56,0.0
52723034,4760482.0,<github><continuous-integration><microservices><circleci><circleci-2.0>,single ci config multiple repository,seek advice problem stack microservice write nodejs kubernetes cluster separate github repository currently circleci ci cd process repos number increase problem face circleci config yaml repository change globally ci cd pipeline update repository pretty painful process circleci support config file multiple repos situation setup term multiple repos unique experience idea ci tool support describe scenario config file multiple repos,1,517,2,0.0,2,2018-10-09T14:05:58,0.0
52715200,6742049.0,<containers><virtual-machine><microservices>,recommend deploy multiple microservice single virtual machine,deploy micro service virtual machine container deploy micro service single virtual machine example easily host multiple application apache tomcat machine,1,210,2,0.0,2,2018-10-09T07:09:05,0.0
39690815,1589549.0,<java><spring><spring-mvc><spring-boot><microservices>,java lang illegalargumentexception target location,write spring boot application follow command exception,1,516,4,0.0,2,2016-09-25T19:16:30,0.0
37936588,685395.0,<microservices>,exist microservice,microservice architecture main idea service small program thing well unix philosophy thing common variety project user management contact company client product payment kind repository microservice solve common task reinvent wheel hard find repos document party microservice create,1,49,0,0.0,2,2016-06-21T05:57:38,0.0
37897876,2182398.0,<java><rest><microservices><vert.x>,vert pass message rest message bus,pass message bus rest correctly setup message bus receiver throw response write real life message bus receive message source pass message target publish message bus correctly read message handle example rest interface read message simple app start rest receiver move class help post message rest handler publish bus runtime return json second time trow exception correctly message receiver bus receive message store db message bus keep message lose,1,1625,0,0.0,2,2016-06-18T14:09:34,0.0
38440876,2997162.0,<deployment><docker><microservices><devops><software-distribution>,stand select service docker compose,create install script stand service base user input docker manage service docker compose define multiple service default service define docker compose yml start workaround terrible strategy service docker alternate,1,1459,1,0.0,2,2016-07-18T15:41:52,0.0
43661844,7032335.0,<java><spring-boot><cloudfoundry><microservices>,microservice change service change code,understand change database change code currently work micro service springboot java thymeleaf cloud foundry spring boot application attach database service cloud foundry problem purpose micro service allow ease change service change code stuck java sql script select order status accept image database attach service cloud foundry cup jdbc oracle thin username password host port servicename change database customer table database throw error customer table select order status accept change database code change sql script attempt resolve issue hard code sql script java select order status accept create system environment variable set sqlscript select order status accept java call env variable string sqlscript system getenv sqlscript java change sql script user change environment variable dirty method issue well alternative logic understanding wrong guide path,1,153,7,0.0,2,2017-04-27T15:21:00,0.0
50154865,1711670.0,<microservices><netflix-eureka>,heartbeat term micro service,read article eureka heartbeat send heartbeat,1,831,0,0.0,2,2018-05-03T12:14:30,0.0
50139640,2924519.0,<rest><docker><cloud><microservices>,architecture microservice business approach technical,team decouple monolithic spring mvc administrative application create update delete adopt architecture base microservice bit good create microservice accord problem specific software solve example manage client problem read definition follow base definition application monolithic perfectly separate layer find micro service architecture confusing web monolithic microservice microservice architecture design base business problem solve microservice architecture design base application organize layer,1,159,0,1.0,2,2018-05-02T16:43:36,0.0
53727397,4776689.0,<java><spring-boot><spring-security><jwt><microservices>,spring security access control allow origin cor issue invalid jwt token,jwt security configure spring security spring boot application issue header cor configure application header server response jwt token invalid server response error code access control allow origin header lead browser write error message console wrong access control allow origin header response jwt token invalid server response error code code dependency understand issue filter order filter chain jwt jwtauthenticationfilter corsfilter csrffilter create corsconfigurationsource bean describe discuss help jwtauthenticationfilter class note validate token call microservice http application login endpoint login implement microservice application,1,900,0,1.0,2,2018-12-11T15:31:44,0.0
53731815,7290845.0,<java><spring><microservices><stress-testing><wiremock>,stress test external api server java spring mock response,microservice architecture setup stress test complex setup synchronous http request message queue system rabbitmq api server company risk stress server request synchronous call api provider return sizable response stub mock return response latency example response server return kb datum introduce delay return comparatively sized datum word customization format prepare point require capture sizable response edit edit filter sensitive datum increase size large stress bandwidth aspect system require stay close native solution good grasp response time minimal overhead stress testing solution wiremock understanding correct set fake server test work require server tomcat base stay close architecture,1,169,0,0.0,2,2018-12-11T20:24:50,0.0
56732457,8398143.0,<java><spring-boot><microservices><netflix-zuul>,zuul unique entrypoint app disadvantge,zuul micro service base application work perfectly question micro services rainbow flower question zuul sole entrypoint app sort centralization zuul gather opinion answer question,1,55,0,0.0,2,2019-06-24T08:16:56,0.0
56823582,5052685.0,<microservices>,micro service architecture data access service,micro service architecture good separate dao service business service layer intact service case build small banking application service require service well fine dao business service wonder real life application,1,68,2,0.0,2,2019-06-30T08:50:35,0.0
57741140,10219972.0,<microservices><cqrs><event-sourcing>,event source conflict service process event,start learn event sourcing cqrs service process event example book sample service check timeslot check user credit accept event system service service accept decline event,1,44,0,0.0,2,2019-08-31T19:40:00,0.0
57847367,1060041.0,<spring-boot><spring-security><microservices>,propagate user authentication authorization microservice,create microservice spring boot land user provide credential successful login dashboard resttemplate order traverse microservice dashboard code snippet work fine propagate user authentication authorization microservice base user privilage hide stuff suitable,1,33,1,0.0,2,2019-09-09T03:01:25,0.0
57748041,12004983.0,<rest><spring-boot><microservices><http-method>,asynchronous bulk data validation service post,scenario post confusion work web application build spring boot microservice architecture validate update bulk datum excel sheet record excel sheet column bulk processing ui submit excel sheet server total process asynchronous microservice microservice call confuse post problem microservice orchestra service service service service orchestraservice create dto list excel sheet call orchestra call validate datum db mark success failure record dto list object return list orchestra orchestra call job return orchestra orchestra call update success record database update file status database create resultant excel sheet error message row email user small report kind thing microservice microservice call update database create resource server call post method request body pass input list service accord http standard provide block datum field enter html form data handling process post call advice post post process involve data filter process note service service column excel combination column character long datum problem header limit bulk operation,1,39,1,0.0,2,2019-09-01T17:17:55,0.0
57857816,6465635.0,<c#><asp.net-web-api><integration-testing><microservices><end-to-end>,isolate test datum test flow perform test micro service,unorthodox thing achieve find identify flow test flow perform test live environment example commerce platform component microservice involve simplify lot product author order management fulfillment perform test identify work flow test fulfillment fulfill order real matter component choose process request differently interaction component drive http request event hope clear suggestion advance,1,42,1,0.0,2,2019-09-09T16:23:07,0.0
57923741,6568836.0,<spring-boot><microservices><vert.x><reactive><light-4j>,spring boot vertx framework reactive micro service development,convert monolith application microservice size module tightly couple document figure framework case microservice develop bundle container deploy customer system size jar constraint communicate single channel channel handle gracefully case request time complete minute finding framework benchmarke,1,202,1,0.0,2,2019-09-13T12:33:13,0.0
55795435,165894.0,<domain-driven-design><microservices>,event drive microservice update private database datum,work project learn microservice domain drive design recommend architecture database service event achieve eventual consistency service database initialize datum event indicate update database occur service db design start copy previous database publish service block event allow service vomit lot chatty ness performance issue,1,48,0,1.0,2,2019-04-22T13:48:21,0.0
48460986,3887300.0,<microservices>,microservice isolate persistence datum store fetched,company move micro services architecture read lot ton obscure area specific project build area agree microservice isolate persistence database love idea microservice database schema domain object independent microservice data structure thing understand customer service central application basically microservice datum user point user credit amount microservice directly read customer service database query service fine guess simple stuff current log user display user sql join feel bad microservice depend ton microservice find people query microservice time day datum microservice microservice search datum product customer query microservice persist datum datum structure question search query product customer product customer send datum search option bit easy logic side data static freshness datum smart definitely work second option bit difficult scalable fresh datum datum change send granular,1,313,0,1.0,2,2018-01-26T12:01:03,0.0
58708570,10182640.0,<java><microservices>,good idea separate application specific item api database model platform specific item,good idea separate application specific item api database model platform specific item example platform hotel management reservation room service expose api data model platform realize case asset management bed table inventory life cycle good idea include data model exist platform specific model create application separate data model usecase specific api,1,68,2,1.0,2,2019-11-05T09:46:22,0.0
45489456,902396.0,<docker><docker-compose><microservices><docker-machine>,connect docker container local container remotely,development debug easiness issue deployment plan containerize service example service development code change frequently dependent service currently plan deploy remotely dependency docker container debug deploy service local easily connect remote docker service deploy remote cluster test push registry developer snapshot push relate image note swarm kind thing keep simple cluster manage docker machine replace service weave docker compose suggestion drive prefer docker,1,119,0,2.0,2,2017-08-03T16:07:48,0.0
45468971,252579.0,<design-patterns><architecture><microservices>,reorganize microservice share datum concept,company microservice approach keep service small understandable maintainable load balancer enable duplicate heavy service understand microservice loosely couple coupling coupling happen database preferably api rest well microservice idea apply everthing recommend case loosely couple tomcat war communicate rest jms message webapps database server scheme integration issue approach service generate report datum report service responsible persistence serving data service generate report datum send finding report service fact service responsibility communication conflict microservice idea horizontal layer bind vertical microservice horizontal coupling share interface object report data structure service follow structure strong feeling share library domain interface object principle understand duplicate interface object dumb lot work interface change alternative current architecture service persist report datum communication report render case regular communication service report service disadvantage service database layer share report structure service high level question pattern divide service behaviour separate horizontally vertically issue occur sale application product play central role entire set service redesign architecture pattern anti pattern,1,152,0,0.0,2,2017-08-02T18:58:56,0.0
45534252,1247777.0,<node.js><express><microservices><express-gateway>,express gateway response error set authorization,error set authorization key key auth request header sure problem key set forbid status return set credential return create key auth credential return gateway config issue happen find express gateway,1,608,2,0.0,2,2017-08-06T16:40:36,0.0
52833643,2238315.0,<domain-driven-design><microservices><event-sourcing><event-driven-design>,create vo entity,build commerce ddd event sourcing cqrs ideia separate ar microservice ar shoppingcart vo item productid price price change add cart ar product control price problem price ar product synchronous request product event architecture,1,55,0,0.0,2,2018-10-16T10:44:14,0.0
52771538,10492780.0,<algorithm><design-patterns><service><microservices>,microservice publish state versus state change,system service state update accord change state service state change publish entire state change state example state point time publish snapshot current state column publish change theory create optimization thing guarantee publish event consume correct order publish event service recognize compensate bug delta algorithm entire state publish publish event consume wrong order publish event correct publish event fail consume publish correct delta algorithm complexity compute resource publishing service solution delta approach robust add lot complexity publish change entire state pointer previous event service consume event figure process delta data set cycle publish delta entire state publish change time entire state time help correct thing feel weird interested exist robust solution notifying addition removal modification ensure eventual consistency system,1,69,0,0.0,2,2018-10-12T02:55:45,0.0
52862756,8291454.0,<spring-boot><microservices>,microservice spring boot spring cloud,microservice implement microservice help spring boot spring cloud tutorial mention create microservice spring boot spring cloud kindly elaborate,1,390,0,0.0,2,2018-10-17T20:01:58,0.0
57171461,8340633.0,<spring><model-view-controller><microservices>,secure send http request,develop microservice implement rest api file form share network location upload ftp server sample code real application ftpserver host user password parameter pathvariable parameter http pass pass input remain secret,1,40,0,0.0,2,2019-07-23T20:06:59,0.0
57242637,11826776.0,<authentication><architecture><microservices>,implement session authentication microservice,work project plan follow architecture auth example provide login registration password reset functionality account example allow user update account data example provide service figure follow solution maintain authentication domain authenticate user set cookie jwt token sign token share key user datum domain set user authenticate redirect verify jwt token cookie token valid service user redirect follow doubt suppose user update service update user datum ban user delete account terminate active session service user authenticate well approach solve problem,1,68,0,1.0,2,2019-07-28T16:03:00,0.0
57275026,1955934.0,<rest><apache-kafka><microservices><message-queue><messaging>,microservice api call messaging,messaging system block scalable microservice environment case question imagine admin dashboard client responsible send api request create item object microservice provide api endpoint mysql database item store microservice elastic search text search purpose admin dashboard client send api call call mysql service elasticsearch service send message topic consume mysql service elasticsearch service pro con consider overkill microservice consume topic frequency admin create item object small,1,69,5,0.0,2,2019-07-30T15:19:09,0.0
57229519,4516110.0,<java><spring><mocking><microservices>,mock real applicaton,microservice check microservice startup ms ms ms start fail start currently local machine huge amount ans slow machine mechanism ms start ms ms real ms update assume ms ms connect rest,1,123,6,0.0,2,2019-07-27T05:51:05,0.0
58474199,5144738.0,<java><api><spring-boot><microservices>,suggestion well design error handle spring boot api microservice,set microservice api connect grab party rest api api internal service api consume internal microservice design controller call service layer call service implementation call rest party api error handle issue exception fill exception return response entity wrapper consume service design well simplify error handling send error code consume service choose error message display case internal service connect party service good example error handling,1,56,3,0.0,2,2019-10-20T14:53:57,0.0
58365303,9450305.0,<python><flask><microservices>,call microservice microservice python,call microservice microservice result command access microservice microservice microservice,1,67,5,0.0,2,2019-10-13T15:57:29,0.0
54274211,299462.0,<session><logging><kubernetes><containers><microservices>,track session web app multiple microservice,track session multiple web application multiple microservice web application static file microservice nodejs container kubernetes track setup separate web application separate microservice cumbersome merge view single view approach view single session,1,72,0,0.0,2,2019-01-20T06:43:02,0.0
45236389,1729795.0,<apache-kafka><kubernetes><openshift><microservices><spring-cloud-stream>,apache kafka consumer group microservice kubernete compatible,spring boot app spring cloud stream kafka support infrastructure paas corporate platform kubernete move spring boot app allow app scale instance application define consumer group application ensure unique delivery processing message kafka kubernete doubt app deploy access service abstract underlie pod individual application pod access directly cluster kafka call individual instance consumer group deliver message work,1,444,0,0.0,2,2017-07-21T11:22:41,0.0
45170527,1526032.0,<microservices>,microservice deployment,microservice microservice microservice microservice calls microservice microservice deploy microservice sure microservice depend change release recommend deploy microservice microservice call microservice microservice call fetch endpoint specification endpoint depend verify endpoint change break microservice release happen interrupt currently microservice deployment procedure commence sure testing late view automate verify deployment tooling,1,187,1,1.0,2,2017-07-18T15:03:05,0.0
45168622,6695861.0,<ruby-on-rails><ruby><microservices>,share constan rail microservice,main app admin app build microservice communicate api share constant app example user model role owner regular admin app search user search dropdown hardcode user type owner regular change regular standard update admin app avoid change admin app time change core main app share constant change main app change admin time find solution pro con send constant main app admin json api build class fetch store constant class variable app good thing solution performance memoization api request easy bad thing idea handle test case course test request main app stub request idea pointless change constant main app change test admin app second approach build gem store constant easy implement change repo time change constant main app work big team happy work repos time solution perfect test idea stub constant real gem solution obstacle well solution problem,1,121,4,0.0,2,2017-07-18T13:45:07,0.0
51923607,7127000.0,<design-patterns><architecture><workflow><microservices><soa>,design pattern workflow,workflow follow microservice commit checker file downloader file processer question microservice link sequential workflow microservice functionality separate omniscient microservice conduct workflow case link write message queue pick link decision invoke guess service tightly couple implementation separate service perform control flow simply plug datum perform single task execute logic decide terminate workflow step decide downloaded file process parallel well implementation question storage keep record commit check check keep record commit consider storage separate workflow storage,1,44,0,0.0,2,2018-08-20T02:54:48,0.0
52023726,292291.0,<architecture><microservices>,frontend backend call microservice,confuse frontend application call microservice backend example app auth product service app server call auth product service frontend call service directly case correct call service directly notice app server endpoint purely proxy service useless,1,324,0,1.0,2,2018-08-26T06:23:53,0.0
51916102,2226799.0,<microservices><system-design><event-driven-design>,microservice architecture message queue event drive architecture,edit system design video learn microservice architecture message queue event drive architecture find substantial point difference component service publishing subscribe eventbus messagingqueue perform task associate publish event microservice architecture messaging queue subset event drive architecture figure original system design video learn microservice architecture event drive architecture find substantial point difference component service publishing subscribe eventbus messagingqueue perform task associate publish event microservice architecture subset event drive architecture figure,1,432,0,2.0,2,2018-08-19T09:00:58,0.0
55260689,217648.0,<microservices><publish-subscribe><actor><messagebroker>,pub communication actor,consider message broker achieve message base publish subscribe communication pattern actor model message base pub communication microservice,1,105,0,0.0,2,2019-03-20T12:22:07,0.0
55284676,9800596.0,<kubernetes><containers><microservices>,kubernetes communication container locate pod,microservice communicate http protocol ac microservice datum atlas copco device localwriter python aplication datum ac store info data base test window linux environment work fine contenerize microservice deployment communication find enclose herewith correspond docker yaml file containerize deploy application ac docker file local writer docker file advance,1,711,2,0.0,2,2019-03-21T16:05:58,0.0
52467803,7127000.0,<design-patterns><service><microservices><publish-subscribe>,well subscribe change full data set,service service set item service responsible bring item system service subscribe data set subscribe full datum set subscribe change concrete example data set evolution message send service change exactly question well view well follow reason eventual consistency message lose failure process message correct process message second lot complexity add system automatically correct fail scenario idemptoency point service send duplicate message accident totally fine design second design case require extra complexity treat delta optimization initially sound optimization rest system process change thing compute change reduce total number operation,1,31,0,0.0,2,2018-09-23T15:54:48,0.0
52454840,4384490.0,<c#><docker><microservices><grpc>,grpc client connect grpc server host docker windows container localhost,grpc service server dockerfile grpc service grpc client stacktrace grpc client,1,1843,0,2.0,2,2018-09-22T08:21:16,0.0
52347332,8303461.0,<java><angular><spring-boot><architecture><microservices>,build angular project html css js file,develop website angular spring boot microservice architecture ui designer team form html css js file structure attach create angular project dis structure attach good start angular include file angular project consider microservice architecture,1,52,0,0.0,2,2018-09-15T17:47:22,0.0
52278205,2927217.0,<.net-core><microservices><azure-service-fabric><appsettings>,read appsette json service fabric solution,service fabric api service business datum access layer separate class library set configuration appsette json read business layer datum access layer environment variable read appsette json data access layer business layer,1,836,0,1.0,2,2018-09-11T14:26:05,0.0
52328874,8683646.0,<java><spring><docker><microservices>,spring microservice docker java project,create application create store app create empty springboot project store image advice example,1,113,0,0.0,2,2018-09-14T09:24:02,0.0
44980176,3393799.0,<apache-kafka><distributed-computing><microservices><event-sourcing>,event source applicable batch input,case input application batch xml file example nightly batch bank transaction event source create log event base read example base user drive input click stream update user interface event source distribute log mechanism kafka valid approach batch file base input approach accept input batch file xml basic validation memory convert batch input series event write event log kafka topic event log store datum database send event search engine update cache spark job aggregation repeat process incoming batch approach efficient option distribute processing input,1,514,0,1.0,2,2017-07-07T21:53:06,0.0
44928556,2484748.0,<microservices><system-design>,monolith microservice,plan migrate monolith micro service base architecture responsibility talk module monolith exist monolith code tightly couple api call recursively parameter call module plan extract call system approx minute complete synchronous point note start single api migration perform well api consist parallel call system perform bunch task call block time consuming consider avg response time min move microservice base architecture approach mind move aforementioned api monolith separate microservice solve problem block thread time blocking call moving phase move api microservice initially share common datum source monolith solve problem block call introduction kafka microservice module time process request advantage fallback monolith disadvantage initially datum source share system good approach kind complex task,1,260,0,1.0,2,2017-07-05T14:08:05,0.0
44996290,5620472.0,<java><domain-driven-design><microservices><dto>,good map dto domain transport microservice,dto domain model microservice ms communicate rabbitmq dto class ms include maven ms send cardto ms recive cardto convert domain variant library example create manual mapper variant becouse build microservice field dto model change error compile time example change dto model build project error hard dto domain model create mapper write field variant easier dto change error runtime good approach match mapping model dto domain,1,655,1,0.0,2,2017-07-09T12:16:30,0.0
56114871,6145118.0,<java><spring><spring-boot><microservices><netflix-eureka>,connect eureka server exception java net connectexception connection refuse connect,microservice tutorial javabrains io till implement eureka server microservice main class simple pom app huge exception note post problem idea reason reason problem,1,829,0,0.0,2,2019-05-13T14:52:54,0.0
56205986,298851.0,<json><schema><microservices><sharing><multiple-projects>,share json schema file project versioning,problem independent project micro service point life refer json schema file needle project programming stack nodejs golang good practice share datum project keep versione bellow describe solution feedback well solution set github project json schema file change schemas update repo tag version access clone code random microservice require schema file build process download schema file jsdelivr save local repo downloaded schema file git ignore well smooth handle case,1,148,0,0.0,2,2019-05-19T08:19:54,0.0
50284055,938268.0,<google-bigquery><google-cloud-storage><microservices><google-cloud-dataflow>,google cloud ecosystem build microservice architecture,build google cloud ecosystem powerful ingest file cloud storage datum flow enriche transform aggregate datum finally store bigquery cloud sql couple question help well understanding build big datum product google service front web application build react submit file cloud storage time completely process client view status file pipeline result completion front client expect file complete process ready poll datum currently microservice architecture service kind process example parse file processes message service communicate kafka rabbitmq store datum postgre adopt google service ecosystem replace microservice architecture cloud storage dataflow cloud sql store,1,143,0,0.0,2,2018-05-11T02:16:12,0.0
50310975,3466664.0,<microservices>,microservice duplicate database table,work split monolithic system net small bound contexts multiple class library address record central system unrelated entity reach master address record microservice database table relate bound context challenge regard address record address entity bound contexts library address table relate lookup table state country duplicate address table database duplicate address relate domain class duplicate ton duplicate address record database stick address table location service difficult display address field search result proper scenario microservice example microservice product incident address microservice product fire hydrant address microservice product inspection address,1,194,0,1.0,2,2018-05-12T21:53:39,0.0
39405067,0.0,<java><spring-boot><microservices>,org glassfish jersey server model modelvalidationexception validation application resource model fail application initialization,develop spring boot microservice example link project simply update parent dependency late version code file unchanged face error click update pom xml application java applicationconfig java order java orderrest java customer java customerrest java product java productrest java guide issue,1,24967,1,2.0,2,2016-09-09T06:23:48,0.0
57333965,8488817.0,<rest><microservices>,microservice join table database datum replication,achieve datum join entity separate microservice communicate event rabbitmq request currently join api gateway suppose service second service list product request create product request product schema user schema create product list product detail user achieve user detail create query list product user detail rest request user detail product concern product user detail table rest api call read concern keep copy user detail create product request keep copy user detail create product emit event service,1,40,0,1.0,2,2019-08-02T22:10:12,0.0
57455531,947889.0,<c#><asp.net><rabbitmq><microservices><message-queue>,pub pattern decouple microservice integrationevent,asynchronous communication pattern microservice ensure decouple microservice project microsoft explain implement pub pattern read bit confusing consider implementation integration event service subscribe publish instance integration event implement product price change microservice publish event follow interesting check microservice remain decouple turn service subscribe event implement exact copy integration event subscribe instance miroservice implementation follow subscribe event follow interesting note refer implementation question microservice clone implementation integration event subscribe change happen publisher subscriber microserverice update integration event decouple dependent implementation ignore backward compatible change sake clarity,1,140,0,0.0,2,2019-08-12T04:06:38,0.0
57371870,1163428.0,<java><maven><microservices><pom.xml><dry>,share common code multiple spring boot api,spring boot rest api exactly health endpoint extract endpoint java project follow thing compile api common module compile docker container api separate docker copy jar file common code docker ignore question silly sure common project module inject dependency project pom file,1,156,1,1.0,2,2019-08-06T08:27:10,0.0
54515171,4504252.0,<microservices><netflix-zuul><api-gateway><spring-cloud-gateway>,api gateway recommend microservice,microservice common design pattern api gateway bit confused implementation implication question concern follow pattern microservice generally discuss deploy gateway server bottleneck gateway server vulnerable crash failure excessive request single point load enormous point keep mind netflix correct wrong understand stream download upload datum file video image pass gateway server middleware service proxy pattern gateway understanding ideal environment gateway server entertain request client respond microservice perform task additionally spring cloud gateway gateway server route functionality confuse route redirect service microservice directly responsible response client,1,390,0,2.0,2,2019-02-04T11:28:15,0.0
54502883,5358640.0,<spring-boot><microservices><netflix-eureka><netflix-zuul><spring-cloud-config>,common application property file multiple microservice,common application property file multiple microservice common configuration db source config config server eureka server zull proxy issue configserver provide spring application xyz turn find xyz property microservice configuration register service zuul proxy application configure service path zuul route xyz path iii multiple service share property file xyz property register zuul route well provide service provide service locate property file spring boot micro service,1,839,5,0.0,2,2019-02-03T12:35:22,0.0
54662192,3198603.0,<design-patterns><microservices><solid-principles>,select micro service library dependency,module mod db mod db host microservice module common functionality interact db db approach mod share library jar common component inject module avoid duplication code approach micro service common component share library jar sure approach well term design criterion consider understanding share library microservice interact multiple db share jar module logically lie caller module business wise,1,294,6,0.0,2,2019-02-13T03:45:28,0.0
51463528,1824361.0,<join><architecture><microservices><decoupling>,microservice application level join api call lead latency,micro service exactly example work problem list datum datum base input requirement develop screen input implementation fetch list input corresponding base list multiple api call microservice call send lead latency solution bad idea,1,191,0,0.0,2,2018-07-22T09:04:20,0.0
51392666,4244347.0,<spring><docker><spring-boot><docker-compose><microservices>,locate propertysource java net connectexception connection refuse,create docker image push docker hub remote machine follow error guess port config file meaning error resolve appreciate lead hint problem source code config file,1,2038,0,0.0,2,2018-07-18T02:22:30,0.0
42607458,655302.0,<python><unit-testing><google-app-engine><microservices>,correct unit test app engine application microservice architecture,directory structure service dashboard webapp respond user service session manage session unitt insert valid session datastore set session cookie request login perform auto login base session cookie unit test issue dashboard request service session fail session locate session dispatch search answer post bind service location require dispatch service devserver dispatch service service datastore stub initialize unit test prevent insert valid session datastore work issue dispatch service datastore stub tactic test microservice architecture app engine nosegae webtest unittest remain webt testapp perform request dashboard service dashboard service attempt locate session service application terminate invalidmoduleerror trace,1,637,0,0.0,2,2017-03-05T10:52:59,0.0
42641804,6312516.0,<javascript><java><rest><microservices>,authentication approach rest api frontend app backend service,rest api backend service service service web app browser separate node server service backend service separate server initial approach basic auth communication sense safely keep credential browser hand introduce session token weird communication matter tug war reasonable solution setup,1,1589,1,0.0,2,2017-03-07T06:39:04,0.0
42653725,3831934.0,<relational-database><relationship><microservices>,microservice store liaison table,split zoo management application micro service follow domain animal caretaker cage store relationship exemple cage animal store cage animal table cage service database animal database caretaker attribute animal store caretaker animal table caretakers service database animal service database,1,144,3,0.0,2,2017-03-07T16:45:01,0.0
46247154,3197297.0,<docker><microservices>,docker fail container,docker build docker container aws free tier account micro instance build docker base dockerfile fail exit container command follow error message help appreciate,1,1016,1,0.0,2,2017-09-15T20:37:18,0.0
56580619,10104828.0,<microservices><cqrs><event-sourcing>,micro service event source save command event service db big db,question good practice store command event store command command generate event,1,35,0,0.0,2,2019-06-13T12:34:31,0.0
56653429,1955934.0,<rest><apache-kafka><microservices><kafka-consumer-api><spring-kafka>,kafka microservice proper case,work project discover directly post api call microservice microservice microservice produce message kafka consume single microservice example order microservice publish record pende order topic consume inventory microservice consumer turn consume record processing inventory microservice produce record process order consume order microservice correct case well api call microservice case,1,84,0,1.0,2,2019-06-18T16:27:40,0.0
28114758,3017508.0,<spring-boot><spring-integration><microservices>,microservice spring integration spring boot,bit microservice si poc follow microservice architecture style spring boot deployment si development find doc combine example spring boot good practice recommendation combine technology,2,2785,0,1.0,2,2015-01-23T16:51:43,0.0
30800908,2149851.0,<jersey><dropwizard><microservices>,dropwizard jersey client sample,dropwizard jersey client testable dropwizard jersey client sample,2,3344,3,0.0,2,2015-06-12T10:32:45,0.0
27723156,3527207.0,<java><jpa><spring-boot><microservices>,handle create artifact micro service architecture service depend,test micro service architecture spring boot rabbitmq small service userregistrationservice register user db getuserinfo return user db choose user specific service db service entity user jpa smart smart handle dependency service depend entity entity user separate project artifact repository,2,142,0,0.0,2,2014-12-31T15:36:03,0.0
33712470,5562637.0,<rest><microservices>,api microservice design,microservice represent resource order order customer customer requirement order customer monolithic application model uri customer order hit customer resource memory service call correspond order case microservice order remote service call well create resource representation ordersbycustomer customerid,2,1819,4,0.0,2,2015-11-14T19:34:07,0.0
32392202,3102968.0,<scala><playframework-2.2><microservices>,microservice play json serialization,assume couple microservice expose set rest point assume microservice communicate microservice exchange json data json data serialize de serialize microservice serialization logic model microservice code base reduce duplication move model class small dependency microservice problem goal microservice architecture share feel potential problem address code duplication guy,2,391,0,1.0,2,2015-09-04T07:14:09,0.0
32863771,1807118.0,<java><spring><rest><spring-boot><microservices>,springboot restcontroller generic post type,experiment build microservice spring boot api receive responseentity post request process save database data object create class top level api handle authentication user communicate service top level api api basically forward request api top api include class data class case send stre json datum result question forward request include object class api figure web browser send request json format kind object datum handling,2,2368,2,1.0,2,2015-09-30T10:27:41,0.0
33814080,4403842.0,<github><teamcity><microservices><octopus-deploy><devops>,microservice repository,microservice architecture good strategy keep developer environment multiple source code repository suppose team developer work microservice git developer pull regularly repository script well wrong heavy overhead,2,260,3,1.0,2,2015-11-19T20:47:51,0.0
28572202,3080422.0,<java><gradle><dropwizard><microservices>,gradle dropwizard shadow find load main class,create simple microservice dropwizard gradle build system database rest endpoint expose controller application main class example simple object stre property myconfiguration empty class moment build gradle build type idea,2,2350,0,0.0,2,2015-02-17T22:18:56,0.0
37143689,6315631.0,<jwt><jhipster><microservices><spring-cloud-config>,jhipster registry reject gateway microservice,jhipster project microservice late jhipster registry gateway microservice access config server reject instal jhipster vagrant devbox jhipster registry generate gateway microservice follow work jhipster registry github clone runne update sadly gateway microservice access registry access docker image registry suppose docker update fancy late version registry github update docker image jhipster registry work registry docker image github clone registry gateway microservice time error java exception finally maven error registry shell time update currently downgrade thing doc recommend version tag jhipster generator work jhipster registry late version jhipster generator introduce microservice version copying directly secret central server config config application avail help advance edit update jhipster work yeoman jhipster uninstall jhipster yeoman jhipster edit work fine reinstall locally directory update jhipster globally yeoman update jhipster globally yeoman update jhipster update generator generator jhipster error edit work local installation well gateway access registry display debug access localhost generation dependency wise tag stable version jhipster devbox tag jhipster generator tags devbox generator devbox github delete download devbox,2,2794,0,1.0,2,2016-05-10T16:03:40,0.0
34439201,413537.0,<java><docker><spring-cloud><microservices><consul>,java spring talk consul docker container,solve common case micro service case test consul spring cloud application test consul docker container docker host machine attempt start spring cloud container talk consul example unable spring cloud application talk consul spring cloud application docker container spring cloud application host networking mode work resolve localhost port acceptable solution multiple instance image example docker compose file service container attempt set consul uri spring cloud environment variable unable work variety configuration point example function work immensely helpful,2,2707,1,1.0,2,2015-12-23T15:46:51,0.0
38164006,2651885.0,<rx-java><haproxy><microservices>,delay observable emission rxjava,micro service architecture inter service call network rxjava top level service result creation large parallel request bottom service route host error connection error purpose slow emission rxjava observable early connection close create sample code,2,1569,0,0.0,2,2016-07-02T20:00:14,0.0
38049329,3645827.0,<domain-driven-design><microservices>,ddd microservice datum direction,assume identity management bound context discussion bound context separate micro service identity user discussion moderator update identity bound context plan publish message amazon sqs discussion bound context listen queue change update discussion context anti corruption layer question decide change discussion bc identity bs listen change bi directional communication consider good practice update inside identity bc,2,193,3,1.0,2,2016-06-27T08:39:06,0.0
54862355,875007.0,<architecture><microservices>,datum replication microservice,move monolithic architecture microservice architecture good segregate service start question dependent call explain detail microservice detail product microservice revolve product service transaction order offer microservice communicate grpc service reference item microservice detail item reference service item issue list transaction user detail item list order place detail item detail option deal issue subsequent call transaction order microservice item microservice partial detail gateway extremely efficient term performance network copy partial datum pub require transaction order microservice service basically table order microservice join service serve datum kill dependent call segregation service proper second method well design note service dependent item database call microservice good thing gateway call parallel max sequential call method,2,861,0,2.0,2,2019-02-25T08:43:34,0.0
54771633,10842626.0,<database><microservices><scale>,good practice design scale horizontal scale database microservice,main benefit microservice service type scale multiple container instance load balance improve thing multiple instance container service type share database instance leave performance bottle neck multiple instance write read database instance traditionally scale processing power database instance meet high demand main question current good practice design solution scale horizontal scale multiple instance database performance improvement archive instance nother instance handle load high availability load balance read write multiple database intance maintain persistent consistency datum incase create database instance knowledge solution microsoft sql server provide high availability sql server container requirement wonder well solution avoid technology lock solution replicate multiple instance cdc stream datum master database instance multiple replication allow replication read convince quarrant consistency service instance write master database instance leave bottle neck master database instance,2,118,0,0.0,2,2019-02-19T17:14:16,0.0
54700816,1400909.0,<java><docker><microservices><amazon-ecs>,determine heap heap size java microservice docker,java microservice aws ecs docker hard java heap limit xmx tricky determine memory leave heap heap memory metaspace stack jit cache currently stress test identify docker oomkiller example gb aws task docker maximum set xmx heap xmx memory heap stuff exit code java xx maxrampercentage percentage determine heap heap size java microservice stress test solution,2,406,0,0.0,2,2019-02-14T23:46:34,0.0
54817804,1041953.0,<events><design-patterns><microservices><cqrs><event-sourcing>,version number event sourcing aggregate,build microservice microservice cqrs event source integration event raise system save aggregate event store update read model question version aggregate update event stream aggregate read consistency event replay sequence check version save head event raise save order concrete example understand benefit version imran,2,701,1,1.0,2,2019-02-21T23:25:15,0.0
34774290,4328316.0,<amazon-web-services><architecture><spring-boot><licensing><microservices>,implication implement microservice architecture,start journey learn implement microservice architecture time question relate implication background techstack intend arching sense dockerize spring boot microservice aw firstly microservice suppose full stack include separate database separate instance database choose runnne guess answer guess real question consume lot hardware resource monolithic application single database database pretty memory hungry full amount ram require single spring boot application require time microservice require ram monolithic application correct oracle database implication licencing crazy expensive separate database microservice licencing pitfall consider pitfall msa general consider aware start journey edit microservice full stack consist front microservice require front good advice call factor codebase suppose separate repository microservice best manage achieve,2,776,1,1.0,2,2016-01-13T18:26:26,0.0
46746885,1286941.0,<domain-driven-design><microservices><data-access-layer><entities>,ddd orient microservice infrastructure entity reuse,ddd orient microservice architecture describe article doubt data access entity sense domain entity datum access common project nugget rewrite datum access multiple time service,2,159,0,0.0,2,2017-10-14T16:37:11,0.0
41624628,1092630.0,<microservices>,develop microservice isolation depend microservice,evaluate move microservice microservice project develop isolation planning determine microservice communicate rest call pub messaging order service product product service microservice depend retrieve datum microservice isolation development example happen order service request product detail answer request,2,355,1,2.0,2,2017-01-12T23:03:45,0.0
42204181,1729795.0,<spring-cloud><microservices><distributed-transactions><spring-cloud-stream><spring-kafka>,spring cloud stream kafka implement idempotency support distributed transaction management eventual consistency,follow typical scenario order service purchase product commander distribute transaction product service list product stock payment service normal flow user order product order service create order db publish message kafka topic order reserve product product reserve request product service decrease product stock unit db publish message order product reserve order service product reserve message order payment publish message payment request payment service order payment answer message pay order service read pay message mark order complete finish transaction trouble deal error case assume payment service fail charge product publish message payment fail order service react publish message undo product reservation product service increase stock db cancel reservation publish product unreservation complete order service finish transaction save final state order cancel payment fail scenario imagine reason order service publish undo product reservation message receive product unreservation complete message retry publish undo product reservation message imagine undo product reservation message order arrive productservice process set invalid stock product scenario implement idempotency update follow artem instruction detect duplicated message check message header ignore situation follow ignore duplicate message order service send undo product reservation product service message start process crash update stock order service response retry send undo product reservation product service duplicated message case repeat processing help support scenario well distinguish discard message reprocess,2,1656,6,0.0,2,2017-02-13T12:34:23,0.0
41880229,1767308.0,<asp.net-web-api><architecture><microservices><azure-service-fabric><service-fabric-stateful>,send message microservice azure service fabric api,good architecture service fabric guarantee message send service api service api lose black arrow idea service stateful service bad call stateful web api reliable collection send message api code service service stateless service add third service send message queuing system service bus service pick third service notice third service access db service api access ideal solution microservice architecture idea keep mind goal lose message service completely temporary removed … direct call,2,880,0,3.0,2,2017-01-26T18:16:09,0.0
40044128,4469944.0,<java><ssl><spring-boot><microservices><spring-cloud-config>,fetch configuration spring cloud config ssl,build microservice spring boot configuration distribute spring cloud config config application ssl enable spring boot application communicate config server https problem load ssl configuration bootstrap yml application initiate rest call config server fetch configuration fail miserably error configure truststore certificate bootstrap yml suggestion create successful ssl communication config server,2,3724,0,1.0,2,2016-10-14T13:14:30,0.0
40010594,6012980.0,<microservices><mesos><mesosphere><consul><consul-template>,consul deregister fail service,consul consul version service mesos service keep move server deregister service consul fail state list service fail state curl issue period time consul ui stale datum ui unusable,2,1756,0,1.0,2,2016-10-13T00:51:04,0.0
53120723,7300643.0,<.net><api><asp.net-core><microservices>,microservice api gateway microservice chassis,microservice hear microservice chassi find resource online difference microservice chassis framework api gateway chassis frmework solve cross cutting concern problem solve api gateway recommendation microservice chassis framework net,2,1145,1,1.0,2,2018-11-02T14:45:25,0.0
50484157,3493153.0,<spring-boot><microservices><netflix-zuul><netflix-ribbon>,case zuul netflix ribbon,zuul ribbon load balancing case prefer zuul ribbon vice versa,2,941,0,0.0,2,2018-05-23T09:04:30,0.0
55353966,7999749.0,<java><domain-driven-design><microservices><cqrs><event-sourcing>,good practice micro service interaction event sourcing cqrs,api call work aggregate idea head interact aggregate open idea good practice send command microservice well event handler microservice react event service generate command microservice,2,265,1,0.0,2,2019-03-26T09:43:13,0.0
55437390,3172596.0,<kubernetes><microservices>,replicaset deployment,kubernete microservice object wrap head read documentation article replicaset delete pod pod spawn base replicaset deployment actual case,2,187,1,0.0,2,2019-03-31T02:33:54,0.0
43497790,1420100.0,<c#><rabbitmq><microservices><masstransit>,response event publisher,masstransit rabbitmq send command consumer consumer execute require task send response publisher find sample code properly message perform relate task author topic add comment publish response message response publisher,2,305,1,0.0,2,2017-04-19T13:53:47,0.0
43383125,7520792.0,<java-ee><architecture><microservices><weblogic12c><ejb-3.1>,refactor common ejb code microservice refactore monolith application,currently work strategy refactor monolith java ee base application multiple web service common ejb code weblogic platform multiple microservice common ejb code session bean specific web service common code access multiple service good approach refactor common ejb code option refactor common ejb bean share library deploy ear question web service lookup bean cdi work context local jndi lookup possibility package common ejb bean jar file include web services app inf lib directory option create multiple copy code service option,2,697,2,0.0,2,2017-04-13T03:37:30,0.0
43418403,2711378.0,<spring-mvc><microservices><coupling>,microservice couple,kind microservice architecture http json communication medium better call rest spring mvc class call callee happen duplicate mirror class project create jar include couple case duplicate coupling sure couple model project common event drive architecture event kinda exactly,2,446,3,0.0,2,2017-04-14T19:57:55,0.0
52057408,3602058.0,<aws-lambda><microservices><pact><aws-sam>,contract testing aws lambda,contract testing aws lambdas pact normal api implement contract testing aws sam tool pact modification,2,470,0,0.0,2,2018-08-28T12:02:13,0.0
44038536,2271502.0,<java><jhipster><microservices>,work single gateway base microservice team,develop microservice base application jhipster component time service registry uaa server gateway service component pc consume resource gb ram developer sufficient resource pc reason face problem continue development team seek option problem efficiency development team currently add change feature application work microservice gateway frontend case happen suppose multiple developer work gateway service time development environment debug test deploy gateway individually plan deploy microservice vps server future production heroku kubernetes jenkins cloudfoundry correct wrong well option smooth development read sam neuman microservice book problem single gateway base application development curious jhipster resolve problem,2,382,0,0.0,2,2017-05-18T04:22:09,0.0
44181863,3073272.0,<load-balancing><microservices>,difference microservice load balancer,fairly realm microservice basic load balance read article microservice mention microservice load balancer cluster vm deploy copy application case microservice separate database contrast load balancer single database difference quote text,2,1158,2,0.0,2,2017-05-25T13:30:39,0.0
35632607,4317945.0,<rabbitmq><varnish><microservices><http-method><purge>,http method purge idempotent varnish,http verb purge idempotent send purge request receive second time microservice invalidate varnish cache publish message rabbit queue case purge failure log continue execution queue consumer late status resource varnish cache purge request request resource varnish second microservice return success case purge microservice succeed,2,829,0,0.0,2,2016-02-25T16:14:18,0.0
35639882,913622.0,<php><node.js><rest><authentication><microservices>,jwt authentication micro service architecture,question question create authentication service micro service application service check token jwt retrieve user solution current thinking base auth service insert redi user authenticate service check user header token redi redis user authenticate redis user authenticate user send auth service auth service authenticate credential retrieve auth service insert redis user request loook redi retrieve thing send security logic architectural problem approach,2,965,2,0.0,2,2016-02-25T22:42:00,0.0
35751630,4083513.0,<spring><spring-cloud><microservices><netflix-eureka><netflix-zuul>,spring cloud zuul retry instance,spring cloud angel sr configuration spring boot app enablezuulproxy instance random port instance well zuul instance register eureka access restful endpoint instance access find balance round robin manner kill instance defunct instance forward zuul attempt contact fail retry instance misread documentation config request destine defunct instance fail forwarding error zuul stacktrace subsequent request succeed expect behavior continue defunct instance remove zuul registry edit update brixton change behavior hystrix exception detail,2,2232,10,2.0,2,2016-03-02T15:36:12,0.0
50966737,3933785.0,<spring-boot><microservices><ethereum><bitcoin>,difference microservice decentralized application,decentralized application article confuse microservice decentralized application help understand difference microservice build spring boot docker technology build ethereum develop decentralized application help understand difference,2,388,0,0.0,2,2018-06-21T10:53:20,0.0
56459170,5348990.0,<spring><api><spring-mvc><microservices><spring-restcontroller>,spring controlleradvice fail override handlehttprequestmethodnotsupporte responseentityexceptionhandler,fact situation currently face build global exception handler spring restcontroller return customized response json handle pre define http error class inherit method overriden overridden fail excerpt code log follow log follow successful code handle malfunction code handle wonder underlying reason appreciate recommend solution,2,136,1,3.0,2,2019-06-05T11:00:49,0.0
44394119,7234109.0,<django><microservices>,monolithic microservice concept,large django project feature django backend framework project user website ios app monolithic app currently monolithic micro service watch throw preview monolithic app change micro service single project bunch app technically folder app assume call folder model py view py admin py monolithic app simply django admin startapp terminal create folder microservice multiple project connect simply multiple app single project big confusion previewed project video good grasp concept simply change microservice video sure monolithic app,2,1355,0,0.0,2,2017-06-06T15:30:08,0.0
44416904,3190623.0,<microservices><graphql><kong>,kong api gateway graphql rest service,understand kong api gateway microservice implement rest graphql interface api gateway expose graphql api request microservice currently implement rest graphql grpc,2,3539,0,0.0,2,2017-06-07T15:27:36,0.0
44392569,1399134.0,<docker><microservices><docker-swarm>,istio add support docker swarm,open platform connect manage secure micro service interesting support kubernete find roadmap mention future support container management platform docker swarm,2,997,0,1.0,2,2017-06-06T14:19:18,0.0
44313956,1790300.0,<mean-stack><microservices><bounded-contexts>,microservice model share bound contexts,currently build microservice base application develop stack situation share model bound contexts example user service handle registration process well login generate jwt logout file service handle uploading profile pic image user happen upload additionally friend service keep track association member currently add guid user user table user service well middle field file table friend table query field service friend file rest call time query caveat downside choose seneca rabbitmq notify file friend table user update user table worried service chatty lead performance issue alot update place hour isolate boundary pull recommend approach solve issue track,2,400,4,2.0,2,2017-06-01T17:42:16,0.0
40815723,6238925.0,<microservices><hystrix><netflix><circuit-breaker>,circuit breaker microservice architecture,good add circuit breaker pattern microservice architecture microservice side inside microservice inside elb insider api gateway good design pattern,2,381,0,1.0,2,2016-11-26T06:41:15,0.0
38966184,3391018.0,<architecture><microservices>,business logic individual service micro service ecosystem,service billing order api gateway fan request service bill create order order scenario user create order request rest api user validation order entity create billing entity create notification notify user application logic sit call service synchronously rest api service responsible call user order request rest api call order service create order successful rest api successful call billing service user order request rest api call order service create order return response order service thing asynchronously,2,2305,2,0.0,2,2016-08-16T03:26:29,0.0
48338676,369117.0,<microservices>,microservice deploy initial datum migration,microservice ms microservice ms ms datum product ms productname ms time product add update delete ms message message queue ms subscribe queue update internal state question fill internal state ms deploy production time find documentation pro con solution export import database level pro work con datum export import change datum ms implement call getdata getdatachangedsince pro failsafe con lot work option pro con,2,73,0,1.0,2,2018-01-19T10:13:43,0.0
48190148,2875005.0,<web><microservices><distributed-computing><soa>,difference soa microservice,understand soa microservice module independant reusable differ soa microservice,2,749,3,0.0,2,2018-01-10T14:56:32,0.0
46425554,4252764.0,<jpa><entity><microservices><dto>,expose domain model java microservice architecture,aware copy entity class property dtos consider anti pattern pattern database entity class dto service mvc layer suppose microservice architecture set property entity project persistence dto project service propose pattern situation second project functionality class share library tie unnecessary jpa specific api library alternative separate dto class anti pattern,2,525,2,1.0,2,2017-09-26T11:40:30,0.0
46432262,6225547.0,<microservices><stateful>,achieve statefullness microservice,microservice product microservice checkout microservice spre boot project checkout microservice product shop microservice stateful happend example achieve statefulness asyncronous event source kafka rabbitmq architecture code example detail product detail checkout service,2,2667,4,1.0,2,2017-09-26T17:12:03,0.0
46451544,5721304.0,<c++><microservices><desktop>,microservice desktop application,desktop application big big wonder microservice desktop application application stay desktop application write exclude module preparation idea start,2,2716,7,3.0,2,2017-09-27T15:16:38,0.0
47089196,5512095.0,<hash><microservices><stateless><revision-history>,ensure variable modify side,application lot stateless microservice pass variable context case start chain service context parallel wait finish service modify variable context chain finish merge variable contexts ensure conflict illustrate example solve problem store history variable modification huge datum overhead avoid solution find hash function calculate hash modification history exist hash datum check history data prefix history datum hash unable find function applicable algorithm datum overhead,2,28,0,1.0,2,2017-11-03T05:45:18,0.0
47181503,8407472.0,<api><spring-boot><kotlin><microservices>,response status http springboot kotlin api,start kotlin help question return http status true return return notfound accord code return status situation,2,1447,0,0.0,2,2017-11-08T13:53:29,0.0
54035765,1194224.0,<database><architecture><microservices>,handle database schema update microservice,start schema microservice manage label return label format handle schema change affect consumer microservice refactoring artist move table microservice return follow object create api call return structure migrate datum structure change well support schema return object thing version microservice thing keep mind,2,390,0,0.0,2,2019-01-04T08:59:23,0.0
40734086,1682401.0,<.net><asp.net-web-api><asp.net-core><microservices><api-gateway>,implement api gateway asp net api microservice,develop micro service asp net core web api plan investigate step add api gateway proxy route client request designate service isolate prevent client call service directly gateway perform logging security check discovery mechanism time platform leverage great constraint purpose micro service host static ip create api gateway thing gateway implement host pattern translate generic implementation simply structure db map api request micro service api httpwebrequest construct request return response create message handler log request,2,5182,0,0.0,2,2016-11-22T05:01:43,0.0
40585401,411632.0,<rabbitmq><message-queue><soa><esb><microservices>,route key communicate service,follow sample requirement service datum service provide datum require service data soa rabbitmq service require datum send message exchange write queue service process message publish answer exchange finally service listen answer message cycle question publish consume message identify operation request datum service start operation identify unique identifier question publish message receive answer invocation operation validate rabbitmq route key answer requirement example service send message route key consumer service consume message ignore route key produce result publish message exchange route key service receive message bind route key usage route key,2,231,0,0.0,2,2016-11-14T09:26:59,0.0
53595219,1797038.0,<docker><architecture><microservices>,multiple micro service share database server container multiple dabase,good practice multiple service connect database server database guess postgre instance well service container instance question service container db server instance container container db service separate container db multiple db container service db server multiple database container database service connect container db server understand service db completely decouple server wise guess reason db server resource waste multiple instance db server understand server service couple hardware wise,2,317,0,1.0,2,2018-12-03T13:49:36,0.0
53594491,6921898.0,<docker><nginx><kubernetes><microservices><kubernetes-ingress>,serve static content kubernetes application,small java webapp comprising three microservices api service book service db service deploy kubernetes cluster locally minikube plan keep separate uis api service book service common static file serve separate pod image create front serve static file refer controller route request service diagram crudely confuse place pod serve static content connect ingress resource guess keep front pod ingress defeat purpose ingress nginx controller good practice serve static file appreciate help,2,3645,0,0.0,2,2018-12-03T13:06:45,0.0
53537413,1787314.0,<amazon-web-services><microservices><message-queue><amazon-sqs>,amazon sqs multiple consumer receive message,primary application send message sqs queue consumer application consume message process sure queue architecture purpose option standard sqs sqs fifo sqs snstopic kenesis functionality sqs sns topic kenesis question regard standard sqs sqs fifo consumer message sqs fifo standard sqs confuse option overwhelm queue confused architecture choose primary source amazon docs question stackoverflow post answer question multiple consumer queue sure address issue message consume multiple consumer answer kenesis scenario article understand difference appreciate help read definitely appreciate help decision,2,1134,7,0.0,2,2018-11-29T10:55:43,0.0
48677693,2585494.0,<microservices>,microservice design pattern architecture,rigorous analysis finally arrive point confuse microservice design pattern architecture pattern evolve solution monolithic application design pattern confirm doubt architecture speak development management scalability autonomous full stack thought suggestion clarify,2,896,0,0.0,2,2018-02-08T04:42:44,0.0
48616949,7438973.0,<architecture><microservices><software-design>,microservice,scenario micro service architecture design micro service good case basic case recommend poc proof concept project,2,2189,0,0.0,2,2018-02-05T06:30:32,0.0
48809275,4108590.0,<java><spring><spring-boot><microservices><applicationcontext>,springboot microservice set property application context java configuration,spring boot microservice java base config auth token container call access token auth token library class notice class third party file modify authcontextlistener annotation automatically application startup event automatically start container correct setting context param include grab token container initialize context param include web xml application context configuration perform create spring bean follow question achieve java base configuration late spring boot application file auth endpoint username password bean luck set three prop application context listener start automatically,2,851,4,0.0,2,2018-02-15T14:11:20,0.0
48731168,3563737.0,<node.js><microservices>,apply microservice architecture voting application,develop freecodecamp full stack voting application apply microservice architecture user story voting application follow authenticate user keep poll access authenticate user share poll friend authenticate user aggregate result poll authenticate user delete poll decide authenticate user create poll number item unauthenticated authenticated user vote poll conceptualize architecture application compose microservice ui aggregator authorization login logout social medium sharing poll db user db curious developer build microservice break user story microservice,2,124,4,2.0,2,2018-02-11T11:50:05,0.0
36129008,1500698.0,<node.js><express><microservices>,send response seneca express,seneca route api call express serve file problem find send response client datum api express seneca context find reference issue documentation,2,2358,0,2.0,2,2016-03-21T10:48:12,0.0
36291878,342534.0,<authentication><microservices>,microservice ipc authentication authorization,figure good practice ipc authentication authorization explain micro service base architecture saas dedicated service authentication service responsible authentication manage auth token jwt work perfectly good user login start consume resource service question authentication authorize request initiate service context specific user generate dedicated user service treat user system appropriate permission hard code dynamic token deploy service idea big concern token password compromise point request service treat high level permission cheer,2,451,0,0.0,2,2016-03-29T18:06:34,0.0
42382802,3831579.0,<java><spring><spring-boot><swagger><microservices>,swagger configuration eureka microservice register,case apply swagger application configuration swagger micro service suppose micro service register eureka server configure swagger eureka fetch micro service endpoint swagger ui configure micro service configure eureka work,2,1648,3,0.0,2,2017-02-22T04:36:41,0.0
48144298,1954657.0,<java><domain-driven-design><microservices>,bound context microservice,learn implement microservice understand term bound context understand concept domain drive design understand technical implementation link,2,770,2,1.0,2,2018-01-08T04:38:29,0.0
48004725,9148537.0,<rest><docker><spring-boot><microservices>,connect microservice docker,microservice docker connect don future app api rest spring boot search info tutorial don idea main app connect microservice api rest main app publish inside container docker tutorial explain,2,379,0,1.0,2,2017-12-28T09:16:25,0.0
37615250,831553.0,<domain-driven-design><microservices>,repository domain object,lot discussion regard topic convincing answer general advice repository inside domain object aggregate root root responsibility manipulate compose object example microservice care invoice invoice aggregate root product requirement service detail individual product table store invoice detail store product invoice repository correspond table inject product repository inside invoice domain object wrong,2,542,3,0.0,2,2016-06-03T13:07:27,0.0
56969345,318414.0,<microservices><communication><api-design><high-availability>,communication high availability microservice,understanding microservice spin multiple instance service require question instance microservice spread server call api microservice find approach kind discovery service ip address route instance load balancer surely push problem layer discovery service fail high availability discovery service multiple instance approach pub messaging queue manager high availability essentially problem response query tricky approach issue microservice pull stomp feed ha instance service subscribe read datum time duplicate datum pass downstream system kind active passive approach manage failover single point failure,2,50,0,0.0,2,2019-07-10T11:04:12,0.0
45637090,1075289.0,<node.js><grails><upgrade><microservices>,change backend technology iteratively,background backend currently write grail change backend nodejs execute change small iteration deploy aw question change technology grail nodejs iteratively opinion microservice architecture experience personally build nodejs server grail server nodejs pass request response grail move functionality grails request log validation move keep grail logic nodejs,2,70,0,0.0,2,2017-08-11T14:00:44,0.0
45779616,6546074.0,<sql><database><microservices>,simulate join concept micro service architecture,micro service architecture instance separate service isolate machine sql database location service db product service db service work properly event base message protocol amqp sound nice problem list product ui solution list product location simple monolith application easily join table problem raise multiple database solution query nest locationname example orm tool reasonable solution change db design productservice update product location event message location locationservice change raise confusing project structure solution service service agile project estimate future service service recommend good idea solve issue,2,213,1,0.0,2,2017-08-20T07:32:54,0.0
57573189,360088.0,<kubernetes><microservices>,synchronize http request service instance kubernetes,service multiple replicas work storage transaction block approach synchronize concurrent request multiple instance sharde key host service kubernetes environment replicaset simple box approach implement scratch idea deploy service statefulset implement proxy api route traffic specific pod statefulset sharde key http request scenario request synchronize handle instance problem handle case deploy service statefulset implement custom logic service route traffic specific instance process exact instance understand abstract implementation work kubernetes environment expose pod ip cluster implement route logic client side implement synchronization instance third party service redi route traffic specific pod standard approach handle case appreciate lot advance,2,39,0,0.0,2,2019-08-20T12:00:27,0.0
47271002,8158171.0,<microservices><gemfire><spring-data-gemfire>,update gemfire region base change region,retail application contexts receive transfer request context handle restful microservice develop spring boot persistence layer cassandra share service vertical scaling microservice db level service tightly couple conceptually vertical scaling gemfire create region contexts example box table cassandra update region box receive receive context region box transfer transfer context problem maintain data sync region approach separation gemfire gemfire version,2,211,0,0.0,2,2017-11-13T18:21:05,0.0
47330878,3218618.0,<microservices>,microservice internal communication,learn api microservie architect small description setup microservice application api gateway application include api gateway nodejs express app auth logic jwt handle api gateway pass incoming api gateway request microservice application http proxy pass user info proxy header client request flow client request api microservice jwt token authenticate api gateway serve microservice fine private api allow client side internal application callable request client side question protect api client side client fake valid user header,2,493,0,1.0,2,2017-11-16T13:26:21,0.0
47319604,7520864.0,<microservices><soa><separation-of-concerns>,microservice monolothic architecture conversion,read microservice architecture differ monolithic architecture wonder implementation form pure code monolithic architecture model core system handle request file function definition file kind request disadvantage monolithic architecture faulty functionality bring entire system function work expect bring entire system problem solve microservice architecture microservice conversion split single file multiple file specific thing request model file dependency specific service bring system microservice architecture well,2,241,0,0.0,2,2017-11-16T00:28:21,0.0
47380189,592015.0,<architecture><domain-driven-design><microservices><soa>,microservice governance soa,work soa goverene project year switch microservice architecture good thing soa canonical data model build effort system speak language communication centralize service bus microservice architecture team independent service bus wonder intergration point work enfore contract wsdl soa soap team develop service autonoumous deploy service keep version well soa problem solve service bus keep transformation trasparent consumer service version type govenrnance place case number microservice high picture team autonoumous agile fot good answer interested opinion magic solution,2,724,5,2.0,2,2017-11-19T18:04:35,0.0
55592983,6539123.0,<spring><spring-boot><microservices>,handle partial failure inter microservice communication,micro service communicate micro service handle scenario service failure maintenance service overload respond extremely slowly request scenario retry schedule time achieve option,2,118,1,1.0,2,2019-04-09T12:33:05,0.0
55597216,9070428.0,<python><unit-testing><flask><microservices><python-unittest>,authenticate flask unit test client service microservice architecture,problem problem flask microservice implement unit test start write test case find authenticate unit test client endpoint authorization problem authentication system service service authentication validate jwt token user authorize decorator test case authentication system work follow service include request user service user jwt token service jwt token decode user user object database authentication flow test case,2,331,7,2.0,2,2019-04-09T16:20:04,0.0
43100199,4408125.0,<spring><microservices><spring-cloud><netflix-zuul>,zuul api gateway filter,face problem access rest api register zuul route zuul pre filter call recursive pre filter code usecase follow zuul method validate token pass header validate token call rest service user location service fetch user detail user location service register zuul problem jwt token validation code solution apply call userlocation service code,2,773,3,0.0,2,2017-03-29T17:24:47,0.0
40233978,1645120.0,<microservices>,handle ui microservice,process learn microservice thing figure find resource direct answer question microservice involve business logic database interaction involve ui component js css html well,2,301,1,0.0,2,2016-10-25T07:34:14,0.0
51189616,9210480.0,<java><scala><akka><microservices><lagom>,proceed delete operation lagom framework,newbie lagom framework delete operation framework develop java test approach handle delete event set state optional empty return nullpointerexception crash readside cassandra database delete add status field entity handle delete event pass refer entity test state status sure entity delete readside delete properly term logic second approach logical good practice lagom framework offer developer delete operation edit readsidehandler code proceed handle properly empty option,2,202,4,0.0,2,2018-07-05T10:59:14,0.0
57979081,418549.0,<.net-core><aws-lambda><microservices><serverless-architecture>,net core query record microservice,learn design implement microservice serverless technology create autonomous microservice difficulty understand communicate datum microservice net core microservice microservice aws lambda function expose api gateway follow scenario institution microservice return list institution radius mile zipcode roi calculator microservice receive zip code input call institution microservice receive list institution institution return perform series calculation yield roi roi calculator microservice call institution microservice,2,122,0,0.0,2,2019-09-17T17:12:27,0.0
41019199,6829167.0,<angularjs><azure><asp.net-web-api><microservices><azure-service-fabric>,enable cor azure service fabric web api,angular app send http request service fabric web api deploy secure service fabric cluster enable cor globally web api startup class angular app locally send http request error access service directly browser url http request work deploy web api unsecure service fabric cluster add startup class enable cor happen enable cor globally web api secure cluster,2,1319,5,1.0,2,2016-12-07T13:50:41,0.0
51673608,6694427.0,<websocket><architecture><microservices>,microservice architecture websocket connection browser,follow typical microservice rest architecture multiple server expose controller provide service feature individually question assume business logic realtime web application require real time computing real time responsiveness multiple client application communicate option limit websocket connection browser mediator server connect architecture abit obscure interested monolith mediator follow rest microservice architecture force browser open multiple alot socket connection goal approach consume socket event socket connection client backend realm deal imagination imagine architecture multiple microservice follow socket handler service feature service feature service connect internal socket big backend mesh fail scale scale feature backend server support request second bring maintain cluster correlate eachother read understand reason topic architectural thought pursue high maintainability performance sophisticated architecture monolith approach recommend architecture,2,858,0,0.0,2,2018-08-03T13:20:02,0.0
53266337,10451395.0,<kubernetes><microservices><google-kubernetes-engine>,backend services quota gke,question regard quota google kubernetes engine instance pod pod refer microservice api containers spring boot app esp endpoint cloudsqlproxy pod microservice deployment yaml include nodeport service ingress mapping service deploy microservice pod container quota backend services limit wrong quota small microservice technology support approach architecture configuration wrong ingress configuration advance peter,2,488,1,0.0,2,2018-11-12T16:29:06,0.0
53397918,1089226.0,<angular><microservices><micro-frontend>,pass param ngoninit service,start learn angular question scenario micro service model angular app associate micro service microservice ng app handle transaction user service ng app calculate applicable taxis user land app enter detail transaction click continue button pass require tax calculation user pass url work user transactionid transaction amount bite secure pass ngoninit life cycle event ng app detail load tax base init param pass help,2,159,4,0.0,2,2018-11-20T16:58:46,0.0
46975781,991628.0,<node.js><docker><continuous-integration><kubernetes><microservices>,convert node app docker kubernete,node app compose independent module talk amqp app start js file instatiate js folder project turn instantiate actual module read microservice convert application docker container find example convert simple node app docker separate app module independent node container module independent depend module work receive work message queue result message queue find organize deploy code node project separate package json module single node project module deploy individually project organize script tool generate build deploy module container example find hello level sample pack app development deploy container change test build es babel,2,222,0,0.0,2,2017-10-27T13:06:20,0.0
52504114,2471026.0,<rabbitmq><microservices><message-queue><vapor>,vapor swift client message queue rabbitmq,play swift vapor build web api microservice good send message microservice build vapor message queue rabbitmq,2,402,2,0.0,2,2018-09-25T17:52:37,0.0
45929864,6647800.0,<java><spring><spring-boot><microservices><auditing>,tracking create change entity microservice,spring boot application jpa audit tracking microservice architecture avoid involve security core microservice authentication authorization api gateway core service current login user find pass current operator core service user identifier header request pass token core service fetch login user auth server wonder handle case suggestion,2,315,1,0.0,2,2017-08-29T02:33:28,0.0
45886359,8517611.0,<go><message-queue><microservices><nats.io>,golang nats subscribe issue,work currently micro service architecture insert nat project test simple scenario scenario simple publisher publish message loop basic nat server localhost big problem subscriber receive message main program routine quit ctrl publisher keep send message open terminal start instance subscriber work well till subscriber receive message bad thing appear error log server idea replace subscribe method queuesubscribe method work fine main difference subscribe queuesubscribe nat stream well opportunity case prefer streaming standard nat server code publisher subscriber,2,1154,5,0.0,2,2017-08-25T17:05:11,0.0
39686227,624884.0,<docker><kubernetes><database-migration><microservices>,handle database schema creation migration launch multiple instance containerized microservice,deploy microservice docker container microservice stateless persist state database requirement service deploy docker container orchestrate kubernete service deploy scale multiple instance instance service identical environment variable configuration pass instance care instance instance stateless elect leader quorum lead problem handle schema creation migration service mysql postgre data store create table schema launch statement instance fight boot set environment variable table schema creation instance handle schema migration constraint numerous action drop add column encapsulate transaction,2,1055,0,0.0,2,2016-09-25T11:18:52,0.0
39791667,3645827.0,<domain-driven-design><microservices><bounded-contexts>,context mapping relation,consider bad idea bound contexts upstream communication example order bc publish event inventory bc subscribe event time inventory bc publish event order bc subscribe,2,364,3,0.0,2,2016-09-30T12:34:52,0.0
39742117,1649225.0,<authentication><jwt><jhipster><microservices>,jhipster proper architecture authenticate exist database,currently work jhipster prototype application application simple gateway microservice access datum exist database company authenticate user jhispter support multiple datasource gateway switch database idea microservice authenticate user microservice database create problem call service gateway jwt token start authenticate authenticate user solution datasource gateway user authentication point exist database jhipster relate datum audits good practice case point direction choice,2,731,0,1.0,2,2016-09-28T08:35:55,0.0
37793364,800492.0,<amazon-web-services><amazon-elastic-beanstalk><microservices><amazon-ecs>,aws ecs container microservice architecture api,work api microservice architecture deploy ecs elastic beanstalk microservice long running task ecs equate single container pass task longer deploy task definition container hard limit ecs continue add service api ecs limitation service intend good deploy collection microservice separate docker container aws edit understanding relationship container task completely wrong entire api single task container dockerrun aws json container inside api task limitation limit container inside single task,2,1355,6,0.0,2,2016-06-13T15:13:57,0.0
37854185,2535261.0,<java><spring><microservices><spring-cloud-netflix>,server server communication microservice,work microservice architecture face challenge architecture user log sign token call rest api lot api server api secure spring security authorize user role service interact update service power validate token issue auth server problem work fine user log token passse service validate service trust token pass problem service call server log server server call service authenticate authorize call service read spring microservice zuul saviour api server spring security embed api gateway solution service default user certae role login fetch token call server api token pointer server server call server authenticate authorize spring security,2,1499,11,1.0,2,2016-06-16T08:46:04,0.0
38511443,852001.0,<amazon-web-services><aws-lambda><amazon-sqs><microservices>,aws pub message pattern,explain advantage disadvantage sns lambda sns sqs lambda setup architecture pub micro service messaging queue front lambda excessive,2,1925,0,0.0,2,2016-07-21T18:09:32,0.0
38508387,4710796.0,<web-services><rest><soa><microservices>,soa microservice rest web service plain english,explain soa microservice rest web service simple term fascinating confuse help appreciate,2,2264,0,1.0,2,2016-07-21T15:30:49,0.0
38453830,5284021.0,<microservices><defensive-programming>,defensive interact internal microservice,scenario http microservice public service provide client datum internal microservice authenticate call public service service call service authenticate token provide client agreement contract service reply json content authenticate user service receive response worth validate response example json body response parse object check object correctly instantiate set null alternatively leave integration test,2,62,3,0.0,2,2016-07-19T08:57:26,0.0
38629237,3547851.0,<c#><web-services><wcf><transactions><microservices>,create transaction wrapper multiple service,currently work project microservice main concept clear picture example service model controller basically service basic crud operation database second service service database database create service consume service service currently transactionscope wrap transaction work code help appreciate,2,743,3,0.0,2,2016-07-28T07:03:34,0.0
43568325,5352526.0,<javascript><node.js><git><shared-libraries><microservices>,share custom code nodejs microservice,create web app micorservice app db model create sequelize approach handle task nodejs create separate module db model save private git add private git web app microservice npm dependency wonder approach separate share private module microservice case db model dry advance,2,567,0,0.0,2,2017-04-23T07:03:23,0.0
50180928,3124148.0,<azure><httpclient><microservices>,net core httpclient singleton throwing,web application gateway variety internal service service consume single instance instantiate startup period time hit api fail http error call client note hit api postman aware deploy variety appservice azure idea corrupt httpclient manner tim,2,95,1,0.0,2,2018-05-04T18:14:15,0.0
56913581,2936329.0,<design-patterns><microservices><scaling><cqrs><event-sourcing>,microservice cqrs separate building write query model read model,follow scenario microservice architecture event sourcing cqrs command separate query problem lie sync query quere command minute command send store event pattern cqrs actual datum event sync service store database data read dozen time minute word service receive write operation dozen read operation adhere design pattern microservice aka scale reason feasible scenario write database scale read database answer propose cqrs implement remove event source leave write read architecture scale read write independently create separate service pattern,2,312,2,3.0,2,2019-07-06T11:15:56,0.0
55843815,10155165.0,<java><spring-boot><microservices><keycloak>,post delete type base authentication keycloak,resource api uri three operation basse manage user allow allow option understand work method option create permission help implement,2,298,2,0.0,2,2019-04-25T07:17:35,0.0
55751220,1115166.0,<docker><asp.net-core><kubernetes><microservices><docker-for-windows>,configure multiple service container kubernetes,docker kubernete technology dotnet core asp net core webapi docker windows edge kubernetes support enable service host docker container container container deploy yaml command status fine container configure check log follow error,2,287,11,1.0,2,2019-04-18T17:41:12,0.0
49176544,2182398.0,<spring-boot><microservices><spring-cloud><hystrix><turbine>,hystrix turbine work spring boot spring cloud finchley,turbine hystrix dashboard spring boot late version spring cloud exist problem turbine stream reactive service upload simple microservice github exception break pipe full spring cloud stack spring webflux suggestion,2,1896,0,2.0,2,2018-03-08T15:18:49,0.0
48505946,6021597.0,<architecture><microservices>,single database micro server architecture,application plan build decide architecture server idea spawn multiple server address server process component system single database cluster wonder good idea caveat,2,300,3,0.0,2,2018-01-29T16:35:32,0.0
55942462,6173626.0,<microservices><versioning><database-table>,good practice microservice development versione database table,system implement microservice order decrease interaction microservice implement level architecture microservice locally cache copy table manage service assumption locally cached table frequently access read mode microservice static content lookup table vice transactional content local cache maintain synch inter service messaging content fairly static issue workload startup microservice possibility local cache stale implement sort rolling revision number source table microservice local cache check revision number avoid synch event good practice approach well alternative microservice database shared database,2,67,0,0.0,2,2019-05-01T20:40:20,0.0
56102431,5410011.0,<microservices>,good practice microserviced application,monolith application rewrite application move microserviced architecture thing struggle understand microservice web api single api gateway reference class library notice lot example web api gateway web api service understand database lot referential constraint lot table reference separate good practice common db layer dependency inject service,2,111,0,1.0,2,2019-05-12T18:48:53,0.0
45420766,5390183.0,<architecture><message-queue><microservices>,micro service wrap message queue expose third party vendor,third party vendor push message consider message messaging queue micro service action queue overwhelm traffic consider good practice third party access message queue wrap restful micro service queue,2,199,0,0.0,2,2017-07-31T16:15:34,0.0
52851770,6872018.0,<microservices><netflix-zuul><netflix-eureka>,microservice exact difference service discovery service gateway,read article clear exact difference service discovery eureka service gateway zuul pointer,2,377,0,1.0,2,2018-10-17T09:41:08,0.0
52847185,411924.0,<design-patterns><architecture><microservices><soa><production-environment>,keep monolithic system component work,currently work big monolithic web application problem modules library component encounter problem module stall entire application solve day microservice problem handle microservice emerge option decide microservice long journey handle problem transition period,2,48,2,0.0,2,2018-10-17T04:13:08,0.0
35135884,5868674.0,<java><hibernate><transactions><akka><microservices>,transaction inter communicate microservice,good approach keep datum consistent inter communicate microservice project project build jersey guice akka glue service system separate transaction call service avoid long running transaction hibernate orm postgre db process transaction work commit transaction call service akka receive send datum transaction remain work commit transaction step fail data consistent state spend hour find solution avoid fail keep consistent state,2,226,0,1.0,2,2016-02-01T16:50:41,0.0
54347987,1693776.0,<kubernetes><containers><microservices>,purpose resource limit kubernetes,pod consume resource evict terminate purpose grace period clear documentation kubernetes official doc clarify,2,88,0,0.0,2,2019-01-24T13:39:37,0.0
54332236,3027364.0,<spring-boot><oauth-2.0><microservices><spring-security-oauth2><netflix-zuul>,implement authentication authorization zuul proxy oauth rest microservice,implement architecture workflow spring boot web client request resource server microservice endpoint zuul proxy zuul proxy redirect oauth server authentication oauth redirect zuul proxy request authenticate authenticate zuul redirect web client unauthenticated response authenticate zull proxy redirect request microservice endpoint microservice endpoint check user authorize user level access access resource microservice internal rest call microservice finally request resource send client sure follow correct workflow solution implement kind secure microservice api confusion pass user detail microservice microservice level user authorization oauth access token header pass microservice microservice validate token separately microservice secret credential validate access token token forge request chain bit lengthy question find proper solution architecture,2,2285,0,4.0,2,2019-01-23T17:02:10,0.0
54464994,10712274.0,<django><redis><microservices><publish-subscribe>,subscribe redis channel django project,multiple application write nodejs python django service work fine pub async communication nodejs problem easily pub redis channel question question continuously subscribe redis channel receive datum publish service note link django channel guess help detail update django default event base nodejs redis client example check redi second publish redis client python appreciate,2,801,4,2.0,2,2019-01-31T16:25:03,0.0
45255905,1094784.0,<java><node.js><microservices><cqrs>,cqrs microservice architecture datum service,play set microservice cqrs architecture personal project point understand standard setup standard setup order service pickup point service command send order summary email order service datum pickup point open hour send email possibility surely command directly order service order service query pickup point service datum command pickup points service pickup point service publish event order service attach command directly order service order service query read client face database merge service share context pity,2,667,0,0.0,2,2017-07-22T14:56:15,0.0
45146319,8250691.0,<spring><spring-security><microservices>,spring microservice accessible internally,setup microservice call internal service microservice accessible public access database secret secure microservice spring security case problem feignclient concern authorization,2,541,3,0.0,2,2017-07-17T14:00:20,0.0
45321939,843345.0,<web-services><iis><asp.net-web-api><nservicebus><microservices>,host service endpoint separate process,build microservice synchronous rest endpoint webapi asynchronous publish subscribe endpoint nservicebus top msmq process datum store database share endpoint decide host endpoint process simply host separate process database common ground pass datum process gut feeling process well complex host endpoint separate process simple host webapi endpoint iis host nservicebus endpoint windows service host process host nservicebus endpoint webapi code recommend iis shut worker process period inactivity kill nservicebus service leave unable handle incoming message figure host nservicebus webapi endpoint windows service appear experience host service endpoint process problem benefit associate choice satisfactory answer edit response hadieskandari webapi facade nservicebus endpoint plan webapi endpoint handle simple query store database share endpoint thse rest call invoke ajax style web application execute forward rest call msmq queue nservicebus endpoint wait response slow wasteful case keep datum access code business logic assembly appdomain endpoint share configuration cached datum,2,168,3,0.0,2,2017-07-26T08:50:29,0.0
51829581,10221236.0,<amazon-web-services><microservices><spring-cloud>,purpose spring cloud difference aw springcloud,spring cloud difference aws spring cloud,2,2141,1,1.0,2,2018-08-13T19:47:24,0.0
51976057,139698.0,<javascript><mysql><node.js><amazon-web-services><microservices>,microservice architecture mysql database pagination,imagine retrieve order array customer example array customer array pass method process asynchronously retrieve order customer array lose paginate database result set pull small set record time database bring pull record network confuse asynchronous nature well order customer efficiently return set size time service js,2,253,2,2.0,2,2018-08-22T22:32:57,0.0
51993175,6872018.0,<spring><spring-boot><microservices>,org springframework web client resourceaccessexception error request microservice,develop microservice code link code base start service start error error reference update parent pom version release,2,5919,5,1.0,2,2018-08-23T19:39:44,0.0
52463529,6568836.0,<java><rest><spring-boot><filesystems><microservices>,store request file,create service database store request datum file system issue request create file request datum file develop service spring boot,2,43,0,0.0,2,2018-09-23T06:18:00,0.0
52366559,1883920.0,<database><deployment><microservices>,deploy microservice database separate node,general question concern microservice application deployment base pattern loose coupling separation concern microservice database clear couple microservice database separate exclusively deploy separate hardware node example docker deploy microservice corresponding database container reside machine separate ip address extra afford curio speak approach gain engineering,2,51,0,0.0,2,2018-09-17T11:20:00,0.0
45072041,7492114.0,<security><jwt><microservices>,correct micro service jwt flow,currently build micro service architecture start auth server client confirm good flow authenticate user token image step start confuse solution problem api pass token auth server wait approval token store inside match db valid include secret phrase jwt token api service parse check token valid secret phrase hacker fake token parse valid phrase secret code encrypt token guess good course action,2,398,0,1.0,2,2017-07-13T05:26:18,0.0
50438873,1200114.0,<azure><microservices><azure-container-service>,microservice azure,understand microservice independent loosely couple service read azure understand component azure service fabric ak option deploy container azure vm docker containerization tool microservice develop atmoic individually scalable service achieve deploy service azure web api app app service plan configure auto scale base performance metric api app individually scalable individually manageable term deployment configuration thought process correct,2,306,0,0.0,2,2018-05-20T19:57:40,0.0
50435154,2397226.0,<domain-driven-design><microservices><cqrs><event-sourcing>,ddd cqrs es microservice decision microservice view aggregate,explain problem example concrete hopefully reduce ambiguity architecture pretty simple microservice aggregate transactional boundry microservice cqrs es design pattern imply microservice aggregate map domain real problem state aggregate rebuild event store event signify state change aggregate transmit service interested change message broker microservice transactional domain microservice eventually consistent domain microservice build view model event emit microservice example banking system microservice responsible map customer current account withdrawal deposit microservice responsible inventory stock reward serve bank microservice responsible monitor transaction award customer reward reward micro service problem microservice decision base view model update event pick reward customer drawback decision local view model replicate domain logic maintain view bug view propagate wrong reward state change aka event emit corrupted view model consequence service decision event advantage decision local view model system constantly query microservice domain system fast resource intense event service trigger query aggregate domain accept fact view model corrupt final decision consult aggregate domain problem simply understanding architecture aim post view architecture effectively microservice environment keep service decouple avoid cascade corruption scenario chatter service,2,315,1,1.0,2,2018-05-20T13:07:10,0.0
50265973,9768696.0,<java><database-design><architecture><microservices><spring-cloud>,domain object share microservice,understand microservice tackle problem relationship microservice architecture good practice assume convert student course app student service course service student service talk student table course service talk course table database example student enroll course course student relationship microservice microservice student service microservice course service student service student object course service course object understand student service call course service course map course student student enrol course list course student list student course duplicate course class student service student class course service move domain class common project share microservice avoid duplicate help answer good practice solve relationship problem microservice,2,854,2,0.0,2,2018-05-10T05:19:15,0.0
50275156,990517.0,<c#><azure><microservices><azureservicebus><azure-servicebus-topics>,azure service bus topic architecture,work project provide microsoft hone microservice skill general big concept introduction event bus opt azure service bus experience platform limit manage project manually create topic subscription raise question responsibility subscribe application create subscription azure startup conceptually topic represent event stack correct customer order intend domain event boundary application eshop topic azure deployment topic relate service bus configuration recommend technique manage source control insight greatly appreciate,2,1186,2,1.0,2,2018-05-10T14:22:20,0.0
39561186,3432386.0,<c#><multithreading><reflection><microservices>,good practice load multiple dynamic service dependencie service,devlop custom system load custom service configuratin dependency service example service implement custom interface good practice load dynamic service toghether depend dependency loop service postpone till dependency loaded ready tutorial,2,63,5,0.0,2,2016-09-18T18:28:43,0.0
57521840,2494781.0,<architecture><domain-driven-design><microservices><identityserver4>,identity server user profile,mobile app single web api identity server aim microservice ddd approach identity server user profile signup signin database api database scenario identity scenario api scenario sense assumption issue follow scenario signup round trip identity scenario signin round trip identity scenario signup trip scenario signin mobile app talk identity api check user success send token mobile app mobile app talk api success token identity send mobile app,2,84,1,0.0,2,2019-08-16T09:09:01,0.0
54524207,10840247.0,<http><microservices><jolie>,setting http output header parameter work aggregation,change contenttype response aggregated operation example code change return format op,2,35,0,0.0,2,2019-02-04T20:57:27,0.0
54582640,3538126.0,<git><github><gitlab><microservices>,standard well approach git repository structure microservice architecture,well approach repository structure microservice architecture base application example refer microsoft reference architecture eshopcontainer github repository complexity dynamic work environment team work ui microservice repository time consume process merge conflict team member microservice separate repository development well management export group repository production bau appreciate discussion pro con well decision environment,2,748,0,0.0,2,2019-02-07T21:33:17,0.0
54512595,3511426.0,<java><spring><spring-mvc><websocket><microservices>,web socket communication microservice,case microservice push long running task start process task keep update status task constantly poll update status task queue current setup create microservice push status update design violate principle well approach compare constant polling,2,357,1,0.0,2,2019-02-04T08:41:52,0.0
51386591,5594926.0,<java><testing><tdd><microservices><pact>,test syntactic bad request validation pact,start pact java contract test read pact good practice confused example simple rest endpoint create resource post return create success bad request syntactic validation error request body blank understand write scenario provider return bad request blank blank blank blank blank thing mock server return internal server error happy path pact define return bad request write pact add field validation rule number pact explode test scenario consumer exist smart implement pact dsl,2,370,0,1.0,2,2018-07-17T16:47:55,0.0
42608033,1669106.0,<security><docker><microservices><pki><ca>,create public key store microservice,implement set microservice docker enviornment service communicate jwt token service call service service sign token private key pass service service public key servicea public key store verify token public private key generation process microservice pass public key public key store thing public key store store public key send service send correct public key service request diagram image problem standard implementation kind public key store,2,979,0,0.0,2,2017-03-05T11:49:55,0.0
56660483,5908629.0,<node.js><express><microservices>,microservice architecture node express,plan microservice architecture project node express term independent module consider microservice separate database currently project database module consider diagram current architecture modules student school faculty share db module table datum module microservice architecture problem start separate db three virtual db db create three separate db map microservice db microservice fetch insert datum execution speed boost read separate ms db boost execution speed compare current scenario share db fetching datum table module question big product ola netflix twitter deal microservice db map microservice db microservice help,2,251,4,2.0,2,2019-06-19T05:20:16,0.0
31764926,1236501.0,<dependencies><microservices>,microservices api call dependency design,good practice design microservice service regard api dependency api service call example order management om service call user management um service query user info shipping address email time om call um time user info create lot dependency um service understand service suppose autonomous decouple om service everytime um service search google find alternative event base programming replciate user datum user datum create um module replicate table inside om database replciation mechanism replicate datum um om database copy user datum order object nest json eliminate dependency order query update suppose initial order creation call um good practice challenge rule thumb decide design approach,3,582,0,2.0,2,2015-08-01T18:35:43,0.0
24787801,455553.0,<spring-mvc><jpa><spring-boot><environment><microservices>,spring boot environment specific configuration,spring boot application actuator auto configuration jpa memory db test profile mysql db configuration development separate production db configuration app deploy production presumably java command environment configuration file config block application property yml pick find good post example describe switching good example main aim pre define property build time time switch app config environment dynamically java command argument secondary goal configuration,3,8554,0,2.0,2,2014-07-16T18:10:58,0.0
29825744,891441.0,<web-services><rest><messaging><spring-rabbit><microservices>,decide messaging rabbitmq versus web service backend component interaction communication,develop backend component decide component interact communicate decide well restful micro web service versus message broker rabbitmq criterion help decide web service component versus messaging,3,1803,0,2.0,2,2015-04-23T13:58:41,0.0
32574103,721666.0,<authentication><java-ee><microservices>,microservice solve security user authentication,lot discussion microservice architecture understand solve issue security user authentication example develop microservice provide rest service interface workflow engine engine base jee application server glassfish wildfly core concept workflow engine call user centric depend role access level current user workflow engine produce individual result user centric tasklist process open task depend user role process eye service accessible example plan implement modern ajax base javascript application workflow microservice problem avoid cross scripting problem javascript ajax javascript web application deploy domain microservice microservice force user authentication case scenario application provide transparent authentication mechanism situation complex client access user centric microservice force user authentication architecture service client application application server domain problem solve good practice architecture,3,1702,1,2.0,2,2015-09-14T21:18:13,0.0
29689630,3894414.0,<.net><rest><architecture><restsharp><microservices>,move microservice net app question,start split app microservice task remove functionality repeat apps thing email send export search stuff code repeat app feel overwhelmed struggle start understand purpose microservice pick language job current purpose assumption net primary framework build basically start create microservice simply send email app talk send email email sender logic send email app recipient body struggle thing protocol apps talk service rest http case email send microservice effectively web api app personally build rest api rest good restful call backend email system send backend code restsharp throw generally consider good future planning sort gateway service beneficial app gateway gateway talk service rest api app micro service question start sort stuff architecture general order step workplace bit head currently,3,1440,0,2.0,2,2015-04-17T03:18:48,0.0
33556707,3939536.0,<docker><zeromq><microservices><consul>,dynamic scalable adaptive architecture,phd student cloud compute plan microservice base architecture consul zeromq project question find hard understand help share experience microservice base docker zeromq consul mention combine three dynamic adaptive environment understand zeromq docker consul individually unable clear picture function docker container microservice inside host zeromq transport pub pipeline message docker container container host datacenter host datacenter consul service discovery understanding correct architecture dynamically scale accord workload situation worker node computation spin number worker node component determine decision scheduling component explain happen component perform function major role consul service discovery configuration well limitation zeromq service discovery mechanism require consul failure node propagate architecture component responsible consul zeromq advice,3,535,0,1.0,2,2015-11-05T23:21:28,0.0
34406896,2038901.0,<architecture><microservices>,share code micro service,example project micro service client web admin web client api admin api micro service share db code db code submodule git micro service micro service principle,3,1588,3,1.0,2,2015-12-22T00:57:07,0.0
38168658,1725624.0,<database><rest><spring-boot><microservices>,multiple microservice database association,question concern microservice database develop application user list country click list attraction country create country service auth service user oauth attraction service service database map association attraction country iso code example belgium api attraction approach work bit stuck follow user add attraction list favorite database create favorite service pass kind business key create associate datum correct advance,3,600,0,0.0,2,2016-07-03T09:40:56,0.0
34575783,4189441.0,<c#><microservices><azure-service-fabric>,azure service fabric actor microservice,microsoft offer microservice solution cloud platform azure framework reliable service reliable actor wonder reliable actor independently microservice form multiple actor microservice,3,1878,3,0.0,2,2016-01-03T11:03:07,0.0
41661858,4959044.0,<c#><.net><microservices><restful-architecture>,microservice interaction,good practice microservice interact microservice develop currently create service bus pass event create microservice task runner webjob consume message bus http post microservice endpoint microservice web api correctly happy hear suggestion,3,757,2,0.0,2,2017-01-15T13:52:12,0.0
42332737,7489353.0,<jwt><microservices><identityserver4>,exchange reference token jwt downstream microservice authorization,currently create application base microservice architecture authentication provide identity server follow lot set proof concept identity server setup secure api native application access service token initially client issue access token access api switch reference token issue approach adopt microservice gateway receive reference token turn jwt inclusion request downstream microservice gateway exchange inbound reference token jwt identity server assist introspection endpoint send reference token retrieve claim construct jwt gateway service pass authorization header downstream service provide help understand goal architecture,3,1348,0,2.0,2,2017-02-19T20:52:59,0.0
41853686,6400278.0,<docker><rabbitmq><message-queue><microservices>,rabbitmq communication docker container,communicate app store docker container docker network message queue rabbitmq docker container rabbitmq server channel specific container channel example app communicate regard,3,560,0,1.0,2,2017-01-25T14:06:41,0.0
41880524,1506920.0,<java><hibernate><caching><architecture><microservices>,microservice base architecture individual cache node,consider bad practice separate local cache node distribute microservice application hear monolithic application local ehcache level cache provider hibernate distribute environment common practice distribute cache memcache redi hazelcast consequence separate cache node,3,2106,0,0.0,2,2017-01-26T18:35:24,0.0
38377156,4639029.0,<java><windows><spring><spring-boot><microservices>,spring boot service command,spring boot newbie easy offer administrator start spring boot microservice job scheduler create file service scheduler call spring boot microservice command kill process graceful exit host window server,3,7155,0,1.0,2,2016-07-14T14:38:40,0.0
55296523,1065547.0,<java><spring><microservices>,load spring config programmatically,micro service common library add spring configuration common library problem microservice care code force add config order application programmatically load config microservice config common library config microservice application yaml microservice start fine error good problem provide dummy microservice,3,176,0,0.0,2,2019-03-22T09:28:00,0.0
55394912,559993.0,<authentication><jwt><microservices>,authenticate json web token jwt api,create rest api base php slim framework json web token jwt authenticate authorize access api client authenticate send credential special route correct return digitally sign token list allow permission subsequent request api require token authentication authorization pretty standard stuff work well separate service micro service reuse api future problem api authenticate jwt access secret generate generate token move auth service middleware authenticate receive token api api auth service host share secret feel bad practice well,3,715,0,0.0,2,2019-03-28T10:08:16,0.0
49531349,4818810.0,<javascript><node.js><microservices><hystrix><circuit-breaker>,request cache circuit breaker opossum nodejs,base netflix hystrix circuit breaker design pattern follow node js service deploy circuit breaker opossum rest call fallback method handle scenario service wonder request caching alongside circuit breaker return cached response fallback invoke achieve request client rest call,3,596,4,0.0,2,2018-03-28T09:50:53,0.0
39224930,2799357.0,<migration><jhipster><microservices>,jhipster migrate monolithic microservice,currently jhipster monolithic application migrate microservice architecture create registry gateway uaa service migrate core business application microservice facility perform automatically,3,988,0,3.0,2,2016-08-30T10:24:52,0.0
35617996,2028135.0,<spring-boot><microservices><netflix-eureka>,eureka registration https micro service,eureka recognize https endpoint info health point http endpoint enable http enable https micro service url registration eureka,3,3759,0,1.0,2,2016-02-25T03:57:15,0.0
35743527,5437346.0,<spring><thymeleaf><microservices><ssi>,microservice ui spring thymleaf,three web application microservice gateway include ui change app microservice ui gateway server side include thymeleaf template engine include problem css js file include original localhost server server include content localhost include js css file hope understand problem help,3,855,7,0.0,2,2016-03-02T09:45:51,0.0
51026313,1377182.0,<rest><url><design-patterns><microservices>,url pattern rest microservice,good url scheme restful microservice service context service hashtag instagram specific logic thing connect hashtags user service handling registered user start url api context service case example api hashtag oder api user problem service core resource user service resource list user example url api user user hashtag resource service list hashtag url api hashtag hashtag problem core resource sound exactly service good solution good practice,3,1723,1,0.0,2,2018-06-25T14:50:34,0.0
51099034,9779490.0,<java><hibernate><spring-data-jpa><microservices><hibernate-mapping>,map jpa embed entity class embeddable entity class,class column bigint null table error org hibernate mappingexception component property find basically map kindly help,3,1173,5,0.0,2,2018-06-29T09:53:58,0.0
44301997,1813696.0,<spring><microservices><spring-cloud-netflix><spring-cloud-stream>,spring netflix eureka zuul spring cloud data flow,microservice spring eureka zuul spring data flow build service turn consume multiple granular service aka micro service aggregate datum return aggregate datum consumer service local intranet company infrastructure load balance individual microservice choice technology microservice deployment spring spring boot rest spring data,3,2365,0,6.0,2,2017-06-01T08:10:23,0.0
44420585,1790300.0,<node.js><mean-stack><microservices>,microservice effectively deal datum dependency microservice,develop application utilize microservice development approach stack situation data share multiple microservice example user video message send receive inbox service video message record belong account record user create video send receive message foreign key userid associate video message record create scenario display middle associate video example front user scroll list video uploaded system time bad case scenario situation pull occur video tie unique user approach issue api call user service user tie video list inefficient chatty call video second api call scenario list video send distinct list user foreign key query user tie video efficient lose performance send display manipulate user create account service send message user service fanout queue responsibility individual service add user table database maintain loose couple extreme downside datum duplication fanout queue handle update ensure eventual consistency long approach efficient performance perspective tear approach share tradeoff approach sense implement,3,372,0,1.0,2,2017-06-07T18:47:49,0.0
44619634,736910.0,<node.js><sockets><websocket><socket.io><microservices>,good multiple service socket io,develop website microservice couple node js application socket io figure architecture multiple node js socket io connect user conflict nginx proxy uuid identify microservice send request sen well node js proxy receive socket io connection create connection user add network load add microservice love view,3,1445,1,1.0,2,2017-06-18T21:19:51,0.0
48251083,7151011.0,<java><spring-boot><aws-lambda><microservices>,deploy spring boot application aws lambda,exist web application build javascript spring boot mysql deploy application frontend backend aws lambda advise achieve sure restful api call map api gateway turn invoke lambda function exist java method restconroller appreciate advise,3,3492,0,1.0,2,2018-01-14T15:24:55,0.0
46333040,4087691.0,<docker><docker-compose><microservices><codeship>,docker compose codeship service ci pipeline,build app couple prototype pipeline bit confused difference codeship doc understanding appropriate case spin container time integration testing help build service serially parallel understanding correct,3,223,0,0.0,2,2017-09-20T23:11:02,0.0
46476437,4352790.0,<node.js><google-app-engine><mean-stack><microservices><google-cloud-endpoints-v2>,google cloud endpoint equivalent api gateway endpoint equivalent microservice,app engine flexible environment prepare deploy angular client cloud endpoint handle node js express microservice simplify secure authenticate endpoint request clarify thing cloud endpoint api gateway route request individual microservice backend microservice suppose build individual endpoint apps host angular app statically server agnostic endpoint request directly gateway microservice ng client app host server framework node js express pass request gateway microservice,3,1020,0,0.0,2,2017-09-28T18:56:39,0.0
46471625,590459.0,<php><symfony><composer-php><share><microservices>,multiple microservice symfony application share vendor folder,work web project microservice architecture front web project api microservice orchestrate api manager plan symfony framework heavy instance composer download library symfony component core library project phpmailer example great sharing strategy vendor folder assume sf project share vendor folder compute library unique folder version library project experiment kind share good practice preferable vendor folder project open discution cheer,3,596,5,1.0,2,2017-09-28T14:27:00,0.0
36615117,4603448.0,<microservices><spring-cloud-stream>,microservice messaging db assign identifier,company work investigate move current monolithic api microservice current api heavily dependent spring sql server persistence microservice investigation lean spring cloud spring cloud stream kafka polyglot persistence isolate database microservice question message kafka typically microservice architecture plan coordination layer set microservice client application coordinate activity microservice isolate client change microservice api stuff read spring cloud stream kafka indicate stream coordination layer source resource change operation insert update delete microservice consumer message trouble insert heavy database assign identifier identity columns auto increment column sequence surrogate key assign post request return caller coordination layer save multiple thing microservice assign identifier insert move operation messaging coordination layer microservice insert coordination layer response insert operation assign identifier additionally consumer stream consumer publish datum data warehouse message assign identifier people deal problem database assign identifier anti pattern microservice expose separate microservice endpoint return database assign identifier coordination layer synchronous call identifier call asynchronous insert uuid dbas hate primary key order number user face generate,3,186,0,2.0,2,2016-04-14T06:15:30,0.0
42582463,105550.0,<amazon-web-services><aws-lambda><microservices><prometheus>,monitor microservice architecture,design architecture describe diagram question monitor architecture independent piece compose logical unit monitoring system check zip file poll corresponding png file hour png file find alert tool timeserie analysis prometheu,3,381,0,1.0,2,2017-03-03T15:14:05,0.0
42527724,7639562.0,<dns><load-balancing><microservices><mesos><marathon>,access microservice deploy apache mesos agent,client access deploy microservice specife host agent ip address relate mapping port add mesos dns client resolver agent ip address return list microservice instance relate port suppose three instannce webapp follow client enable access instance directly refer agent agent ip address port number example,3,129,1,0.0,2,2017-03-01T09:18:27,0.0
48134800,9113939.0,<go><kubernetes><microservices><devops><docker-container>,deploy apps micro service architecture container container,devop golang microservice architecture wonder application deploy container docker case system build micro service architecture example web service web server gateway front access database mysql example handle table handle table source code compile single executable binary file service binary three web server expose json rest api question deploy server host port host ip example gateway port port example talk mysql server inside host good practice continuous deployment work practice deploy binary inside container docker release year ago docker find integrate inside development workflow easily course docker simple compile code binary move deployment server docker executable inside container move container well deployment server scalibility high availability docker replicate service host load balancer deploy gateway host gateway host setup load balancer front gateway port node form vms lxd container spread accross bare metal deploy simple bash script ssh ansible thing complex scalability availability docker service inside container manage kubernete achieve high availability add overhead team learn technology kubernete example good practice deploy golang service,3,530,3,1.0,2,2018-01-07T06:15:06,0.0
45648115,589490.0,<node.js><docker><containers><microservices>,dockere nodejs application external dependency,build node js microservice reusable component create util folder folder actual microservice package microservice refer code work charm create docker image microservice lot sense build docker image inside microservice project architectural decision move util code microservice require pro microservice remain sustain completely code level dependency package con maintenance cross cut concern change cumbersome create private npm module inject dependency microservice package json file sure work suggestion highly appreciate good vaibhav,3,334,0,1.0,2,2017-08-12T08:20:12,0.0
38714097,2476861.0,<azure><azure-devops><microservices><azure-service-fabric><azure-pipelines-release-pipeline>,deploy service fabric application vst release pipeline host agent,set continuous integration host agent service fabric follow document release pipeline import certificate follow error deployment fail identify issue deploy service fabric task error update set system debug true variable follow log,3,1517,8,0.0,2,2016-08-02T07:19:59,0.0
47295217,2325154.0,<java><spring><spring-mvc><spring-boot><microservices>,start spring boot tomcat server port command prompt,simple hello kind rest api create spring boot accessible problem start instance api port command application yml worldgreetingserviceapplication java,3,1340,1,2.0,2,2017-11-14T21:07:54,0.0
48921774,5705247.0,<database><domain-driven-design><microservices><distributed-computing><soa>,microservice unsuitable business domain,business domain high level bound contexts customer application document decision preform bound contexts contexts ordering delivery document despite project consist ten class dozen ejb business logic reside relational database view trigger reason lot join union constraint involve business transaction word complex web dependency constraint bound contexts restrict state transfer layman term business rule complicated split monolith database service microservice architecture bound contexts service boundary implement business logic explicit api call api implement stupid business rule performance main factor lot effort optimize sql question secondly segregate api nightmare maintain web evolve business rule database trigger support high cohesion dry mentality enforce business rule transparently conclusion microservice architecture unsuitable type document management system correct approach idea wrong angle,3,186,2,1.0,2,2018-02-22T07:28:39,0.0
43252404,5157477.0,<java><rest><microservices>,rest api java microservice inside application server,small java java ee microservice calculation microservice application server application write java ee question app communicate rest api second question save time serialize deserialize transfer object understand communication app server language require serialization deserialization mention situation,3,243,2,0.0,2,2017-04-06T10:22:35,0.0
51149979,2185032.0,<azure><lambda><microservices><azure-functions>,microservicess serverless lambda function,concern idea migrate current microservice system serverless service communicate http api base serverless lambda function talk function call lambda call change http code lambda call service http request call service lambda api gateway method calling good service request internet api gateway neighbor service request long sense glad lambda app call lambda app local network http request experience migrate microservice base http communication service serverless lambda function change code specific lambda function call http internet api gateway call neighbor service guy figure local private network lambda call,3,339,0,2.0,2,2018-07-03T08:30:31,0.0
53243468,4983833.0,<microservices>,microservice architecture distribute transaction,microservice time ago pro con approach point eventually face transaction atomicity enterprise app kind unit work api level environment microservice call microservice api knowledge distribute transaction rise issue deal wrong suppose microservice payment item client call microservice api method internally place datum database create invoice file send microservice send email call system unit work sequence succede good question deal error api call unavailable change state system recover good approch situation,3,486,0,0.0,2,2018-11-10T21:14:41,0.0
58852921,4253536.0,<design-patterns><microservices>,microserivce operation forward operation microservice,microservice user upload avatar request route gateway directly cohesion perspective info handle service sense handle upload request simply forward request performance perspective totally waste bandwidth cpu,3,45,0,0.0,2,2019-11-14T09:04:23,0.0
58785222,6860417.0,<java><rest><api><spring-boot><microservices>,modify rest api response include field request query parameter,send response request field api reduce total size response example default behavior specific field request case field pass query parameter shoot team implement functionality spring boot organization java microservice implement feature,3,56,0,0.0,2,2019-11-10T02:19:20,0.0
46824730,3572215.0,<maven><gradle><microservices><multi-module><multi-project>,project structure microservice gradle maven,sure good practice project structure microservice architecture microservice create maven gradle project subproject module dependency inheritance project repository account nature microservice service technology service dependency spring boot issue team fetch service service work repository structure affect structure,3,1600,0,3.0,2,2017-10-19T07:31:19,0.0
52498247,7929009.0,<spring><spring-boot><microservices><spring-cloud>,set timeout spring boot configuration server,simple setup spring boot configserver client service call configserver configuration prop file detail git config server work properly prop file form git consumer server detail configserver server error error follow localhost url configserver call directly browser big prop file time retrieve git configuration configserver application property configuration consumer service bootstrap property thing timeout consumer advance,3,2430,0,0.0,2,2018-09-25T12:27:54,0.0
37864255,5846345.0,<spring-security><microservices><spring-cloud-feign><spring-cloud-security>,security microservice,microservice example microservice rest enpoint accessible microservice limit access microservice good practice spring cloud security oauth jwt,3,3439,4,0.0,2,2016-06-16T16:07:44,0.0
49171571,1781281.0,<architecture><microservices>,search query microservice architecture,assume microservice architecture book microservice hold book detail author microservice hold author detail real service enterprise grade choose book author datum storage option easy understandable example assume call service uphold specific availability throughput system efficiently search author start book write author book title start follow option perfect create search endpoint author service fetch author match search criterion follow book filter book require lot call book service create search endpoint book service fetch book match search criterion follow author filter author require lot call author service bad case load create microservice search search database optimize search search return book author search result call require search frequently sync book author service merge book author service defeat purpose mircroservice microservice experience help good architect,3,1020,1,3.0,2,2018-03-08T11:04:16,0.0
49252691,351879.0,<architecture><microservices>,microservice relationship dependency strategy,feedback couple solution handle data dependency relation micro service consider service explain bank service account service account service hold account connect bank bankid dilemma handle validate relationship bankid pro con decision option ignore validate completely post patch account validate bankid exist pro service hard dependency service work big con bankid incorrect account lose access reporting service reader account missing incorrect bank datum crash reflection service completely decouple benefit performance time complexity reader application reactive handle cross service relationship break option validate synchronous rest call post patch account fail bankid exist bankservice respond break pro datum integrity reader handle expect broken relationship con service tightly dependent argue longer proper micro service well single service performance impact negatively accountservice post patch work bankservice work reflection service tightly dependent bad generally feel wrong merge service case bad start problem merge keep massive service fail micro service principle sure read work fetched excuse option keep readonly copy bankentity accountservice accountservice keep update event bus validate post patch pro datum integrity reader handle expect break relationship measurable negative performance impact con complexity increase asynchronous nature event assume readonly copy bank update post patch account rapid succession create bankentity fail accountservice knowledge service loose dependency reflection complex reader handle broken relationship performance time issue resolve handle fact readonly copy bank update compare option deal complex board favourable thought general goal nice achieve service synchronously talk data integrity good micro service architecture impression relationship integrity simply thing accept lose decision lean option ignore anytime expect handle correct micro service solution service application reporting service cross service operation service full responsibility time datum fully function argument sake accountentity location reason usable complete domain entity expect rely bankid store location accountentity change event update tl dr experience opinion thought strategy,3,331,3,1.0,2,2018-03-13T09:37:06,0.0
45412334,1340439.0,<microservices><api-gateway>,api gateway microservice authentication,api gateway micro service work explain basic flow micro service architecture gateway find proper answer auth server customer micro service separate instance front service api gateway question user log username password api gateway call auth server return access token user user access specific url customer customer micro service separate instance api gateway validate token auth server user pass request customer service user validate token pass request customer microservice access token customer microservice responsible check user http call auth server,3,898,0,3.0,2,2017-07-31T09:40:46,0.0
45533748,2589030.0,<version-control><cloud><microservices><service-discovery>,version management microservice,suppose userservice microservice architecture deploy cloud service discovery route request host userservice version userservice user service user service client version manage microservice architecture,3,4518,0,1.0,2,2017-08-06T15:47:08,0.0
45431599,2239843.0,<database><api><architecture><microservices><gateway>,handle datum ui microservice architecture,planning microservice architecture application common practise domain entity microservice example customer customer consist multiple user company exist customer service warehouse service warehouse customer role warehosue entity hold key customer front microservice api gateway screen warehouse customer customer service api gateway handle meaning fetch warehouse customer connect service api gateway well hold customer specific attribute warehouse service view ui specific case correct bring view logic service,3,155,1,0.0,2,2017-08-01T07:32:34,0.0
52736868,927477.0,<graphql><microservices>,sense graphql microservice intercommunication,read lot graphql api gateway front front micro services wonder graphql advantage rest relevant communication micro service well inputs pro con successful usage example appreciate,3,715,0,0.0,2,2018-10-10T09:24:35,0.0
54232574,4346275.0,<session><oauth-2.0><microservices><spring-security-oauth2><spring-data-redis>,manage session microservice architecture spring boot,fairly microservice architecture build microservice stack spring boot spring cloud netflix oss library correct place store session overview infrastructure create oauth authorization authentication server ui service spring boot front service backend service backend service redi server store session cachable data discovery server eureka currently store session redi configure ui service perform work fine chance multiple service instance serialization deserialization issue develop store session front app correct place authorization authentication service authentication process service session config ui service front service sum expect achieve good practice project kind assistance appreciate,3,2462,0,0.0,2,2019-01-17T09:19:14,0.0
35314963,5902017.0,<rest><reactjs><redux><flux><microservices>,good practice communicate react component service,flux redux architecture react component communicate service example container representational react component chatbox enable read write message avatarbox password changer enable change user password news stream list news apply filter resource representation access microservice api update datum correct provide clean responsibility managing model performance doubt http request load component content question reffer,3,7950,0,3.0,2,2016-02-10T12:13:11,0.0
57265063,7754809.0,<c#><asp.net-core><dependency-injection><microservices><asp.net-core-webapi>,client ip address asp net core,create micro service application asp net core fetch ip address user snippet provide ip address host server ip address user api audit log purpose,3,252,3,0.0,2,2019-07-30T05:49:29,0.0
54379623,3080158.0,<microservices><cqrs><software-design><event-sourcing><debezium>,event source database cdc consider good architecture,talk source event simple dual write architecture write database write event queue kafka downstream system read event problem occur db event sync ordering event require sense solve problem people encourage database commit log source event tool build airbnb spinal tap redhat debezium oracle golden gate solve problem consistency ordering guaranty problem database commit log event source tightly couple db schema db schemas micro service expose break change db schema datatype change col change break downstream system db cdc event source good idea,3,724,1,2.0,2,2019-01-26T15:07:05,0.0
54341435,3673151.0,<java><spring-boot><microservices>,server separate process,service controller service controller process create app image,3,89,16,2.0,2,2019-01-24T07:32:18,0.0
45167593,5904022.0,<web-services><rest><authorization><microservices><event-sourcing>,authorization action microservice,modern multi user web application impose lot restriction action user perform word action require authority example user change personal datum member group post content group classic monolith application restriction easily enforce join database table accord result query microservice clear limitation handle sake argument consider facebook clone application consist front write js web technology backend consist number microservice api retrieve submit datum backend gateway business logic well entity event concerts birthday party post text entry exist wall event suppose entity manage separate service eventservice postservice consider follow constraint monolith constraint conceptually easy deal receive request delete post supply post user fetch event post belong check user author post delete post fetch host event check user host delete post microservice strategy hard time figure divide responsibility operation service alternative easy logic gateway procedure describe essentially perform call service directly database rough sketch happy solution start logic gateway tempting quick simple thing business logic eventually amass gateway service stupid crud endpoint defeat purpose separate service well define area responsibility slow rise high number call service operation complex essentially reinvent monolith replace database query slow limited network call alternative option allow unlimited communication service allow postservice simply eventservice user host event question perform delete afraid large number microservice communicate introduce lot coupling long expert generally advise direct inter service communication alternative solid system publishing subscribe event service stay updated happen service example time user promote host eventservice event post postservice subscribe event remember fact request delete post receive happy create intricate error prone system unhandled rare event service sync risk logic wrong place example constraint question handle postservice conceptually property event entity stress optimistic event implement application microservice sure answer category problem tackle hypothetical realistic difficulty,3,152,1,1.0,2,2017-07-18T13:01:29,0.0
45351222,6643803.0,<java><spring-boot><microservices>,proxy pojo microservice application,avoid duplicate pojos microservice application wonder proxye access pojo class interface define inside physically create pojos classe file big big challenge microservice architecture point find solve,3,426,2,0.0,2,2017-07-27T12:45:39,0.0
51932616,6872018.0,<spring><spring-boot><microservices><spring-cloud>,java lang noclassdeffounderror org springframework boot bind relaxedpropertyresolv microservice,work spring boot microservice project project develop project well simply project find error error microservicesdashboardapplication java application yml pom xml,3,5706,0,1.0,2,2018-08-20T14:10:13,0.0
51835569,705373.0,<symfony><bundle><microservices><symfony4>,symfony microservice,create microservice alpha beta gamma term application structure symfony version create bundle service bundle longer recommend symfony create separate repository service create bundle app,3,4330,2,0.0,2,2018-08-14T07:05:33,0.0
44936115,5343268.0,<scope><authorization><microservices>,authorization microservice architecture,currently develop backend base microservice architecture problem realize authorization explaine system follow service oauth service issue jwt group service ressource service todos service user group resource todo list belong group user create todo list list store group szenario user group user group user group user creat todo list group user modifie todo list allow group user modify todo list allowed group body great idea realize microservice architecture keep dependency service minimum request group service user group resource belong hard dependency resource service existence group service avoid dependency option store group user belong access token option client time oauth service token user member group option realize szenario,3,1038,8,2.0,2,2017-07-05T21:15:11,0.0
56147281,4085041.0,<express><jwt><microservices>,jwt authenticate separate api microservice,develop app microservice nodejs build auth api handle usual registration login issue jwt protect route separate api microservice write express jwt secret decrypt token api app,3,417,0,3.0,2,2019-05-15T10:35:47,0.0
56129216,11415559.0,<node.js><rabbitmq><microservices><nestjs>,wait completion action receive message,create microservice nestjs transfer throw rabbitmq microservice receive message queue turn wait complete previous main app controller client js actual output expect,3,380,1,0.0,2,2019-05-14T11:19:54,0.0
50312750,7707677.0,<java><sql-server><microservices><database-trigger>,keep database web application sync,webapps backend microservice microservice database change table database microservice change create update entry table database microservice context webapp ui human resource coordinator schedule interview microservice backend service schedule interview db microservice store relate interview candidate webapp ui interviewer coordinate question interview microservice backend service interviewer coordinate question selection interviewer select question candidate interview ensure interviewer question candidate db microservice schemas questionbank table question interviewer select interviewer table interviewer firm interviewtointerviewer mapping interview interviewer interview interviewer interviewer participate interview interviewtointerviewertoquestion mapping interviewtointerviewer question interview interviewer select question question questionbank interviewtointerviewer entry current workflow interview schedule webapp email send interviewer email link webapp clicking link open webapp provide interface interviewer select question plan interview requirement question select interviewer send reminder webapp interview schedule webapp lineup change interview interviewer change interview cancel happen solution interview schedule change webapp webapp call webapp webapp expose api webapp interview create existing interview update entry update interview table db db trigger launch db sure approach help pro con choose alternative approach achieve lead appreciate,3,104,0,0.0,2,2018-05-13T04:23:50,0.0
50392109,1167996.0,<cassandra><bigdata><microservices><cql>,understand cassandra replace rdbms,spend week cram cassandra understand basic well fit understand basic level point work good fit microservice platform essentially large data bus customer set api push pull share datum filtering pretty simple future bring top platform analytic layer visualization bar chart graph base datum pass microservice platform build atop mysql idea cluster honestly lot luck top change painful par course rdbms expect extraordinary amount datum concurrent user inevitable scaling problem cassandra distribute nosql potential replacement watch datastax video course site start dig find data store redundantly table primary cluster key enable type query row scatter node cluster join support denormalize create wide table ton column datum eventually consistent write readable predictable reasonable amount time cql sql lie store key data determine type query limited inflexible concept sense struggle fit long term database datum redundant table manage keep consistent table materialize view answer case idea love distribute feature frankly scared point feel learn lot week entirely unsure proceed janusgraph elassandra provide simple interface top cassandra relegate basically storage engine confident thing mature proper suppose direction insight build thing cassandra fit time,3,273,3,2.0,2,2018-05-17T12:59:06,0.0
39364466,2254364.0,<java><docker><jvm><microservices><application-server>,dockerize java microservice efficiently,java application server extend unique jvm micro service dockerize java microservice architecture jvm dockerize microservice consider java microservice limited number host amount resource consume jvm host huge efficient manage problem tune jvm limit resource consumption aim limit overhead docker java microservice architecture,3,602,1,3.0,2,2016-09-07T08:06:47,0.0
54631411,6156266.0,<azure><authentication><asp.net-core><microservices><api-gateway>,implement authorization net core micro service api gateway implement micro service well,help understand microservice authentication api gateway example independent deploy microservice implement api gateway request pass gateway add authorization jwt microservice add api gateway approach work fine doubt question user url deploy microservice connect gateway authorization place add authorization logic microservice well duplicate code api gateway input require hope explain problem correctly cp variyani,3,215,0,0.0,2,2019-02-11T13:12:37,0.0
54619764,8441607.0,<java><web-services><microservices>,expose web service third party application,tech discussion write application internally firm expose api third party client assume context web service third party simply call point consume response clearly answer raw point approach framework consideration address,3,274,1,1.0,2,2019-02-10T18:45:00,0.0
51524648,2172731.0,<spring-boot><microservices><spring-security-oauth2>,decode oauth jwt api gateway level individual microservice level,develop set microservice resource server spring boot oauth jwt microservice protect spring security jwt access token verify individual resource server level api gateway spring security place route request appropriate server propagate authentication header downstream service disadvantage setup compare accesstoken verify api gateway level matter opinion keep security api gateway level break principle loose coupling microservice better understand role user context,3,1098,0,3.0,2,2018-07-25T17:30:27,0.0
31717615,2317381.0,<web-services><rest><design-patterns><microservices>,database microservice pattern architecture,understand layout microservice pattern microservice vm sake example database fit architecture service turn connect consolidated database read write datum insight,4,517,0,3.0,2,2015-07-30T07:27:01,0.0
29787063,934876.0,<apache-kafka><microservices>,kafka good fit small scale microservice environment lightweight alternative,work series application deploy microservice separate database coordinate datum single unified event store log apache kafka start experiment kafka user kafka fairly large scale clustering fairly complex fault tolerance setup anticipate large volume initially wonder kafka choice good fit kafka lighterweight alternative current scale,4,1908,0,4.0,2,2015-04-22T03:16:02,0.0
37159662,1209187.0,<java><spring-boot><spring-cloud><microservices><netflix-eureka>,microservice resttemplate unknownhostexception,simple setup eureka service registration server service public api service call public api resttemplate eureka service register call service follow exception create sample project illustrate setup wrong setup,4,10589,5,1.0,2,2016-05-11T10:18:16,0.0
38023093,526592.0,<docker><microservices><amazon-ecs>,refer service task ecs cluster,refer service task refer essential task task definition example service mesage broker task rabbitmq service user api task user api configure connect rabbitmq service order api task order api configure connect rabbitmq,4,752,1,2.0,2,2016-06-24T22:43:57,0.0
34526251,4021836.0,<docker><kubernetes><containers><microservices><amazon-ecs>,difference kubernetes amazon ecs,difference amazon ecs kubernetes implementation architecture decide pick technology container management cloud decide factor pick technology docker container creation execution,4,2405,2,0.0,2,2015-12-30T09:05:46,0.0
41609091,1830420.0,<node.js><microservices><seneca>,share file microservice,move project current monolithic state microservice architecture project node js start module move image manipulation crop resize microservice sensible step drastically slow application application monolithic problem pass file file manipulation logic — read local storage disk microsevice keep mind scalability difficult course build image manipulation microservice scale host machine share directory read local disk scalable microservice scale machine ip adresse share filesystem advantage node streaming api send file http tcp socket learn seneca js course send file main app image manipulation service seneca js receive chunk approach ugly wheel reinventive http server send file reinvent framework microservice communication advice file sharing distribute microservice framework,4,4599,5,3.0,2,2017-01-12T09:12:44,0.0
41762928,576741.0,<node.js><microservices><netflix-ribbon>,client side load balance discover microservice nodejs,build microservice nodejs environment microservice write java spring boot microservice consul io service discovery ribbon client side load balancing spre boot spring cloud starter consul discovery spring cloud starter feign spring cloud starter ribbon project mix register discover service rest thing discovery aware rest call load balancing handle client ribbon achieve node stack,4,2361,1,1.0,2,2017-01-20T11:45:09,0.0
41824300,6400278.0,<c#><api><.net-core><microservices><gateway>,net core api gateway,work school microservice architectural concept implementation angular client net core api gateway dispatch request service good approach red rx net definitive example implementation follow implement api gateway net core,4,7935,9,3.0,2,2017-01-24T09:18:44,0.0
50647694,1638590.0,<kubernetes><microservices><spring-cloud><netflix-eureka>,eureka,set microservice base experiment top week development question rise eureka spring cloud develop independent container deploy pod maintain support load balance service registery monitoring containerization point developer friendly low server cost complete stack op dependent resource developer community tutorial gradual learning curve,4,1105,0,3.0,2,2018-06-01T16:33:00,0.0
43763418,440422.0,<microservices><azure-service-fabric>,update update certificate premise service fabric cluster,documentation update certificate service fabric unclear regard azure prem installation follow step work update cluster setup json template thumbprint original certificate thumbprintsecondary add certificate thumbprint thumbprint security metadata credential type indicate cluster secure certificate thumbprint format ec cb fd clustercredentialtype servercredentialtype certificateinformation clustercertificate thumbprint thumbprint thumbprintsecondary thumbprint storename servercertificate thumbprint thumbprint thumbprintsecondary thumbprint storename install certificate pfx update acl network service start servicefabricclusterconfigurationupgrade clusterconfigpath path json configuration file,4,500,2,0.0,2,2017-05-03T14:49:28,0.0
52163809,1245668.0,<java><architecture><relational-database><microservices><horizontal-scaling>,keep datum db syne horizontal scale,assume microservice scale horizontally instance working db instance schemea general assume instance read write datum demonstrate question pseudo code update function problem instance change product update function asdume function change product solution lock db example select update create performance bottleneck function well solution solve problem bottleneck real example java js helpful edit assume partioning option,4,66,2,1.0,2,2018-09-04T10:05:55,0.0
39305118,3645827.0,<c#><asp.net><asp.net-web-api><domain-driven-design><microservices>,event publisher asp net web api,start work micro service create event publishing mechanism plan amazon sqs idea simple store event database transaction aggregate user change email event store database event handler case responsible publish event sqs queue service user change email question practice achieve kind background time process scan event table publish event sqs process webapi application preferable separate process idea hangfire support cron job minute suggestion edit answer nservicebus example core concern example create log order place log database entry commit publish break event publish code event handler,4,2825,3,3.0,2,2016-09-03T08:57:40,0.0
44540545,1122841.0,<microservices><service-discovery>,microservice difference service registry service discovery,microservice term understand service service instance register service registry mention client contact service registry list ip port service case role service discovery edit accept answer theoretical detail find,4,5294,0,0.0,2,2017-06-14T09:18:44,0.0
46315996,4610451.0,<rest><microservices><soa>,transformation legacy microservice architecture,discuss transformation fat db microservice architecture bit history legacy loan application system capture customer detail fat database table application lot capture loan screen process build loan capturing administration reporting config current state presentation layer logic layer db layer orm layer project current task hand app build win form job transform modern ui modern feature approach approach build micro service current db structure db allow current application write db layer logic layer micro service write modern user interface angular react consume service second step capture operation legacy app third step move specific db table legacy database database approach good keep current operation approach allow application parallel production environment confusion question detailed design struggle understand context split micro service scope iteration qualification question contact detail app requirement bank detail income detail expense detail previous loan microservice application service qual question app requirement previous loan income expense detail demographics bank detail contact detail question approach sound correct legacy microservice microservice split lot advance regard gaurav sharma,4,209,0,2.0,2,2017-09-20T07:38:36,0.0
47145930,1526119.0,<architecture><versioning><microservices>,microservice versione good practice,read susan fowler book production ready microservice place find avoid versione microservice endpoint versione microservice easily organizational nightmare microservice ecosystem versioning microservice discourage type versione kind project git tag deb package versione python package versione http api version big problem manage project version exactly version roll case failure bug customer clue book microservice versioning blame advise regard topic,4,2789,0,1.0,2,2017-11-06T21:16:16,0.0
40669943,7176449.0,<java><spring><spring-boot><microservices><hystrix>,hystrix circuit breaker microservice,develop microservice spring boot spring cloud hystrix circuit breaker pattern circuit breaker respond alternate response case error downstream microservice depend datum question meaningful alternative response provide circuit breaker,4,1283,0,1.0,2,2016-11-18T05:28:16,0.0
36571963,569544.0,<python><git><pip><setuptools><microservices>,python development multiple repository,find good approach problem work python environment pip setuptool work normal git flow hope move feature branch app change move feature branch dependent lib develop thing point app git ssh feature branch dependent lib create pull request merge stuff master final change app step requirement txt point main branch feature good workflow micro service multiple dependent source code python,4,1023,4,0.0,2,2016-04-12T11:28:36,0.0
57020631,11780115.0,<rest><events><microservices><event-driven><saga>,microservice saga pattern consumer await response,clarify good organize architecture rest api microservice architecture apply database service pattern imagine user create order commerce system user credit limit flow orderservice create pende order push event userservice process event publish credit limit exceed event credit reserve event orderservice receive event change state order approve cancel good question user simple flow user post request order web service await order approve cancel include surely timeout web service return user check order state interval web socket option advantage disadvantage challenge describe simple case reality ten service third party involve course expect high load queue fill propose solution discuss greatly appreciate answer well link production ready system documentation,4,110,0,0.0,2,2019-07-13T15:47:29,0.0
38687434,2903188.0,<architecture><microservices>,good practice microservice discovery hard coding,question annoy write series microservice machine location hard code service individual location instance service form validation json message service box instance bring demand grow service call service communicate service service reside solution consider hard coding service location master node service delegate task instance service utilization message queue service write series message queue service instance read set message queue send result service ssdp utilize form simple service discovery protocol broadcast service set network keep track service architectural style hope simple,4,731,0,1.0,2,2016-07-31T19:01:30,0.0
38734740,5485125.0,<spring-boot><yaml><logback><microservices>,config springboot logback set application yml,logback xml file project springboot application application yml add work error config location appear error,4,4014,1,0.0,2,2016-08-03T05:01:34,0.0
47329630,1668069.0,<rabbitmq><cloud><microservices><masstransit><queuing>,host masstransit rabbitmq,work architecture micro service cloud premise talk queue bus es confused host masstransit rabbitmq asp net core project start bus create queue move forward,4,736,3,2.0,2,2017-11-16T12:25:13,0.0
41008507,1677909.0,<azure><microservices><azure-service-fabric><service-fabric-stateful>,establish pattern service fabric reliablecollection,reliable collection ireliabledictionary approach implement common query update secondary dictionary structure key order specific enumeration large data set avoid shuttle large amount datum achieve implement sort continuation token caller supply request datum currently implement generate order enumeration return item max size continuation essentially key list item time caller pass continuation token generate order enumerable filter function key great continuation problem collection change caller request subsequent request avoid update collection occur time attempt datum filter function assume developer filter getenumerableasync method supply key dictionary return enumerable large datum set slow prescribe approach datum feel bark wrong tree reliable collection case,4,555,0,2.0,2,2016-12-07T02:36:18,0.0
51783877,10114335.0,<spring><microservices><netflix-eureka><netflix-ribbon>,ribbon retrieve list instance service,ribbon load balancer api gateway eureka server client request api gateway query service registry time instance service ribbon store instance cache,4,941,0,0.0,2,2018-08-10T09:56:30,0.0
58861168,1201298.0,<microservices><clean-architecture>,clean architecture microservice,finish read uncle bob clean architecture wonder apply context microservice hand microservice fall framework driver layer implementation top case serve case focus core app entity case stay flexible implementation outer layer include microservice microservice maintain developer team developer bad time case change harder predict impact hand split app multiple microservice decouple apply clean architecture inside microservice pro approach focus microservice thing well problem start design technical separation microservice violate main clean architecture principle focus business hard duplicate code microservice entity case scenario good feedback fellow developer long term benefit scenario potential trouble,4,74,0,1.0,2,2019-11-14T16:10:55,0.0
52544413,10335281.0,<microservices><distributed-computing><event-sourcing><distributed-system><event-store>,microservice event store technology event source solution share microservice,current experience allow understand core concept microservice rely database independent microservice dive handle distribute transaction microservice system good strategy event source pattern core event store event store share microservice multiple independent event store database microservice single common event broker option solution cqrs assume microservice database intend query side shared event store command side wrong assumption topic retrie case concurrent write stream optimistic lock big big advance piece advice,4,207,0,1.0,2,2018-09-27T20:08:15,0.0
53807274,2522221.0,<c#><redis><microservices><nservicebus>,microservice architecture cqrs,start personal project learn good implement microservice onverengineere learning process irrelevant net core design solution follow cqrs pattern easily separate query command moment point manual api gateway proxy microservice nservicebus communicate microservice question redi cache query example cache user detail cache source truth update datastore time understanding good practice microservice deal datastore create endpoint deal cache datum sense good handle add update command update cache fire event update main data store update data store fire event update cache feeling update main datastore cache plan expose endpoint update cache readonly purpose lead potential inconsistency microservice data eventually consistent simple operation update user directly personal datum update submit change people advocate event source moment auditing replay event feeling message bus sagas performant event store correct,4,266,1,1.0,2,2018-12-16T23:08:09,0.0
57848864,9924863.0,<jpa><microservices><micronaut><google-cloud-spanner><micronaut-data>,error connect jpa micronaut data hibernate jpa library,jpa micronaut library application hit endpoint datum error error find attach file help build gradle repository service controller stacktrace,4,432,0,1.0,2,2019-09-09T06:32:31,0.0
35361819,1976429.0,<azure><scale><microservices><azure-service-fabric>,scale microservice service fabric instance queue length increass,scale microservice queue length increase inbuild azure service fabric,4,1775,0,0.0,2,2016-02-12T11:45:43,0.0
55112973,250329.0,<apache-kafka><microservices><database-replication><event-driven><eventual-consistency>,microservice data replication pattern,microservice architecture communicate microservice service service option remote call synchronous http service query api host service second option adopt event drive architecture state service publish consume service asynchronous model service update database service event query locally database approach advantage well decoupling microservice development operation disadvantage relate datum replication high consumption disk space datum reside database microservice second bad opinion datum stale service process subscription fast service time create service eventually consistency model kafka event hub topic configure day datum retention service keep sync service publish state week service deploy database enrich service hold partial kafka topic event question pattern achieve microservice database enrichment service republish current state event hub,4,456,0,2.0,2,2019-03-12T01:56:24,0.0
45002471,182671.0,<docker><microservices>,docker container safe third party untrusted container side side production system,plan allow execution third party micro services code infrastructure interact api dockerize safe solution track resource network ram cpu container consume,4,247,0,1.0,2,2017-07-10T01:02:04,0.0
44988481,3492805.0,<spring><oauth-2.0><microservices><spring-cloud>,spring cloud allow access endpoint specific microservice,simple microservice architecture edge service service registry auth service jwt oauth user service frontend core service user log credential pass edge service auth service auth service fetch user datum user service feignclient username password match generate token fancy problem approach endpoint user service auth service fetch user datum user user data password role solution create jwt token auth service role user service side check jwt role reject request solution edit design common specific place auth servie authorization server service resource server api gateway pattern auth service behin proxy client application jwt add request base authentication authorization perform resource server public key verify signature valid service jwt generate trust auth service service base jwt create oauth authenication object user edit merge auth service user service suggestion couple user unnecessary seperate auth service jwt generation accept abhijit sarkar answer valid point additional call auth service verify validity token,4,579,4,1.0,2,2017-07-08T16:42:24,0.0
27865814,2236664.0,<php><magento><soa><single-page-application><microservices>,concept follow microservice architecture,read martin fowler find interesting plan structure commerce web application proof concept wonder concept consider microservice architecture architecture consist component javascript base single application send ajax request server rest api feed json datum receive call service call behaviour api gateway services catalogprovider customersprovider checkoutprovider service api endpoint magento php shopsystem future plan swap provider system question ms consider independently deployable understand java talk jar war file php service independently deployable concept follow principle ms architecture provider big magento system read happy suggestion,5,5347,0,3.0,2,2015-01-09T17:18:25,0.0
29636094,2968101.0,<java><node.js><apache-zookeeper><microservices>,microservice communication,study microservice face problem context develop microservice user management spring base mysql database plan management asp net base sql server database access point service api list restful endpoint billing management node js base mongodb problem permit access planning user service couple service planning service access access bill bill service correspond user mysql database microservice couple point kill couple reference billing bill api expose precisely microservice communicate couple create authentication duplicate authentication request authentication service service,5,2591,1,3.0,2,2015-04-14T19:45:33,0.0
34503547,4344538.0,<java><spring><rest><spring-mvc><microservices>,spring mvc call rest service inside rest service,currently weird issue call rest service inside hand work wrong bit context webapp call rest service create user account sake explanation endpoint localhost register earlier user journey call service create user login credential check thing call register inside call call endpoint long story short webapp call localhost register turn call call availability endpoint directly rest client webapp work expect strange reason call inside call register endpoint http insight wrong register controller availability controller full disclosure practice content createuser call call stack class call service webapp work perfectly well context return true isusernameavailable silly simple version code replicate issue current assumption kick stare code long edit vikdor comment solve problem change createuser method,5,28435,3,4.0,2,2015-12-29T02:22:05,0.0
46742274,697630.0,<events><microservices><event-driven><orchestration><event-driven-design>,mediator event drive topology,read article call demonstrate mediator broker topology accord article mediator topology study diagram understand mediator determine processor finish process event orchestrate step process article clear article clear communication asynchronous event message travel message queue diagram event event processor mediator article mediator wait event processor finish clear suppose happen architectural term asynchronous queue base rpc listener wait asynchronous response thought implement architectural standpoint,5,941,0,2.0,2,2017-10-14T08:00:14,0.0
40377076,4391429.0,<spring><spring-boot><microservices><netflix-eureka>,access microservice eureka server,access microservice somete eureka server microservice url call microservice posible open eureka server service register eureka application property service application property achieve,5,3308,1,2.0,2,2016-11-02T10:01:34,0.0
44183595,1312383.0,<java><spring-boot><kubernetes><spring-cloud><microservices>,java kubernetes find service label,develop sample application spring cloud minikube consist spring boot application application server endpoint functionality third client integrate application single expose api manage deploy three application minikube manage develop full stack communicate step discovery server automatically hard code service deploy server minikube label find client find service relate server app automatically allow expand application easily add server stack client find expose change netflix eureka easily achieve add extra eureka server list microservice kubernetes library functionality kubernetes,5,1096,0,3.0,2,2017-05-25T14:54:26,0.0
39044130,3644938.0,<java><microservices>,java ee microprofile,pretty vague topic explain plain english read article regard trend topic java ee microprofile clearly understand purpose understanding emerge concept java community find reshape java ee model microservice friendly framework platform create distributed microservice application minute spring boot api library microprofile,5,1988,0,0.0,2,2016-08-19T16:47:42,0.0
46453981,6382602.0,<architecture><authorization><microservices><soa>,authorization service implement ownership check role base microservice architecture,three type user blogge app author modify post administrator modify post reader modify post manage system three main service api gateway expose apis client consume compose service post management service provide crud operation blog post include datum post authorization service store role permission expose api array role role request user array permission permission access api determine inputte role cover permission inputte struggle ownership resource ownership check communicate service authorization service determine user access determine user resource solution problem happy api gateway query service manage post determine request user post access authorization logic happen authorization service service manage blog post handle authorization base ownership authorization logic happen authorization service well fact unauthorized request mark authorize initially pass authorization service authorization service knowledge check ownership api check ownership permission add complexity authorization service increase cross service communication relegate api gateway primary service composer idea alternative method insight good solution problem,5,356,0,2.0,2,2017-09-27T17:34:28,0.0
53545963,7307035.0,<architecture><microservices><api-gateway>,internal communication microservice api gateway,microservice architecture common pattern call api gateway communication api gateway single entry point internal communication microservice microservice api gateway lot easy handle establish point point connection speak api gateway internal communication,5,363,0,0.0,2,2018-11-29T19:09:06,0.0
36642718,4605202.0,<architecture><microservices>,microservice read write database table,bit confused microservice good practice approach follow scenario idea create microservice store message database table second microservice rest api read message scale issue incoming store power read rest api read perfect microservice access datum database microservice data api database level approach perfect option handle mircroservice store read api store microservice rest microservice fetch datum good opinion regard markus,5,2834,0,1.0,2,2016-04-15T09:01:05,0.0
47311911,1202726.0,<domain-driven-design><microservices><cqrs><event-sourcing>,event sourcing cqrs read model projection,microservice base application aw lambda microservice crucial event source cqrs background organize thought store event dynamodb projection aws write work charm command invocation load current state aggregate dynamodb event handler load cached aggregate decide accept reject command base business logic write dynamodb version count event process aggregate conflict write fail good system event broadcast sns topic service service react event struggle read projection store tag commitid process event source read query load entire project state aggregate query event source event compute late state aggregate write update object return relevant state base query param problem projection wrong projection group attribute file stay small retrieve individual aggregate projection crazy load entire state time project aggregate apply event retrieve record change perform fine record imagine continue long problem query build projection mapping match aggregateid attribute query well matter problem projection entire current state event return single record change,5,928,0,1.0,2,2017-11-15T15:57:11,0.0
49925171,1839104.0,<spring-integration><microservices><spring-cloud-dataflow>,spring integration spring cloud datum flow,process move application microservice example service rss crawler spring integration send item kafka spring cloud datum flow spring integration spring batch hood spring cloud datum flow microservice orchestration microservice understand benefit introduce spring cloud datum flow oppose keep microservice light spring integration advice appreciate,5,2491,0,0.0,2,2018-04-19T15:45:30,0.0
49836268,6093604.0,<microservices><grpc>,deal authentication micro service architecture,currently read lot microservice understand follow draw microservice access rest http grpc intra background communication exchange login send http request authentication service access stuff service connect user display stuff database stuff service stuff check token connect user exchange authentication service return stuff login require request thing understand service client connect exchange authentication create huge internet traffic order check user request authentication service service database database slow traffic understand micro service separate server hope clear hesitate detail advance max edit base notionquest answer base peter comment service implement middleware jwt mention api gateway pass feel nice service token check internal exchange stuff easy check time token user stuff choose wanna buy buying service call stuff service order verify price item check user token stuff authenticated access buy service stuff service check token add extra check internal guarantee access service worth implement middleware service rest access api gateway destroy idea rest access,5,1295,4,3.0,2,2018-04-14T21:14:47,0.0
49612911,1261913.0,<node.js><express><microservices>,understand microservice express js docker,node js docker well microservice architecture understand microservice architecture theoretically understand microservice arch follow implementation js file file service file service qualifie micro service architecture service access api gateway js read basic tutorial docker three module separate container qualify microservice convert sample microservice,5,2791,0,1.0,2,2018-04-02T14:13:05,0.0
39672919,1834774.0,<node.js><architecture><sails.js><microservices>,design sails js project microservice architecture,learn microservice microservice architecture sails js project break sail js application multiple small sail js project repository controller model project example consider simple ecommerce app entity user product order separate sail js repository respective sail js model controller single repository microservice repository config microservice communicate http node module write route node js responsible invoke method web service repository depend request client good alternative design project microservice architecture good implement inter service communication api gateway sail js microservice design mention approach big split sails js model change,5,1891,0,4.0,2,2016-09-24T05:35:16,0.0
39763013,1866300.0,<azure><microservices><azure-service-fabric>,log file azure service fabric,azure service fabric development cluster locally application week holiday hard drive completely full consequently work sfdevcluster log trace folder etl file large mb kind log file mb question disable tracing logging azure service fabric tool administer log file,5,1007,0,0.0,2,2016-09-29T06:33:42,0.0
54238746,5530652.0,<rest><swagger><microservices><swagger-2.0>,internal error swagger api documentation,check swagger file amazon google error code generally error code xx family swagger file reason microservice api return fail communicate service instance wonder error code swagger file,5,127,0,0.0,2,2019-01-17T15:06:40,0.0
35264620,3572717.0,<spring><rest><microservices><netflix-eureka><netflix-feign>,feign client eureka post request body,feign eureka forward post request server server server discrovere sucessfully eureka work change second argument requestbody order read post request content exception,5,9203,0,0.0,2,2016-02-08T07:46:48,0.0
52409579,1162233.0,<json><rest><protocol-buffers><microservices>,protocol buffer json choose,explain protocol buffer json micro services architecture vice versa synchronous asynchronous communication,5,2364,2,4.0,2,2018-09-19T15:39:15,0.0
50264214,5829526.0,<web><microservices><perl6><cro><zef>,edit source code module instal zef,example instal module simple code parse medium type valid add test output source code locate file add token save code error change work perl edit module perl dont,5,154,0,0.0,2,2018-05-10T01:28:25,0.0
51416552,4516110.0,<java><rest><docker><spring-boot><microservices>,call microservice microservice docker image,microservice port port communicate java project springboot project communicate build image command image note expose port docker define communicate exception call microservice machine ip communicate write ip address good approach call microservice docker,5,3984,8,3.0,2,2018-07-19T07:16:12,0.0
30237292,15441.0,<ejb><components><microservices>,microservice architectural pattern ejb,microservice isolated component communicate protocol wire parent consumer component pattern ejb question microservice architectural pattern ejb,6,2634,0,0.0,2,2015-05-14T12:22:28,0.0
36519652,5369087.0,<database-design><architecture><microservices>,share datum microservice,work microservice architecture solve small datum sharing problem word example user service db store email username password service database work user datum generate document user good second service access user datum replicate user datum require job database,6,3223,0,2.0,2,2016-04-09T16:32:32,0.0
31047564,5048354.0,<java><spring-integration><esb><microservices>,visualization cross app spring integration flow,microservice architecture main component system design separate java app jar war spring integration facilitate communication component mq service graphical diagram integration layer system component spring integration xml config note single application question cross app example component generate stream pojos mq component serialize pojo object graph json mq component save json db viable solution create single spring integration config sure component,6,1013,2,2.0,2,2015-06-25T10:19:06,0.0
34794630,3305976.0,<c#><microservices>,micro service security,day play micro service pattern well security baffle question handle user authentication individual service moment pass request turn connect service question edit bear mind individual service aggregator current architecture code simulate request frontend client app generic determine fire hit gateway category fire category service call gateway physical file class type code hope demonstration good approach handle security user authentication current architecture case scenario user hit web app log point user encrypt email password send pass decide user authenticate well good fetch message user receive gateway user authenticate fetch message solve issue call add authentication individual service require respective service talk defeat purpose pattern allow gateway call service request service gateway block security broad topic current context hope direct good course action resolve issue currently hardcode application turn fetch datum app equal,6,1724,7,2.0,2,2016-01-14T16:25:39,0.0
42140285,1729795.0,<apache-kafka><spring-cloud><microservices><spring-cloud-stream><spring-kafka>,implement microservice event drive architecture spring cloud stream kafka database service,implement event drive architecture handle distribute transaction service database kafka send message inform microservice operation example order receive order request store order db publish message payment service realize charge item private orderbusiness orderbusiness doubt step save order db publish message perform transaction atomically achieve relate previous send message ordersource output send messagebuilder withpayload order build operation asynchronous return true matter kafka broker message reach kafka broker,6,2838,0,5.0,2,2017-02-09T15:12:27,0.0
39920488,401025.0,<microservices><falcor>,role falcor microservice architecture,follow taxi hailing application compose loosely couple microservice example service rest api service combine single api gateway client talk single service gateway gateway request service combine single response client talk monolithic application understand incorporate falcor application model taxi hailing application microservice represent single domain model benefit thrive wrap microservice falcor convenient incorporate falcor api gateway abstract domain model create microservice single model opinion,6,1781,0,4.0,2,2016-10-07T15:09:11,0.0
43396744,2600522.0,<java><reactjs><microservices><serverside-rendering>,microservice ui frontend java reactjs server side rendering,current design client connect java web api gateway browser web api gateway call java microservice json datum return ui component request client client side rendering reactjs ui component recur request gateway server side full html view render prior send client unclear good ui component communicate web api gateway parent microservice data consideration ui component talk web api gateway reasonable couple microservice gateway meaning expose api microservice gateway update ui component talk directly microservice datum remove update web api gateway keep coupled expose microservice external call client browser design decision ui component api gateways create ui monolith oppose microservice responsible ui component monolithic approach simplify solution avoid complexity aggregate microservice ui component client request view tool java nashorn dropwizard reactjs gradle webpack nodejs npm aggregate multiple microservice ui component web api gateway java reactj serve pre render html datum javascript application client helpful reference server side render java nashhorn,6,4715,9,4.0,2,2017-04-13T15:52:36,0.0
40807355,120981.0,<rabbitmq><message-queue><microservices>,schedule message rabbitmq,solution schedule message rabbitmq delay message describe source schedule message day rabbitmq solution microservice environment message bus combine concept task scheduler message bus well job scheduler push message message queue rundeck combination rabbitmq,6,6576,3,1.0,2,2016-11-25T14:39:26,0.0
44610425,4043593.0,<rest><api><http><microservices><restful-architecture>,good practice propagate error micro service,micro service architecture discussion expose internal error client example suppose service service client send request service public service send request service send request service internal authentication credential store internally environment variable send client reason communication receive client relate error request authorize communication internal user service expose internal structure send client client fault send,6,910,3,0.0,2,2017-06-17T23:41:37,0.0
38863827,1822403.0,<rest><microservices>,handle rest api path relate resource belong microservice,microservice userservice define path user users messageservice define path message message message messageservice attribute user reference user userservice list message user follow approach path user message good approach follow good rest api practice define path inside messageservice tight couple userservice path start user belong userservice message user exist message path add filter attribute user sure good practice api gateway front microservice create proxy user message message user allow client rest friendly path keep microservice loosely couple approach appropriate,6,543,0,1.0,2,2016-08-10T03:39:49,0.0
43179951,632375.0,<database><reporting><soa><microservices><database-replication>,business datum query reporting service orient architecture,well year company slice monolith build product principle micro service architecture fine great flexibility keep ui backend logic separate lower amount dependency business grow headache result report sure data replication business logic share service service datum service keep reference datum entity link essentially great great report business create ad hoc report specific instance happen customer day simple sql query join couple database table query decoupled service problem business personally fan datum replication report purpose tendency grow nightmare legacy monolith problem legacy monolith versus modern microservice data dependency general face issue solve edit discuss house potential solution solve good answer solve issue large scale good replicate bi people figure day monolith time bi data warehouse team duplicate database practice inconvenient day microservice database good reason shared sandbox cancer expect build separate microservice set microservice fetch specific report connect set microservice carry relevant datum build report expect introduce tight couple incredibly complicated slow large dataset build separate microservice set microservice database replicate database background problematic team database couple datum directly replicate strong dependency technology database service send event rabbitmq bi service pick fetch additional datum sound good complex implement service start publish relevant datum personally choose time abstract level,6,427,7,2.0,2,2017-04-03T08:33:41,0.0
49944806,2224344.0,<spring-boot><microservices><spring-cloud-netflix><pcf>,configure api gateway service discovery micro service pcf,learn building microservice spring boot spring cloud netflix oss component netflix eureka service discovery zuul api gateway ribbon feign local machine netflix eureka zuul ribbon feign spring cloud config deploy pcf alternative pcf configure build microservice follow ci cd approach developer verify work micro service push code eureka zuul ribbon feign production pcf simulate pcf environment developer machine,6,592,0,2.0,2,2018-04-20T15:13:55,0.0
46807757,1047711.0,<amazon-web-services><microservices>,service discovery aws ecs application load balancer,microservice architecture base spring boot involve amazon elastic container service ecs application load balancer alb service discovery perform automatically platform special mechanism eureka consul documentation ecs alb clear feature provide,6,3186,0,3.0,2,2017-10-18T10:11:46,0.0
39615381,1087135.0,<azure><microservices><azure-service-fabric><azure-cloud-services><azure-appfabric>,advantage service fabric microservice collection azure cloud service web app,application break multiple communicating service current implementation monolithic reorganize individual component deploy iterate scale independently azure service fabric service compose set communicate micro services stateless web api collection individual azure web app cloud service call http point obvious advantage rule thumb choose helpful,6,6464,0,2.0,2,2016-09-21T11:31:17,0.0
55250716,2969272.0,<protocol-buffers><microservices><grpc>,organization protobuf file microservice architecture,company system organize microservice dedicated git repository service introduce grpc wonder share protobuf file build libs language base example collect decide single repository protobuf inside common easy maintain example side counter example company exact opposite meaning host protobuf distribute,6,397,0,0.0,2,2019-03-19T22:10:58,0.0
52349494,10270106.0,<spring-boot><kubernetes><microservices>,kubernetes spring boot microservice,develop microservice application spring boot postgre docker rest api container postgre container work fine kubernete api error spring boot base api define follow postgre file kubernete postgre mainfest api manifest deploy yaml manifest kubernetes error wrong add describe pod log big find problem hibernate create table add application property pc withou docker spring datasource url jdbc postgresql locahost port db docker spring datasource url jdbc postgresql docker db container port db api rest database kubernetes add apologize absence personal problem secondly help modify kubernetes file postgre api error continue read quietly realize kubernetes create zeus db create schema create docker image dockerfile add follow file pass kubernetes manually enter add work automatically add,6,513,7,0.0,2,2018-09-15T22:46:44,0.0
42651456,3868848.0,<spring-cloud><microservices><netflix-zuul><spring-cloud-netflix><spring-cloud-feign>,spring cloud zuul retry instance forward instance,camden sr spring cloud dependency spring boot release current setup eureka server config server random port zuul gateway server instance service random port instance register eureka service load balancing properly zuul issue instance kill zuul fulfil request service wait till eureka registry fetch shut instance request fulfil instance follow zuul configuration enablezuulproxy enableeurekaclient instance service unique instance help zuul instance configuration request automatically forward instance instance,6,3984,0,1.0,2,2017-03-07T14:56:39,0.0
46244677,1712880.0,<rest><authentication><architecture><cloud><microservices>,verify access token jwt service microservice architecture,application implement microservice architecture authentication service jwt standard service application example receive request validate token user authorize validation achieve send token validate token send result kind overhead validate token inside duplicate action inside service require secret key public private key inside service sign verification approach work exactly question well good practice situation,6,1150,1,0.0,2,2017-09-15T17:16:46,0.0
29303048,317384.0,<rest><hateoas><microservices><hypermedia>,hateoas microservice,serious trouble hateoas microservice exist example shopping cart resource snapshot product product product price snapshot current price item add cart actual case relevant idea problem hand hateoas earlier link shopping cart resource link product template url link specific product client ignorant resource url microservice service knowledge service afaik work interpretation microservice link pretty link find question ther place solution macro service weave clean solve thing edit find nice info topic nice tool augument resource link logic decide link resource belong service expose resource central service registry,7,2931,6,1.0,2,2015-03-27T14:26:23,0.0
27790905,3477712.0,<spring-data-rest><hateoas><spring-cloud><microservices>,establish relationship spring data rest spring hateoas base micro services,figure pattern handle relationship hypermedia base microservice base spring datum rest hateoas service instructor service course exist stand app preferred method establish relationship service manner require column foreign service service service communicate manor solution sure correct path service second table onetomany primary entity service table follow field entityid rel relatedid opposite service spring datum rest setup find query join table find record match primary goal accomplish service relationship number service knowledge service,7,3100,2,3.0,2,2015-01-06T01:50:17,0.0
29636899,4101793.0,<domain-driven-design><microservices>,microservice break bound context,bit confused work young banking company decide implement ddd architecture break complexity question follow design suggestion team domain expose domain web service domain manipulate type business entity rely table front domain microservice garantee datum persist table consistent centralized manner microservice persist datum conform specific rule microservice crud proxy table microservice provide specific dto domain obfuscate table approach sound good consider microservice ddd architecture manage crud datum consistency domain crude validate datum microservice break bound context good practice deal microservice ddd architecture contribution edit follow article help refine thought microservice complex situation monolithic system fail maintainable good candidate upfront design implementation hand ddd tackle complexity project successful ddd meet microservice implementation,7,3676,3,3.0,2,2015-04-14T20:33:12,0.0
44886715,2487224.0,<spring><authentication><oauth-2.0><microservices>,auth server combine user service microservice architecture,currently build microservice base application spring boot follow service auth server distribute access token user service user info username password email unrelated service user send credential auth server auth server verify correct return access token question combine auth server user service credential simple database call keep separate application point shared database well alternative,7,1298,0,0.0,2,2017-07-03T13:23:23,0.0
46668418,3356278.0,<spring-boot><java-8><microservices>,microservice return response process request,work solution create microservice return response process request java spring,7,3494,5,3.0,2,2017-10-10T13:46:12,0.0
36957369,5136650.0,<c#><azure><microservices><azure-service-fabric>,fabric message large,pass mb datum service actor error increase maximum size transfer micro service option set help,7,1798,0,0.0,2,2016-04-30T16:28:29,0.0
41837637,7418474.0,<asp.net-web-api><architecture><microservices><multi-layer>,microservice multi layered architecture,project backend service web api frontend spa application backend service presentation application service domain infrastructure layer locate net assembly domain layer business domain object infrastructure – communication external datum stuff application service – set service presentation layer presentation – web api controller common layered architecture architect move backend microservice architecture brake layer divide domain application service infrastructure layer service convert presentation layer backend frontend layer describe feature mobile application sql server database leave don experience microservice architecture question multi layered architecture fashion benefit problem bring architecture design application,7,5109,0,3.0,2,2017-01-24T19:45:25,0.0
40205675,1459144.0,<security><oauth><oauth-2.0><microservices><openid-connect>,microservice authentication good practice security oauth openidconnect,build authentication micro service popular jwt token oauth protocol openid connect identity layer explain achieve clear reason suspect security benefit client possibility read specific info jwt token info role permission purpose token encrypt reason jwt token big order carry token time approach jwt token store cookie size limit info jwt token authentication compromised bad practice keep client browser hand pe identity pass reference approach help understand reasoning,7,2281,2,3.0,2,2016-10-23T17:19:04,0.0
49612709,376960.0,<jwt><microservices>,microservice manage user permission user role,design issue sure solve main application consist modules client gateway auth service forum gallery message client suppose communicate gateway service gateway user authentication ideally result jwt productive services forum gallery message verify token retrieve permission role manage user illustrate trouble create sequence diagram original draw io graphic prefer party auth service auth service pretty register user login manage permission role service well wrap brain issue month simply find suitable structure user register login logout communicate productive service currently java backend stuff good thing microservice programming language help read apply case,7,2351,3,0.0,2,2018-04-02T13:58:40,0.0
57222357,161457.0,<apache-kafka><microservices><kafka-rest>,ensure message read kafka topic rest proxy,kafka team investigate pattern inter service communication goal service producer consumer source truth set datum start load current datum cache subscribe change notification word synchronize datum service total amount datum low change infrequent delay synchronization acceptable eventual consistency decouple service proposal start publish datum kafka topic log compaction enable message key start read message topic populate cache keep read offset notify update update datum publish message aggregate change message schema original message receive message update correspond datum cache constraint communicate kafka issue start read message topic safely start process acceptable notice message send second ago acceptable start processing consume message send hour ago note update datum occur wait rest proxy poll interval consume message,7,190,7,0.0,2,2019-07-26T14:43:18,0.0
52319370,9990802.0,<docker><rabbitmq><microservices>,docker network good practice,microservice keycloak rabbitmq server deploy docker microservice speak keycloak speak rabbitmq keep clean create docker compose file keycloak rabbitmq microservice microservice database ms call keycloak ms talk rabbitmq good connect microservice keycloak rabbitmq server microservice talk well,7,389,2,2.0,2,2018-09-13T18:00:01,0.0
52274308,6635217.0,<javascript><node.js><express><cors><microservices>,node js allow server side call api,rack brain simple solution api endpoint node js application allow public remain jwt base authentication route jwt allow server side call browser curl postman call identify request object originate server reject cross origin call api server side fall cor filter,7,613,4,1.0,2,2018-09-11T10:54:56,0.0
50401105,2250200.0,<ssl><microservices><pki>,implement tls microservice,comment vet critique blast hole microservice security design considering three microservice talk rest endpoint microservice keystore keystore microservice private public keypair sign trust certificate authority keystore microservice public key certificate export source microservice sign trust keypair implementation work doesn smell time introduce microservice add exist microservice public key certificate keystore microservice public key certificate microservice assumption microservice communicate bi directionally securely exist microservice repeat pattern second keypair sign verify authentication token supply rest call wonder advisable safe share single trust public key certificate microservice completely polite expert area edit occur read reply comment original post omit detail problem clear commenter better address microservice question exist private intranet accessible client browser microservice intranet fact trust — company intranet — sign microservice keypair resolution problem imply andrea comment write long issue trust trust long microservice deploy keypair sign signing encryption certificate deploy microservice reasonable assurance communicate securely microservice reasonable potential vulnerability aware head create brand certificate microservice keypair include microservice keystore repeat microservice certificate sign keypair microservice keystore,7,3600,5,2.0,2,2018-05-17T22:01:19,0.0
26491425,141257.0,<java><paas><12factor><microservices>,factor app,factor article port bind requirement app runtime inject tomcat reason advise advantage app microservice,8,1351,0,0.0,2,2014-10-21T16:16:05,0.0
31097306,5057662.0,<spring-boot><microservices>,spring boot tomcat microservice solution,plan expose microservice stage spring boot create executable fat jar embedede tomcat executable jar wrap docker container deploy aw case jar tomcat instance time concerned overhead tomcat instance production server valid concern wonder configuration production share experience suggestion appreciate jp,8,6787,4,3.0,2,2015-06-28T07:44:28,0.0
34593341,4189441.0,<c#><azure><asp.net-web-api2><microservices><azure-service-fabric>,trade good practice build microservice azure service fabric,build microservice application base azure service fabric stateful service actor access state web api general trade good practice service fabric project regard multiple service single application service application multiple application project service application multiple actor single service actor service stateless web api service project multiple stateless web service stateful service application decision base specific project general advantage disadvantage three point,8,2455,2,3.0,2,2016-01-04T14:26:47,0.0
38328727,3007565.0,<architecture><microservices>,good design background job microservice architecture,microservice architecture requirement restful service require background job develop example grocery delivery system customer service restful service provider service restful service orderprovision background service check customer item provide provider send initiation customer status initiate delivery system start deliver case orderprovision good implement microservice case net framework create windows service scheduler task background check deploy server linux work good code background task microservice architecture,8,2779,1,1.0,2,2016-07-12T12:19:34,0.0
43313424,68612.0,<java><docker><spring-boot><microservices><consul>,consul spring boot service docker deregistere,java microservice write spring boot consul service discovery config management docker container work container die service restart service consul service forever fail consul ui container register green heartbeat find documentation difference heartbeat healthcheck consul bootstrp yml setting enable heartbeat doc stress consul cluster manage consul spring boot docker service de register automatically real problem consul ui pretty useless monitor service,8,900,1,2.0,2,2017-04-10T00:36:46,0.0
47938835,260511.0,<java><architecture><transactions><microservices><event-driven-design>,create replay mechanism event drive microservice,microservice communicate eventbus real time transaction sequence service service service transaction consider complete sure transaction happen ofcourse failure point mechanisem replay half baked transaction completion tricky service supervisor service log real time sequence smart transaction complete timedout understand continune left point disadvantage lot smart logic central service retry mechanisem service care replay success exhusate disadvantage lot retry duplicate code service expert,8,598,3,1.0,2,2017-12-22T09:17:08,0.0
45622414,3837778.0,<soa><microservices>,authentication authorization microservice,good question question authentication microservice idea answer read tutorial soa microservice add authentication service idea authentication authorization microservice case require case require potential risk authentication authorization comment well practical example,8,2292,1,1.0,2,2017-08-10T19:51:25,0.0
41903352,1432163.0,<microservices><netflix><amazon-swf><axon><netflix-conductor>,register microservice method task netflix conductor,sophisticated workflow saga axonframework currently find netflix conductor sadly search internet decent example avail question netflix conductor define create task workflowtask importantly link microservice netflix conductor code github pardon confusion netflix conductor,8,2347,1,0.0,2,2017-01-27T21:33:02,0.0
48961000,5705247.0,<interface><architecture><shared-libraries><microservices><distributed-computing>,share library microservice bad,sam newman states book building microservice understand share code service evil author service boundary design share library emerge duplicate code case common business logic dependency solve share library entity common service common domain object service smell service gui tweak state entity interface service poll state purpose domain function share knowledge change rebuild deploy service common code external dependency duplicate service generally concern case service depend article business logic case harm duplication code reduce cohesion system course diverge shared knowledge headache case share library solve inheritance composition clever abstraction sam code duplication well coupling share library,8,4193,0,1.0,2,2018-02-24T08:43:10,0.0
59035536,987517.0,<docker><microservices><docker-container><aws-fargate>,microservice docker implementation,write micro service docker container amazon fargate doubt implementation level spring boot multiple micro service project good practice write micro service single container create separate docker container separate micro service cost effective single container problem project structure future plan deploy application aws fargate application large option extend future expect micro service case cost effective upload microservice container,8,524,3,0.0,2,2019-11-25T15:51:29,0.0
51227737,3973406.0,<oauth-2.0><jwt><microservices><openid-connect>,implement openid connect authentication party idps microservice architecture,day read watch content find understand oauth openid connect find people disagree implementation confuse understanding article example find assume access google calendar profile info email login google access api google facebook log link user database illustrate case example note diagram authentication service build api gateway matter example good architecture api microservice access google facebook external api understand illustrate diagram misunderstand basic requirement architecture user login google facebook login micro service openid user link account database user access define db base group role permission intend external api user authenticate log access user calendar email authentication proof successful login user access define database fundamental question mind openid connect tool job authentication authorization read write access google facebook api authenticate people generally agree access token access api understand token client user agent access token access google calendar emails external api openid provider access api event access token token correct protect api token client currently log user db query user db store redux react frontend app dilemma store user detail group role permission inside jwt api authorization store user identifier token allow authenticate user valid token call endpoint authorization determine access base db query result permission database store datum user inside jwt case authorization access group role permission check hit api user info group role permission store inside jwt issue login case cms content access permission node level well performance diagram send api request gateway authentication service translate opaque access token jwt identifier identify user graph database verify user require group role permission external api database diagram lot work request service share jwt case multiple service cross call advantage user permission db naturally moment user access level change deny grant access sync store user detail group role permission inside jwt persist client localstorage guess pose security issue pretty hard update user info group role permission inside jwt big advantage store user access level info inside jwt course case block user call api determine access db lookup token translation thing increase security cost performance generally recommend worth safe store user info group role permission inside jwt store db token access token token token send api determine user grant access resource base permission db access token interact provider api store append group role permission inside token clean issue openid connect call api authorize api endpoint token access api create jwt store info fetch database decide user access resource api endpoint link general spec general info read fail understand apply info actual case diagram concrete attempt simply flow,8,1931,4,6.0,2,2018-07-07T23:37:39,0.0
47918407,2475951.0,<design-patterns><architecture><rabbitmq><message-queue><microservices>,microservice architecture carry message service order matter,tl dr push message bunch asynchronous unordered microservice message struggle find messaging system protocol specific microservice architecture good question question option design pattern protocol message queue rabbitmq message serialize json message arbitrary number microservice microservice long independent implement variety language order service message matter fact synchronous service append datum original message data ignore service merge conflict service write unique key service change destroy datum service turn message publish second rabbitmq queue original datum datum microservice side monolithic application language functional programming perfect question appropriate manage message service time order case system service whack final message write queue batch service semi elegant solution service encounter message write message common storage mongodb service thing mark complete message check service turn service publish message require service aware service require service leave mark desire open shepherd service kind appreciate option concede better fundamental design,8,1377,0,5.0,2,2017-12-21T05:21:21,0.0
29704842,4801939.0,<junit><spring-boot><microservices>,integration testing spring boot base microservice,read guide work spring boot restful service unit test notably build application spring boot example unit test spring boot application consume depend spring boot application common cloud micro services architecture example follow spring boot service servicemediator adapter adapter servicemediator call adapter adapter depend input start spring boot service adapter adapter start test servicemediator spring junit test,9,3395,4,1.0,2,2015-04-17T16:35:27,0.0
31546631,1685095.0,<api><docker><microservices><gateway><tyk>,option api gateway docker,create restful microservice dockerize web base ui ability create user grant permission api kind api gateway thought bruteforce create django app serve ui proxy request api hand dull alternative ready tyk find ability add user grant permission create application serve api gateway automate proxying request write code model example basically mapping external url actual api url authorization logic,9,8698,0,6.0,2,2015-07-21T18:13:46,0.0
44579396,1762348.0,<architecture><rpc><publish-subscribe><microservices>,microservice pub rpc loosely couple architecture,current rpc call microservice tcp response whithout rpc call pub send service publish channel request user subscribe channel object user response service subscribe request user publish object user response receive object user response service check user function request rpc pub correct send datum microservice response term loosely couple architecture rpc call pub request response,9,3751,0,2.0,2,2017-06-16T01:24:56,0.0
45661006,4877440.0,<architecture><microservices><n-tier-architecture><n-layer>,difference monolith layer,question regard monolith layer architecture difference monolith layer architecture second single visual studio solution consist multiple project presentation layer service layer business layer cross layer data layer unit test consider monolith layer architecture microservice consist web api build service single separate visual studio solution implement previous project structure service layer business layer data layer bad english,9,4079,0,3.0,2,2017-08-13T13:44:07,0.0
41024771,1057667.0,<web-services><agile><microservices>,micro service nano service,call micro service nano service difference blog internet find satisfactory answer find quotation mark accurate explainable distinction micro nano service highly appreciate opinion,9,8608,2,5.0,2,2016-12-07T18:30:53,0.0
37897058,4944649.0,<java><spring><spring-data><spring-data-rest><microservices>,properly setup documentation restful service micro service architecture hal alps,read lot setup microservice properly hang concept include hal alps hal browser historically document thing leverage swagger ui understand url centric proper organize documentation resource link technology knowledge gap concept proper understanding technology work learn fit puzzle current understanding hal additional format top json navigate api link alps additional format top json provide english base description help describe resource hal browser swagger ui replacement resource link centric documentation work hal alp current understanding technology accurate lack area implementation wise fully understand alps hal interact aware hal json format alps json format hal alps json format area clear expose resource typically focus lean json message send hal json format expect host endpoint url documentation swagger hal browser,9,487,1,0.0,2,2016-06-18T12:39:04,0.0
52352815,5026265.0,<java><rest><design-patterns><microservices><clean-architecture>,clean architecture design pattern,question pattern database outter layer work reality example microservice mange entity case manage person manage person save retrieve person crud operation usecase talk database violation dependency rule valid case access database outter layer dependency iversion request microservice process dependency inversion violation case layer declare repository interface implement db package framework driver layer server recieve request personr create personrepository pass repository manageperson getperson function getperson personrepository interface implement violate rule manageperson getperson repository entity return person entity personrest return json objekt client english sadly native language hope guy understand pattern correct answer question ty advance,9,2038,1,7.0,2,2018-09-16T09:39:00,0.0
30116581,2205763.0,<meteor><meteor-accounts><microservices>,call frontend method external meteor application,dockerize service base application service write meteor service registration service user register platform microservice follow method issue frontend invoke backend method main frontend server invoke backend method registrationservice server relevant package reason hook extra stuff keep registration service separate frontend clarity correct imagine method server side method call client side method loginwithfacebook follow help greatly appreciate,10,680,0,0.0,2,2015-05-08T05:44:51,0.0
41655915,4980464.0,<database><events><microservices>,microservice atomic event,learn microservice data replication thing trouble architecture ensure event atomicity understand basic flow commit change database publish event detail change global message bus example power outage occur step naively build system change persist event detail publish ponder follow idea create well guarantee sure pro con embedded database sqlite microservice instance track full transaction commit main database event publish create event table main database database transaction insert event commit relevant change time service push event bus commit main database mark event publish create event table main database database transaction insert event commit relevant change time notify manually rest message service database hook dedicated eventpusher service event append eventpusher service query event table push event bus mark publish acknowledgement amount time pass notification eventpusher manual query pro con choice superior option consider,10,1363,3,8.0,2,2017-01-14T22:54:45,0.0
44065208,3662708.0,<database><foreign-keys><relational-database><rdbms><microservices>,datum integrity database microservice,relational database microservice database table database table table column question ensure data integrity database table point existent customer,10,1353,4,2.0,2,2017-05-19T08:37:06,0.0
46031939,7789294.0,<domain-driven-design><microservices><cqrs><event-sourcing><event-store>,manage read request event source application,exploration event source objective create tiny api layer satisfy traditional crud operation package call source play nodejs realize event sourcing couple cqrs understanding cqrs ui send write command server app validation datum save event store mongodb example event store audit eventual status confuse handle read operation read balance account exactly happen question query event store database directly read operation query cache memory query memory eventual status replay leave fold operation calculate result example balance account find blogger talk subscribe broadcast broadcast appreciate suggestion corret understanding wrong,10,277,2,2.0,2,2017-09-04T07:07:54,0.0
33165216,1019435.0,<c#><api><gateway><microservices>,micro service api gateway,project micro service api gateway gather detailed micro service api gateway clear question request route api gateway simple condition pseudo code keyword product route product service well net develop api info api gateway,11,9825,1,6.0,2,2015-10-16T07:51:50,0.0
40458770,770615.0,<spring-security><jwt><microservices><netflix-zuul><keycloak>,microservice microservice call authorization queue message,context create cloud platform support multiple application sso keycloak authentication netflix zuul authorization api gateway keycloak spring security adapter microservice expect authorization header valid jwt username process request microservice microservice call netflix zuul pass authorization header maintain stateless validation strategy allow microservice user invoke microservice indirectly problem question happen microservice invoke queue message idea storage queue relate message userinfo create dedicated microservice process kind message approach special microservice read userinfo queue process message problem question happen previous special microservice call normal microservice expect receive jwt header special microservice create jwt impersonate user call regular microservice solution storage original jwt queue happen queue call special microservice jwt valid expire microservice call reject request solution update joão angelo discussion appreciate help,11,1792,0,4.0,2,2016-11-07T06:05:22,0.0
37830008,74012.0,<publish-subscribe><microservices><event-driven>,handle multiple event dependency event drive architecture,good practice event drive architecture service subscribe event wait multiple event kind proceed create event chain example book order handle service wait book order handle warehouse create event order pick shipping service pick order start prepare shipping,11,669,0,5.0,2,2016-06-15T08:28:15,0.0
35289988,636472.0,<microservices>,authorization user microservice design,design microservice exist application standard user management authentication authorization store user datum developpe authorization server manage user authentication authorization authorization side store user profile question authorization server manage authorization user api microservice contact authorization server current user full list user authorization create user microservice authorization server expose api relate user user microservice expose solution bit simple authorization server generic reusable user application datum model database data model table requirement authorization server check user exist authorize user auto creation user invite administrator access requirement solution simple authorization server access user database second solution authorization server imply share database user service hum call user service authorization rest api example authorization server maintain minimal table rename administrator create user user service user account authorization server solution advice place good switch authorization server example public oauth google github facebook security compromise control user account creation feedback,11,1179,2,4.0,2,2016-02-09T10:46:09,0.0
45847796,7491660.0,<kubernetes><microservices><istio>,sidecar context microservice,currently istio kubernetes talk mention management service sidecars sure,12,3007,0,2.0,2,2017-08-23T19:19:33,0.0
50176793,5077196.0,<rabbitmq><integration-testing><microservices>,automate rabbitmq consumer testing,net micro service receive message rabbitmq client test follow consumer connect rabbitmq host consumer listen queue consumer receive message achieve create sample application send message debug consumer sure receive message automate test include micro service ci include sample app ci fire message consumer unit test wait specific time pass message receive wrong practice test start second message fire fire sample application unit test sample app fail work service fault good practice integration testing micro service connect rabbitmq,12,6456,0,2.0,2,2018-05-04T14:02:25,0.0
43983286,5794266.0,<rest><architecture><microservices><graphql>,graphql microservice,company decide microservice architecture project graphql realise potential advantage single api endpoint disagree communication graphql micro service argue rest graphql endpoint service wonder pro con example graphql bit redundant replicate schema service hand graphql avoid rest pitfall afraid rest endpoint nullify advantage gain gql dilemma experience graphql obvious pro con advance,13,2412,0,9.0,2,2017-05-15T15:26:09,0.0
45688730,4760425.0,<domain-driven-design><microservices><software-design>,decompose microservice business capability domain,read pattern define microservice find ambiguous confused pattern differentiate revolve activity involve area business logic component service small package affect service explanation,13,3883,3,6.0,2,2017-08-15T08:01:46,0.0
47680711,1967100.0,<http><microservices><httpresponse><hystrix><spring-retry>,http error trigger automatic retry,microservice resilient retry type http request help retry timeout client terribly slow experience intend retry case retry help bad request remain bad request millisecond imagine reason retry type error error,13,4378,2,5.0,2,2017-12-06T18:02:51,0.0
52834628,1704453.0,<amazon-web-services><spring-boot><nginx><microservices><netflix-zuul>,spring boot system eureka zuul ribbon nginx,work learn microservice understand work doc thing develop confused list system question netflix eureka understand service discovery platform register server client doubt api gateway service registry understand actual service registry zuulapi gateway understand zuul api gateway basically load balancer call appropriate microservice correspond request url assumption correct api gateway interact eureka appropriate microservice nginx read api gateway read service registry alternate eureka api gateway service registry webserver powerfully configure aws api gateway alternate ribbon understand aw alb load balancing zuul help,13,4630,0,9.0,2,2018-10-16T11:38:14,0.0
46575898,2828480.0,<architecture><microservices>,microservice,microservice microservice explain simple person microservice simple programmer theoretical background term microservice explain easy peasant word microservice amazon aws microservice read stupid understand,14,3467,1,11.0,2,2017-10-04T23:59:02,0.0
44305351,8081281.0,<java><web-services><httpurlconnection><microservices><spark-java>,send datum request body httpurlconnection,post request local service deploy local create java spark send datum request body post call httpurlconnection time request body java spark null code java spark post service handler httpclass post call,14,28210,0,3.0,2,2017-06-01T10:41:06,0.0
40660618,3399047.0,<amazon-web-services><amazon-elastic-beanstalk><microservices><aws-api-gateway>,aws api gateway elastic beanstalk microservice,build microservice architecture aw clarify doubt current general concept api gateway expose microsevice api elastic beanstalk place elastic beanstalk vpc direct access internet instance question doubt elastic beanstalk subdomain application creation subdomain api gateway integration type aws service action configuration represent single microservice elastic beanstalk application specific scalable microservice microservice communicate task sqs simple queue service case well microservice communicate api gateway directly test environment structure test environment staging env create separate vpc elastic beanstalk amazon service test environment api gateway set api gateway allow client access microservice test environment request specific subdomain test mydomain hello hello sure api gateway ci cd fast simple manual copy configuration test stage production stage expect complex solution hint component concept detail find experience deploy app elastic beanstalk codep deploy jenkin interesting well jenkin aws code deploy jenkins codedeploy,14,8947,1,4.0,2,2016-11-17T16:49:51,0.0
31842622,1313884.0,<microservices>,microservice integrate ui,today start read microservice architecture interesting doubt exlanation assume create blog build microservice user login service article service comment service reporting analytic service realistic example reporting analytic service purely backend issue understanding three involve ui understanding ui microservice ui integration work front door service collect user request forwards service answer html css front door service compose individual response return user change example case scenario regard,15,4753,3,4.0,2,2015-08-05T20:54:01,0.0
49443206,9517937.0,<osgi><microservices><osgi-bundle>,difference osgi microservice,choose osgi module micro service micro service osgi module,15,6473,1,5.0,2,2018-03-23T05:54:50,0.0
32741333,2663572.0,<java><session><cookies><weblogic><microservices>,session management microservice,follow setup stm stingrey traffic manager load balance session stickiness weblogic cluster auth handle third party tool worry session regard horizontal scale multiple instance application stm weblogic cluster sure subsequent request manage server currently monolithic application move microservice wan move current infrastructure stm weblogic cluster auth tool plan gateway war route request microservice microservice war functional domain api gateway receive user request microservice accessible question api gateway state full microsevice stateless user session datum share api gateway microservice well alternative resource link well,16,17281,3,9.0,2,2015-09-23T13:43:15,0.0
43426699,2288991.0,<database><microservices>,db design microservice architecture,plan microservice architecture implementation website share database service preferable separate database service regard consider common database service violate essence microservice architecture,16,13640,0,6.0,2,2017-04-15T13:34:54,0.0
40448015,2131096.0,<node.js><microservices>,microservice architecture nodejs,work side project deice redesign skelton project microservice find opensource project follow pattern lot read search conclude design question question thought api gateway smart load balnce request node microservice microservice discovery implementation design eureka thing,17,5826,4,11.0,2,2016-11-06T09:54:11,0.0
41010290,3486720.0,<rest><architecture><messaging><microservices>,microservice rest messaging,hear amazon http microservice base architecture alternative messaging system rabbitmq solace system personally experience solace base microservice architecture rest idea big league implementation amazon netflix uk gov aspect microservice follow thing require pattern match async messaging receiving system publish subscribe cache load event start service load datum couple service notify datum completely load ready service request aspect naturally messaging rest rest public api,19,8797,2,4.0,2,2016-12-07T05:49:29,0.0
33202053,1757145.0,<architecture><docker><domain-driven-design><soa><microservices>,product versioning microservice,microservice architecture base docker microservice create product example crm system client upgrade product version microservice client guess product version independent microservice copy microservice version trouble version pattern idea handle situation thing mind repository versione microservice produce production ready package version product owner po,21,8262,2,8.0,2,2015-10-18T19:08:57,0.0
47544877,5606133.0,<web-applications><websocket><microservices><api-gateway>,websocket microservice architecture,notification service read event message queue notify web client real time web socket work puzzle api gateway web socket connection maintain client api gateway notification service help edit architecture,22,6916,5,2.0,2,2017-11-29T04:05:22,0.0
48635782,5715934.0,<architecture><microservices><apache-zookeeper><netflix-eureka><orchestration>,role zookeeper eureka microservice,implement orchestration set microservice application tool find apache netflix comparison base fundamental difference service powerful tool,23,15334,0,14.0,2,2018-02-06T05:00:32,0.0
45869766,4557002.0,<c#><docker><asp.net-core><visual-studio-2017><microservices>,docker toolbox work net core project,error docker functionality net core project error message follow link realize windows install docker toolbox docker window instal executable call suppose start docker service executable work container error visual studio container tool persist version window high require order docker container support visual studio update follow quetzcoatl suggestion error visual studio tool docker quick start terminal build project visual studio open project aforementioned error regard container tool devenv exe file locate solution file locate update command docker quickstart terminal result command quetz,30,12489,3,20.0,2,2017-08-24T19:46:40,0.0
27054162,2803135.0,<rest><soa><microservices>,rest restful soa microservice simple term,rest restful restfulservice webservice soa microservice definition reach conclusion term overuse misuse simply badly define hope clear understanding aforementioned term represent concrete definition commonality difference advantage disadvantage importantly bottom thing remember order term appropriately,31,24810,3,17.0,2,2014-11-21T04:31:46,0.0
43612866,7437529.0,<database><database-design><orm><architecture><microservices>,microservice share database multiple orm,learn microservice build project microservice architecture thing team mate database service share table datum repeat service build framework language django rail orm standard correct approach work database involve lot hack orm order work correctly,34,21456,3,10.0,2,2017-04-25T14:01:50,0.0
25595492,355401.0,<security><cloud><single-sign-on><microservices><paas>,single sign microservice architecture,design green field project service serve datum web application serve html read microservice good fit problem implement sso user authenticate access service application approach add identity service application service protect resource talk identity service sure credential valid redirect user authentication web standard openid service handle identity user authorize individually service application sso happy hear idea specific paas heroku proprietary solution acceptable,44,17956,3,28.0,2,2014-08-31T19:26:54,0.0
44870461,0.0,<database><microservices>,microservice handle foreign key relationship,microservice architecture service handle datum service service dependent datum service service access datum direct db call api provide second service service microservice good practice check foreign key constrain example develop delivery feature microservice product product deliverable location mention product table accessible product micro service mircoservice sure microservice delivery feature order unserviced location question delivery feature directly access product database constraint applicable db level delivery order place delivery datum base check foreign key match exist product database table,58,18953,0,24.0,2,2017-07-02T11:45:53,0.0
35756663,1459144.0,<nginx><reverse-proxy><microservices><aws-api-gateway><tyk>,api gateway reverse proxy,order deal microservice architecture alongside reverse proxy nginx apache httpd cross cutting concern implementation reverse proxy work api gateway good clear difference approach potential benefit api gateway usage invoke multiple microservice aggregate result api gateway implement reverse proxy authentication nginx lua script transport security reverse proxy task load balance base question sense api gateway reverse proxy simultaniously example request api gateway reverse proxy nginx concrete mictoservice case difference implement api gateway implement reverse proxy vice versa,85,31293,0,41.0,2,2016-03-02T19:44:32,0.0
44195150,6188141.0,<java><web-services><microservices>,keep java application forever,write java application forever webservice webservice thread inside application forever process webrequest,-4,84,4,0.0,2,2017-05-26T06:37:24,0.0
51726515,5159639.0,<web-services><asynchronous><web><microservices><synchronous>,synchronous asynchronous communication,confuse communication scenario feel single list item synchronous communication order service call shipping service proceed shipment user buy item user interface ui service result invocation order service user interface ui service call catalog service item render,-4,525,0,0.0,2,2018-08-07T12:12:18,0.0
57266585,2194126.0,<laravel><microservices><lumen>,granularity microsrevice,site compare flight fare book ticket api call aggregator provide flight inventory fare payment ticket happen api call paymentgateway site capability hotel booking hotel booking flight booking implement separate service luman hotel booking payment gateway flight duplicate code hotel service well idea convert payment separate microservice question granularity micro service,-4,30,0,0.0,2,2019-07-30T07:38:15,0.0
51942114,7739760.0,<spring><spring-mvc><spring-boot><microservices>,write business logic separate service layer write controller,create layer service layer business logic implementation implement business logic controller,-4,1128,3,0.0,2,2018-08-21T05:28:49,0.0
44503237,1042646.0,<java><spring-boot><microservices><api-gateway>,microservice security implementation,well handle security microservice level api gateway level microservice deployment scenario apt,-3,218,0,1.0,2,2017-06-12T15:28:51,0.0
44458709,8137263.0,<spring-boot><spring-cloud><microservices>,micro service start throw error,springcloud springboot hibernate,-3,492,0,0.0,2,2017-06-09T13:09:51,0.0
51035930,1076703.0,<rest><api><web-services><spring-boot><microservices>,spring boot rest api endpoint map good practice,bellow endpoint url mapping http method post delete post create trade delete delete trade specific detail specific trade update trade detail retrieve trade list collection,-2,857,1,0.0,2,2018-06-26T06:08:59,0.0
51017164,0.0,<go><import><package><microservices>,local package module,start learn development read lot article documentation find concrete answer question local package work source code directory project structure upload remote repository package keep local event develop microservice microservice monolith application microservice single file split logic file fine keep file single file question time find complete answer grateful help,-2,1475,1,0.0,2,2018-06-25T06:04:20,0.0
53610908,1300034.0,<microservices>,microservice dependency manager tool,tool manage microservice dependency service inventory service catalog service identity service constitute product service visual tool map dependency service change service,-2,410,1,0.0,2,2018-12-04T10:32:17,0.0
47296131,611437.0,<database><spring><microservices>,transaction management share db microservice,microservice db microserivce balance management second microserivce reservation management follow business scenario check client balance call rest service balance management microservice balance call rest service reserved balance balance management microservice kind airline reservation call rest service reservation management question rollback step step fail transaction management rest service care microservice db,-2,157,2,0.0,2,2017-11-14T22:14:06,0.0
49973699,3578692.0,<go><interface><network-programming><microservices>,extend interface method local package,create microservice package network care byte convert request main handle request golang allow requesta requestb class extend main package solution find online type aliase embedding handle find specific type request runtime necessitate switch statement network main package duplicate code simple solution move switch statement package main determine type request handle package main deal raw byte avoid responsibility find request type send upwards rest network package simple idiomatic solve,-2,65,0,0.0,2,2018-04-23T05:02:37,0.0
45830528,3390772.0,<wordpress><authentication><oauth><microservices><user-management>,separate login user management application,completely decouple user management login permission user datum application main reason application consist wordpress site native app custom php api allow user login wp user login tie user datum wp case migrate future thing auth fairly heavy costly build separate service store user field meta datum permission login service base credential access wp unlock content native app authenticate access level api experience decouple user management scenario,-2,49,1,0.0,2,2017-08-23T04:11:35,0.0
58622405,5035236.0,<java><api><microservices>,microservice design single call separate api,monolithic app follow logic transform app microservice trouble design call deduce entirely single micro service return dataset single database access performance problem operation retrieve list business code logical code customer microservice side follow domain drive design microservice good practice case priotize single database call case well call case database call,-2,51,4,0.0,2,2019-10-30T09:39:00,0.0
58498471,6597265.0,<php><mysql><docker><architecture><microservices>,docker php apache mysql container dockerfile,image element combine container google search docker hub find image hold container dockerfile create desire container appreciate explanation rationale kind image container side note imagine point separation server container feasible fact save container server container perfectly decouple,-2,92,2,0.0,2,2019-10-22T06:44:57,0.0
54606591,8954551.0,<java><spring><microservices><externalcontext>,java microservice system locate error check,controller receive request pass datum service service external http call answer return service controller return web error message exception external call error check service external call controller return web,-2,40,0,0.0,2,2019-02-09T13:16:56,0.0
49377817,1233826.0,<authentication><google-cloud-platform><microservices><vpc><api-gateway>,handle security microservice architecture,webapp architecture api gateway proxie request microservice common microservice microservice query rest api node server microservice approachable api gateway common server approachable microservice good network architecture happen handle authentication server,-1,201,0,0.0,2,2018-03-20T06:45:05,0.0
41270649,4820510.0,<web-services><rest><api><soa><microservices>,choose api gateway tool implement soa microservice architecture,api gateway understand main difference tool case scenario currently multiple service dbs mobile app web app additional system consider service communicate rest api difficult manage test change architecture netflix zuul ideally service service send request specific endpoint api gateway api gateway interact service send response example practice service send request custom endpoint connector request parse break small request send service specific content request content response gather response create final response content gather send response service send request high availability scalibility fault tolerance ability monitor test service place ability canary test easy add service manage service open source software mature software premise good solution solve problem wso apigee zuul amazon api gateway appropriate case find advantage feature cost feedback regard advantage disadvantage regard technology suggestion note service aw system handle peak ten request minute happen regurarly continuasly,-1,520,0,0.0,2,2016-12-21T19:38:17,0.0
46364880,1667880.0,<java><spring-boot><microservices>,restapi versione header,implement backward compatibility api versione search flow api versione header sample link project kinda implementation,-1,52,2,0.0,2,2017-09-22T12:30:33,0.0
54041918,2285111.0,<performance><http><microservices><amqp><latency>,microservice low latency transport,popular transport protocol micro services rest http amqp sense problem pretty slow disagree claim benchmark amqp http consider slow find internet article help scarce choice imagine lot fast protocol represent small number meaning practice choice http intend server server protocol role alternative support framework write scratch,-1,322,5,0.0,2,2019-01-04T15:33:11,0.0
48732814,3256597.0,<spring-boot><microservices><blocking>,spring boot blocking io fit well microservice,lot tutorial article include official site promote spring boot good tool build microservice rest api endpoint user profile aggregate datum multiple service user service stat service friend service achieve user profile endpoint http call service spring request block server resource thread serve request system inefficient build system compare block framework play framework node js spring webflux framework,-1,303,2,0.0,2,2018-02-11T14:56:37,0.0
36570654,2587904.0,<jenkins><aggregate><microservices><build-pipeline-plugin>,aggregation jenkins pipeline,jenkins pipeline plugin awesome aggregate pipeline dependent project micro service,-1,595,0,0.0,2,2016-04-12T10:32:09,0.0
45598647,5974948.0,<c#><microservices>,microservice application log application structure logging,find good example explain build micro service application log application seq log datum destination switch easily log application edit entire code example explain google find clear explanation,-1,545,4,0.0,2,2017-08-09T18:56:37,0.0
42105805,2185032.0,<python><api><microservices>,microservice communication design,create communication service api gateway system communicate service service call service api gateway directly service,-1,1385,0,0.0,2,2017-02-08T06:03:09,0.0
54982534,5455223.0,<c#><asp.net-web-api><microservices>,microservice communication message template approach,realize microservice base project asp net core web api independent component communicate external connection point service view model input datum equvivalent request response good practice case allow create tonne identically code deeply situation example datum database microservice transform wide db asker create duplicate code store responsing database,-1,77,0,1.0,2,2019-03-04T11:42:30,0.0
55618138,3473925.0,<spring-boot><microservices>,conduct chaos engineering,micro service communicate build springboot resource database rabbitmq deploy pcf identify weakness system resort chaos engineering time help regard design effort metric collect tool long test tia,-1,114,1,0.0,2,2019-04-10T17:19:06,0.0
43282528,6793312.0,<architecture><apache-kafka><microservices><datastore><event-sourcing>,datum event drive microservice architecture,build event drive microservice architecture understand recommend build service db event store technique base event drive microservice architecture question service small totally independent include dedicated db service event store single unit service hold service event event store component message bus apache kafka order service consume publish event event store domain virtual component include kafka package single unit,-1,605,2,0.0,2,2017-04-07T15:59:34,0.0
51277418,10062564.0,<java><spring><microservices>,mvn clean install pbuilddocker work,error info expose require argument dockerfile set work error info plugin apart pom xml admin server,-1,246,3,0.0,2,2018-07-11T04:44:46,0.0
53635681,2708646.0,<bash><shell><microservices><amazon-ecs>,shell script compare current iteration previous iteration,infinite loop aws cli microservice parameter desire task number task environment microservice environment requirement compare aws ecs metric running task microservice current loop previous loop microservice metric running task infinite loop time loop microservice assume running task compare running task currnet loop running task previous,-1,25,1,0.0,2,2018-12-05T15:31:20,0.0
57747372,217648.0,<kubernetes><microservices><kubernetes-ingress><istio>,istio kubernetes cluster,architect microservice move docker container kubernete orchestrate container investigation technology combination kubernetes istio good read internet confused kubernetes ingress ingress controller understanding istio well inter service communication address service discovery circuit breaker challenge don address problem kubernetes ingress istio kubernetes ingress controller,-1,161,4,0.0,2,2019-09-01T15:40:34,0.0
49116339,8808456.0,<node.js><backend><microservices>,multiple node app server domain,split application multiple application start presentation layer logical layer html css js application backend code api application understand server currently overgrow application port nginx proxy pass port location,-1,801,0,0.0,2,2018-03-05T17:37:21,0.0
58650293,8102478.0,<node.js><spring><jwt><microservices>,jwt common authentication medium application spring node microservice,angular front web app talk spring node microservice spring microservice handle user registration sign node handle lot post sign activity jwt medium maintain authentication sevice,-1,32,1,0.0,2,2019-10-31T19:48:52,0.0
58706507,2861312.0,<apache-kafka><rabbitmq><microservices>,message queue rabbitmq kafka microservice,start project evaluate tech stack asynchronous communication microservice consider rabbitmq kafka light key consideration decide,-1,97,1,0.0,2,2019-11-05T07:34:09,0.0
54091672,10824655.0,<c++><performance><ipc><microservices><low-latency>,low latency communication micro service remote ipc threading scenario,create ultra fast message processing solution cpu bind micro service base process lot request response message small byte kb message service place host host process inside process thread currently communication protocol service topology idea tcp base communication allow loopback ipc communication host thread communication benefit single communication code allow experiment service topology easy host service inside process move remote host understand low latency solution max rps speed message delivery split transport depend communication type thread communication good result achieve circular buffer ipc communication pipe circular buffer share memory good solution well ipc remote communication async tcp server client sequential message delivery udp multicaste linux solution cross platform great good starting point remote communication question follow worth create custom ipc threading communication solution start tcp base localhost communication provide performance comparison result ipc technique locahost tcp pipe share memory good rps small message kb share memory time faster localhost tcp time faster pipe approximate rps compare good low lattency ipc rpc technique library production ready solution exist problem purchase license advance answer suggestion ipc benchmark find perform low level linux linux ubuntu ghz message size byte message count follow result pipe benchmark fifos pipes benchmark message queue benchmark share memory benchmark tcp socket benchmark unix domain socket benchmark zeromq benchmark,-1,464,4,0.0,2,2019-01-08T12:18:13,0.0
51953109,8627030.0,<rest><microservices><backend>,backend web development rest api microservices development,backend developer job create rest api microservice backend developer,-1,94,0,0.0,2,2018-08-21T16:32:21,0.0
50280470,3091370.0,<architecture><microservices><separation-of-concerns>,micro service architecture advice,work agile mode team application face situation advice front application develop team service micro service develop team front directly micro service prefer micro service matter separation concern help advise highly appreciate lot,-1,31,0,0.0,2,2018-05-10T19:47:36,0.0
57408444,1782501.0,<ajax><reactjs><spring-boot><microservices>,cross origin read block corb block cross origin response mime type application json,call service reactjs spring boot error cross origin read block corb block cross origin response mime type application json react code error message,-1,1017,0,1.0,2,2019-08-08T08:37:02,0.0
42816444,5398105.0,<architecture><monitoring><microservices>,microservice architecture monitoring,company process migrate monolithic approach microservice architecture wonder tool manage start shutdown load balancing health monitor solution window base option linux environment well time deploy locally fine consider cloud time,-1,321,0,0.0,2,2017-03-15T17:13:21,0.0
56577056,11018155.0,<node.js><api><microservices><aws-api-gateway>,microservice api gateway design,difficulty rest api design microservice service write javascript provide good solution api gateway support jwt authorization websocket follow scenario main frontend react dashboard login main backend nodejs service frontend react service backend nodejs service frontend react service backend nodejs kong api gateway implemenent user log main front access service service log redirect user main frontend,-1,63,0,0.0,2,2019-06-13T09:06:13,0.0
32532736,4027492.0,<service><deployment><configuration><microservices><vocabulary>,good correct term designate group microservice,open topic advice solve help follow problem currently work people project microservice architecture cloud compute microservice couple microservice compatible instantiate machine microservice version number order launch instance microservice define microservice machine static configuration static configuration call deploy microservice deploy version microservice xy microservice xy deploy instantiate version version deploy version number alter version number microservice deploy require alter version deploy microservice xy xy question correct good term refer entity call deploy developer write program architecture entity syntaxic semantic incompatibility inside team pro con deploy sense deploy microservice list term deploy designate process utilization term deploy xy deploy deploy microservice machine cluster good group thing deploy multiple machine configuration term cluster apply group machine service service group microservice sense piece code refer microservice service lead confusion def version service talk service microservice opinion enlightenment question,0,374,0,1.0,3,2015-09-11T21:59:57,0.0
33033834,1107537.0,<java><rest><microservices>,migrate java interface microservice,microservice possibility migrate code architecture understand general concept struggle work example supposing interface call implementation call inside monolithic application principle simple machine access monolithic application rest api serialize dtos json http interface help decoupling create implementation interface rump monolith client call interface method convert rest call send network rating engine service implement http server endpoint interface method deserialize dtos method parameter route call original sit inside server serialize response send client awful lot plumbing code add maintenance overhead tweak method interface change place clever automate boilerplate code construction,0,1008,0,0.0,3,2015-10-09T08:47:54,0.0
35890054,2864719.0,<automated-tests><microservices>,test automation microservice architecture,charge implement qa process test automation project microservice architecture project public api datum automate api test test live repository clear monolith project repo api test repo selenium test poduct consist microservice communicate restful api rabbit queue automate test individual servicess test individual service separate repo note service write java php automate test python lot repos test stub mock suggestion good resource community offer,0,885,2,0.0,3,2016-03-09T11:16:13,0.0
28581644,162622.0,<security><apache-kafka><microservices>,protect kafka flood,kafka production service send read message work fine bug service weird reason send message second kafka bug kafka crash kafka bug protect potential flood,0,235,0,0.0,3,2015-02-18T10:45:27,0.0
37213471,589407.0,<refactoring><microservices>,good practice migrate microservice,real experience break monolith separate module service question read blog entry martin fowler monolith break microservice size element equation ponder approach break monolith application talk space oddessy large micro service overly fine grain stay monolithic goal create separate module upgrade indepenently scale independently recommend good practice base personal experience break monolith microservice,0,279,0,0.0,3,2016-05-13T15:05:28,0.0
34424706,4499414.0,<meteor><microservices>,access meteor collection database,application admin code host completely app share database collection define code global namespace main application admin application access collection database global variable define file share meteor server client reference article idea set admin tool,0,178,1,0.0,3,2015-12-22T21:28:48,0.0
43032883,1911755.0,<javascript><node.js><authentication><jwt><microservices>,authentication work microservice,separate node js services service responsible authenticate user user log user redirect service host subdomain domain service host authentication question service aware user authenticate imagine service aware authenticate service check jwt request service service suppose send jwt client client redirect origin safe store jwt allow cross origin access,0,145,3,0.0,3,2017-03-26T18:31:33,0.0
46660853,7925728.0,<docker><spring-boot><cassandra><docker-compose><microservices>,micro service docker,newbie spring boot create micro service docker attach project structure problem time micro service manually example micro service service manually micro service start deploy docker achieve cassandra database,0,330,1,1.0,3,2017-10-10T07:25:37,0.0
52234902,7703570.0,<java><spring><spring-boot><microservices><netflix-zuul>,spring boot microservice zuul,create gateway zuul unable start zuul application spring boot support zuul zuul recommend spring cloud gateway onwards pom xml resuorce file application yml spring boot application zuulapplication java help error,0,371,1,0.0,3,2018-09-08T11:34:18,0.0
52057828,1667584.0,<asp.net-core><.net-core><microservices>,create microservice net core visual studio,google lot definition sample project microservice create microservice example create microservice user input latitude longitude distance cool web project time microservice rest project firm project microservice convert project micro service microservice expert step process microservice create net core,0,1286,2,0.0,3,2018-08-28T12:23:28,0.0
47061556,4054447.0,<node.js><docker-compose><microservices>,microservice setup,git repo manage docker compose project docker compose reside git repo follow organization access ui repo server repo dockerfile limitation docker sym link ui repo server repo inside local development repo work option git submodule downside approach copy package json perform inside dockerfile gitignore purely development ideally volume instal dependency inside docker container house ui repo server repo inside parent directory docker compose yml file downside approach parent track git well git parent directory house git repo work practice set microservice architecture independent git repos manage project local development docker compose,0,89,4,0.0,3,2017-11-01T18:39:46,0.0
53867089,3450709.0,<nginx><load-balancing><microservices><haproxy><api-gateway>,tool api gateway polyglot microservice platform,case microservice architecture bunch service build stack communicate client rest gateway single entry point client consumer redirect request corresponding service base endpoint purpose api gateway well load balancer simply balance load pass proxy expectation consumer authenticate credential server return small access token store client app request client send token authorization jwt token base authentication pass request service decode small auth token authorization token associate user query small token decode payload pass authorization actual service internal service service call content serve gateway service generate payload store reduce api call user time request cache balance load sure achieve database query api call cache redis find service pass proxy expressjs api services polyglot framework language reading understanding great recommend,0,266,0,0.0,3,2018-12-20T10:44:34,0.0
53960284,10213657.0,<angular><microservices><zone.js>,micro apps angular zone js custom element issue,pretty develop angular architecture large web project play bit option micro frontend create angular project micro app shell micro app shell outer container web application manage micro app read artical micro app angular custom element approach micro app excerpt app module app component html build application follow command micro app shell add follow html extend app module schemas question issue uncomment micro app polyfills js zone js import import zone js dist zone micro app shell error comment micro app polyfills js zone js import import zone js dist zone micro app shell error wat prevent error irgnore apply change question start micro app shell micro app custom element app comment html content micro app shell app component html error follow sample lot help advance,0,934,0,2.0,3,2018-12-28T14:46:20,0.0
48667874,7084252.0,<.net><authentication><asp.net-core><jwt><microservices>,authentication microservice,develop microservice system company asp net core face follow problem authenticate user request service check token actual blacklist case user token token expire actual access resource service ofthe microservice authentication service token actual request elegant,0,1076,0,0.0,3,2018-02-07T15:47:13,0.0
48726644,2257925.0,<encoding><utf-8><special-characters><microservices><netflix-zuul>,zuul api gateway map wrong service url character set,create microservice zuul api gateway service map wrong url relate encode problem zuul application propertie service application yml service application yml eureka log zuul log zuul log service map special letter ı turkish character reach service zuul api gateway override zuul configuration example call service zuul api gateway return find spring boot spring cloud finchley version,0,859,0,0.0,3,2018-02-10T23:23:38,0.0
48699742,1675976.0,<node.js><amazon-web-services><authentication><microservices>,handle user authentication microservice aw,read tutorial provide aw explain break monolithic nodejs application microservice architecture piece user authentication question authentication fit allow user authenticate service separately answer involve aws cogntio service perform user authentication management,0,907,0,0.0,3,2018-02-09T06:10:16,0.0
45789168,8459156.0,<api><microservices>,difference api microservice,create api rest django understand convert api micro service understand real difference api micro service convert entire api micro service create micro web server understand micro service understand,0,2267,0,1.0,3,2017-08-21T04:08:14,0.0
38872460,4779865.0,<node.js><docker><dockerfile><microservices>,share host directory multiple docker container,directory structure share file lib folder host machine container lib file require application container content docker file inside container propinfo finder build docker image command build process successful command map mount directory container parent directory bin folder locate error host physical ubuntu machine hr experience node js docker environment,0,553,1,0.0,3,2016-08-10T11:41:31,0.0
49013500,3342427.0,<oauth-2.0><authorization><microservices><auth0>,oauth flow microservice architecture,understand best apply oauth grant type microservice architecture work situatation single application mobile app client web browser browser user agent mobile phone implicit grant define authenticate user acquire access token app access externally expose api architecture deal collection microservice call example consider externally expose api internal api depend subsequently depend question typical authorization flow situation standard implicit grant spa acquire access token client credential grant define acquire access token machine machine interaction,0,672,0,0.0,3,2018-02-27T16:31:08,0.0
40208887,4518057.0,<sql><amazon-web-services><scalability><microservices>,utilize microservice architecture underlying read write database bottleneck,describe question implement microservice architecture centralized read write database bottleneck expand example three microservice microservice rely database exclusive parallel database appropriate microservice distribute work server central database ultimately defeat purpose microservice call server,0,523,1,0.0,3,2016-10-23T23:36:41,0.0
40216362,5778246.0,<java><spring><rabbitmq><microservices>,microservice messaging message content,build application consist microservice microservice call hera manage user microservice manage authorization authentication microservice call zeus implementation spring oauth user create update delete hera replicate zeus rabbitmq include username user type enum flag indicate user enable set rabbitmq work properly thing message body content package message instance create maven project pojo require property marshal send rabbitmq add dependency project hera zeus add list plain property find good practice guideline subject advance,0,142,0,0.0,3,2016-10-24T10:39:10,0.0
59006794,11568610.0,<google-cloud-platform><architecture><google-cloud-functions><microservices><api-gateway>,api gateway microservice google cloud functions,input example service account service product service payment service service separate google cloud function service http api example account service service swagger documentation endpoint question cloud function private public access place api gateway note google offer endpoint cloud function understand endpoint allow define yaml openapi file yaml file define case ability proxy cloud function reverse proxy,0,74,0,0.0,3,2019-11-23T10:48:17,0.0
51238009,1611996.0,<java><c#><design-patterns><microservices>,create endpoint multiple record microservice,currently api endpoint microservice call supplier service return single supplier ui screen display list supplier product display supplier list product loop call point iteration concern inefficient performance stand point design endpoint list supplier number return list supplier people microservice design sure proper design reasoning,0,108,4,0.0,3,2018-07-09T03:52:33,0.0
51733502,2540256.0,<java><concurrency><microservices><distributed-transactions><optimistic-locking>,micro service transaction manager handle concurrency issue,work build microservice transaction manager implement base java transaction api jta question trasaction maanger ability handle concurrency issue distribute database scenario scenario assume multiple instance service request update balance amount account initially account instance increment commit time second instance retreive account increment commit update balance service update account time figure balance suppose incremente write kind optimistic lock exception mechanism prevent scenario transaction manager base jta specification ensure thing happen,0,715,2,0.0,3,2018-08-07T18:46:11,0.0
53190011,4269562.0,<java><microservices><code-duplication>,implement communication micro service,discussion coworker implement communication microservice moment micro service depend coworker avoid code duplication reuse dto object rest api perfect dependency service case sense opinion couple service bad duplicate dto duplicate dto second micro service solution,0,263,0,0.0,3,2018-11-07T13:03:18,0.0
58260962,10853115.0,<domain-driven-design><microservices><cqrs><event-sourcing>,ddd event source datum microservice,wonder help write order system currently implement order microservice care place order ddd event sourcing cqrs order service command produce event actual order service listen event create read model idea cqrs command write query read implement problem fully understand correct order dependent order customer product additional microservice customer product keep thing simple concentrate customer exactly issue product thinking customer issue automatically problem hand create order order customer product currently customerid client send command order service pass customerid save address customer order address customerid customer service order service suppose summarize datum service datum service datum case order service create event receive customer record introduce lot complexity event system microservice couple order service call read model customer help,0,76,2,0.0,3,2019-10-06T20:26:37,0.0
58224091,4193199.0,<c#><.net-core><rabbitmq><microservices><software-design>,separate rabbitmq consumer rest code,implement service handle email message code rabbitmq subscriber separate process main program common codebase drawback develop microservice orient application net core messaging bus service react event publish service rabbitmq create separate application communicate http listen message trigger webhook second stuff expect advice organize code common codebase easy maintain future network request timing overhead,0,61,3,0.0,3,2019-10-03T17:22:48,0.0
58771903,7432361.0,<java><spring><jpa><microservices>,communication microservice share entity hell,read book microservice find answer question situation service service entity cat service service cat service add field class send service question share entity cat service bad idea tight coupling create datum class service deserialise response object code duplication good pattern communicate,0,47,2,0.0,3,2019-11-08T18:19:13,0.0
46813736,3865842.0,<sql><database-design><architecture><rabbitmq><microservices>,microservice compatible exist sql database,create microservice architecture core rabbitmq strangler pattern exist sql database transaction requeriment find lot implement sql database impossible transactional operation service time service access entirely database good idea service exclusive transactional operation sql microservice slow exist standard,0,846,0,0.0,3,2017-10-18T15:21:30,0.0
46934916,1203333.0,<java><rest><spring-boot><soap><microservices>,microserivce spring boot consume soap,create rest service consume soap good spring boot create microservice question experience architecture technology spring boot standard technology stack pitfall aware,0,2188,0,0.0,3,2017-10-25T14:20:55,0.0
52569461,5804871.0,<rest><architecture><domain-driven-design><microservices><cqrs>,retrieve datum bound context ddd,initially app desktop app web platform future bound contexts app retrieve datum case approach case mediator pattern bind context request data mediator call bind context correct datum finally mediator bring data bc scenario change app web microservice request datum microservice meaditor pattern approach interest well solution help lot,0,650,1,0.0,3,2018-09-29T14:46:06,0.0
39622142,1624844.0,<reactive-programming><microservices><resiliency>,resilient microservice design pattern,reactive programming resilience achieve replication containment isolation delegation famous design pattern bulkhead supervisor circuit break reach isolation containment famous design pattern microservice specially resiliency,0,271,0,3.0,3,2016-09-21T16:42:31,0.0
38461294,6410092.0,<java><spring-boot><resttemplate><microservices>,send json input parameter microservice resttemplate spring boot,send microservice microservice machine spring boot find unable help,0,2307,0,1.0,3,2016-07-19T14:24:45,0.0
50128046,15395.0,<spring><spring-boot><microservices>,design spring microservice,create hobby project confused decision help work microservice requirement gui drop list example list country fetch rest call fetch microservice database lookup common server side validation work case microservice call gui validation validation service common microservice case screen gui microservice reuse validation well deal case database web service call local maintain state call care scenario web service call fail finally pass status gui,0,246,0,0.0,3,2018-05-02T06:02:52,0.0
53771774,10116037.0,<microservices><service-discovery><api-gateway>,play microservices api gateway service discovery,plan develop microservice base play framework provide rest api lot akka cluster cluster sharde hood api gateway expose api internal service face big issue multiple instance service ip port api gateway service instance load balancer play keep track service solution fill spot api gateway load balancer,0,1398,0,0.0,3,2018-12-14T00:00:28,0.0
53700689,5902146.0,<java><rest><spring-boot><jdbc><microservices>,pojo jsonobject restful service,currently work project restful service jdbc connection handle request response jsonobject pojo class confuse,0,55,2,0.0,3,2018-12-10T06:45:51,0.0
56880981,0.0,<java><spring><spring-boot><collections><microservices>,error return list object spring boot application microservice development,follow microservice tutorial youtube create independent service spring boot application create service implementation java file provide method definition request mapping url catalog userid read operation request url return list object response body http response http read request java error occur function definition send list object error occur moviecatalogresource java state illegal start expression unexpecte token error strike execution guy kindly provide help resolve issue suggestion provide code catalogitem java moviecatalogservice java,0,51,1,0.0,3,2019-07-04T05:07:32,0.0
57873484,12047512.0,<java><json><microservices>,multiple jsonobject,problem add json java code parameter compiler error help json error report,0,30,1,0.0,3,2019-09-10T14:58:23,0.0
55784790,5525739.0,<microservices><health-monitoring>,microservice call health check request microservice,imagine microservice microservice microservice http request microservice call microservice health check endpoint prior perform request health check return healthy,0,48,0,0.0,3,2019-04-21T16:56:51,0.0
49113488,8735568.0,<spring-boot><microservices><distributed-database>,distribute database design style microservice orient architecture,convert monolithic application micro service orient architecture style spring spring boot framework development front angular postgresql database confusion design database distribute accord functionality database design accord vertical partition implement inter microservice communication service achieve entire functionality horizontally partition current structure domain base educational university half university db remain db deploy service accord region set university currently decide continue mention approach type task refer architecture task beginner microservice distribute database confirm approach solution issue continue second approach horizontal partitioning database accord domain object,0,775,0,1.0,3,2018-03-05T15:09:55,0.0
49284804,7173575.0,<spring><mongodb><docker><jar><microservices>,understand microservice architecture,hard understand microservice architecture pattern work question microservice database server container example docker container mongodb jar server jar mongodb locate container example correct jar database container prevent change regard application deployment jar datum mongodb resette container lot,0,345,0,0.0,3,2018-03-14T18:02:37,0.0
48604664,1049104.0,<spring><microservices>,share database connection spring cloud,share database connection aong spring cloud module microservice microservice db connection db connection microservice,0,1060,3,0.0,3,2018-02-04T04:20:22,0.0
52750451,3455378.0,<python><amazon-web-services><docker><aws-lambda><microservices>,serverless aws lambda docker onpremise deployment,search day find approach serverless localstack code aws api gateway lambda cloud base version software solve manage deployment customer host copy inside private network wanna lambda code aw magic service dynamodb regular dependency inject container api gateway software python flask parse export api gateway config build layer well idea lambdas folder aws lambda container transform http payload aws event payload import module call lambda handler hopefully container mysql nginx emulating cloudfront static website solution suggestion crazy exist software solution solve,0,145,4,1.0,3,2018-10-11T00:24:06,0.0
54158391,4175637.0,<django><docker><microservices><gunicorn><static-files>,serve static file production django discourage,develop web application static file order deploy choose serve file wsgi interpreter job gunicorn firewall reverse proxy application whitenoise server staticfile work fine issue regard performance understand practice serve static file directly wsgi interpreter discouraged service collection microservice db frontend service scale problem addition philosophy worried footprint microservice logical rest completely mind strategy,0,128,0,0.0,3,2019-01-12T09:45:29,0.0
54249672,5882375.0,<docker><kubernetes><environment-variables><load-balancing><microservices>,kubernetes docker service communicate correctly,java microservices caller jar call call jar set caller service http port env var callerport address call service env var calledaddress caller env var set call service env var calledport order set specific http port call service listen http request exactly simply expose variable dockerfile order set kubernete dockerfile dockerfile caller dockerfile call docker image myaccount caller myaccount call deployment yaml order deploy minikube microservice replicas loadbalancer deployment caller yaml deployment call yaml single service work well call singularly call healthcheck endpoint call endpoint involve communication service error pod correctly active guess problem deployment yaml define find pointed service work deployment yaml,0,107,8,0.0,3,2019-01-18T07:49:21,0.0
35179495,497209.0,<spring-boot><microservices>,spring boot microservice deployment,deploy multiple instance microservice manage deployment,0,773,0,0.0,3,2016-02-03T14:16:51,0.0
57257587,1921790.0,<java><spring><git><microservices><spring-boot-2>,spring config server local git repository,set spring cloud config server create git repository folder local git local repository repository link class path link source add property file service commit change location git local repository repository hit url result error org springframework cloud config server environment nosuchlabelexception label master org eclipse jgit api error refnotfoundexception master resolve follow main class spring boot application expect result application property detail url,0,238,2,0.0,3,2019-07-29T16:05:49,0.0
58529727,1114130.0,<kubernetes><cloud><microservices>,multi deployment scale,explore find answer trivial setup apps container work relate receive filter datum send decide application container reside share communication place standard network scale independently approach correct deployment correspond app define scale independently deployment work case scale scale perform multi deployment scale newly create instance instance existence ip address send request ip kind hook order code bash script master node init container pull configuration start alternatively attach file start dynamically instance configuration second instance understand recognize unique instance share volume configmap instance read unique configuration instance number standard perform requirement trivial setup web app scale automatically accord trigger export loadbalancer talk loadbalancer independent scale loadbalancer handle load correct trivial case,0,59,0,0.0,3,2019-10-23T19:23:39,0.0
58436626,12233848.0,<architecture><microservices><event-sourcing>,read model microservice architecture,question regard event source microservice architecture suppose service store event eventstore rebuild read model projection datum service example userservice invoiceservice invoice service model work user read model user easy querying option store user invoice service good source truth user service create rest api fetch user user service case read model rebuild easy solution,0,72,0,0.0,3,2019-10-17T16:00:54,0.0
58517773,11091128.0,<java><architecture><many-to-many><microservices><entities>,manage relation microservice architecture,entity tow separate microservice add relation entity combine entity entity gateway junction table gateway side well solution,0,91,0,0.0,3,2019-10-23T07:36:37,0.0
54349529,2151387.0,<elasticsearch><design-patterns><microservices>,elasticsearch micro service design,micro service design document search document elk generate report doc export pdf elk storage question elk elk instance,0,322,1,0.0,3,2019-01-24T14:58:32,0.0
45325062,7728822.0,<jvm><microservices><datacontract><pact>,contract test consumer provider develop company scrum team,contract test consumer provider develop company scrum team,0,141,1,1.0,3,2017-07-26T11:03:53,0.0
51855075,4169229.0,<django><docker><nginx><docker-compose><microservices>,django microservice docker,follow config file work perfectly figure add second app mix create microservice environment example exist web app api handle user registration sign add api mix database theoretically production environment api url start second api url start sure accomplish perspective completely wrong correct,0,613,0,0.0,3,2018-08-15T08:08:19,0.0
51950785,3465318.0,<docker><kubernetes><microservices><devops>,place kubernete dockerfile,option correctly manage kubernetes delcaration file dockerfile service development consider fully separate cross service communication setup separate repository docker delcaration build deploy script setup separate repository declaration leave docker file repository appropriate service declaration docker file place service code repo code approach well provide flexibility service counter service complex inner network configuration increase option good option well sure separate repo good option local docker image create difficulty local development fully require developer team interact service spin service st option good provide full responsibility dedication solve devop task future lead problem team spin cluster case repo pull execute respect minikube option good,0,213,1,0.0,3,2018-08-21T14:19:53,0.0
51911797,2932149.0,<java><spring><spring-boot><microservices>,manage microservice live,test microservice springboot create microservice project understand setup question confront microservice manage developer manage deploy update microservice central location deploy multiple instance microservice leave port decide runtime predefine sure question pop late link advance,0,95,5,0.0,3,2018-08-18T19:12:13,0.0
51419192,6050113.0,<spring-boot><microservices><spring-cloud-netflix>,microservice architecture spring,build project base microservice architecture spring boot project divide multiple module maven dependency management service module module spring application example application class class case maven dependency completely service face circular dependency solve problem,0,86,3,0.0,3,2018-07-19T09:36:33,0.0
51566509,2704444.0,<domain-driven-design><microservices><multiple-databases><aggregateroot>,microservice acceptable api return aggregate root replicate,imagine microservice aggregate root call microservice aggregate root call logic base property step replicate list classification asynchronous messaging business imagine view add player view choose dropdown list question dropdown list populate classification replicate datum expose api title question edit replication happen async messaging event expose entire aggregate property description classification,0,218,7,0.0,3,2018-07-27T22:56:45,0.0
46190467,589490.0,<domain-driven-design><microservices><cqrs><event-store>,cqrs microservice handle event rollback,microservice cqrs event store nodejs cqrs domain work charm typical flow rest service command validation command aggregate event eventstore transactional datum return aggregate aggregate store microservice local db essentially read db publish event queue problem flow transactional datum save persistence event store storage microservice read datum happen transaction context failure step handle event propagate event store aggregate update suggestion highly appreciate,0,539,3,1.0,3,2017-09-13T06:37:37,0.0
33805449,1978285.0,<jpa><database-design><architecture><spring-cloud><microservices>,store share instance datum spring microservice architecture,follow situation build system require redundant microservice failover loadbalance start instance service example simple core rest service provide datum question store datum jpa instance access database write reading result problem layer caching consistency database redundent requirement service instance access database synchronize common solution advance,1,682,0,0.0,3,2015-11-19T13:35:55,0.0
31088764,4683657.0,<microservices>,design strategy microservice net,good microservice net communicate peer peer communication well performance netmq port zeromq well bus nservicebus rhinobus break data access layer microservice indu,1,822,3,0.0,3,2015-06-27T12:28:35,0.0
30496218,1420921.0,<nio><microservices><undertow><sysctl>,avoid undertow connection reset apache benchmark test,apache benchmarke request concurrent user undertow version xnio api pingserver linux kernel socket thread setting sysctl request user issue,1,878,2,0.0,3,2015-05-28T02:27:41,0.0
31404820,1445898.0,<dns><soa><microservices>,service locator dn,lot application role service locator distribute environment aka soa example zookeeper consul dns standard well stable distribute fault tolerant assign multiple ip load balance homogeneous cluster serve additional metadata,1,178,1,0.0,3,2015-07-14T11:04:07,0.0
46522304,7570121.0,<java><microservices><spring-cloud><multipart><feign>,file upload spring cloud feign client,post request microservice feign client spring cloud netflix follow error postman eclipse console follow exception update feign interface main microservice controller kind serializer suggestion appreciate,1,5280,5,3.0,3,2017-10-02T08:50:39,0.0
53037731,284598.0,<architecture><microservices>,definition microservice,reference microservice architecture discussion refer microservice call service interest company terminology correct correct microservice real thing,1,209,6,0.0,3,2018-10-29T01:47:52,0.0
50663047,3907459.0,<java><rest><war><microservices>,microservice rest service deploy jar file,simple example multiplication service single monolithic mathservice deploy war deploy multiplication service separate service rest service mathservice call concept divide single monolithic small maintainable service microservice sure mandatory deploy multiplication service war file deploy jar file web server understanding war file rest call http call handle servlet include servlet war file correct,1,787,0,1.0,3,2018-06-03T03:35:19,0.0
50448620,8078899.0,<kubernetes><microservices>,issue kubernetes annotation,read documentation kubernetes annotation find basic example annotation example deployment yaml annotation test good regard,1,968,0,0.0,3,2018-05-21T12:10:46,0.0
50506101,7597158.0,<spring-boot><microservices>,spring boot communicate microservice,currently work spring boot microservice project create service service separately service communicate service achieve blog netflix eureka cloud server achieve achieve local environment cloud server,1,12608,1,0.0,3,2018-05-24T09:45:18,0.0
43476908,4207462.0,<docker><docker-compose><microservices><seneca>,implement microservice node js,good approach implement microservice find fw bit confusing tut create jwt auth mongodb staff microservice,1,353,0,0.0,3,2017-04-18T15:55:46,0.0
43440170,7875136.0,<java><spring><microservices>,reflectiontestutils setfield override local project property attribute,struggle override property file inside yml file spring framework annotation injectmocks attribute declare configuration project yml file call platform property call paysafe ss fx service yml set variable call essentially time live buffer problem adjust time test buffer hour hour hour call test adjust timing overridden watch variable work test harness test penetrate micro service code overridden lose idea overridden persist test goal variation test essentially override define project define property file,1,920,0,1.0,3,2017-04-16T17:44:38,0.0
52256252,2804362.0,<node.js><express><microservices><express-gateway>,microservice express gateway route return error,microservice port proxy request problem access route microservice micro service route access route access microservice route return,1,456,0,0.0,3,2018-09-10T10:53:36,0.0
52143545,1696421.0,<java><microservices><resttemplate>,microservice rest template versus client jar,microservice responsible cached datum rest point big project microservice confusion resttemplate call rest point client jar microservice big project rest template add pojos request response senior developer insist rest template approach,1,190,1,0.0,3,2018-09-03T05:22:06,0.0
52264536,8526919.0,<java><architecture><microservices>,track exception microservice architecture,question relate architecture question interview unable answer find convincing answer net question suppose microservice communicate data flow work microservice microservice microservice microservice microservice suppose exception microservice track exception microservice exception occur microservice advance,1,603,3,0.0,3,2018-09-10T19:49:23,0.0
52228734,809807.0,<docker><spring-boot><docker-compose><microservices>,microservice reach config server docker compose,eureka server config server spring boot service create docker compose file configuration config server register eureka server configuration user service throw exception exception understand user service connect euroka server connect config server wrong url euroka server app property config server app propertie user service application property user service bootstrap yml application local pc docker work properly suggestion edit userservice docker file config server docker file eureka server docker file,1,1886,7,1.0,3,2018-09-07T19:42:33,0.0
44131588,2833802.0,<client><microservices>,good practise share model microservice client library project,create rest microservice client library language case good practice share response request model project client project independent model,1,597,0,1.0,3,2017-05-23T09:58:43,0.0
48271493,9124444.0,<domain-driven-design><microservices>,relation microservice ddd cqrs es,couple week start understand ddd cqrs es microservice understand individually single unit misunderstanding hope clarify relation microservice ddd secondly bound contexts translate microservice,1,542,2,0.0,3,2018-01-15T22:21:43,0.0
47162798,6266521.0,<architecture><microservices><bounded-contexts>,decomposition microservice,question regard decomposition microservice suppose microservice user product suppose requirement add category system product category product red miniature ferrari belong category toy car user category toy shoe retrieve full list product sort product fall preferred user category top basically concept share microservice case category good model microarchitecture environment solution solution separate category microservice manage crud category product service api call link category product user service api call link category user product service api call fetch product order preference work product service call user service user category listen event emit user service solution separate category microservice manage crud category category service api call link product category category service api call link user category product service api call fetch product order preference work product service call category service user product category listen event advantage disadvantage solution,1,146,0,2.0,3,2017-11-07T16:25:12,0.0
54000380,6725779.0,<java><architecture><microservices>,reuse code microservice architecture,service service service service datum model studentmodel wonder share studentmodel service build studentmodel jar service refer jar copy paste code help reuse code microservice architecture,1,551,2,0.0,3,2019-01-02T01:51:01,0.0
40737349,985395.0,<microservices><aws-api-gateway><apigee><kong>,place service composition api,work environment api default standard lot micro service meet requirement customer customer demand mix match datum offer write composition host service platform composition gateway host dedicated paas instance moment start composition pay http overhead compare datum directly database help helpful,1,901,0,0.0,3,2016-11-22T08:49:46,0.0
48763985,8735568.0,<docker><amazon-ec2><microservices>,feasibility choose ec docker production deployment option,deploy microservice ec machine launch ec machine ubuntu lts ami find install docker container docker installation sample service deployment docker ubuntu command option image background choose ec docker deployment microservice actual production environment deploy spring boot microservice option ecs option frank avoid ecr ecs optimize ami burden machine full control belong feasibility choose ec docker ubuntu machine plan deploy angular app install deploy manage application server spring boot angular serverless production environment,1,477,1,1.0,3,2018-02-13T09:59:48,0.0
48792602,4865559.0,<spring-boot><microservices><netflix-eureka>,persistence layer microservice,beginner microservice architecture read lot blog microservice architecture mandatory micro service database case cost expensive question persistence layer micro service function allow microservice read write access database,1,913,3,1.0,3,2018-02-14T17:04:40,0.0
36645517,1203687.0,<java><rest><jersey><jax-rs><microservices>,rest api service context resource url,serveral service application server service context service automatically add url multiple service application server create service call draw url discussion api path resource service draw mind draw url draw thought thought service draw therefor draw gameno mind draw resource api interface service draw book library draw chapter add chapter book implementation jersey resource path gameno edit gateway front service context expose user point specific service multiple service host port edit context url service discovery lookup edit versione url accept header url clementino version url,1,1638,7,1.0,3,2016-04-15T11:08:33,0.0
36265833,2119522.0,<cloud><versioning><microservices><semantic-versioning><continuous-delivery>,microservice versione,build cloud native application microservice eventually arrive point implement proper versioning microservice place talk semantic versioning day general microservice principal microservice architecture deliver breaking changeset hand semantic versioning increase major version number backwards compatible read breaking changeset deliver compatible semantic versioning overkill microservice architecture public api versione example api getsomethe full semantic versioning consider scheme single number identify api version currently build number timestamp identify continuous integration pipeline produce build note support api call service move target version sense microservice foo foo jar obvious pitfall client guarantee api compatible enforce deliver breaking changeset change api version client sure late bug late build number timestamp,1,574,0,0.0,3,2016-03-28T15:50:24,0.0
42528718,1321564.0,<validation><relationship><one-to-many><microservices><cqrs>,cqrs microservice handle relation validation,scenario microservice cqrs event source internally microservice manage contact aggregate root microservice manage invoice aggregate root recipient invoice valid contact createinvoicecommand read lot time write side command handler call read side account invoice microservice listen event order recipient valid contact invoice microservice receive invoice good practice handle scenario,1,862,0,0.0,3,2017-03-01T10:06:11,0.0
38711908,2568351.0,<cqrs><microservices><event-sourcing><eventsource>,database microservice event drive architecture,read ton documentation blog post example cqrs eventsource architecture microservice system popular example banking transfer app clear microservice understand becouse command side microservice database image microservice eventstore database microservice pattern eventstore db single table table service,1,1506,4,1.0,3,2016-08-02T04:42:50,0.0
57640910,853837.0,<rest><api><microservices>,rest api convention subresource,event host service host login create event create event event create host event create host error host generate bulk invitation code event guest rsvp host response host share share code guest share event cool list invitee generate code list invitee response invite response good convention invitation rsvp option problem match counterpart option keep api change api invite body event list invitee generate code list invitee response invite case sense call event correct convention follow edit requirement host share invite guest guest rsvp,1,96,0,1.0,3,2019-08-24T19:19:35,0.0
47265946,8735568.0,<spring-boot><microservices>,microservice project structure spring boot spring cloud,convert normal monolithic web application microservice structure spring boot spring cloud create angular front application call develop microservice cloud start break module independent process structure microservice architecture doubt design flow control microservice structure architecture single spring boot project controller entire web application process find read develop microservice spring boot project spring spring cloud lot confusion task help clarify create service single project module,1,4584,0,2.0,3,2017-11-13T13:53:05,0.0
55646479,991075.0,<http><web><microservices>,high response time queuing,webserivce internally webservice average response time minute pro con service synchronous response versus service return request process background client poll result con http connection stay active minute default keep alive tcp matter,1,39,0,0.0,3,2019-04-12T07:23:24,0.0
55530628,3935960.0,<docker><kubernetes><containers><microservices><istio>,service mesh istio drive architecture microservice,microservice gurus question service service communication architecture microservice istio service mesh route discovery resilience microservice communication easy manage cover aspect transaction span microservice kind distribute transaction include well event base architecture microservice event drive architecture aspect service mesh cover well wonder well approach mix service mesh event drive architecture leverage advantage pattern mix event drive bus kafka interfere internal working pattern side car proxy control plane istio,1,888,0,3.0,3,2019-04-05T07:49:21,0.0
59015505,1137582.0,<java><tomcat><microservices>,long request high memory tomcat,tomcat server tomcat server handle rest request call high memory usage server minute finally crash tomcat request crash tomcat exceed limit min rest request,1,48,4,0.0,3,2019-11-24T07:25:47,0.0
49992237,7789092.0,<docker><go><microservices>,multiple microservice integration test,learn microservice architecture confusion situation project write orderservice userservice tool web forward request communicate api request forward independent database container confusion test request follow step change code step unscientific abnormal step integration test microservice docker,1,184,0,0.0,3,2018-04-24T01:42:04,0.0
51593335,1781281.0,<microservices>,good manage microservice dependency,advise best manage microservice dependency assume microservice manage article operation create delete edit assume build top microservice book manage collection operation add delete edit call downstream endpoint service build microservice edit book good call edit endpoint book directly,1,81,0,0.0,3,2018-07-30T11:50:02,0.0
53209975,6037500.0,<orm><microservices>,resolve design dependency microservice,design commerce application microservice approach orm jpa datum persistence microservice orderservice orderservice functionality relate persist report order essentially include customer product customer product functionality manage microservice question orm layer orderservice pojo belong productservice customerservice good deal dependency service application design,1,268,0,2.0,3,2018-11-08T14:39:03,0.0
53184084,2700478.0,<domain-driven-design><microservices>,microservice transactional boundary bound context aggregate,question help decide microservice entire bound context aggregate aggregate microservice aggregate question rise mind microservice transactional boundary aggregate microservice transaction boundary bound context answer question depend rationale decision implement experimental microservice implement bound context aggregate transactional boundary aggregate face pain point eventual consistency microservice atomic update aggregate publication domain event microservice resilient decide domain event publish externally microservice decide domain event publish form integration event order preserve purity domain model envision possibility split microservice microservice aggregate natural publish domain event clear difference domain event integration event internal complexity microservice reduce manage find documentation subject guide decision edit sense consider bound context set microservice work partner microservice encapsulate aggregate scale strategy microservice reason change aggregate,1,173,1,0.0,3,2018-11-07T05:37:38,0.0
50830715,1062015.0,<azure><docker><kubernetes><microservices>,rest base service pod kubernete azure intermittent timeout,number rest base service azure kubernetes version cluster service communicate rest call typically follow typical intertwine micro service architecture manually docker instance work perfectly local test server moment kubernete azure intermittent timeout second micro service call kubernete networking service timeout repeat request correct response micro second stick point idea dynamic route virtualised network kubernete configuration idea,1,228,0,0.0,3,2018-06-13T06:48:18,0.0
50835738,9935556.0,<architecture><microservices>,monolith microservice task involve,curious task involve transistion monolith site microservice work redirect practise task involve transistion website short understand transistion transistion,1,179,1,1.0,3,2018-06-13T11:09:31,0.0
52568922,937440.0,<c#><domain-driven-design><microservices>,relationship domain event transactional consistency integration event eventual consistency,understand difference transactional consistency eventual consistency develop application three microservice message bus send message integration event raise eventual consistency example microservice publish integration event microservice handle hour microservice time event publish message durable fine understand transactional consistency inside microservice aggregate publish domain event aggregate interested domain event raise update database perform transaction understand cqrs fit transactional consistency eventual consistency scenario transactional consistency read model nosql write model sql server update inside transaction message bus update read model integration event read model write model inside microservice cqrs option event store write side read side poll solve problem event event log relational database write side domain event raise update read side option choose guarantee read model sync write model eventually example read model event raise,1,146,0,0.0,3,2018-09-29T13:42:10,0.0
52625025,4149331.0,<microservices>,design microservice practice,question split microservice scenario send email point time work flow ecommerce order process mail order persistence service retrieve order service subscribe order event process relevant case confirmation delivery invoice service trigger send mail step design architectural component transform order fit data structure email rendering service current option processing service transform exist order mail template send mail rendering service processing service call service aggregate transform order call mail rendering service currently sure data structure mail template common difference option term cohesion coupling separation concern constructive thought,1,74,2,0.0,3,2018-10-03T10:28:23,0.0
39721791,835058.0,<java><domain-driven-design><microservices>,reference aggregate factory implement domain drive design,aggregate store reference create employee provide company head client provide company word happen feel wrong introduce dependency aggregate order create bad separate microservice rest call company avoid coupling entity model incorrectly,1,61,0,0.0,3,2016-09-27T10:03:52,0.0
37864491,5749474.0,<architecture><restful-architecture><microservices>,microservice architecture handle composite request minor datum processing call service,example user payment step workflow lot service call payment email generation content generation front handle service design handle type request service design handle composite request hardcode request compose,1,1512,0,0.0,3,2016-06-16T16:19:04,0.0
37711051,1935918.0,<microservices>,example open source microservice application,open source application demonstrate pattern find application spin real cloud environment fake datum request demonstrate real deployment mechanic find good option note modern tier application rails api ember js postgre redi close monolith example microservice close find framework actual application deliver datum,1,1279,1,1.0,3,2016-06-08T19:16:46,0.0
43545080,2014334.0,<java><rest><jersey><microservices>,content type response rest call rest client jersey java code,work micro service hit rest api party spring boot application jersey library problem content type response text html charset utf hit call rest client content type application json charset utf java source code debug code responsecontenttype text html charset utf reason application json charset utf help appreciate,1,873,0,0.0,3,2017-04-21T14:19:51,0.0
50217813,9603499.0,<security><microservices><firewall><kong><api-gateway>,disable microservice initial expose port configure gateway,hello search find solution problem access api gateway configure endpoint currently access api localhost localhost kong gateway port secure configure point gateway initial port accessible wonder disable port access api kong,1,86,0,0.0,3,2018-05-07T15:35:30,0.0
56756980,1432503.0,<java><spring-boot><apache-kafka><microservices>,ensure order processing message,situation microservice architecture guarantee incoming message common identifier process order kafka example instance service process message kafka ensure process situation easily solve configure instance consume partition store message common indetifier order guarantee process wonder issue solve directly code rely infrastructure standard problem microservice architecture sure preferred approach solve,1,76,1,0.0,3,2019-06-25T15:02:00,0.0
56867951,7062483.0,<python-3.x><graphql><microservices><apollo><apollo-server>,problem integrate python graphene apollo federation,python implement graphql multiple microservice ariadne graphene graphene django microservice architecture choose apollo federation merge schema microservice ariadne simple schema small example pick problem apollo federation graphql query server graphene implement functionality ariadne result error apollo federation graphqlschemavalidationerror type query define field check matter find apollo call microservice graphql query microservice insomnia postman graphiql ariadne microservice graphene thing define check microservice response find graphene response send correct datum json response data equal reason apollo federation microservice schema,1,640,2,0.0,3,2019-07-03T10:21:33,0.0
57852689,1955934.0,<rest><apache-kafka><microservices><kafka-consumer-api><spring-kafka>,kafka msg rest call,nowadays microservice alot design workplace kafka message achieve result rest api call microservice technically rest api call altogether kafka message good practice pro con api call microsevice kafka messaging real life example inventory service vendor service everyday vendor service call vendor api item move inventory service number item object case well datum vendor api call rest api inventory service store item datum vendor api send message kafka topic consume inventory service choose consideration,1,184,2,0.0,3,2019-09-09T11:01:33,0.0
49302010,6762442.0,<java><web-services><java-ee><weblogic><microservices>,benefit split big monolithic application application,currently big monolithic ee application weblogic db typical oltp application consider split application application application database directly accessible application application expose interface functionality application major benefit split exist application application,1,262,3,1.0,3,2018-03-15T14:24:18,0.0
48482639,167511.0,<node.js><rest><express><asynchronous><microservices>,node js rest api wrapper async messaging,event drive micro service architecture asynchronous messaging solution implement synchronous rest api wrapper request rest interface wait response event publish send response client example post api article internally send createarticleevent service layer eventually expect articlecreatedevent response persisted article rest interface response client deal multiple simultaneous request keep memory map inflight request rest api layer key correlate identifier conceptually workable approach deal timing request period,1,284,3,1.0,3,2018-01-28T02:33:09,0.0
55915228,10415734.0,<api><kubernetes><microservices><access>,communicate service kubernete secure,node js microservice kubernetes find communicate expose endpoint accessible internally pod search hour find solution secure work,1,152,0,0.0,3,2019-04-30T06:39:37,0.0
45526675,7887295.0,<java><multithreading><rest><asynchronous><microservices>,async http request http request thread,microservice endpoint accept post request user post request happen service object post request body store database service convert object object object send service jersey http client step place java thread pool create executor newcachedthreadpool step thread response time service endpoint affect service long respond service create thread receive post request help thread pool exectuor newfixedthreadpool addition thread pool asynchronous block http client jersey http client block async http client switch thread pool async http client provide benefit wrong,1,1048,0,0.0,3,2017-08-05T21:48:09,0.0
45579511,1667188.0,<microservices><ab-testing><api-gateway><canary-deployment>,testing route client gateway api,work project base microservice internal app microservice gateway api authentication microservice aggregation netflix zuul spring boot clear routing testing canary testing assume client test version microservice client app change internal change function microservice provide understand stand microservice puzzle direct client version configure centrally change client mac address well identify attribute insert kind header identify message direct api test canary deployment,1,1622,0,0.0,3,2017-08-08T23:34:40,0.0
52753078,10470313.0,<design-patterns><service><architecture><microservices>,microservice datum ownership datum understanding,picture business entity reason decide respective piece datum notice system datum combine business logic apply meaningful separate service entire job package datum aforementioned service aforementioned service understand datum order meaningful work datum example bar service foo identifier property understand design smell,1,167,0,0.0,3,2018-10-11T05:49:30,0.0
57208825,11801257.0,<domain-driven-design><microservices><event-driven>,handle publish event message broker,handle send event suddenly message broker code imho eventpublisher throw exception event policycreate publish deal situation event publish system suppose good solution create kind retry mechanism sure,1,60,0,1.0,3,2019-07-25T19:17:09,0.0
54451013,1041953.0,<asynchronous><design-patterns><architecture><event-handling><microservices>,microservice client acknowledgement event sourcing,scenario build courier service system microservice sure thing scenario book api customer place order payment api process payment book notification api service responsible send notification complete system event drive architecture customer place book order commit local transaction book api publish event payment api notification api subscribe respective event payment notification api acknowledge book api question publish event booking service block call client front client app check status transaction transaction complete poll couple second distribute transaction service acknowledge case client front keep wait consider saga distributed transaction good achieve event source implement event source track complete track book order implement booking api event store event store share service suppose catch event service good implement,1,324,2,0.0,3,2019-01-30T23:15:56,0.0
54341324,680154.0,<apache-kafka><microservices><etl><apache-kafka-connect>,configure debezium datum separate topic base custom criterion,migrate kafka broker debezium datum etl datum micro service reporting search database configure debezium datum separate topic base custom criterion user company key column attribute row datum,1,197,2,1.0,3,2019-01-24T07:24:41,0.0
55166526,2367906.0,<architecture><microservices>,utility microservice merge dependant function utility microservice,tl dr analyze microservice architecture merge service avoid work break heavily dependent project spec complete request faulty iteration monolithic architecture question raise company afraid short sight decision architecture summary system microservice architecture amount microservice microservice jar kubernetes pod cluster jar expose single service http api service require user authorization authentication layer service assume request reach request header valid user token translate user token tangible user info request service currently service verify user meet service specific criterion meeting senior developer raise concern fail reason software relate assume machine allocate service faulty work opinion quasi monolithic architecture extra step suggestion avoid convert service static library add dependency service require service functionality depend remote api specification issue architectural issue api technically speak function current project spec unspecified suppose case simply fail service faulty reason personally short sight decision argue kind communication microservice deem risk case simply obvious potential point failure iteration break analysis thought endpoint service treat plan case image fetch service predefine placeholder image,1,135,0,0.0,3,2019-03-14T15:36:00,0.0
55163200,8018059.0,<java><spring-boot><microservices><spring-cloud>,good store constant field microservice architecture,server constant organize centralized change good store constant parameter microservice architecture example store static final int max people count field microservice change microservice great versioning parameter,1,386,3,0.0,3,2019-03-14T12:59:42,0.0
44965110,8269045.0,<node.js><backend><microservices><es6-promise><request-promise>,call rest api node micro service send result response,currently implement bff backend front architecture library hit microservice return result response bff microservice time return result pende state help main issue receive datum bff microservice microservice hit return result microservice hit help access result inside promise flow bff microservice handle request return response basis result receive microservice microservice code call microservice code,1,2066,0,0.0,3,2017-07-07T07:35:37,0.0
50400384,3455589.0,<java><spring><microservices>,microservice architecture bad share rest client library,service build java spring talk rest time add service pool create scratch code include rest client code talk service pojo class map resource request copy pasting source code service service well pojo rest client code library service consume save lot work code microservice copy paste exactly code difference,1,821,3,0.0,3,2018-05-17T20:57:09,0.0
57478585,11865837.0,<java><spring><rest><spring-boot><microservices>,consume rest service,create spring boot project communicate rest call ui loginform second project comunicate db fetch user send ui service project module datum module impl module data project common datum share ui service project jar add dependency ui project impl module service project impl module entity repository restcontroller service layer real logic application create ui project problem service data module create class user package org tu userdata service impl usercontroller inject userauthenticationservice wich interface implement userrepository application class strange userrepository visible directory bellow application class solve add componentscan annotation application class project build deploy fine access error add method usercontroller troubleshoot access application deploy port access remove code userauthenticationserviceimpl inject userrepository remove componentscan annotation well code removal reach message hello problem repository add top application class add code inject repository userauthenticationserviceimpl time outcome error delete entityscan annotation result idea wrong upload project github,1,134,4,0.0,3,2019-08-13T13:17:37,0.0
54582881,373201.0,<spring-boot><microservices>,spring boot bearer token request call microservice,spring boot microservice gateway authorization header request attach request pass request microservice currently work wonder well code sample jwt provide link code sample configuration jwt single microservice project call microservice pass token,1,1801,2,0.0,3,2019-02-07T21:51:27,0.0
51368809,3744900.0,<spring-boot><microservices><spring-cloud><netflix-eureka>,eureka client exception netflix discovery share transport transportexception execute request server,microservice create small application learn purpose code eurekaserver application yml eureka server work fine dashboard employeeclient application yml write serviceurl explicitly press ctrl space sts doesnot option serviceurl service url hyphen sign defaultzone jar specific version employeeclientapplication java employeeclientapplication java exception enablediscoveryclient place enableeurekaclient luck employeeclient pom xml mistake,1,4053,0,0.0,3,2018-07-16T19:23:02,0.0
42691892,4684766.0,<domain-driven-design><microservices>,microservice db table,microservice architecture commerce application table micro service basically crud operation rest client table combine model business domain encounter situation architecture suggestion helpful,1,715,2,1.0,3,2017-03-09T09:47:19,0.0
27839789,312586.0,<ruby-on-rails><ruby><multithreading><parallel-processing><microservices>,change producer consumer microservice allow parallel processing,couple microservice implement ruby doubt question provide item process mark process delete call provider endpoint list bunch item identify json format endpoint remove item list presumably process code simplified processor problem solve thread safe parallel worker start processing item simultaneously step toe list item process delete item simple change setup allow parallel processing assume ruby prefer keep change minimum install gem queuing system consumer,2,475,2,0.0,3,2015-01-08T12:06:52,0.0
32831192,4709492.0,<join><architecture><microservices>,microservice domain logic join,microservice deploy host database strategy employ business requirement necessitate join datum multiple service example problem implement movie review site movie microservice hold movie db review microservice manage review separate db review link movie guid implement separate datum store key constraint accurate minute report total number review review level group letter movie review word count word currently host review movie review word star star star star choose microservice architecture project strategy employ implement feature,2,247,0,1.0,3,2015-09-28T20:24:19,0.0
34841789,5801720.0,<docker><microservices><service-discovery><consul>,microservice service discovery random port,question relate microservice service discovery service spread host setup follow docker host host host consul server service discovery service service service service deploy time random port time host time host service communicate service example send request serviceb example hard code order ip port service query consul server srv record ip port pair client apply load balance logic simple handle develop client resolver lb library matter implement wrong,2,802,0,3.0,3,2016-01-17T18:09:16,0.0
33308154,5402844.0,<cloud><ibm-cloud><cloudfoundry><microservices>,blue green deployment microservice route traffic instance remaining traffic instance,instance microservice bluemix cloud foundry route traffic service remain traffic service bluemix,2,222,0,0.0,3,2015-10-23T17:25:00,0.0
49395113,8328365.0,<workflow><visualization><microservices>,visualization microservice flow,application multiple microservice visualize developer understand flow chart previous experience people draw flowchart question kind flow chart call software tool draw,2,657,0,0.0,3,2018-03-20T22:23:18,0.0
52146306,2861312.0,<microservices>,async response api gateway microservice,microservice architecture client app api gateway communication synchronous rest http api gateway micro service communication synchronous service service communication asynchronous understand user request api gateway turn call fist service return acknowledgement guid pass client application service keep execute request question pop notify client application request process completely client check status guid pass push notification integrate server server push notification,2,923,2,0.0,3,2018-09-03T08:54:01,0.0
44115310,5877779.0,<java><spring><rest><security><microservices>,sessionid lose request backend microservice,request microservice order retrieve list user role request frontend backend inside microservice follow call endpoint microservice microservice backend session lose retrieve context spring security redi session control manually retrieve session microservice add attribute header second call microservice work,2,662,2,1.0,3,2017-05-22T14:20:30,0.0
40960054,157017.0,<c#><azure><microservices><azureservicebus><azure-service-fabric>,service fabric microservice best intend continuous polling service bus,service fabric queue azure service bus continuously pull queue service fabric process message execute business logic save datum db remove message queue microservice check queue couple second monitor message question intended microservice pull datum process business logic save db stateless service reliable actor,2,1821,2,1.0,3,2016-12-04T15:12:29,0.0
44554638,2328781.0,<java><microservices>,guarantee interface microservice break,imagine microservice client server fundamental feature microservice architecture ability separated pipeline microservice meaning deploy production independently imply microservice develop team feature develop faster microservice contract interface break client server json client send server valid question prevent case communication microservice break break contract good strategy handle issue,2,374,2,0.0,3,2017-06-14T20:58:56,0.0
41285879,4959044.0,<asp.net-web-api><architecture><rabbitmq><microservices><easynetq>,microservice rabbitmq,microservice question rabbitmq easynetq send message microservice microservice microservice web api cqrs command handler consume message queue business logic order call handler request api method explicit call api endpoint hit code consume message automate call api endpoint suggestion create separate solution console app execute rabbitmq order start listen create loop read message call web api endpoint handle business logic time message send queue aim create listener startup task message queue automatically pick queue continue command handler sure automatic describe utilise azure webjob continuously consumer good architectural programming language appreciate,2,928,2,2.0,3,2016-12-22T14:53:49,0.0
40574379,312444.0,<microservices><amazon-sns><amazon-cloudformation>,sns cloudformation,aws cloudformation build stack microservice aws cloudformation template create resource lambda function sns topic api gateway microservice work publish message sns topic microservice subscribe topic problem face upgrade microservice cloudformation template redeploy recreate resource sns topic change microservice topic change well create separate cloudformation template sns topic microservice good approach recommend,2,813,3,1.0,3,2016-11-13T13:31:34,0.0
40564979,4986626.0,<c#><asp.net-web-api><microservices><azure-service-fabric><devops>,host wepapi service fabric,stand premise ms service fabric cluster webapi host resource standard webapi host service fabric create service fabric project migrate complex service fabric sample project project tightly couple service fabric goal keep app unaware service fabric link greatly appreciate,2,1347,0,1.0,3,2016-11-12T16:25:29,0.0
40645778,1914493.0,<soa><restful-architecture><microservices>,microservice wait response service,encounter question person scenario service service service interact service perform full functionality receive response lot request queue long time respond service handle scenario service wait wait respond response architecture faster,2,238,1,0.0,3,2016-11-17T02:33:58,0.0
53497953,2161118.0,<java><module><architecture><microservices>,difference module microservice,difference microservice api work modules microservice java well distinctively describe difference module microservice base experience module import microservice project microservice module kind additional capability expose restful endpoint distinctively differentiate module microservice vice versa discuss topic question clarify potential confusion add visual aid clarity refute provide reliable reference relation experience microservice module,2,1209,9,0.0,3,2018-11-27T10:48:13,0.0
48805353,6242317.0,<java><microservices><netflix-eureka><netflix-zuul>,call zuul enable server resttemplate,call enable server directly url example resttemplate getforobject employee class error question detail project github link branch master microservice server eureka server port microservice producer rest api port zuul gatewayproxy zuul server port microservice consumer spring mvc port call directly browser redirect request producer call url consumer error zuul sever call microservice producer microservice consumer,2,1619,2,0.0,3,2018-02-15T10:47:22,0.0
48934158,5007657.0,<amazon-web-services><spring-boot><microservices><netflix>,spring boot cloud microservice aw,create spring cloud microservice base application netflix api eureka config zuul explain deploy aws aws deploy development instance application integrate docker ahead docker well,2,832,1,1.0,3,2018-02-22T17:53:57,0.0
48961984,2443879.0,<microservices>,handle common variable microservice architecture,consider situation multiple service relay datum change time update microservice roughly time example list supported language common policy change day affect service solution microservice hold datum service current state drawback data change frequently http cheap lot traffic global registry service change service cache datum order time respond change quick change configuration solution externalize configuration aws example configuration file drawback track change file add logic verification change configuration correct typos question handle global configuration registry microservice http overhead audit change well introduce change time service,2,754,1,0.0,3,2018-02-24T10:50:34,0.0
49980008,0.0,<docker><containers><microservices>,container docker time,practical docker container knowledge document online detail container time docker allow container map port address container host machine question multiple container time docker container map port number port handle case curiosity container docker communicate,2,4789,0,0.0,3,2018-04-23T11:28:15,0.0
58058104,8552054.0,<kubernetes><microservices><grafana><minikube><istio>,access grafana istio dashboard ip address,kubernete cluster follow setup install istio plugin access dashboard unable access check firewall isn block port,2,127,0,0.0,3,2019-09-23T08:06:56,0.0
41082938,227705.0,<timestamp><microservices><cqrs><event-sourcing>,event source microservice manage timestamp,microservice generate event store event source repository cassandra store event datum order event generate event service machine manage time timestamp sync result event order mismatch,2,913,0,2.0,3,2016-12-11T04:16:25,0.0
49708997,9495775.0,<microservices>,simple application microservice,newbie microservice theoretical knowledge small application microservice help idea implement microservice advance,2,174,2,1.0,3,2018-04-07T15:36:40,0.0
50702676,3732480.0,<microservices><distributed-system><event-store>,solve general issue event store persistence layer,general problem eventstore persistence layer understand industry deal problem microservice persist object database time micro service feed datum micro service micro service write object event store question write object database event store fair roll thread app level database ideal error handle database online persist object event store error handle vice versa point understand today distribute high system system questionable thing happen understand database event store system cluster,2,238,2,0.0,3,2018-06-05T14:31:34,0.0
52579685,7127000.0,<events><service><architecture><event-handling><microservices>,event drive architecture service send event component forwards proper service,set event drive architecture service event propagate follow word publish event subscriber receive event publish event subscriber receive event service directly listen queue post message issue maintenance system complicated subscription difficult visibility update propagate solution propose problem service tree image responsible direct propagation event accord tree service publish event publish event listening service kinda middleman easy track event propagation downside extra cost associate message transferring,2,189,0,0.0,3,2018-09-30T16:09:15,0.0
43532494,1383500.0,<docker><spring-boot><ehcache><microservices><stateless>,ehcache application deploy docker stateless rule,spring boot application deploy multiple docker instance load balance instance application ehcache cache datum database application stateful session sticky customer hit docker instance result question apply session sticky load balance good practice deploy app cache feature docker style comply rule stateless,2,938,1,0.0,3,2017-04-21T01:37:26,0.0
50041559,9368514.0,<domain-driven-design><microservices>,share common datum microservice,write bachelor thesis microservice split monolith microservice problem table database relevant microservice chance split data domain specific view approach create database schema specific table microservice read share kernel approach recommend expert microservice experience recommendation problem recommendation book problem,2,369,5,1.0,3,2018-04-26T11:15:02,0.0
56790523,2544242.0,<api><microservices>,api call microservice architecture,sure question explainable explain currently explore play microservice architecture work learn understand thing work role api gateway architecture theoretical question example imagine service event manage event service ticket manage ticket relate specific event ticket service depend separated database completely isolate loosely couple ideal microservice environment imagine fetch event ticket relate event display mobile application web spa application call multiple service urls fetch datum output ui completely scenario well fetch aggregate data reading source call service service add latency service depend future change service break great idea repeat question althought find opinion meet question earlier explain flow well,2,120,1,0.0,3,2019-06-27T12:00:46,0.0
55791575,2693928.0,<microservices>,microservice join,create app microservice display item product product multiple join category tag user user category datum service manage filter result example sql create join microservice filter category filter tag product time slow speed sql query table product category set category product service responsible product service category service,2,50,0,0.0,3,2019-04-22T08:41:52,0.0
55723434,937131.0,<angular><microservices><single-page-application>,angular microservice environment,build angular typescript application year project involve micro service architecture encourage split small usable sensible load main independently regular html interactive content easy case search function list function detail modal thing interact react event preferably spa require load navigate classical angular app build module component turn common share component lazy load share routing set single angular application keep micro service standard architecture desirable front module angular micro service good find library solve create multiple small app sew framework require great deal bandwidth frontend download thing multiple time glance complicate task benefit regular angular app app work impact angular spa main goal standardized metric well create single spa split micro service variant,2,371,2,0.0,3,2019-04-17T08:43:30,0.0
48438747,1613902.0,<java><jhipster><microservices><production-environment>,jhipster microservice create dynamic instance microservice production,jhipster microservice microservice microservice microservice applications jhipster registry application api gateway application work application production problem mode instance application microservice instance microservice instance microservice instance jhipster registry instance api gateway instance follow instance dynamically automation microservice instance microservice instance microservice instance jhipster registry instance api gateway instance wonder instance dynamically manually instance microservice create instance service good practice jhipster configuration set application prod yml port set creation application avec server create instance server conflict ip port port configure application prod yml solve good idea create multiple configuration file port case instance microservice solve problem read idea,2,458,5,0.0,3,2018-01-25T08:40:53,0.0
45559979,5219482.0,<spring-security><oauth-2.0><microservices><spring-cloud><spring-security-oauth2>,access token authorization microservice,create online store rest api mobile app plan microservice architecture spring cloud framework spring cloud oauth security question good practice communication microservice service register token pass user token example service user service account service order service implement procedure create order pass user token service token feign approach option order service account service account current order service call account service return account base userid token order service create order account option order service account service account user userid order service userid send token call account service token create order retrieve account sure option good well separate require feign client require client easy block endpoint client require extra endpoint create service dig authentication object thought implement system entirely completely wrong idea help appreciate,2,1622,0,0.0,3,2017-08-08T05:30:47,0.0
52754251,1322173.0,<java><spring-boot><java-8><microservices><docker-swarm>,spring boot micro service consume lot memory docker swarm,docker swarm container ubuntu lts instance azure container java spring boot netflix oss application eureka ribbon gateway application obseverd container huge size memory service rest endpoint limit memory consumption pass java vm arg help size change note configuration java version java alpine kernel version azure operating system ubuntu lts ostype linux architecture cpus total memory gib memory footprint java vm argument application log file container find memory relate error limit container resource work clue troubleshoot heavy memory issue,2,441,0,0.0,3,2018-10-11T07:08:56,0.0
51926575,2396065.0,<java><spring><spring-boot><microservices><cqrs>,link datum java microservice database service implementation,build java spring microservice service database user service store user table order service store username person order describe order service question good approach firstname lastname user service list order aware microservice communicate rest api user order loop time firstname lastname username array activity expensive read cqrs event sourcing sure best apply scenario,2,367,4,3.0,3,2018-08-20T08:13:36,0.0
45022849,0.0,<google-cloud-platform><aws-lambda><microservices><alexa><api-ai>,integrate api ai amazon alexa,unable integrate api ai export code amazon alexa intent schema sample utterance correctly fill place https endpoint lambda function trouble skill build api ai google cloud function write nodejs script url close https cloudfunction net security reason write exact url api ai work expect alexa lambda testing error remote endpoint call response return invalid ssl certificate development endpoint certificate trust certificate authority counterpart ssl certificate option development endpoint domain domain wildcard certificate certificate authority lead handshake error upload sign certificate format request guy help issue,2,1864,0,2.0,3,2017-07-10T22:52:35,0.0
56201788,2814580.0,<rabbitmq><domain-driven-design><microservices><event-driven-design>,guideline identify rabbitmq queue bound context ddd,domain drive design arround rabbitmq queue totally guideline identify queue consider bound contexts stuff queue bound context queue resource type bound contexts queue cross bound contexts thing complicate advice,2,114,0,1.0,3,2019-05-18T18:31:22,0.0
51515839,2933686.0,<node.js><mongodb><google-app-engine><google-cloud-platform><microservices>,nodejs connect mongodb cloud shell,mongodb server host google cloud vm create app engine microservice test connectivity server js work perfectly connect vm work execute npm start code google cloud shell error exactly error deploy service gcloud app deploy help,2,4363,7,0.0,3,2018-07-25T09:47:36,0.0
28387907,2638485.0,<message-queue><soa><microservices>,push datum queue pull datum worker,build web site backend involve client submit request perform expensive time operation expensive operation involve gather set complete work client submit fully describe hope service orient architecture soa multiple micro service client communicate backend restful communication http plan queue worker perform expensive operation poll work queue persistence offer decent reliability semantic consideration gather datum expensive operation upstream enqueue datum enqueue worker fetch datum diagram architecture consideration push base gather datum upstream pull base worker gather datum thing push base case block gather datum client http request respond data gather enqueue ui standpoint request pende response pull base scenario worker data require work multiple type client talk backend data change update worker upstream service thing,3,1012,0,0.0,3,2015-02-07T21:57:31,0.0
35441660,2585494.0,<jboss><microservices>,micro service jboss,jboss micro service architecture choice jboss change application server decide client architect choice develop micro service underlie jboss application server understand spring boot embed tomcat container flexible start deploy individual service impact service architecture work jboss,3,3041,0,0.0,3,2016-02-16T19:42:39,0.0
35913253,5520357.0,<cordova><spring-boot><microservices>,microservice base monolithic,read lot microservice structure lot advantage maintainability build mobile app spring boot phonegap pull news restful web service build microservice add service rebuild application future add service worth build microservice base application small mobile app,3,672,0,0.0,3,2016-03-10T10:03:10,0.0
34158847,1558717.0,<rest><server><publish-subscribe><microservices>,inter microservice communication rest pub,theory mind rebuild backend split thing microservice microservice imagine start order store order detail status order customer store customer detail address order book service provider store service provider detail status location service provider order currently process service provider payment store payment info order channel communicate customer email sms mobile push hope pub create message corresponding datum microservice subscribe message understand concept microservice complete code datum isolation instance vms microservice communicate strictly http rest api contract doubt follow list order order db order order document mongodb storage customer foreign key issue resolve customer customer order assumption order unique customer associate rest api call time customer datum replication good solution problem envision pub business center personnel mark order assign select service provider allot order create message cross server pub channel channel microservice totally instance vm capture message send push message sms service provider device datum message content update question order microservice completely independent microservice build side side channel microservice example microservice depend event place order microservice guide technology library develop java mongodb amazon aws instance microservice appreciate help,3,1275,0,1.0,3,2015-12-08T14:49:01,0.0
30649582,180253.0,<domain-driven-design><soa><composition><microservices>,normalize denormalize datum microservice service composition,development team work microservice month pick lot steam experience moment time humble move closer move platform production area finger treat datum service boundary hear lot statement form large company implement microservice straight advice reasoning service domain assume object associate option service domain regard manage datum store store entire object reliable service orient development team netflix amazon nike statement follow normalization root evil break share share,3,1012,2,1.0,3,2015-06-04T16:43:12,0.0
42836979,2849613.0,<amazon-web-services><heroku><microservices>,dyno multiple process,question regard heroku architecture create small app microservice lot microservice point app free dyno hour expand plan heroku call question microservice process web heroku ability install web process dyno scale app word microservice buy hobby dynos,3,1124,0,0.0,3,2017-03-16T14:31:27,0.0
42199241,2556958.0,<node.js><web-services><amazon-ec2><microservices>,efficient communicate microservice architecture,node js rest base light weight web service communicate server efficient communicate server ec instance vpn,3,639,0,0.0,3,2017-02-13T08:03:56,0.0
41850142,4383715.0,<mysql><database><go><microservices>,microservice centralized database model,currently database model migration provide gorm golang package big mysql database microservice law replace afraid microservice number start grow lose database model add column microservice type terminal cli migrate command refresh database good practice manage example microservice type refresh model centralized database service add column store model migration problem service database model change store example user service,3,1655,3,1.0,3,2017-01-25T11:13:51,0.0
52964076,4983899.0,<node.js><typescript><microservices><mqtt><nestjs>,valid messagepattern nestjs mqtt microservice,setup mqtt microservice nestj accord start work mosquitto broker docker verify operability mqtt client start nestjs service connect correctly mqqt fx client unable receive message controller bootstrappe doc main app controller message pattern decorator wrongly concept wrong nestjs mqtt microservice suppose subscribe topic pass decorator source correspond,3,1208,0,2.0,3,2018-10-24T08:18:25,0.0
38254720,6562537.0,<microservices>,migrate monolith micro service architecture,initial stage design micro service client standard monolith app sit jboss server datum center micro service architecture target cloud base deployment deploy micro service premise production ready tomcat jboss good fit,3,331,1,0.0,3,2016-07-07T20:30:29,0.0
43814764,0.0,<testing><go><integration-testing><microservices>,test microservice,question subjective lose moment kit write microservice test endpoint microservice integration test type fashion unsure thing shell script hit endpoint check response kludge real smart practice feel well suggestion,3,672,1,0.0,3,2017-05-05T22:46:35,0.0
47042162,387774.0,<amazon-web-services><amazon-s3><aws-lambda><microservices>,lambda code store,read lambda faq store code encrypt stored decrypt edit code,3,3526,0,1.0,3,2017-10-31T18:21:25,0.0
53845396,3178776.0,<apache-kafka><microservices><vert.x>,vert event bus replace kafka,evaluate vert framework reduce kafka base communication microservice develop spring boot question replace kafka vert event bus spring boot microservice vert base verticle pointer great help advance,3,1261,0,1.0,3,2018-12-19T06:01:08,0.0
48624757,3467733.0,<java><spring-boot><apache-kafka><microservices>,asynchronous message passing microservice,plan develop microservice base architecture application decide kafka internal communicaton read book microservice architecture ronnie mitra matt mclarty mike amundsen irakli nadareishvili netflix eureka service registration discovery zuul edge server hystrix practice implement kind microservice microservice indipendent communcation channel case kafka directly interact channel extra layer publisher subscriber kafka update precise couple microservice publish news topic activemq kafka microservice subscribe topic operation message service couple message broker channel message broker api embedeed code example change message broker change microservice message broker api microservice picture assume event hub dispatcher message component interact channel,3,871,2,2.0,3,2018-02-05T14:27:51,0.0
48942153,2224344.0,<microservices><cqrs><event-sourcing>,event sourcing cqrs microservice,understanding database transaction span microservice solve problem message broker kafka rabbitmq publish event subscriber microservice update database listen event case exception send event failure subscriber service update state sufficient problem approach event sourcing event sourcing,3,2611,0,2.0,3,2018-02-23T06:11:21,0.0
47656406,3609255.0,<domain-driven-design><microservices><business-logic>,class business logic domain object,doubt regard call domain object eventually place class domain package micro service responsibility calculation actual business requirement calculate return intereset base request achieve calculation calculation place compose class calculation persist db definitely entity aggregate individual calculator class lack terminology complex business logic question individual class qualify classify domain object refer service feel free clarification case cheer,3,302,2,0.0,3,2017-12-05T14:49:15,0.0
58820461,6456586.0,<java><maven><jenkins><microservices><pom.xml>,maven build microservice lib repository,spring microservice separated git repositorie microservice share library separate repository well library artifact dependency pom configure jenkin build microservice library library build prerequisite build microservice manage handle maven jenkin advice,3,62,2,0.0,3,2019-11-12T14:16:06,0.0
39591223,2371715.0,<architecture><soa><microservices>,soa microservice exist,document build microservice base architecture monolith microservice soa base architecture,3,800,0,0.0,3,2016-09-20T10:04:15,0.0
55802876,11058704.0,<java><spring-boot><microservices>,dto multiple services redundant dto,follow micro service arch application develop spring boot explain problem consider service api service consume service dto api project service question project create redundant dto class consume service api create separate jar dto reuse multiple service approach follow situation,3,107,0,0.0,3,2019-04-23T00:54:40,0.0
45363163,0.0,<spring-boot><microservices><spring-cloud><spring-cloud-netflix>,difference netflix zuul server netflix eureka server,create java spring boot micro service producer consumer spring eureka server service registration discovery work fine netflix zuul,3,6885,0,2.0,3,2017-07-28T00:46:18,0.0
54230664,1484232.0,<spring><spring-boot><spring-integration><microservices><spring-cloud>,integrate microservice transaction,build web base industrial application question hammer head day integration microservice architecture microservice pinch salt totally embrace concept define real microservice big difference rely fact shared database module call microservice sort logical view system draw thing figure client external system frontend application access backend module discovery routing pattern consider mix netflix oss eureka zuul provide service module register service registration module api gateway coordinate register find service instance fullfill request module database client request architecture decision point personally stuck communication module read ton pattern anti pattern single api integration resttemplate specialized client feign ribbon tend dislike approach reason synchronous stateless nature http request stateless ly nature http big issue service layer module strong binding example action fire module ramification modules coordinate transaction standpoint http good control java ee inside scream kind service integration ejb rmi http natural wire service module inside module sure participate transaction thing emphasize paradigm eventual inconsistency database client deal serious kind datum promise good data fit well time question service integration thing deal microservice resource integration win spring example provide spring integration enable messaging service tech ejb good integrate service ps call microservice microlith,3,172,4,1.0,3,2019-01-17T07:06:55,0.0
45111662,3555583.0,<architecture><soa><microservices>,microservice common user table,design microservice base architecture microservice separate independent database common user table,3,590,0,1.0,3,2017-07-14T21:11:33,0.0
44946517,7434324.0,<angular><jhipster><microservices>,unable jhipster gateway,unable open jhipster angular gateway application port server port application dev yml error console completely load route work fine application fine port provide yarn problem port yarn unable communicate micro service application,3,1042,1,0.0,3,2017-07-06T10:34:22,0.0
50328886,3759528.0,<docker><nginx><kubernetes><microservices>,setup nginx reverse proxy rest microservice kubernetes,rest microservice setup nginx reverse proxy confused approach follow nginx pod application code nginx separate pod redirect http request application code separate pod explain well,3,453,2,2.0,3,2018-05-14T11:11:19,0.0
29071226,497300.0,<architecture><microservices>,good practice promote microservice public api,microservice good fit software watch read number article martin fowler sam newman adrian cockcroft sudhir tone deeper implementation number concern software ui call web base component component coordinate orchestrate call microservice internally call private microservice return datum ajax call good design couple orchestration logic component create microservice job web base component thin delegate call microservice expose public api separate layer delegate call case design pattern public private microservice good pattern address concern update apr api gateway pattern address concern agree answer regard eai pattern security consideration extend regard finding netflix architecture call edge service front tier serve request web base device middle tier service microservice promote middle tier service edge service delegate keep middle tier clean consistent idea,4,1253,0,3.0,3,2015-03-16T07:03:15,0.0
31206417,1344546.0,<architecture><soa><transformation><microservices>,soa microservice normalize transform message,develop solution adapt message pattern microservice define business flow component gateway initiate transaction flow bpm store rule service call flow service selector kind processor request gateway flow definition call appropriate service functional service define multiple flow step call service output service input problem schema transform normalized responsible transformation configurable add flow redeployment idea store response service step xslt transformation produce input xml previous response configuration hell create test xslt easy suggestion solve properly,4,694,0,1.0,3,2015-07-03T12:03:08,0.0
26706240,127320.0,<12factor><microservices>,factor recommend daemonize process,disadvantage,4,368,0,0.0,3,2014-11-03T00:41:11,0.0
33680497,835883.0,<java><microservices>,java microservice,search web confused exactly java microservice web service microservice follow wiki property microservice concrete java example understand microservice example provide,4,2761,3,5.0,3,2015-11-12T20:16:11,0.0
32534401,5327398.0,<architecture><soa><microservices>,soa microservices api rest soap,face big dilemm company work microservice architecture switch full soa eco system consultant developper well soap web service allow validate format developer team scare soap restrict base experience soa microservice architecture well soap rest api advance helpful feedback,4,6827,0,5.0,3,2015-09-12T01:59:21,0.0
53108190,10592908.0,<domain-driven-design><microservices><nservicebus><soa>,order inventory ddd allocation reservation handle,refactor legacy order handling stock system clean service orient event drive architecture difficulty decide service responsible reservation allocation stock overview current system sale order place third party system order stock order item stock allocate reserve stock order straight stock procure stock supplier purchasing system item arrive supplier system search open sale order item reserve allocate stock prioritise sale order identify service develop sale responsible receive sale order insert database domain entity order orderline inventory responsible keep track stock warehouse domain entity stockitem allocation reservation stock concern inventory sale sure behaviour point help thought,4,373,3,1.0,3,2018-11-01T19:32:48,0.0
44114755,2518694.0,<spring-boot><microservices><distributed-transactions><2phase-commit>,phase commit micro services spring boot,mico serif connect seperate database mico serif persist save object transtation achive spring micro servie netflix oss suggestion good achive phase commit,4,2632,0,1.0,3,2017-05-22T13:55:56,0.0
51040814,6429614.0,<.net><asp.net-core><architecture><microservices>,micro service share library code duplication,question time case worth specific case face develop micro service netcore call service servicea serviceb servicec common entity servicea call servicec servicec respond json content serialize responsec object servicea servicec responsec class point possibility responsec class share library servicea servicec reference share library read statement share library micro service lead solution introduce responsec class micro service find bit maintainability code duplication common logic servicea serviceb communicate servicec communicate servicec intend policy regard read connection timeout regard maximum number retrie configurable common retry logic read relevant configuration file wrap http call question pretty previous case class share library basically introduce class servicea serviceb class simple generic moment imagine class change frequently question well case duplicate code independent micro service introduce shared library service dependent,4,1523,3,1.0,3,2018-06-26T10:37:23,0.0
40786831,3364697.0,<kubernetes><microservices><kubernetes-helm>,version control kubernetes application,check helm sh course glance entire setup complicated helm client tiller server helm client case currently project compose service create directory call follow usual git stuff apply everytime change change spec file test write update script help move version current version commit tag question work tiller server simple templating client side course separate activity deployment knowledge application secret templating happen server,4,1222,0,1.0,3,2016-11-24T12:48:39,0.0
38989659,2068521.0,<spring-boot><microservices>,error mvn spring boot child container fail start,spring tool suite work fine command prompt mvn spring boot error pom xml,4,8118,2,0.0,3,2016-08-17T06:37:27,0.0
42562820,3443096.0,<domain-driven-design><microservices><bounded-contexts>,ddd share kernel pure event drive microservice,break system bound contexts study design survey planning concept subject potential subject interview study design context maintain association subject population domain survey planning subject example plan visit anticipate selection questionnaire case population subject belong subject contexts approach pick share kernel explain eric evans ddd book mind contexts share database pure microservice share database case mirroring duplicate route event pass thought well situation,4,4750,1,1.0,3,2017-03-02T18:10:44,0.0
58084819,10423650.0,<java><rest><api><spring-boot><microservices>,call rest service service course registration system spring boot,rest call student course micro service registration micro service insert registration call service student micro service error good resolve problem search google find relevant solution regard problem help registrationservice class call micro service code work call micro service relate info registration json student json course json json student java registration java,4,112,9,0.0,3,2019-09-24T16:43:07,0.0
47554214,852330.0,<domain-driven-design><microservices><cqrs>,design choice microservice event drive architecture,suppose follow ddd aggregate reference microservice manage expose follow command create delete link unlink microservice managing expose follow command create delete successful creation deletion link unlink result emission corresponding event microservice perform action good design event drive architecture microservice eventually consistent consistency reference exist event microservice easily project separate read model query span follow example lead transient inconsistent state consistency case eventually restore example initial consistent state exist link command link example initial consistent state exist exist link command delete example initial consistent state exist exist link simultaneous command link delete solution mind solution microservice allow link receive create event delete event microservice allow deleting receive link event event follow unlinked event microservice listen delete event receive event unlink race condition delete receive link event solution microservice allow link microservice listen link event receive event verifie exist emit link refused event microservice listen delete link refuse event receive event unlink edit solution propose guillaume microservice allow link receive delete event microservice allow deleting microservice listen delete event receive event unlink advantage solution microservice keep track event emit service solution basically microservice maintain read model potential disadvantage solution add complexity project event read model microservice aggregate follow pattern add system dis advantage solution anti pattern aware avoid cost well solution propose advice appreciate,4,456,0,1.0,3,2017-11-29T13:39:28,0.0
45311236,8365528.0,<jhipster><microservices>,microservice talk microservice jhipster,plan create microservice aplication dedicated service deal datum mongodb base service wonder microservice communicate service share datum jhipster api gateway achieve keep multiple copy datum microservice,4,2352,2,0.0,3,2017-07-25T18:41:32,0.0
50324219,1103397.0,<php><microservices><cqrs><event-sourcing>,implement cqrs php,cqrs pattern team develop system base cqrs php simulate event system php find cqrs implement better easy programming language event base sure question develop system cqrs pattern php reliable switch event base programming language consistency kind benefit cqrs micro service system pattern reliable easy implement,4,822,0,1.0,3,2018-05-14T06:29:06,0.0
29830038,345588.0,<logging><trace><microservices>,log microservice,assume number web api microservice write language framwork asp net web api nodejs flask log request service prefer centralized log method tool regard daníel,5,2070,0,6.0,3,2015-04-23T17:04:04,0.0
34094882,4811540.0,<git><docker><git-submodules><docker-compose><microservices>,store submodule micro service fork,stump lot place wrapping figure micro service architecture separate repository docker docker compose build development environment work beautifully question package main collection repository folder structure service service service git repository thought git submodule work enforce policy require developer fork repository work main repository continuous integration constraint code review overly excited git submodule caveat alternative solution prefer moment write script store list repository query log developer fork create pull master folder boot docker compose horrible solution write doc dev manually process thought time,5,1093,0,2.0,3,2015-12-04T18:18:43,0.0
31046924,506712.0,<microservices>,building authentication microservice architecture,develop app microservice distribute microservice allow auth read microservice database avoid couple problem authentication jwt user microservice access database table user suppose problem solve application deal issue solve,5,3299,0,5.0,3,2015-06-25T09:52:50,0.0
42981194,1056679.0,<architecture><microservices><software-design><distributed-transactions>,handle validation composite microservice request,consider application entity basic user datum authentication credential password internal microservice responsible create manage user basic datum responsible user authentication password handle entity belong entity belong service separate solve task profile datum authentication consider registration form three field mail password form trigger http request intercept request application route internal microservice compose aggregate gateway service receive request form datum follow call create user respond generate call create passport newly create user receive step field original request pretty straightforward happen unavailable step separate request classic approach eventual consistency create entity asynchronous call place request queue process separate service order send asynchronous request passing step step return response client field properly format break validation rule validation logic password correct call request process asynchronously user correct password properly handle validation distribute composite request microservice application naive solution move validation logic terrible idea fat leak business logic idea provide additional method password validation call prior step viable solution force method business method microservice prior validation actual operation time space validation operation earlier correct incorrect operation perform split form avoid composite request user password personal datum create account lead security problem user account intercept party guess additional security token introduce odd functionality service setup complex approach attempt escape problem avoid composite request full scale distribute transaction system dramatically complex mitigate msa place final idea merge service sense microservice architecture,5,1553,0,0.0,3,2017-03-23T16:01:34,0.0
36792713,1792564.0,<angular><distributed><microservices><angular2-template>,dynamic component load external content,system work consist number distribute microservice multiple version component active time angular app attempt build interact component websocket unfeasible prepare application future version feature component respective protocol implementation component push responsibility component component communicate capability form ng component well protocol implementation gui element html cs package send websocket connection pattern enable kind demand loading component template ng,5,1277,4,0.0,3,2016-04-22T11:31:26,0.0
53024293,5375880.0,<java><spring><web-services><microservices>,invoke dependent microservice,microservice service service database service entitya service entityb spring resttemplate retrieve saving datum problem retrieve entitya service database datum entityb hold service db understand rest call resttemplate retrieve entityb service db relationship entity entitya entityb object inside field null time advance,5,113,0,2.0,3,2018-10-27T17:01:20,0.0
43384538,5107842.0,<azure><docker><microservices>,database location microservice architecture,monolithic application convert microservice architecture container microservice stateful insert retrieve datum db microservice architecture microservice datum database case question database microservice deploy host microservice deploy container microservice deploy separate server azure db pro con approach good approach accord microservice good practice,5,657,4,0.0,3,2017-04-13T05:57:03,0.0
36197572,1036494.0,<java><rest><spring-boot><microservices>,improve communication microservice,company spring boot microservice spring cloud happy infrastructure concern rest comunication protocoll find great find well rest client server restcontroller server http method param body querystring easy rmi technology language independent life easy interface implementation search find interesting project feign client spring cloud stream silver bullet topic problem feel approach advance,5,3272,0,0.0,3,2016-03-24T10:07:12,0.0
36144330,2483271.0,<node.js><meteor><amazon-ec2><docker><microservices>,scale microservice docker,create node js meteor application strategy handle scale future design application set microservice consider implement production microservice server instance maximise resource usage whilst small number resource container curious create dynamically scaling set container write command provision app container server container app reach cpu limit metric provision prepare server extra container load balance connection container affect server load balance send connection server container aw ec docker compose nginx uncertain direction,5,530,3,1.0,3,2016-03-22T00:49:13,0.0
47364834,3924219.0,<javascript><node.js><microservices>,share code micro service justified situation,answer blog post share code microservice wonder suppose follow advice follow microservice communicate rabbitmq express server background service completely code request worker multiple instance request worker suppose process request return direct reply rpc question write class offer method schedule request allow share code microservice code communication microservice avoid share code microservice left side,5,297,7,1.0,3,2017-11-18T10:09:25,0.0
47527983,7600634.0,<java><scope><package><domain-driven-design><microservices>,designing java project monolith microservice time,divide project module java monolith possibility transform module micro service personal naming basically product management context sale context package module communicate public interface api package project api productfacade centralize communication point sale module grow turn microservice implement api productfacade interface rest soap client side create endpoint restcontroller base productfacade interface package company shopapp product api transform extended library add project edit achive box feign library idea feel nice well design project ensure break micro service break application,5,519,2,0.0,3,2017-11-28T09:25:20,0.0
55986736,122769.0,<c#><microservices><uuid>,create short readable uuid microservice distribute environment,work break super monolith web service microservice approach cqrs event source consider previous architecture depend sql server incremental identity number table unacceptable distribute system rely database projection event system keep relation transfer analytic api call obvious option guid fine point request hmm pretty kind cumbersome work guid key database performance hit answer generate base find global solution solution guarantee global uniqueness short guid clear option guid service distribute lock redi generate epoch unix tick performance hit concurrent create request bother shorten guid find solution human readable solution global unique identifier implement,5,216,0,1.0,3,2019-05-04T20:58:23,0.0
56082458,4322228.0,<architecture><microservices><grpc><proto><grpc-go>,grpc organization microservice,create system microservice architecture microservice live repository file protobuf definition grpc method signature generate server client structure proto definition appear code dependency repo proto definition depend repo repo proto file generate code well approach,5,203,1,2.0,3,2019-05-10T17:42:09,0.0
51520654,8467343.0,<microservices><distributed-transactions><saga>,distribute transaction microservice,microservice invoke update datum insert datum consider fail rollback datum update inconsistent state saga pattern satisfy inconsistency well solution,5,1021,0,1.0,3,2018-07-25T13:52:15,0.0
30173267,520730.0,<architecture><soa><microservices>,microservice architecture cross domain chattiness,project employ microservice architecture feel pretty good size granularity individual service exception security service three main service service communicate three service regularly talk http request variety reason big request individual service spawn request security service turn extra hop account load balance read software architecture pattern mark richards recommend instance share database violate dry copy require functionality service example small utility class apply instance security service big definitely copy service big feel great copying paste relevant code accord coveralls java lot actual code easily turn module service bring service share dependency bite course security code grow time add authentication method reinvent wheel auth integrate library authentication service imagine code base huge question copy paste code build module service bring,6,966,6,3.0,3,2015-05-11T16:48:08,0.0
48279479,1682667.0,<microservices><cqrs><event-driven>,query event drive microservice architecture,suppose follow simple uc base cqrs architecture backend manage business object movie backend compose microservice commandmanager create update delete movie querymanager query movie frontend offer web create movie action lead automatically web describe movie simple web collect movie form send frontend frontend post request commandmanager commandmanager write movie datastore return movie key frontend key querymanager querymanager movie datastore key return frontend deliver movie transform uc event drive flow web collect movie form send frontend frontend write message bus movie commandmanager listen bus create movie datastore eventually publish message bus movie create point frontend wait response fact kind flow asynchronous complete flow order forward user movie web wait creation process query querymanager general term asynchronous architecture base bus event execute query provide web,6,1133,0,2.0,3,2018-01-16T10:50:06,0.0
43246560,3199335.0,<architecture><domain-driven-design><microservices>,microservice architecture chatty service datum duplication,tl dr service opt save datum local database occasionally request datum time service datum originate generic example web store order app service user session management service handle business logic user user create shirt purchase service data aggregator lot inventory user start create shirt service request service style color service send list choice service display user user select customize move shirt service request service style color assume life cycle user session style color change datum retrieve user user case style color service domain stay live advise prevent needless call request temporarily save service data lifecycle session prevent chatty service simplified example problem remain real suggested architecte design apply example fairly static datum pass service service data time lifecycle transaction unsure service save temporarily life cycle data change care change lifecycle opt chatty service keep request time,6,850,0,1.0,3,2017-04-06T05:39:28,0.0
37409153,5471259.0,<azure><microservices><azure-service-fabric>,cluster endpoint reachable check connectivity firewall dns issue,currently work cloud technology current project create service fabric cluster azure connect cluster windows powershell error resolve issue regard pradeep,6,3480,2,0.0,3,2016-05-24T09:14:05,0.0
52298830,9860374.0,<java><rest><spring-boot><architecture><microservices>,datum validation microservice,read lot topic find well approach user post microservice spring boot front call microservice send request check exist database throw exception front user exist insert request body question check backend responsibility front javascript client side malicious user bypass check option rest communication microservice post microservice call user microservice exist side post microservice access user microservice database understand communication create couple sure post access user database good option feel free option,6,1262,1,0.0,3,2018-09-12T15:32:41,0.0
30908112,540339.0,<architecture><microservices>,micro service cross service dependency,simplify situation currently micro service authentication location inventory authentication service authenticate user send jwt access token service stateless work well setup location thing location service work well expect inventory service add inventory link location easily pass locationid api call authorize current user add location call location service validate create service dependency avoid cost lose benefit micro service recommend approach validate current user permission location thing location api issue access token additional claim location access issue completely separate token kind pass header inventory micro service validation jwt authenticate edit mention provide aggregate root assume api gateway provide option service top communicate provide leave service dependent increase service dependency,7,4465,1,2.0,3,2015-06-18T06:36:30,0.0
39839881,2803046.0,<oauth><oauth-2.0><authorization><access-token><microservices>,pass oauth access token service,consider follow scenario context sso oauth microservice user log web application oauth implicit flow web app request datum service service pass user access token authorize request service call service pass access token order build response initial web app request pass user access token service service service client credential grant access token authorize call service update assume service organization trust authorization server service api gateway validate access token,7,3390,0,3.0,3,2016-10-03T20:28:57,0.0
55139830,1727204.0,<architecture><microservices><event-driven>,differentiate microservice logic config service,data processing pipeline receive datum source entire pipeline implement event drive architecture microservice service three separate task completely common source datum third task scope change depend datum source example source unique signature calculate base file file source calculate base field field good implement service align microservice granularity principle three approach mind create single service implementation source factory design pattern depend source implementation time pro number service complexity con service share datum source add datum source service deploy create implicit dependency service service responsible collect datum source break service service source reimplement extract service datum source pro dependency collector service add source service implement require redeploy service relate source con service service small face nanoservice issue future change granularity service create instance service time config set field source case code share time instance depend source belong pro number service operational dependency con move complexity logic time deployment operation challenging,7,171,12,2.0,3,2019-03-13T10:36:36,0.0
52318727,1633190.0,<java><php><automated-tests><microservices><acceptance-testing>,create acceptance test async micro service,microservice create user user creation complex queue user create consumer endpoint request return fail create acceptance test acceptance criterion user register api request user creation create user set host environment user wait environment set second implement sleep inside test hit anti pattern properly test fail good practice,7,271,1,3.0,3,2018-09-13T17:17:30,0.0
36832219,3837883.0,<caching><redis><microservices>,redi number micro service,redi investigate redi day read documentation cache management lru cache command implement caching multiple microservice datum question microservice datum cache keep single instance redis server microservice cache database redis refresh cache datum set expire consume memory good practice redi microservice helpful,8,7047,0,2.0,3,2016-04-25T04:51:34,0.0
38554037,310648.0,<node.js><microservices>,deal share model micro service architecture,goal create architecture service deploy independent completely autonomous service read db object type case socket server micro service http server micro service http server user create asset call asset store db mongoid return protocol call socket server check validity read db service share model order map object service share code service service read db second talk service,8,2363,1,1.0,3,2016-07-24T16:06:26,0.0
35409492,2028135.0,<java><spring><spring-boot><microservices><netflix-eureka>,eureka service discovery spring boot,write spring boot micro service rest client client module restful call micro service micro service register eureka registry client spring boot project eureka query service endpoint problem client spring boot application annotation auto wired application manually auto wire bean client annotation,9,13103,1,5.0,3,2016-02-15T12:32:50,0.0
41636566,7415032.0,<node.js><web-services><rest><rabbitmq><microservices>,inter communication microservice,work personnal project transform monolithic web application microservice service database moment monolithic backend nodejs reply rest request split application multiple service face problem communication nicely rest call example register service insert interesting thing database forward http post user user service order persist user database example service database realize moment good choice register service depend user service kind coupled anti pattern microservice conception read second idea message broker rabbitmq register service insert interesting thing database publish message queue user datum user service consume message persist datum user database conception service fully isolate great idea response send client request register service idea send problem second idea consumer user service persist user datum reply client problem shop side web application client post product buy order service check virtual money user service forward product detail deliver service user money fully isolate service http request time client async request reply message broker hope enlighten,9,5657,1,1.0,3,2017-01-13T14:14:59,0.0
50454109,7638179.0,<rest><rabbitmq><microservices><rpc>,communication microservice request datum,deal communication microservice example fictive example illustration microservice store user getuser microservice store order createorder add order client app user address request client microservice createorder userid microservice getuser microservice create order detail address user microservice problem solve effectively deal communication microservice microservice wait response option restapi amqp rabbitmq deal issue rpc well performance call faster rabbitmq restapi good solution microservice architecture,9,2885,3,2.0,3,2018-05-21T17:46:22,0.0
40856925,3685587.0,<microservices><instances><horizontal-scaling>,microservice database microservice instance,microservice database horizontally scale instance happen database scale stay centralized database instance distribute database happen,9,2322,3,3.0,3,2016-11-29T02:42:17,0.0
36083504,5153594.0,<database><postgresql><jdbc><connection-pooling><microservices>,database connection pool strategy micro service,convert monolithic application micro service base architecture postgresql database monolithic application bonecp connection pool monolith split number independent micro service jvm option connection pool bonecp decent connection pool microservice initial primary choice fine grain control connection requirement service side number service increase number connection pool increase eventually idle connection assume minimum connection pool great rely database specific extension pgbouncer approach advantage connection pool manage central source pool micro service number idle connection bring language technology agnostic side extension database specific functionality jdbc work prepared statment work pgbouncer transaction pool mode case micro service connect postgre server database option high chance create idle connection traffic service moderate rationale move micro service easy deployment scaling face problem adopt micro service architecture well solve problem micro service,9,3217,3,0.0,3,2016-03-18T11:44:23,0.0
47647560,6863098.0,<java><rest><microservices>,share entity rest service microservice,create micro service java rest api call service service data send json format jax rs create entity class service entity class project create common jar entity domain object microservice tightly couple create class microservice project repeat work project well communicate sevice,9,1649,2,3.0,3,2017-12-05T06:41:54,0.0
51953129,10255841.0,<microservices><netflix-zuul>,face issue microservice netflix zuul springboot,application fail start description bean counterfactory define class path resource org springframework cloud netflix zuul zuulserverautoconfiguration zuulcounterfactoryconfiguration class register bean define class path resource org springframework cloud netflix zuul zuulserverautoconfiguration zuulmetricsconfiguration class overriding disabled action consider rename bean enable overriding set spring main allow bean definition override true,9,2229,2,1.0,3,2018-08-21T16:33:46,0.0
48838101,2861312.0,<domain-driven-design><microservices>,perform validation service microservice,suppose microservice order inventory api order service place order ideally order allow place inventory exist inventory service people recommend saga pattern distribute transaction fine eventually consistency utilize abuse system push order product invalid inventory system order place order queue inventory service handle invalid order handle upfront order service push invalid order level specially productid invalid recommendation handle scenario,10,2157,1,2.0,3,2018-02-17T05:13:31,0.0
45551966,1660075.0,<docker><docker-compose><microservices><consul><docker-networking>,docker container interact localhost,dockerize micro services app discovery issue app configure follow service start local mode consul discovery registry service start local mode automatically bind address service example tcp localhost tcp localhost hard code address dockerize app local mode service container docker image orchestrate docker compose docker machine matter service interact service machine tcp localhost work docker compose localhost alias service localhost work container share localhost good approach specific hostname service hostname link docker compose doubt elegant solution dockerize version consul integrate post provide insight localhost mess puzzled correct approach,10,2632,1,2.0,3,2017-08-07T16:50:30,0.0
47837207,7873775.0,<security><architecture><permissions><microservices>,entity level access restriction microservice architecture base user group membership,system datum restrict nature access specific entity easily restrict grant base user group membership good implement microservice architecture access control managing permission responsibility microserive developer implement access control store update permission service robust error prone approach create dedicated microservice handling permission management service call microserive check access permission entity filter entity return result centralized permission storage management advantage microservice call permission service entity check access negative influence performance developer integrate access check service leave space error access control responsibility api gateway service mesh implementation automatically filter response service case microservice return list entity permission check entity potential performance problem example consider follow synthetic example healthcare system deal test result ray image health sensitive disclose test result patient doctor laboratory attend doctor send patient specialist doctor access test result access grant dynamically entity test result ray image set rule user group allow access imagine microservice call test result service deal test result responsible access control manage permission permission management extract separate microservice healthcare system handle visit doctor patient visit doctor patient doctor clinic receptionist example entity type require entity level access restriction base user group membership easy imagine example entity level access control require,10,2641,1,6.0,3,2017-12-15T17:31:03,0.0
51921033,6872018.0,<spring><spring-boot><microservices>,project build error dependencie dependency version org springframework cloud spring cloud starter eureka server jar,develop code update spring boot starter parent build fail guide issue error pom xml,10,15208,2,2.0,3,2018-08-19T19:17:26,0.0
32334161,4009451.0,<load-balancing><distributed-computing><microservices><service-discovery><consul>,conceptual difference service discovery tool load balancer check node health,service discovery tool popular mainstream wonder primary case employ traditional load balancer lbs cluster bunch node balancer client request balancer typically round robin request node cluster service discovery centralized consensus service determine node service healthy app connect node service deem healthy service discovery load balancing separate concept service discovery load balance convenient side load balancer monitoring health check build pretty service discovery side load balancing meaning lb forward request unhealthy node cluster functionally equivalent consensus server app connect unhealty node service discovery tool feel half dozen equivalent load balancer application architecture entirely predicate load balanced microservice benefit switch service discovery base model,11,850,3,7.0,3,2015-09-01T14:24:24,0.0
44085454,4431921.0,<architecture><microservices>,join table microservice,sense micro service architecture idea separate application include database excite confused micro service product user product user table product user database accord good practice micro service access database service problem suppose product table user column search product return user create product require join product table product micro service user table user micro service handle,11,4922,0,2.0,3,2017-05-20T11:41:21,0.0
35113957,1853171.0,<docker><development-environment><docker-compose><microservices>,multiple project docker docker compose,microservice approach build product project docker compose problem development environment change code multiple project test develop code project separately link manually create development kit clone project handle link docker compose handle multiple docker compose file sufficient tool recommend approach goal edit example project project project docker compose yml postgresql docker compose yml project docker compose yml project project separately work fine change api project project project link test code write development kit project project link good approach,12,11229,0,5.0,3,2016-01-31T12:42:12,0.0
30648096,444583.0,<api><documentation><microservices>,centralized api documentation microservice,team currently build multiple service parallel benefit building service scratch ability automatically display api endpoint service site helpful thing multiple documentation site endpoint entire system good step determine service split combine simply refactore service django module great help combine rest swagger documentation multiple service single documentation site currently relate find solution problem centralized documentation big deal service netflix hard tool method combine api documentation service microservice architecture ideal scenario happen service change click link list endpoint system teammate update service documentation refresh currently change step,12,4827,5,2.0,3,2015-06-04T15:30:59,0.0
31342583,1407949.0,<php><load-balancing><apache-zookeeper><microservices>,manage balance semi persistent job service instance,common pattern service develop wonder tool library help default job discuss microservice literature request response nature job assignment semi permanent task example task listen message queue datum source correlate datum store keep memory buffer calculate average min datum everytime data entry currently service write php perceive overhead php process connection message queue single service process handle multiple job simultanously chart hopefully illustrate setup head service worker currently deamonize php script service registry zookeeper zookeeper curator loadbalance find distribute permanent job updatable removable reassign worker die propose responsibility job manager job service job assign job service send job update service reassign job worker die library tool tackle problem function job manager big anti pattern,17,287,0,4.0,3,2015-07-10T13:54:10,0.0
37749087,2408961.0,<messaging><reactive-programming><microservices><event-based-programming>,restore state event base message drive microservice architecture failure scenario,context microservice architecture message drive asynchronous event base design gain popularity example well oppose synchronous rest base mechanism context imagine overly simplified order system depict message flow order place source web mobile order service accept order publish inventoryservice react inventory stuff publish invoice service react send invoice publish service happily process order happy inventory service reason assume event event bus flow block manor message publish central topic pile queue service read convey event bus event publish bus flow straight queue ignore messaging platform technology point inventory service minute passing event bus time inventory service overly simplified system system interested event question inventory service system restore state order process,17,2563,0,8.0,3,2016-06-10T13:06:04,0.0
37915326,899039.0,<architecture><microservices>,keep db sync microservice architecture,learn microservice architecture work unserstood microservice database sense customer microservice responsible create customer return list customer service ofcource customer db high load ervice chooce scale så microservice db service load balancer client create customer load balancer send client request service customer create request client sure customer create view list customer request lb send service sure service sync newly create customer db service mssql functionality keep db sync alowe initial commit save datum database approach problem long service long time commit,17,7988,0,5.0,3,2016-06-20T05:47:00,0.0
52849139,7034696.0,<java><docker><spring-boot><microservices>,docker image jdk,docker explain context question spring boot micro service application port local machine migrate docker base learning service docker container deploy copy docker container create docker image docker image jre spring boot application mb maximum docker image mb maximum hand local pc jre mb application mb space base mb local system gb docker image approach correct openjdk dockerhub add image size image large target pc jdk,18,2400,2,5.0,3,2018-10-17T07:10:07,0.0
28767707,2166249.0,<deployment><architecture><integration-testing><microservices><test-environments>,deal shared state micro service architecture,company transition huge monolithic application micro service architecture main technical driver decision scale service independently scalability development ten scrum team work project micro service transition process smooth start benefit advantage technical organizational structure hand main point pain struggle manage state dependency micro service example micro service deal user registration service call responsible maintain identity main provider user rest micro service strong dependency example service responsible user profile user permission user group rely user maintain data sync service service info userid register service currently maintain sync notify change state registration example rabbitmq imagine xs main service complicated dependency main issue manage dev testing environment team service environment order code live continuous integration team integration acceptance test live environment service work environment check system work order test dependent service rely service state maintain system integrity store global coherent state current approach snapshot dbs live environment transformation shrink protect datum privacy propagate environment test environment tremendous overhead organizationally computational resource ten continuous integration environment ten integration environment acceptance test environment refresh share datum live late version code frequently struggle find well ease pain currently evaluate option docker container service version service intend development service sandbox rest team development integration test solution ease pain share datum service company developer address problem common micro service architecture guy problem recommendation long explanation lot,19,5239,8,16.0,3,2015-02-27T14:44:20,0.0
30027545,3663974.0,<architecture><vert.x><microservices>,vert microservice,microservice gain traction software architecture style better support continuous delivery provide model rapid deployment separation concern vert vert apex provide interesting model build microservice example simple verticle expose http service rest service verticle bind tcp port scale multiple micro service support full application number choice thought style eventually support continuous delivery minimize downtime upgrade option multiple verticle solution routing http handling verticle request response handle completely verticle verticle tcp port router expose path single port handle datum handle verticle router pass verticle start monolithic approach separate instance vert service cluster easy continuous delivery thing option deployment deployment side rapid deployment service desirable bring application option provide overhead db verticle verticle option easy reload update verticle separate micro service offer interesting development offer challenge orchestration deployment thought,21,3255,0,4.0,3,2015-05-04T10:10:47,0.0
27865238,2858871.0,<java><maven><microservices>,parent pom microservice,project microservice project independent separate spring boot server expose rest service separate db schema maven manage dependency good idea parent pom declare microservice module help manage common dependency lib servlet api witch project remove declare parent pom,21,8236,1,5.0,3,2015-01-09T16:45:49,0.0
37180375,1738252.0,<spring-boot><spring-cloud><microservices><gateway><netflix-zuul>,zuul authentication gateway,background implement design summarise diagram client authenticate idp openid connect oauth idp return access token opaque token user info client call api gateway access token authorization header api gateway request idp access token idp verifie access token valid return user json format api gateway store user jwt sign private key jwt pass downstream service verify jwt public key service call service fulfil request pass jwt serve authentication authorisation request spring cloud global framework spring boot launch individual service netflix zuul api gateway write zuul pre filter check access token contact idp create jwt jwt add header request forward downstream service problem question specific zuul filter authentication fail api gateway reason routing respond directly continue filter chain forward call moment authentication fail filter add jwt header downstream service hope gateway prevent unnecessary call documentation poor find,25,21544,3,21.0,3,2016-05-12T07:42:05,0.0
29460485,805704.0,<web-services><architecture><microservices>,microservices architecture cross service datum sharing,consider follow micro service online store project user service keep account datum store user include email address purchase service keep track detail user purchase service provide ui view manage relevant entity purchase service list purchase purchase item follow field full purchase user purchase item title price search box store manager search purchase purchase user clear datum purchase service hold example user full problem bad complicated thing search purchase purchase user figure solve sync user service broadcast sort event user creation save relevant user property purchase service ideal perspective deal user create record service consume user datum obvious option expose api user service bring user detail base load purchase service call user service order user ideal live implement purchase search base user well expose api endpoint user service receive query term perform text search user user service return user detail match criterion purchase service map relevant approach ideal approach implement fact face issue sort code smell love hear solution,26,8282,2,20.0,3,2015-04-05T18:03:50,0.0
45208766,3661856.0,<rabbitmq><microservices>,microservice rabbitmq,find exist post apologize head round microservice article rabbitmq confused rabbitmq intention service web api communicate rabbitmq communicate,28,14385,1,8.0,3,2017-07-20T07:57:56,0.0
45625886,1773216.0,<rest><kubernetes><microservices><docker-swarm><grpc>,rest grpc choose,software organization grpc service orient architecture people rest case sense grpc sense rest inter service communication interestingly open source project rest grpc instance kubernetes docker swarm employ grpc extent cluster coordination expose rest api interface master leader node grpc,29,8816,1,9.0,3,2017-08-11T02:09:34,0.0
34903605,299702.0,<architecture><microservices>,microservice pro con,pro con microservice comparison alternative architecture rule thumb microservice,33,15042,0,15.0,3,2016-01-20T15:08:36,0.0
28942614,459329.0,<node.js><docker><coreos><microservices>,forever pm docker container,refactore couple node js service start virtual server process crash relaunch move containerised state application structure process exit container restart failure correct benefit disadvantage,40,12415,0,15.0,3,2015-03-09T13:00:16,0.0
33041733,902383.0,<microservices>,microservice monolithic architecture,reading microservice bit intrigued interesting concept wonder advantage disadvantage microservice monolithic architecture vice versa microservice suitable better well monolithic architecture,76,33655,3,48.0,3,2015-10-09T15:11:34,0.0
50629814,962746.0,<javascript><node.js><microservices>,javascript library collect object property batch processing map result object,array object reduce list specific property tagid unique array call batch processing method example http request api list entity result array object finally map object attribute original array object match result original tagid fact sql join array write php library api js javascript nodejs library pretty common pattern microservice,-2,123,0,0.0,3,2018-05-31T17:33:21,0.0
49910421,9656249.0,<java><spring-boot><microservices>,microservice,create simple blogging application spring boot restful api connect mysql database sql query add blog delete blog question follow microservice architecture architecture microservice website call application microservice base main application currency exchange blogge difference aspect contribute microservice ness imho call application horizontally scalable microservice base architecture note tutorial follow github repo,-2,68,5,3.0,3,2018-04-18T23:21:42,0.0
40467382,2237022.0,<ruby-on-rails><microservices><rails-api>,role authorization micro service architecture,write api rail micro service architecture api implement role authorization authorize user role gem fit micro service architecture write logic authorize user gem authorization gem provide capability fit micro service architecture rolify suit micro service architecture advance,-1,630,0,0.0,3,2016-11-07T14:17:51,0.0
53170349,10420971.0,<java><compilation><microservices>,bean find springbootapplication,problem microservice java understand code compile follow tutorial video french create simple project familiar microservice create controller dao model compile controller access port produit return list product define code compilation hand start project hand port port define application property occupy architecture project code controller compile file dao file model lot people compilation problem post answer problem advance code long simple,-1,93,4,0.0,3,2018-11-06T10:48:05,0.0
44000273,5231905.0,<java><rest><design-patterns><microservices>,micro service architecture base restful api java,good architecture implement webservice request side save enhance call service parameter special,-1,205,4,0.0,3,2017-05-16T11:30:28,0.0
51206924,8613705.0,<docker><microservices><swarm>,hour container start,hour container start tool idea metric hour container actuality,-1,66,1,1.0,3,2018-07-06T09:14:01,0.0
53636467,9796657.0,<java><rest><api><spring-boot><microservices>,rest api springboot,couple day title question repeat truth solution work thing silly edge pom xml class application property message receive follow suggestion change port remove property leave change additionally message spring boot console start,-1,202,7,0.0,3,2018-12-05T16:17:03,0.0
54160558,10904865.0,<java><spring-boot><apache-kafka><microservices><spring-kafka>,lose message kafka database offline,develop microservice consume message kaffka process message store output mongodb kafka encounter problem lose message scenario pretty easy case mongodb offline microservice recieve message save output mongo error mongo offline message lose question mechanism kafka send message case manually commit offset kafka good practice handle error kafka consumer,-1,308,0,0.0,3,2019-01-12T14:34:05,0.0
54463805,547885.0,<java><spring-boot><docker><microservices><netflix>,microservice spring boot netflix docker maven organize development,microservice choose stack exercise build api spring boot netflix api maven dockerize microservice deploy cloud foundry kubernetes aws build pwa javascript framework call api bit ambitious microservice deploy separately web app connect gateway developer start work team develop search product api example open st clone repository microservice project include gateway registry config server clone repository spring boot project work case sense parent pom project module share jar dunno find answer,-1,363,2,0.0,3,2019-01-31T15:21:56,0.0
45115860,8311166.0,<go><microservices>,golang microservice,company build http api service service share http port solution create project router router import module request pass router module question module process crash router crash solution require http port service independent kit micro understand,-1,659,1,3.0,3,2017-07-15T07:49:07,0.0
56249233,5572863.0,<mysql><docker><microservices>,docker micro service image connect local mysql server,configure mysql application property file image inside docker three image roam image connect local machine mysql server currently xampp server micro service image inside docker container follow command docker roam follow error docker file follow,-1,69,7,0.0,3,2019-05-22T04:16:19,0.0
42332938,155666.0,<azure><microservices><azure-service-fabric>,difference service fabric application service,reasoning application concept service fabric recommend relation application service scenario application prove,0,988,2,0.0,4,2017-02-19T21:12:26,0.0
36573857,5969171.0,<architecture><microservices><consistency><azure-service-fabric>,consistency partitioned service fabric stateful service,simple example stateful service manage user reliable dictionary map userid datum include user service registeruser method check user straightforward service singleton partition problem partition user exist introduce singleton service map user user overcome problem race condition user register user time user succeed general advice deal situation imagine sort problem occur regularly partition datum,0,461,0,0.0,4,2016-04-12T12:51:14,0.0
51280734,1153276.0,<maven><spring-boot><amazon-ec2><microservices><aws-regions>,spring boot application error console,create spring boot application maven build executable jar application ec instance free tier window follow command java jar spring boot apps snapshot jar server port xdebug application exist follow log console exception,0,1355,3,0.0,4,2018-07-11T08:30:13,0.0
52503744,1834060.0,<domain-driven-design><microservices><cqrs><bounded-contexts>,learn ddd cqrs,ddd cqrs plan build simple application improve skill bit plan simple taxi corp application requirement client order taxi client order time driver pick order driver order time driver client client enter cab course start course finish client purchase driver pay three aggregate client order driver split separate microservice good idea start microservice currently focus ordering taxi check client course assign create order order create assign client request aggregate update create wonder correctly read process manager case draw schema communication approach correct,0,87,0,1.0,4,2018-09-25T17:27:20,0.0
52662454,904692.0,<dependencies><domain-driven-design><microservices><kafka-topic>,microservice input output domain model,kafka decouple service second thought service consume produce input output service datum external service control force adapt datum format domain external system provide follow practice service push result topic format domain incidentally service thing service consume external service datum format domain push separate topic semantic datum produce step pipeline service consume produce spit result consume datum place imply future produce output specific domain consumer change domain producer change add consumer example analogy consumer horrible responsible inputs meaning dependency model produce datum imply source add change include datum well effectively lean manysource onesink component onesource manysink preferred practice,0,156,0,0.0,4,2018-10-05T09:26:46,0.0
43700905,7472990.0,<dns><microservices><service-discovery>,microservice find dns ip,microservice endpoint hardcode good dns microservice register start microservice communicate microservice dns endpoint currently listen understand microservice dns live basically dns special service multiple instance hardcode endpoint dns instnace move location manually change location configuration happen design point document explain microservice dns find trivial,0,467,0,0.0,4,2017-04-29T22:05:26,0.0
51980596,8868505.0,<java><spring><spring-boot><microservices>,map specific field object object,situation object obj map object obj mapping obj field field null pick field null obj send datum obj field sure modelmapper case advance,0,337,0,0.0,4,2018-08-23T07:37:30,0.0
36049030,1478191.0,<go><workspace><microservices>,golang workspaces practice,accord documentation workspace project fall apart project exclusively project micoservice example structure app write nest subdirectory app apply workspace philosophy situation,1,629,2,0.0,4,2016-03-16T23:37:52,0.0
46615008,5634661.0,<spring-boot><microservices><event-driven><event-driven-design><circuit-breaker>,microservices service discovery circuit breaker event drive architecture,fairly microservice interest learn main pattern conduct implement java developer spring boot understand pattern microservice communicate http topic event drive architecture event message bus service send message service subscribe bus process message event drive nature service discovery circuit breaker achieve implement commonly applicable service communicate http,1,847,0,2.0,4,2017-10-06T22:58:45,0.0
53954587,8500364.0,<java><spring><rest><spring-boot><microservices>,external url configuration microservice,multiple microservice communicate rest call spring boot spring rest configure url rest point application property file problem url point change manually modify property file service call point change workaround url place centralized location modification impact service,1,405,0,0.0,4,2018-12-28T06:34:50,0.0
53934850,3548905.0,<spring-data><microservices>,microservice communication jdbc sql rest,good approche allow microservice exchange datum rest call microsevice expose relate datum database view reach microservice spring jdbc template jpa notice microservice private table database schema,1,454,0,0.0,4,2018-12-26T16:57:06,0.0
43132158,44512.0,<mule><microservices>,apply policy service proxy service,mule service deploy mule runtime proxie api gateway set policy proxy service environment mule runtime mule api gateway,1,475,0,0.0,4,2017-03-31T03:54:03,0.0
46014427,6786689.0,<spring><spring-boot><microservices><consul><spring-cloud-consul>,spring boot client unable start consul,setup consul docker system follow command consul fine check consul ui image attach spring boot service consul instance service discovery registration start follow exception springboot main class annotate fine guess spring boot service work fine consul instance earlier,1,4305,2,3.0,4,2017-09-02T13:43:14,0.0
54602052,312444.0,<domain-driven-design><microservices>,design ecommerce microservice,design ecommerce micro service architecture suppose context product catalog inventory price clear clear responsibility serve case product list request product catalog list query inventory micro service check inventory status stock stockout request price price product basically serve fundamental feature execute three request join three micro service read micro service architecture deal join contexts single imo clear context set responsibility option create search micro service aggregate product pricing inventory domain event notify search microsecond change resolve case single request cqrs question correct approach well trade,1,200,1,1.0,4,2019-02-09T00:36:26,0.0
54745015,1356704.0,<spring><spring-boot><microservices>,rollback distribute transaction,three spring boot project separated database account rest payment rest gateway rest account rest create account payment rest create payment gateway rest call endpoint gateway rest endpoint call endpoint rollback transaction revert throw exception gateway anyother endpoint,2,337,0,0.0,4,2019-02-18T10:22:03,0.0
30449278,1697203.0,<git><automation><release-management><salt-stack><microservices>,automation release microservice base application,work application consist standalone service advantage single monolithic application release weekly release cycle service component locate separate git repository release feature wild component update manage server saltstack release salt script update component version git late state problem version manual work automate update version manually check component repository merge development branch master tag accord symantec versioning rule write version salt script component boring error prone process wrong glad hear advice well,2,1138,0,0.0,4,2015-05-26T04:04:42,0.0
46581254,6768051.0,<domain-driven-design><microservices>,microservice service granularity,work microservice architecture clear read microservice architecture service single endpoint single module endpoint endpoint fine grain granularity high level endpoint fine grain risk api chatty find article microservice architecture service associate bound context bound context single endpoint api,2,321,4,1.0,4,2017-10-05T08:37:47,0.0
42353292,2981641.0,<microservices><service-discovery>,service discovery microservice break idea loose coupling,mechanism connect microservice work api service discovery work microservice hard code microservice suppose register query microservice location break idea loose coupling loss discovery service imply unable communicate,2,220,0,1.0,4,2017-02-20T20:02:25,0.0
44169046,4357325.0,<microservices>,manage microservice failure,micro service rest api problem service accessible call service data send service save temporary database service work datum send question create service ping service second service work task queue suggestion,2,1060,1,0.0,4,2017-05-24T21:49:57,0.0
40586946,1589549.0,<maven><openshift><kubernetes><microservices><fabric8>,gofabric unable unzip user apple fabric bin oc zip zip valid zip,set environment microservice fabric command execute follow error idea,2,213,0,0.0,4,2016-11-14T10:49:35,0.0
54947191,4759273.0,<java><spring><web-applications><architecture><microservices>,good practice throw exception propagate response message user api,micro service base architecture consist main app server module libs module main app server accept request provide response request response object rest api method call service layer libs module propagate error message send client response object controller class throw custom exception service layer send error message controller class problem approach throw exception case example throw exception input correct user permission return response user error message question correct approach throw custom exception sake propagate error message service layer controller propagate error message controller layer service layer controller layer,2,567,0,1.0,4,2019-03-01T15:00:21,0.0
55547886,217648.0,<kubernetes><microservices><istio><api-gateway>,api gateway service mesh,microservice docker container kubernete api gateway azure api gateway front microservice handle composite ui authentication service mesh handle service discovery circuit breaker functionality azure api gateway handle kind challenge,2,322,0,0.0,4,2019-04-06T09:54:09,0.0
49606124,9584581.0,<java><spring><neo4j><microservices><spring-data-neo4j-5>,neo microservice architecture,keep ddd bound contexts well create microservice keep separation concern main benefit neo keep connect datum neo relationship efficiently query oppose force microservice architecture decision difficult choose neo multiple microservice connect neo db persist domain microservice db connection neo control persistance query,2,722,0,2.0,4,2018-04-02T06:05:19,0.0
45047011,5675130.0,<web-services><architecture><etl><microservices><restful-architecture>,microservice architecture etl,redesign small monolith etl software write python find microservice architecture suitable flexibility technology python nice language enterprise software opinion three microservice call extract transform load java transform microservice future problem feasible pass result service call api response http output extract gigabyte datum idea call extract store result database module monolith easy implement case service return response process successful wonder well approach well architecture propose reasonable,2,3081,2,2.0,4,2017-07-12T01:48:20,0.0
54557354,411122.0,<domain-driven-design><microservices><solid-principles><separation-of-concerns><ddd-service>,duplicate business logic front ddd microservice,abstract question real implication microservice call spa suppose customer subscribe endpoint subscription model create subscription model point credit card pay subscription business rule credit card subscription expiration month visa specific business rule tie problem team work spa endpoint return valid credit card user subscription model implement business validation rule spa solid principle central microservice design separation concern precedent set add endpoint ordersservice service property model main question good design business validation logic duplicate frontend backend endpoint add simplify business logic,2,266,0,0.0,4,2019-02-06T15:41:37,0.0
54551852,1555190.0,<microservices>,share library microservice,read share library micorsevrice ae bad becuase allow complete autonomy service evolve example create domain object service copy code service share share library service chnage share library il deploy service duplicate code find bug original code deploy service code copy ripple affect share bad example,2,339,2,0.0,4,2019-02-06T10:50:15,0.0
50651256,139698.0,<node.js><amazon-web-services><aws-lambda><microservices>,microservice service crud,microservice api deal crud customer order translate microservice customer order customer api order api,3,1436,0,0.0,4,2018-06-01T21:34:29,0.0
44124914,7261916.0,<api><amazon-web-services><amazon-elastic-beanstalk><microservices><production-environment>,deploy multiple version application production microservice base application,multiple version service deploy production time assumption pretty common pattern microservice api base project mobile project common pattern industry kind problem helpful answer aws environment kubernetes environment advance,3,2073,0,3.0,4,2017-05-23T02:40:41,0.0
48791411,649811.0,<asynchronous><rabbitmq><microservices>,horizontal scaling consumer publisher provide sequence message,distribute service orient architecture producer send message consumer rmq decide horizontally scale consume architecture add consumer face limitation publisher provide sequence number message send consumer process message base sequence number time deal resource publisher send rmq message hey sequence hey sequence example publisher provide message sequence message distribute instance consumer message sequence requeue sequence well process sequence message well process retrie latency system retry time ve sequence consume solution sure set sequence resource process consumer achieve avoid requeuing order sure instance consumer message resource well order,3,315,0,1.0,4,2018-02-14T16:02:53,0.0
36705199,5136650.0,<c#><azureservicebus><microservices>,lock service bus queue prevent access,multiple queue multiple client insert message server side multiple micro service access queue handle message lock queue service work service work queue service process message queue service process message queue service finish process message service process message queue idea lock queue prevent access preferably service receive exception queue update assign queue service service work queue service assign queue work item process easy achieve,3,817,5,1.0,4,2016-04-18T22:12:03,0.0
58306667,6865098.0,<spring-boot><rabbitmq><microservices>,microservice asynchronous response,blog rabbitmq improve performance microservice asynchronous nature rabbitmq understand case http response send user elaborate question clearly user send http request microservice user face service microservice send rabbitmq service microservice microservice receive request process send response rabbitmq microservice receive response rabbitmq response send browser microservice wait untill receive response rabbitmq aynchronous,3,112,0,0.0,4,2019-10-09T14:39:34,0.0
45853546,5538737.0,<java><spring><microservices><consistency>,process reside ap server refer boolean flag spring java,spring framework develop web application service store process result table database logic service service boolean flag field service microservice architechture domain server service service reside ap server ensure servie service refer achieve,3,51,0,0.0,4,2017-08-24T05:25:54,0.0
38507565,5712607.0,<jhipster><microservices>,connect microservice gateway uaa server jhipster,create uaa server create microservicio gateway create docker container docker compose create well add extra configuration gateway work server uaa follow error trace container gateway help,3,2193,4,0.0,4,2016-07-21T14:53:24,0.0
45547556,301957.0,<java><amazon-web-services><spring-boot><microservices><blue-green-deployment>,blue green deployment multiple micro service internal call,spring boot micro service internally call call dns micro service define application property file service suppose micro service represent mydns mydns basically micro service consist elb ha proxy distribute zone app server distribute zone currently create green servers app server switch live traffic ha proxy level case version micro service test expose live customer ideally approach create entire server structure include elb ha proxy micro service face challenge test test dns map elb test dns external micro service dns hard code side application property file approach scenario,3,1258,4,0.0,4,2017-08-07T13:00:57,0.0
40936597,2280027.0,<java><spring><microservices><netflix-eureka>,spring eureka app dashboard,eureka server application applicaton yml config default dashboard status documentation restart xml response error log,4,2638,2,0.0,4,2016-12-02T16:16:44,0.0
31190685,0.0,<php><microservices>,microservice explain,understand micro service explain work tutorial confused shopping application microservice entail application follow account creation charge customer list item sale,5,1769,0,1.0,4,2015-07-02T17:07:56,0.0
52997270,10250642.0,<spring><docker><kubernetes><persistence><microservices>,method store file microservice architecture,currently work traditional monolith application process break spring microservice manage kubernete application allow upload downloading large file file store host filesystem wonder viable method persist file microservice architecture,5,1135,1,2.0,4,2018-10-25T20:05:07,0.0
35613841,321946.0,<.net><rest><azure><architecture><microservices>,efficient communicate multiple net app,currently setup client web app ios app talk backend api net web app nancy rest call special requirement split api microservice service individually upgrade deploy main api public perform authentication call microservice private network communicate main api microservice api pro con approach communication realtime request browser device main api perform auth call microservice api return response thing queue pub http realtime communication request response service webjobs cloud services talk microservice private network approach mind simple rest base call totally fine latency main issue recommend solution problem azure suit,5,1610,0,2.0,4,2016-02-24T21:48:15,0.0
48370641,7337938.0,<microservices>,microservice internal communication,read microservice architecture understand inter microservice communication mechanism article microservice expose restful api search internet implementation base messaging event backend communication confused rest api standard microservice microservice rest endpoint,5,2194,3,4.0,4,2018-01-21T19:09:30,0.0
58178511,2931744.0,<spring-boot><microservices>,rollback microservice,doubt microservice suppose micro service database connect access micro services example connect mysql connect cassandra connect mangodb connect oracle step call update user datum mysql update finally success response step call update datum cassandra update finally success response step call update datum mangodb fail db server problem problem requirement rollback db change happen previous micro services achieve kind rollback scenario,5,78,0,0.0,4,2019-10-01T05:25:02,0.0
56039251,1725100.0,<java><concurrency><microservices>,optimal call block api call parallel cpu wait api call complete,work micro service follow flow operation request execute number task pre processing execute number task task independent execute parallel task processing step external api call task complete combine result return request micro service request parallel api call time consume operation work execute time comparatively design task execute parallel task block api call simple solution thread pool executorservice ideal solution create thread pool thread task execute time task block api call cpu time achieve break task single unit,5,85,6,2.0,4,2019-05-08T11:01:55,0.0
52472261,450039.0,<rest><microservices><api-design><api-gateway>,merge consolidate response multiple restful microservice,restful microservice serve json service store user login password service store message user sender subject body rcpt ids service respond service respond return list message destine user client application consume service handle message list sender rcpt ids method pull list message start pull profile info list require request naive inefficient scale complex app method pull list message extract user bulk request relevant user separately assume service endpoint exist delay message list extract user send request bulk user info await bulk user info response ideally serve complete response set message user info bring merge response service layer method api gateway technique implement list message extract user call scene user datum merge result set serve final result work service scene message listing depend service query multiple service scene parse response query service base secondary tertiary result finally merge madness affect response time effectively create client combine microservice response mega response method server level real insight open source project build api gateway architecture examine,5,1721,0,0.0,4,2018-09-24T03:18:25,0.0
46283367,3153769.0,<java><spring><microservices><spring-cloud><hystrix>,hystrix benefit normal exception handling,hystrix topic concept resilient service course question mind hystrix define fallback method graceful degradation method call circuit break imagine wrap code exception appear timeout instance call fallback method clause call service normal code call course hystrix additionally monitor pretty sure understand concept,5,2695,3,1.0,4,2017-09-18T15:45:14,0.0
30288968,450602.0,<microservices>,micro service nosql good practice enrich datum micro service architecture,plan solution manage enrich datum architecture clear dozen micro service country building floor worker separate nosql data store datum worker service floor worker work building country solution client query microservice problem multiple request client aware structure multiple request bother return json describe entity single call well solution create orchestration retrieve datum multiple service problem data entity example store document db hard sort filter field solution save entity worker call service fill relative datum building country problem building change reflect worker service solution good create process subscribe broker receive entity change entity update relavent entity entity change building change update document hold building problem service update trailing update happen update broker recursive update complicate microservice solution keep normalized fileter sort elasticsearch problem keep normalized datum es expensive performance wise,6,2435,0,6.0,4,2015-05-17T16:03:12,0.0
54837671,1932477.0,<architecture><microservices><devops>,manage multiple staging environment transition monolithic microservice architecture,company embark platform architecture change monolithic microservice architecture entire migration year maintain current monolithic application slowly dismantle application dismantle monolithic application service orient architecture interim module database connect monolithic application database directly transition microservice microservice database applicable practice release feature ready follow release window team staging manage multiple stagings environment total set legacy monolithic application transition microservice architecture understand fully transition microservice architecture stage entire company maintain staging copy microservice staging environment guide answer direction solution preferable answer direction option variation consider pro con idea db additional column mark stage row datum maintain single instance microservice multiple stage issue api call client side stage complicate development service cater staging database filter endpoint harder call stage database access redundant code suppose production issue face number microservice grow lot server resource decide premise server host kubernetes proxmox vm legacy monolith infrastructure architecture reduce resource require,6,302,0,3.0,4,2019-02-23T02:35:15,0.0
44274982,3705491.0,<java><spring><rest><spring-boot><microservices>,spring boot application default timeout rest api endpoint easy config control endpoint timeout,current spring boot version wonder default timeout api call test breakpoint keep wait time configure default timeout spring boot app annotation yml setting find couple alternative callable add extra business logic code set xml bean fashion late spring boot application,6,30038,2,3.0,4,2017-05-31T03:08:28,0.0
46311488,6716610.0,<architecture><microservices><esb>,confuse esbs solution point point integration,study application architecture trouble stomach idea book microservice reading idea esbs enterprise service bus role coordinate message service legacy application esb tout solution problem poise point point integration microservice approach company de facto standard create agile scalable resilient app microservice point point integration node application build microservice communicate directly node feel connect dot connect help appreciate advance,6,1443,0,0.0,4,2017-09-20T00:20:34,0.0
36680157,6216750.0,<http><connection-pooling><microservices><http2>,communication rest microservice latency,problem solve latency microservice communication backend scenario client request service call service call service return response client microservice expose rest interface access http http connection service submit request additional overhead reduce overhead bring transport mechanism mix stick http rest answer avoid solution messaging queue avoid keep operational complexity experience microservice communication http connection pool http system deploy aw service group front elb,6,3787,2,3.0,4,2016-04-17T17:59:56,0.0
36080524,1313884.0,<ruby-on-rails><rabbitmq><apache-kafka><microservices>,rail listen pull service queue,rail application work wait request comme client magic rail application microservice architecture example asychonious communication serivce send event kafka rabbitmq queue service rails app suppose listen queue tune start rails app listen queue trigger event initial trigger comme client app advice,6,3318,3,1.0,4,2016-03-18T09:21:32,0.0
45538292,3739116.0,<rabbitmq><apache-kafka><messaging><publish-subscribe><microservices>,publish subscribe model microservice receive consume message service type,design microservice architecture model service publish message service receive consume message high availability multiple instance service time question design service instance service instance receive message service instance rabbitmq easy achieve behavior wonder kafka messaging framework build support scenario common microservice architecture,6,683,0,2.0,4,2017-08-07T01:38:32,0.0
55249656,1492969.0,<java><microservices><distributed-system><distributed-transactions><2phase-commit>,phase commit suitable microservice architecture,read post agree completely great explain exact reason issue face implement phase commit microservice advance,6,1110,2,3.0,4,2019-03-19T20:42:30,0.0
29888108,3894414.0,<c#><.net><rest><asp.net-web-api><microservices>,call microservice net,create simple rest microservice receive email send microservice send method application call restsharp question good call add error handle talk restsharp call find bit uncomfortable app kind object microservice expect receive sort definition interface contract sure generally accept rest implement sort interface app call microservice bit define rest help,7,14791,1,3.0,4,2015-04-27T05:49:37,0.0
32529742,1988876.0,<java><spring><spring-mvc><spring-data><microservices>,roll transaction happen microservice,architecture independent legacy reason situation call follow method update legalservice db update userservice db note userservice running separate vm situation legal service db update call userservice fail leave application inconsistent state recommend,7,5896,0,2.0,4,2015-09-11T18:15:08,0.0
39126827,1696927.0,<laravel><oauth><oauth-2.0><microservices>,laravel passport oauth microservice,difficulty term architecture wonder insight plan multiple microservice laravel project catalog microservice billing microservice provide api top angular front consume api micro service passport microservice auth laravel passport easy flow user catalog microservice user authenticate provide user password request angular aka client passport microservice password grand type authorization token token authorize call resource catalog microservice catalog microservice token valid request kind middleware passport microservice passport microservice return user scope question good approach token validation catalog microservice middleware,7,2634,0,2.0,4,2016-08-24T14:58:30,0.0
55753184,0.0,<microservices><backend>,monolithic microservice,exactly instantly deploy micro service base backend manage integration technology host aws impossible instance impossible afford contemplate idea start monolithic backend possibility deploy micro service backend instantly business kick sure achieve idea wrong help,7,398,2,1.0,4,2019-04-18T20:17:54,0.0
35379246,770950.0,<django><microservices>,django model multiple project microservice,wonder solve sharing model structure multiple separated django project microservice project api project users dashboard project admin dashboard project statistic project django model proper solve,8,3750,0,2.0,4,2016-02-13T11:24:40,0.0
30621628,4101793.0,<c#><bdd><distributed><specflow><microservices>,bdd microservice,solution rely microservice hand cio expect practice behavior drive development feature manage bdd microservice architecture base experience good practice adopt bdd architecture directly integration testing edit precisely opinion bdd test expect verify business logic business logic framework bdd test scenario create skateholder dsl bdd test tend converge exclusive infrastructure ignorant practice hand integration test suppose verify solution match target infrastructure devop infrastructure business function distribute microservice mock infra business bdd test environment local environment mock business weaken lot goal practice compatible,8,1063,2,2.0,4,2015-06-03T13:31:54,0.0
26975640,341177.0,<esb><microservices>,micro service architecture base enterprise service bus,reason feature enterprise service bus build service adhere micro service architecture dumb pipe smart endpoint oppose smart pipe develop simple service,9,2536,0,3.0,4,2014-11-17T15:08:19,0.0
47050984,1711762.0,<laravel><microservices><lumen>,enable session luman framework,image micro service api aware authenticate user ideally simple resume session micro service storage session redis api call cookie header service resume session base cookie implement php session question implement laravel luman,9,8626,13,5.0,4,2017-11-01T08:39:14,0.0
42487685,0.0,<javascript><node.js><express><amd><microservices>,inject module app node js,node app service main app second app main app responsible datum diffrent app code second app main app working decouple code secnod app main app inject runtime second service register main app inject code code module nodejs main module code decouple inject runtime example helpful,9,671,3,3.0,4,2017-02-27T14:02:36,0.0
46236744,1405511.0,<events><swagger><microservices><event-driven>,swagger spec event,document automate test http api event drive microservice architecture document event payload pass service access http path api base http path wonder swagger handle,9,1612,1,1.0,4,2017-09-15T09:53:26,0.0
28607400,2236664.0,<php><magento><soa><single-page-application><microservices>,session microservice architecture commerce system,plan develop microservice commerce system proof concept architecture consist component javascript base single application send ajax request server api gateway rest api feed json datum receive call service service catalogprovider customersprovider checkoutprovider service api endpoint magento shopsystem log user magento system send request rest api server remember session send request handle shopping cart server side magento add update remove item rest api call add item lose send request session lose question approach solve issue regard session handle microservice architecture,10,1521,2,5.0,4,2015-02-19T13:15:53,0.0
40495213,6477393.0,<c#><azure><microservices><azure-service-fabric>,service fabric project separate git repos,follow normal microservice framework place microservice git repo repository service fabric project update microservice service fabric project redeploy service example split service fabric project notice example solution repository,11,710,1,3.0,4,2016-11-08T19:46:45,0.0
51541318,139698.0,<node.js><amazon-web-services><aws-lambda><microservices>,resolve author book microservice,start journey road microservice spend hour online immerse topic concept grasp idea sql join small independent database author book understand follow sql node js js bookdomain js service expect datum basically json return type,11,222,1,1.0,4,2018-07-26T14:30:41,0.0
41262716,941499.0,<java><spring><rest><microservices><gateway>,allow direct call microservice allow api gateway,strange question microservice info proceed spre specific framework moment example microservice setup spring zuul api gateway follow rule forward incoming call rest rest question user directly access service mention allow api gateway spring zuul api gateway set extra filter set microservice endpoint process direct call microservice endpoint api gateway solve server specific rule spring,12,4295,6,5.0,4,2016-12-21T12:20:58,0.0
42648060,6873797.0,<spring><spring-boot><microservices><netflix-eureka><spring-boot-admin>,unauthorized spring boot admin,control microservice eureka server spring boot admin error access trace log error dependency property work thing happen point mapping env accept health,12,16274,0,4.0,4,2017-03-07T12:15:20,0.0
48515460,8160773.0,<database><docker><containers><microservices><production-environment>,recommend database container production environment,assume micro service architecture product decide database service model deploy cloud server provider aws convenient database container development test environment implement production environment safe proper cloud solution aws rds db,14,8327,0,1.0,4,2018-01-30T06:46:30,0.0
39485459,2371715.0,<architecture><versioning><soa><microservices>,microservice versioning,good practice adapt versione microservice base architecture term support multiple versione deployment service runtime consumer version route base versioning approach mention guess follow drawback internal service reverse proxy consumption consumer aware require versioning good practice expose version consumer case feel follow apply major version change consumer change minor version change backwards compatible consumer require add functionality change patch version change optional seamless consumer kind microservice versioning strategy help enable note feel free split multiple question,15,6182,0,6.0,4,2016-09-14T08:07:28,0.0
45453061,765964.0,<web-services><microservices>,difference microservice webservice,close find actual difference understand choose microservice rest api communicate http understand microservice webservice purpose,16,17266,1,6.0,4,2017-08-02T06:29:44,0.0
31044380,2968101.0,<rest><microservices>,microservice authentication,context multiple service user ldap active directory billing plan authentication connect microservice oauth standard login password datum gettint third leg server problem accord picture step step handle access token control authorization control service authmicroservice,18,6297,0,10.0,4,2015-06-25T07:53:17,0.0
26866479,1509755.0,<web-applications><soa><microservices>,architecture microservice base web app,confused point web application diverge microservice url level model level example suppose monolithic app serve serve separate usecase eack microservice correct implement microservice base architecture create three app microservice route controller model template base request route request app database html serve separate app basically website completely serve app backend microservice handle ui stuff datum usecase model controller template expose rest api public face app app query three app microservice datum build html return browser web app case serve single app internally three microservice,27,10079,0,6.0,4,2014-11-11T13:53:31,0.0
40567429,1232376.0,<spring-boot><kubernetes><microservices><netflix-eureka><spring-cloud-netflix>,eureka kubernetes,proof concept help identify gotchas spring boot netflix oss kubernete proove technology prometheus graphana eureka service setup start trouble kubernete clouster discovery discovery iyz add config server eureka base logical url bootstrap yml start service configserver tmv exception config server log locate eureka instance setup docker compose locally link start container trouble setup eureka client serviceuri microserice locate peer ip address cluster,28,20942,2,20.0,4,2016-11-12T20:40:37,0.0
31104540,934439.0,<database><soa><microservices>,db consistency microservice,good achieve db consistency microservice base system martin fowler talk microservice rule mention keep service database service directly connect db service super nice elegant practice bit tricky suppose service frontend order management service loyalty program service customer purchase frontend call order management service save db problem point call loyalty program service credit debit point account db db server easy transaction loyalty program service fail write db roll thing db operation multiple service rely connection advantage single transaction good pattern keep thing consistent live happy life eager hear suggestion advance,29,4350,1,11.0,4,2015-06-28T20:42:03,0.0
41640621,2953261.0,<design-patterns><architecture><microservices><aws-api-gateway><data-sharing>,datum share micro service,current architecture problem step flow frontend backend layer step frontend validate input user microservice ms second step frontend submit microservice micro service ms validates integrity frontend avoid query ms good approach flow optimize remove step flow user request data ms data ms user persist data ms data ms data ms ms check integrity ms datum http request ms ms data ms datum persist database build http response flow user datum ms datum store local session storage user persist data ms data ms data ms ms check integrity ms datum http request ms ms data ms datum persist database build http response approach approach http request ms ms duplicate validation step approach duplicate datum ms ms prohibitive amount datum volatility nature duplication viable option suitable solution opinion frontend responsibility fetch require micro service micro service deliver micro service avoid http request problem micro service trust send frontend sign datum micro service micro service verify message note time micro service micro service http request perform http request avoid architecture goal micro service datum micro service demand persist ms data ms datum ms database async approach broker apply question exist design pattern good practice framework enable kind thrust communication downside current architecture number http request perform micro service cache control mechanism response time micro service affect response time micro service critical goal archive well performance frontend gateway distribute datum micro service thrust communication ms data entity sid product sid vendor sid ms maintain data integrity solution idea gateway api gateway request processing cache http response ms ms response ms sdk ms sdk communication sync async directly ms ms datum duplication avoid course solution share uuid guid micro service full datum event bus distribute event datum micro service asynchronous event source pattern inspiration question documentation,30,9996,9,16.0,4,2017-01-13T17:52:49,0.0
42358521,515034.0,<wso2><microservices><ballerina>,ballerina differ language,ballerina interpret language build ballerina program set ballerina system variable ballerina support dependency management recommend build tool kind task recommend ballerina suitable specific task integration system find language specification support type ballerina,35,3400,0,8.0,4,2017-02-21T04:09:30,0.0
33125508,631333.0,<web-services><amazon-web-services><cloud><distributed-computing><microservices>,service discovery load balancing,understand scenario pick service registry load balancer understanding solution cover functionality instance consider consul io feature list service discovery health check key store multi datacenter load balancer amazon elb instance configurable accept traffic load balancer accept traffic follow protocol http http secure http tcp ssl secure tcp distribute request ec instance multiple availability zone number connection scale number concurrent request load balancer receive configure health check elastic load balance monitor health ec instance register load balancer send request healthy instance traffic encryption network secure https ssl connection ec vpc create internet face load balancer request client internet route ec instance internal face load balancer request client vpc route ec instance private subnet load balancer ec classic internet face ec classic load balancer ec classic support ipv ipv address load balancer vpc support ipv address monitor load balancer cloudwatch metric access log aw cloudtrail associate internet face load balancer domain scenario fail understand pick service discovery hunch implement client side service discovery server side service discovery sure,38,10438,1,7.0,4,2015-10-14T12:36:39,0.0
36701111,1733881.0,<java><spring><spring-boot><jhipster><microservices>,communication microservice,create project microservice architecture create microservice product entity bill entity endpoint connect gateway jhipster microservice architecture bill ms access list product wonder communicate three approach mind send request bill ms queue rabbitmq product product ms bottleneck send request gateway product service product worried latency datum size touch database directly depend gateway duplicate repository service entity bill ms ugly break rule ms architecture maintenance difficult approach appreciate share edit bottleneck instance bill ms rabbitmq decide instance respond ribbon free instance bill ms subscribe request rabbitmq load balancing,43,20275,5,18.0,4,2016-04-18T17:58:51,0.0
25600580,348545.0,<architecture><microservices>,share code schema microservice,microservice architecture organization share configuration equivalent service share common db schema common constant common utility place microservice code repository contradict decoupling microservice microservice completely independent code duplication datum duplication separate database microservice hold implement functional microservice context state realistic push architecture central hub maintain context state lot traffic scalable efficient practical hopefully beautiful share code schema microservice,47,10151,1,13.0,4,2014-09-01T07:13:19,0.0
27007353,4009451.0,<database><denormalization><microservices>,data denormalization work microservice pattern,read article article third author state denormalize crazy sound great theory practicality serious hurdle overcome big database tightly couple table foreign key relationship table impossible partition database database control microservice database consist entirely table denormalize small fragment group table fragment control separate microservice instance follow small exemplar database spend time critique design fly point logical sense split database microservice crudde user system ultimately manage table crudde product system ultimately manage table crudde order system ultimately manage table table foreign key relationship denormalize treat monolith lose semantic meaning order quantity article typical academic hullabaloo real practicality denormalization approach bonus point example answer,71,7864,4,33.0,4,2014-11-19T01:25:07,0.0
29644916,1620081.0,<authentication><architecture><microservices>,microservice authentication strategy,hard time choose decent secure authentication strategy microservice architecture post find topic idea service authentication messaging notification profile unique reference user logically possibility current user log strategy share architecture strategy authentication app service service conversion dead simple redi store key firewall architecture strategy session storage matter handle authenticate app forward service rails devise redis mem cached cookie storage ton possibility thing matter service authenticate user solution compare term security robustness scalability ease solution mention solution better find default implementation secure fact direction hope question closed advance,123,47350,7,63.0,4,2015-04-15T08:10:33,0.0
49349235,359417.0,<microservices>,micro services architecture advise,work system suppose job distribute system job accept pipeline execute system decide micro service architecture thing bother sure good practice job accept persist database micro service pipeline additional work prepare job execution persist datum update station pipeline reflect actual state job status pipeline addition job execute system status update good practice sense update database job status station station micro service pipeline access database directly update job status micro service expose datum rest serve dal micro service pipeline update job status service help advise highly appreciate lot,0,161,0,1.0,5,2018-03-18T14:48:43,0.0
44060464,3301076.0,<mysql><sql><scalability><microservices><bigdata>,manage table frequently update query,friend small system collect weather datum sensor place area table database environment asp net framework web api mysql community edition deployment database store user weather measurement sensor deploy single server web api help client app connect datum situation table store climate element measurement second sensor face problem data increase drammatically simple calculation record second record hour hour day day year record year record year sensor record year collect datum sensor record record store table opinion solution divide measurement datum sensor database deploy server sensor small pc store api user query database search base sensor provide web server call api endpoint datum summarize display ui question exclude cost pc deploy database micro service measurement deployment efficient practise manage kind measurement table datum increase second query time optimize table deploy sensor measurement collect function micro service increase performance scalability,1,48,0,0.0,5,2017-05-19T02:27:17,0.0
43927492,3520881.0,<java><cloudfoundry><microservices>,microservice stub mock,develop product microservice bit issue order work service local development environment cloud foundry application locally spring boot jar setup lightweight environment ideally service currently work real,2,2558,2,1.0,5,2017-05-12T00:15:48,0.0
43850359,7565967.0,<spring><architecture><cloud><microservices><coupling>,microservice coupling,build application microservice concept communicate microservice couple scenario graphic bar sale microservice sale service product service case select period filter select sale select product sale call product service directly rest product service fail thing correct work scenario edit architecture service problem sale service communicate service sale software client application recieve datum front scenario microservice good approatch spring cloud,2,510,9,1.0,5,2017-05-08T14:32:40,0.0
54908400,11125669.0,<web-services><design-patterns><service><architecture><microservices>,microservice single point failure concept,concept entirely understand single point failure multiple service involve entire system system system place example pipeline publish event consume publish message consume flow datum system serve purpose service process credit card business money messaging system service independent sense receive message entire system serve purpose difference separate service service,2,359,0,0.0,5,2019-02-27T15:01:33,0.0
25812816,459185.0,<java><dropwizard><microservices>,shutdown dropwizard application,microservice dropwizard documentation start application terminate gracefully fir example apache tomcat startup shutdown script terminate dropwizard application press,3,7763,2,0.0,5,2014-09-12T16:30:05,0.0
34722107,2962149.0,<web-services><rest><database-design><architecture><microservices>,dao microservice good approach microservice architecture,create web application decide micro service approach good approach common organize access database web service login comment web service well create dao web service read write database application web service dao layer,3,3110,0,1.0,5,2016-01-11T12:55:19,0.0
48209566,1967100.0,<architecture><queue><message-queue><microservices><amazon-sqs>,queue,microservice receive request user process store thing database message send queue read queue initial thought entire request fall rollback error user bad practice well practice store message database mark job send queue engineering edit request synchronous user outcome result process message asynchronous,3,511,2,0.0,5,2018-01-11T14:37:13,0.0
43142821,1257185.0,<kubernetes><microservices>,kubernetes single pod container pod single container,teoretical question answer reousrce find online question rule decide compose container pod explain example microservice authentication authorization serve content openresty forward call form orhcestarate flow possibility natively service base nginx lua sure work sake example avoid database assume external manage kubernete correct leave image leave easy work work localhost downside loose bit benefit microservice example auth slow instance duplicate pod service bit complex service expose pod pod duplicate auth duplicate container hand lot pod pod basically container,3,789,0,0.0,5,2017-03-31T14:11:28,0.0
45400096,3222249.0,<java><microservices>,migrate multi module project microservice,multi module application explicit maven module high level module depend low level module module example module service module call service dependency util inject user management convert call project follow microserive architecture convert module independently deployable service module war module provide service http resful web service correct care well module secure authentication layer well crux microservice understand work microservice tool platform framework simple concept divide monolithic application small set deployable module service http buzz word update adavantage micro service independent unit testablemodule scalable deploy separate machine loose coupling handle complex concern authentication module ensure authenticate request case transaction maintain transaction atomicity service easily,3,1157,1,0.0,5,2017-07-30T13:00:55,0.0
46131443,0.0,<java><microservices>,java lang illegalstateexception locate propertysource fail fast property set fail microservice,microservice spring boot combination error code link guide nissue,3,14160,0,0.0,5,2017-09-09T13:55:44,0.0
48294450,589490.0,<microservices><cqrs><eventual-consistency>,microservice cqrs eventual consistency strong consistency read write consistency,cqrs event store choreography microservice deliver eventual consistency change microservice bit propagate downstream system essentially microservice relate option data critical microservice strong consistency datum option write cache data grid fragile specially distribute system,4,2690,4,2.0,5,2018-01-17T05:57:17,0.0
39450504,799275.0,<microservices><amazon-cloudformation><aws-api-gateway><serverless-framework>,serverless framework service apigw endpoint,service user product function endpoint define traditional api organise separately code base clarity deploy share api base url example consider follow structure follow define basically thing swap user product currently service deploy distinctly api endpoint url url question service deploy remain single api single url serve url assume answer cloud formation post question simply sake discussion aid understanding build serverless application aware custom domain quick development cycle ideal solution solution simply create service call api endpoint api simply invoke service lambda function directly configure endpoint abstraction layer add unnecessary layer application curious community feel,5,839,0,1.0,5,2016-09-12T12:37:05,0.0
31573823,5145342.0,<web-services><architecture><microservices>,microservice composition approach,question microservice community example educational field apply microservice architecture student service licensing service business requirement number student limit license time student create licensing check multiple type license type license include operation question approach find well practice build composite service call service couple student service licensing service createstudent call student service call license service complete student create event base architecture people talk microservice architecture graph hierarchy option kinda turn hierarchy increasingly coarse composite downside create confusion service client duplication composite api include parameter call downstream service big benefit natural place failure handle choreography handle consistency option disadvantage api licensing leak student api licensing restriction lot burden student service handle consistency dependent service service react student create dependency graph control service handle complexity addition logic manage student option decouple heaven work trigger ui people student approach,6,2586,0,4.0,5,2015-07-22T20:55:23,0.0
37662379,6431328.0,<microservices><jhipster><jdl>,jhipster import jdl generate entity,problem import jdl sure work generate entity microservice application sample entity provide jdl modification mac linux ubuntu docker container error version software snip,6,3256,1,4.0,5,2016-06-06T16:23:46,0.0
45776238,6723763.0,<go><microservices><directory-structure>,golang microservice project structure,initial stage create microservice application import path directory handle sure good structure project file project java import path cumbersome additionally hear idiomatic file separate directory add confusion correct idiomatic structure project,6,6257,0,6.0,5,2017-08-19T21:00:10,0.0
28319278,4528092.0,<api><security><rest><http><microservices>,connect separate microservice application,build huge application microservice architecture application consist multiple backend microservice deploy multiple cloud instance connect rest api order pass datum application expose public api third party mention endpoint restrict microservice application create kind private network question achieve restricted api access microservice application well connect microservice http transport layer mention keep answer server language agnostic,8,5504,2,1.0,5,2015-02-04T10:40:39,0.0
28930710,1118323.0,<azure><scalability><sharding><microservices><horizontal-scaling>,avoid concurrency issue scale write horizontally,assume worker service receive message queue read product document database apply manipulation logic base message finally write updated product database work safely parallel deal product scale horizontally service instance work product concurrency issue concurrency exception database case apply retry logic retry fail question avoid ensure instance work product example case online store great sale producta productb productc hour customer buy purchase message enqueue productid numberofitem price goal three instance worker service sure message producta instancea productb instanceb productc instancec result concurrency issue note service write host azure worker role azure queue messaging mongo storage entity technique design tool solve problem interested,9,1051,2,3.0,5,2015-03-08T19:10:29,0.0
40377377,6793312.0,<java><spring><rest><spring-integration><microservices>,micro services communication,micro service project turn micro service base project problem figure service communicate explore rest style service service base http rest talk learn spring integration unclearer communicate mind rabbitmq middleware front micro services cloud docker technology guess service cloud clear service communicate java spring technologies happy well picture thing,9,1425,0,5.0,5,2016-11-02T10:16:49,0.0
36137802,3517383.0,<cqrs><microservices><event-sourcing><get-event-store>,event store single point failure,couple day figure inform rest microservice entity create microservice store entity mongodb low coupling microservice avoid distribute transaction microservice phase commit pc message broker rabbitmq good tool job problem commit document mongodb publish message broker atomic eventuate io solve issue imply schema document bit dirty add mark document publish broker schedule background process search unpublished document mongodb publish broker confirmation arrive document mark publish idempotency semantic solution propose answer read chris richardson great presentation slide answer simple slide approach base delegate responsabilitie store publish event event store good thing avoid pc background process true adopt message broker intecommunicate microservice thing worry event store single point failure event store create account money transfer lose advantage microservice system continue respond querys correct affirmate event store eventuate example single point failure,9,3210,4,3.0,5,2016-03-21T17:25:54,0.0
42053559,464610.0,<database><domain-driven-design><message-queue><microservices><eventual-consistency>,eventual consistency database message queue record,application store datum database mysql instance publish datum message queue problem application crash storage database datum write message queue lose eventual consistency system guarante solve problem,10,1226,2,2.0,5,2017-02-05T15:04:53,0.0
48525262,6511448.0,<docker><visual-studio-2017><docker-compose><microservices><asp.net-core-webapi>,visual studio container tool require docker build debugging containerized project,work net core microservice instal docker toolbox docker cli kitematic create simple net core web api project visual studio enable docker support hit program follow error visual studio container tool require docker build debugging containerized project review attach image visual studio error project build project docker cli work problem visual studio,10,10684,3,3.0,5,2018-01-30T15:41:32,0.0
51726683,292291.0,<amazon-web-services><aws-lambda><microservices><aws-api-gateway><amazon-ecs>,microservice develop aws api gateway lambda ecs talk,develop micro service application aws api gateway lambda ecs compute issue communication service api call api gateway feel inefficient secure microservice talk performant secure manner talk directly private network multiple level api gateway public api gateway private api gateway microservice microservice call microservice directly inside private network duplicate route level api ideal payment api gateway level api gateway good well,11,1544,0,6.0,5,2018-08-07T12:20:51,0.0
33399988,2180005.0,<database><architecture><microservices>,microservice datasource instance microservice,build microservice architecture face problem datum share instance microservice microservice massively datasource request service database request insert service heavily plan hide multiple instance load balancer rise question instance database database bottleneck multiple datasource instance,20,4329,1,6.0,5,2015-10-28T19:31:53,0.0
22513893,2868740.0,<architecture><messaging><soa><microservices>,microservice soa messaging,interested microservice soa architecture hard time conceptualize integration service idea messaging decouple client service understand system utilize exclusively typical async operation pub stuff sense scenario create order broadcast datum report understand people typically messaging common request reply scenario example user hit profile datum render user service common messaging implementation provide rest reply request functionality simple datum request microservice expose rest endpoint register message broker type communication participate presentation watch soa microservice architecture elaboration experience,21,5242,0,8.0,5,2014-03-19T17:39:26,0.0
28500066,473749.0,<maven><tomcat><jenkins><spring-boot><microservices>,deploy springboot maven application jenkins,spring boot application embed tomcat servlet container don deploy project separate war standalone tomcat push code bitbucket github hook trigger jenkins job amazon ec deploy application jenkins job post build action problem job hang post build action finish help appreciate,21,24294,5,7.0,5,2015-02-13T12:51:45,0.0
26331854,3870319.0,<.net><microservices>,micro service net,build micro service orient application net platform write micro service orient app net envision architecture include micro service event store nosql database,27,51413,1,8.0,5,2014-10-13T01:45:35,0.0
37148836,5767383.0,<web-services><configuration><architecture><microservices>,service discovery,service discovery client find server cluster server connect build web application communicate process protocol http amqp client config file host connect server set deployment time configuration tool ansible simple work pretty well service discovery alternative server client config file well problem solve,28,10447,2,9.0,5,2016-05-10T20:56:48,0.0
30286443,2537772.0,<git><microservices>,microservice store source code microservice,currently microservice project microservice store separate git reposotiry subsequently number service increase service unit test integration test service build teamcity continuous integration server question store source code microservice project repository separate repository,37,8440,0,11.0,5,2015-05-17T11:30:44,0.0
29761872,364098.0,<database><integration><microservices>,microservice database join,people split monolithic application microservice handle connundrum break apart database typical application work lot database integration performance simplicity reason table logically distinct bound contexts aggregate processing large volume data monolith eschew object orientation database standard join feature process datum database prior return aggregated view app tier justify split datum microservice presumably require join datum api database read sam newman microservice book chapter split monolith example break foreign key relationship acknowledge join api slow application fast matter slow bit glib people experience technique api join perform acceptably,91,17676,3,31.0,5,2015-04-21T02:34:10,0.0
48753245,3368262.0,<amazon-web-services><microservices><amazon-vpc><aws-ecs>,expose apis endpoint private aw alb,microservice aw ecs single alb target group microservice expose endpoint externally endpoint internal communication problem load balancer public vpc expose register endpoint externally move load balancer private vpc sort proxy public vpc require additional infra cost custom implementation security concern approach aws provide sort box solution,3,2074,0,2.0,6,2018-02-12T18:35:49,0.0
55394469,10711849.0,<java><spring-boot><microservices>,share java model microservice microservice architecture,design architecture app choose microservice architecture architecture notice model diffrent microservice share model code microservice instaed write microservice spring boot framework app,5,1254,0,1.0,6,2019-03-28T09:45:04,0.0
36157778,6094437.0,<c#><asp.net><.net><microservices><azure-service-fabric>,access stateless service serviceproxy fail asp net web api project throw health state error,microsoft azure service fabric master degree develop microservice approach prototype service fabric hour issue solve access local fabric cluster deploy stateless service web front simple add asp net web api project service fabric application method call add code solution valuescontroller cs deploy browser automatically navigate web front service fabric explorer asp net application throw health state error question partition target replica instance count indicate unhandled exception service prevent start find stack strace service fabric explorer debug failure asp net web service servicemanif xml web service fabric solution applicationmanifest xml create solution asp net web application ensure stateless service local cluster start web application call method controller follow exception stateless service singletonpartition partition key key service fabric explorer provide stateless service stateless service servicemanifest xml masterdatamservice decide set service communication owin masterdatamservice cs acess microservice originally specifiy service endpoint request communicate stateless service achieve wrong solve health state error asp net application deploy service fabric cluster time edit extended stacktrace invalid partition key exception feedback full stack trace long invalid scheme exception stack trace,8,7467,4,4.0,6,2016-03-22T14:55:29,0.0
45655728,8372287.0,<rest><api><architecture><microservices>,real difference api microservice,learn microservice understand real difference create create work question apply language,13,23445,0,5.0,6,2017-08-12T23:17:02,0.0
36461493,5043003.0,<java><spring-boot><spring-cloud><microservices><netflix-zuul>,customize zuul exception,scenario zuul service url route reponse body throw http status zuulexception json body response customise remove json response change http status code create exception handler controlleradvice exception grab handler update extend zuul filter method error execute change response read senderrorfilter implement add class enablezuulproxy,19,16733,5,8.0,6,2016-04-06T20:17:50,0.0
46131196,0.0,<java><spring-boot><microservices>,netflix discovery share transport transportexception execute request server,microservice code link simply code follow error issue instal special system install,19,42917,0,2.0,6,2017-09-09T13:26:18,0.0
26616962,1863694.0,<architecture><soa><messaging><distributed><microservices>,microservice smart endpoint dumb pipe,read article martin fowler find difficult understand smart endpoint dumb pipe explain term example,20,16983,0,10.0,6,2014-10-28T19:33:01,0.0
38786207,4751165.0,<java><spring><spring-boot><microservices><netflix-feign>,netflix feign propagate status exception microservice,call operation microservice operation microservice validate code spring boot operation microservice throw exception case validation bad handle microservice return microservice call interface validation fail return internal error message return microservice operation wich good technique propagate status exception microservice netflix feign,20,31248,0,3.0,6,2016-08-05T09:46:14,0.0
42062199,1589549.0,<java><reactive-programming><microservices><rx-java2><project-reactor>,reactive programming advantage disadvantage,keep study reactive style code reactor rxjava understand reactive coding well utilization cpu compare single thread execution concrete comparison reactive programming imperative programming web base application performance gain throughput achieve reactive programming reactive programming advantage disadvantage reactive programming statistical benchmark,21,14138,1,10.0,6,2017-02-06T07:14:55,0.0
43950808,808096.0,<design-patterns><akka><microservices><data-consistency>,datum consistency microservice,microservice generally datum entity require consistent multiple service datum consistency requirement highly distribute landscape microservice architecture choice design course share database architecture single db manage state service violate isolation share principle understand microservice publish event entity create update delete microservice interested event update link entity respective database workable lead lot careful coordinated programming effort service akka framework solve case edit add diagram clarity basically understand framework today solve datum consistency problem queue amqp software rabbitmq qpid data consistency framework sure presently akka software help scenario uncommon anti pattern framework,26,8108,0,18.0,6,2017-05-13T08:13:05,0.0
50986816,1535747.0,<node.js><rest><websocket><apache-kafka><microservices>,handle http request microservice event drive architecture,background build application propose architecture event message drive microservice architecture monolithic thing action command direct respond user http request hassle free problem user send ui service multiple ui service fire event queue kafka rabbitmq service pick event message magic point ui service pick response user originate http request request processing typical http interaction question send response ui service originate action service interact user http agnostic event drive people solve problem websocket layer complexity table map discover node gateway websocket connection response understand problem complexity stuck find article info solve problem implementation layer viable option party integration payment provider worldpay expect specially ds validation reluctant websockets option websocket webface app api connect external system great architecture update long polling solution webservice api performant high concurrency high ability website imagine huge number people transaction status update request invalidate cdn cache play problem ha relatable case party api payment system ds system automatic redirect handle payment provider system expect typical model work socket model work case handle typical fashion dumb client expect complexity precessing handle solution externally typical sync complexity status asyncrony system handle internally example long polling model work party api payment provider control,27,2761,2,12.0,6,2018-06-22T11:20:06,0.0
49036468,4762075.0,<web-services><ipc><microservices>,inter process communication microservice architecture,move monolithic microservice architecture application planning phase good practice building suppose service user device getuserdevice userid adddevice deviceinfo userid user multiple device common clean proper server user device api url user userid devices api url device userid devices,-1,559,0,0.0,6,2018-02-28T18:44:13,0.0
55919858,3480506.0,<java><spring><spring-boot><microservices><dependency-management>,maintain spring boot version microservice,create application microservice architecture wonder manage spring boot version microservice mention spring boot version pom xml create microservice manage spring boot version location sure microservice spring boot version easy upgrade microservice manage good practice,1,392,1,0.0,7,2019-04-30T11:23:29,0.0
41036545,303810.0,<java><json><spring><jackson><microservices>,pass property json message jackson mongodb,microservice json datum queue process bit send result processing queue microservice work directly map json java class jackson process microservice interested property incoming message imagine receive send tunnell pass property message interested service explicitly map class purpose microservice structure map property lose map update model microservice time structure message change effort error prone,10,1153,7,0.0,7,2016-12-08T09:58:46,0.0
29591967,2968101.0,<java><web-services><rest><microservices>,microservice architecture service case,read documentation micro service architecture wonder exactly service case call service spring rest application launch java command class correspond business layer ddd simply relate domain study provide android background service microservice kind technology tool create service java ee stack example webservice,11,4514,1,3.0,7,2015-04-12T16:52:49,0.0
47793065,3967289.0,<javascript><html><angular><microservices>,angular micro frontend,split huge single monolith micro frontend architecture idea consist component autonomously component manage dev team team change update deploy component break component team team choose toolstack reason efficiently develop large application people work number developer app team scale well parallel development multiple independent app independent team scale arbitrarily mind imperative team choose toolstack perform independent version upgrade third party library angular react jquery case framework update compatible single component deploy production work angular independent version upgrade reasonable restrict team support framework angular react vue polymer build demo purely consist angular app angular supposedly platform framework support huge multi module app impossible independent angular app browser window manage bootstrap angular app version host server single webapp utilize html import dependency share apps zone js start route require url change browser stuff cookie sessionstorage article net bootstrap multiple angular module refer multiple module core app turn framework version update rebuild deploy monolith solution multiple angular app,58,10800,5,25.0,7,2017-12-13T12:29:00,0.0
29117570,317384.0,<http><orchestration><hypermedia><microservices>,orchestrate microservice,standard pattern orchestrate microservice microservice domain flow datum require multiple service interact manner invoicing shipment sake argument order ship invoice create press button gui classic monolith service architecture esb handle shipment service knowledge invoice service call people deal brave microservice consider highly opinion base concrete side microservice suppose definition opinion base shoot,185,62280,0,168.0,7,2015-03-18T08:52:57,0.0
48824086,5246052.0,<java><spring><spring-security><microservices><keycloak>,keycloak anonymousauthenticationtoken cast keycloakauthenticationtoken,develop microservice infrastructure base spring cloud secure application keycloak basically work fine user authenticate user authenticate keycloak throw folling error security config follow suggestion apprechiate kind regard blacky,6,3942,0,1.0,8,2018-02-16T09:53:19,0.0
39967784,1157070.0,<soa><microservices>,microservice soa differ,difference soa microservice architecture style find good link successor service orient architecture soa microservice categorize family distribute system carry forward concept practice soa differ term scope responsibility individual service soa service responsible handle wide range functionality datum domain general guideline microservice responsible manage single data domain corresponding function domain help understand meaning single data domain recommend microservice separate microservice build manage single domain entity associate composite domain entity single domain entity becasue case microservice implement basic functionality enterprise application edit link explain tenet point soa service share schema contract class soap contract difference soa rest microservice rest,8,1436,0,2.0,8,2016-10-10T22:35:46,0.0
35065875,1775604.0,<javascript><node.js><protocol-buffers><microservices><grpc>,bring grpc define api web browser,build javascript html gui grpc microservice grpc support browser side web socket connect node js server call target service grpc struggle find elegant solution grpc stream push event micro service second rpc system communicate front node js server lot overhead additional code maintain experience idea solve,71,32303,1,27.0,8,2016-01-28T15:44:56,0.0
38071714,2138322.0,<architecture><microservices><graphql>,graphql microservice architecture,understand graphql suitable microservice architecture debate graphql schema work api gateway proxye request target microservice coerce response microservice rest thrift protocol communication approach multiple graphql schema microservice small api gateway server route request target microservice request graphql query st approach graphql schema api gateway downside time change microservice contract input output change graphql schema api gateway side approach multiple graphql schema microservice sense graphql enforce schema definition consumer respect input output microservice question find graphql fit design microservice architecture design api gateway graphql implementation,145,25522,0,78.0,8,2016-06-28T09:04:42,0.0
30213456,96855.0,<rest><architecture><transactions><microservices>,transaction rest microservice,user wallet rest microservice api gateway glue thing bob register website api gateway create user user microservice wallet wallet microservice scenario thing wrong user bob creation fail return error message bob sql transaction bob system good user bob create wallet create api gateway hard crash user wallet inconsistent data user bob create create wallet http connection drop wallet creation succeed solution prevent kind datum inconsistency happen pattern allow transaction span multiple rest request read wikipedia touch issue sure apply practice paper interesting read alternatively rest suit case correct handle situation drop rest entirely communication protocol message queue system enforce consistency application code example background job detect inconsistency state attribute user model create create,172,62921,7,121.0,10,2015-05-13T11:27:25,0.0
